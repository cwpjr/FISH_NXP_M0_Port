###################################################################################################
#                                                                                                 #
#     IAR Assembler V7.30.1.7746/W32 for ARM 28/Aug/2015  11:04:43                                #
#     Copyright 1999-2014 IAR Systems AB.                                                         #
#                                                                                                 #
#           Source file   =  C:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\FISH_NXP_M0_IAR.s#
#           List file     =  C:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\NXP_81x_PubRel\List\FISH_NXP_M0_IAR.lst#
#           Object file   =  C:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\NXP_81x_PubRel\Obj\FISH_NXP_M0_IAR.o#
#           Command line  =  C:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\FISH_NXP_M0_IAR.s #
#                            -OC:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\NXP_81x_PubRel\Obj\ #
#                            -s+ -M<> -w+ -r -DNXP_M0_812 -DFISH_PubRel_WORDSET                   #
#                            -DNXP_M0_81x_IRC12_24MHZ -DNXP_M0_016kFlash_1KWrite                  #
#                            -DNXP_M0_004kRam                                                     #
#                            -LC:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\NXP_81x_PubRel\List\ #
#                            -cAM -i -t8 -xDI --cpu Cortex-M0+ --fpu None                         #
#                            -IC:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\..\FISH_RM_COMMON\ #
#                            -IC:\Users\cwpjr\Dropbox\CWP\FISH IAR\FISH_NXP_M0_Port\..\FISH_RM_COMMON_CODE_CORTEX_M\ #
#                                                                                                 #
###################################################################################################

    1                           // FISH_NXP_M0_IAR.s - FULL WORD
    2                           $FISH_NXP_M0_MAIN_INCLUDES.h
    1                           //------------------------------------------------------------------------------
    2                           // This include begins the .sym file
    3                           $FISH_AUTHOR.h
    1                           FISH_Author_Clyde_W_Phillips_Jr:
    2                           FISH_Copyright_2014_2015:
    3                           FISH_Team_A_Team_Forth:
    4                           FISH_Questions_Welcome:
    5                           FISH_FUNDING_Contributions_NEEDED:
    6                           CWPJR02_at_gmail_dot_com:
    4                           // This include is for generic IAR stuff
    5                           $FISH_IAR.h
    1                           //------------------------------------------------------------------------------
    2                             COL 132           // required for dis-assembly output sanity
    6                           //------------------------------------------------------------------------------
    7                           // Include FISH SYSTEM, REGISTERS, STACK MACRO's and MESSAGES
    8                           $io_NXP_M0+_header.h // from Vic AND MODIFIED FOR 812
    1                           ; 81x EQUates that are new or different from 11xx EQUates.
    2                           ; _81x used where register has a different address
    3                           ; Maintain UM naming convention to distinquish which processor they apply to.
    4                           
    5                           // IO_NXP_M0_Plus_81x_Specific_Equates:
    6                           
    7                           PINASSIGN0      EQU     0x4000C000 ; U0_TXD U0_RXD, U0_CTS_I, U0_RTS_O
    8                           PINASSIGN1      EQU     0x4000C004 ; U0_SCLK, U1_TXD, U1_RXD, U1_RTS_O 
    9                           PINASSIGN2      EQU     0x4000C008 ; U1_CTS_I, U1_SCLK, U2_TXD, U2_RXD
   10                           PINASSIGN3      EQU     0x4000C00C ; U2_RTS_O, U2_CTS_I, U2_SCLK, U2_SCK
   11                           PINASSIGN4      EQU     0x4000C010 ; SPI0
   12                           PINASSIGN5      EQU     0x4000C014 ; SPI1, CTIN_0_I
   13                           PINASSIGN6      EQU     0x4000C018 ; CTIN_1_I, (2&3), CTOUT_0_O
   14                           PINASSIGN7      EQU     0x4000C01C ; CTOUT_1_O, (2&3), I2C_SDA_IO
   15                           PINASSIGN8      EQU     0x4000C020 ; I2C_SCL_IO, ACMP_O_O, CLKOUT, GPIO_INT_BMAT
   16                           
   17                           PINENABLE0      EQU     0x4000C1C0 ; SWDCLK_EN, SWDIO_EN and RESET_EN
   18                           
   19                           DIR0            EQU     0xA0002000 ; Direction for gpio pins
   20                           PIN0            EQU     0xA0002100 ; PIN RW
   21                           
   22                           UARTCLKDIV_81x  EQU     0x40048094 ; 81x address different
   23                           UART0_STAT      EQU     0x40064008 ;
   24                           USART0_RXDAT    EQU     0x40064014 ;
   25                           USART0_TXDAT    EQU     0x4006401C ; 
   26                           UARTFRGDIV      EQU     0x400480F0 ; Common fractional generator divider register
   27                           USART0_BRG      EQU     0x40064020 ; Baud Rate Generator register
   28                           USART0_CFG      EQU     0x40064000 ; USART Configuration register
   29                           
   30                           DEVICE_ID_81x   EQU     0x400483F8 ; Part ID numbers for LPC81x parts
   31                           
   32                           // IO_NXP_M0_11xx_Generic_Equates:
   33                           
   34                           ; 11xx EQUates:
   35                           
   36                           ;
   37                           ;               NVIC
   38                           ;
   39                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
   40                           ;     ----                        ----      -------     --------  ----------- --------
   41                           
   42                           SYST_CSR                EQU     0xE000E010 ; E000E010h
   43                           SYSTICKCSR              EQU     SYST_CSR
   44                           
   45                           ;`SYSTICKCSR.ENABLE`        0xE000E010,        4, base=16,    bitRange=0-0
   46                           ;`SYSTICKCSR.TICKINT`       0xE000E010,        4, base=16,    bitRange=1-1
   47                           ;`SYSTICKCSR.CLKSOURCE`     0xE000E010,        4, base=16,    bitRange=2-2
   48                           ;`SYSTICKCSR.COUNTFLAG`     0xE000E010,        4, base=16,    bitRange=16-16
   49                           
   50                           SYST_RVR                EQU     0xE000E014 ;
   51                           SYSTICKRVR              EQU     SYST_RVR
   52                           
   53                           ;`SYSTICKRVR.RELOAD`        0xE000E014,        4, base=16,    bitRange=0-23
   54                           
   55                           SYST_CVR                EQU     0xE000E018 ;
   56                           SYSTICKCVR              EQU     SYST_CVR
   57                           
   58                           ;`SYSTICKCVR.CURRENT`       0xE000E018,        4, base=16,    bitRange=0-23
   59                           
   60                           SYST_CALIB              EQU     0xE000E01C;
   61                           SYSTICKCALVR            EQU     SYST_CALIB
   62                           
   63                           ;`SYSTICKCALVR.TENMS`       0xE000E01C,        4, base=16,    bitRange=0-23
   64                           ;`SYSTICKCALVR.SKEW`        0xE000E01C,        4, base=16,    bitRange=30-30
   65                           ;`SYSTICKCALVR.NOREF`       0xE000E01C,        4, base=16,    bitRange=31-31
   66                           
   67                           SETENA0                  EQU  0xE000E100
   68                           ;`SETENA0.SETENA0`          0xE000E100,        4, base=16,    bitRange=0-0
   69                           ;`SETENA0.SETENA1`          0xE000E100,        4, base=16,    bitRange=1-1
   70                           ;`SETENA0.SETENA2`          0xE000E100,        4, base=16,    bitRange=2-2
   71                           ;`SETENA0.SETENA3`          0xE000E100,        4, base=16,    bitRange=3-3
   72                           ;`SETENA0.SETENA4`          0xE000E100,        4, base=16,    bitRange=4-4
   73                           ;`SETENA0.SETENA5`          0xE000E100,        4, base=16,    bitRange=5-5
   74                           ;`SETENA0.SETENA6`          0xE000E100,        4, base=16,    bitRange=6-6
   75                           ;`SETENA0.SETENA7`          0xE000E100,        4, base=16,    bitRange=7-7
   76                           ;`SETENA0.SETENA8`          0xE000E100,        4, base=16,    bitRange=8-8
   77                           ;`SETENA0.SETENA9`          0xE000E100,        4, base=16,    bitRange=9-9
   78                           ;`SETENA0.SETENA10`         0xE000E100,        4, base=16,    bitRange=10-10
   79                           ;`SETENA0.SETENA11`         0xE000E100,        4, base=16,    bitRange=11-11
   80                           ;`SETENA0.SETENA12`         0xE000E100,        4, base=16,    bitRange=12-12
   81                           ;`SETENA0.SETENA13`         0xE000E100,        4, base=16,    bitRange=13-13
   82                           ;`SETENA0.SETENA14`         0xE000E100,        4, base=16,    bitRange=14-14
   83                           ;`SETENA0.SETENA15`         0xE000E100,        4, base=16,    bitRange=15-15
   84                           ;`SETENA0.SETENA16`         0xE000E100,        4, base=16,    bitRange=16-16
   85                           ;`SETENA0.SETENA17`         0xE000E100,        4, base=16,    bitRange=17-17
   86                           ;`SETENA0.SETENA18`         0xE000E100,        4, base=16,    bitRange=18-18
   87                           ;`SETENA0.SETENA19`         0xE000E100,        4, base=16,    bitRange=19-19
   88                           ;`SETENA0.SETENA20`         0xE000E100,        4, base=16,    bitRange=20-20
   89                           ;`SETENA0.SETENA21`         0xE000E100,        4, base=16,    bitRange=21-21
   90                           ;`SETENA0.SETENA22`         0xE000E100,        4, base=16,    bitRange=22-22
   91                           ;`SETENA0.SETENA23`         0xE000E100,        4, base=16,    bitRange=23-23
   92                           ;`SETENA0.SETENA24`         0xE000E100,        4, base=16,    bitRange=24-24
   93                           ;`SETENA0.SETENA25`         0xE000E100,        4, base=16,    bitRange=25-25
   94                           ;`SETENA0.SETENA26`         0xE000E100,        4, base=16,    bitRange=26-26
   95                           ;`SETENA0.SETENA27`         0xE000E100,        4, base=16,    bitRange=27-27
   96                           ;`SETENA0.SETENA28`         0xE000E100,        4, base=16,    bitRange=28-28
   97                           ;`SETENA0.SETENA29`         0xE000E100,        4, base=16,    bitRange=29-29
   98                           ;`SETENA0.SETENA30`         0xE000E100,        4, base=16,    bitRange=30-30
   99                           ;`SETENA0.SETENA31`         0xE000E100,        4, base=16,    bitRange=31-31
  100                           
  101                           ISER                     EQU  0xE000E100
  102                           ;`ISER.SETENA0`             0xE000E100,        4, base=16,    bitRange=0-0
  103                           ;`ISER.SETENA1`             0xE000E100,        4, base=16,    bitRange=1-1
  104                           ;`ISER.SETENA2`             0xE000E100,        4, base=16,    bitRange=2-2
  105                           ;`ISER.SETENA3`             0xE000E100,        4, base=16,    bitRange=3-3
  106                           ;`ISER.SETENA4`             0xE000E100,        4, base=16,    bitRange=4-4
  107                           ;`ISER.SETENA5`             0xE000E100,        4, base=16,    bitRange=5-5
  108                           ;`ISER.SETENA6`             0xE000E100,        4, base=16,    bitRange=6-6
  109                           ;`ISER.SETENA7`             0xE000E100,        4, base=16,    bitRange=7-7
  110                           ;`ISER.SETENA8`             0xE000E100,        4, base=16,    bitRange=8-8
  111                           ;`ISER.SETENA9`             0xE000E100,        4, base=16,    bitRange=9-9
  112                           ;`ISER.SETENA10`            0xE000E100,        4, base=16,    bitRange=10-10
  113                           ;`ISER.SETENA11`            0xE000E100,        4, base=16,    bitRange=11-11
  114                           ;`ISER.SETENA12`            0xE000E100,        4, base=16,    bitRange=12-12
  115                           ;`ISER.SETENA13`            0xE000E100,        4, base=16,    bitRange=13-13
  116                           ;`ISER.SETENA14`            0xE000E100,        4, base=16,    bitRange=14-14
  117                           ;`ISER.SETENA15`            0xE000E100,        4, base=16,    bitRange=15-15
  118                           ;`ISER.SETENA16`            0xE000E100,        4, base=16,    bitRange=16-16
  119                           ;`ISER.SETENA17`            0xE000E100,        4, base=16,    bitRange=17-17
  120                           ;`ISER.SETENA18`            0xE000E100,        4, base=16,    bitRange=18-18
  121                           ;`ISER.SETENA19`            0xE000E100,        4, base=16,    bitRange=19-19
  122                           ;`ISER.SETENA20`            0xE000E100,        4, base=16,    bitRange=20-20
  123                           ;`ISER.SETENA21`            0xE000E100,        4, base=16,    bitRange=21-21
  124                           ;`ISER.SETENA22`            0xE000E100,        4, base=16,    bitRange=22-22
  125                           ;`ISER.SETENA23`            0xE000E100,        4, base=16,    bitRange=23-23
  126                           ;`ISER.SETENA24`            0xE000E100,        4, base=16,    bitRange=24-24
  127                           ;`ISER.SETENA25`            0xE000E100,        4, base=16,    bitRange=25-25
  128                           ;`ISER.SETENA26`            0xE000E100,        4, base=16,    bitRange=26-26
  129                           ;`ISER.SETENA27`            0xE000E100,        4, base=16,    bitRange=27-27
  130                           ;`ISER.SETENA28`            0xE000E100,        4, base=16,    bitRange=28-28
  131                           ;`ISER.SETENA29`            0xE000E100,        4, base=16,    bitRange=29-29
  132                           ;`ISER.SETENA30`            0xE000E100,        4, base=16,    bitRange=30-30
  133                           ;`ISER.SETENA31`            0xE000E100,        4, base=16,    bitRange=31-31
  134                           
  135                           CLRENA0                  EQU  0xE000E180
  136                           ;`CLRENA0.CLRENA0`          0xE000E180,        4, base=16,    bitRange=0-0
  137                           ;`CLRENA0.CLRENA1`          0xE000E180,        4, base=16,    bitRange=1-1
  138                           ;`CLRENA0.CLRENA2`          0xE000E180,        4, base=16,    bitRange=2-2
  139                           ;`CLRENA0.CLRENA3`          0xE000E180,        4, base=16,    bitRange=3-3
  140                           ;`CLRENA0.CLRENA4`          0xE000E180,        4, base=16,    bitRange=4-4
  141                           ;`CLRENA0.CLRENA5`          0xE000E180,        4, base=16,    bitRange=5-5
  142                           ;`CLRENA0.CLRENA6`          0xE000E180,        4, base=16,    bitRange=6-6
  143                           ;`CLRENA0.CLRENA7`          0xE000E180,        4, base=16,    bitRange=7-7
  144                           ;`CLRENA0.CLRENA8`          0xE000E180,        4, base=16,    bitRange=8-8
  145                           ;`CLRENA0.CLRENA9`          0xE000E180,        4, base=16,    bitRange=9-9
  146                           ;`CLRENA0.CLRENA10`         0xE000E180,        4, base=16,    bitRange=10-10
  147                           ;`CLRENA0.CLRENA11`         0xE000E180,        4, base=16,    bitRange=11-11
  148                           ;`CLRENA0.CLRENA12`         0xE000E180,        4, base=16,    bitRange=12-12
  149                           ;`CLRENA0.CLRENA13`         0xE000E180,        4, base=16,    bitRange=13-13
  150                           ;`CLRENA0.CLRENA14`         0xE000E180,        4, base=16,    bitRange=14-14
  151                           ;`CLRENA0.CLRENA15`         0xE000E180,        4, base=16,    bitRange=15-15
  152                           ;`CLRENA0.CLRENA16`         0xE000E180,        4, base=16,    bitRange=16-16
  153                           ;`CLRENA0.CLRENA17`         0xE000E180,        4, base=16,    bitRange=17-17
  154                           ;`CLRENA0.CLRENA18`         0xE000E180,        4, base=16,    bitRange=18-18
  155                           ;`CLRENA0.CLRENA19`         0xE000E180,        4, base=16,    bitRange=19-19
  156                           ;`CLRENA0.CLRENA20`         0xE000E180,        4, base=16,    bitRange=20-20
  157                           ;`CLRENA0.CLRENA21`         0xE000E180,        4, base=16,    bitRange=21-21
  158                           ;`CLRENA0.CLRENA22`         0xE000E180,        4, base=16,    bitRange=22-22
  159                           ;`CLRENA0.CLRENA23`         0xE000E180,        4, base=16,    bitRange=23-23
  160                           ;`CLRENA0.CLRENA24`         0xE000E180,        4, base=16,    bitRange=24-24
  161                           ;`CLRENA0.CLRENA25`         0xE000E180,        4, base=16,    bitRange=25-25
  162                           ;`CLRENA0.CLRENA26`         0xE000E180,        4, base=16,    bitRange=26-26
  163                           ;`CLRENA0.CLRENA27`         0xE000E180,        4, base=16,    bitRange=27-27
  164                           ;`CLRENA0.CLRENA28`         0xE000E180,        4, base=16,    bitRange=28-28
  165                           ;`CLRENA0.CLRENA29`         0xE000E180,        4, base=16,    bitRange=29-29
  166                           ;`CLRENA0.CLRENA30`         0xE000E180,        4, base=16,    bitRange=30-30
  167                           ;`CLRENA0.CLRENA31`         0xE000E180,        4, base=16,    bitRange=31-31
  168                           
  169                           ICER                     EQU  0xE000E180
  170                           ;`ICER.CLRENA0`             0xE000E180,        4, base=16,    bitRange=0-0
  171                           ;`ICER.CLRENA1`             0xE000E180,        4, base=16,    bitRange=1-1
  172                           ;`ICER.CLRENA2`             0xE000E180,        4, base=16,    bitRange=2-2
  173                           ;`ICER.CLRENA3`             0xE000E180,        4, base=16,    bitRange=3-3
  174                           ;`ICER.CLRENA4`             0xE000E180,        4, base=16,    bitRange=4-4
  175                           ;`ICER.CLRENA5`             0xE000E180,        4, base=16,    bitRange=5-5
  176                           ;`ICER.CLRENA6`             0xE000E180,        4, base=16,    bitRange=6-6
  177                           ;`ICER.CLRENA7`             0xE000E180,        4, base=16,    bitRange=7-7
  178                           ;`ICER.CLRENA8`             0xE000E180,        4, base=16,    bitRange=8-8
  179                           ;`ICER.CLRENA9`             0xE000E180,        4, base=16,    bitRange=9-9
  180                           ;`ICER.CLRENA10`            0xE000E180,        4, base=16,    bitRange=10-10
  181                           ;`ICER.CLRENA11`            0xE000E180,        4, base=16,    bitRange=11-11
  182                           ;`ICER.CLRENA12`            0xE000E180,        4, base=16,    bitRange=12-12
  183                           ;`ICER.CLRENA13`            0xE000E180,        4, base=16,    bitRange=13-13
  184                           ;`ICER.CLRENA14`            0xE000E180,        4, base=16,    bitRange=14-14
  185                           ;`ICER.CLRENA15`            0xE000E180,        4, base=16,    bitRange=15-15
  186                           ;`ICER.CLRENA16`            0xE000E180,        4, base=16,    bitRange=16-16
  187                           ;`ICER.CLRENA17`            0xE000E180,        4, base=16,    bitRange=17-17
  188                           ;`ICER.CLRENA18`            0xE000E180,        4, base=16,    bitRange=18-18
  189                           ;`ICER.CLRENA19`            0xE000E180,        4, base=16,    bitRange=19-19
  190                           ;`ICER.CLRENA20`            0xE000E180,        4, base=16,    bitRange=20-20
  191                           ;`ICER.CLRENA21`            0xE000E180,        4, base=16,    bitRange=21-21
  192                           ;`ICER.CLRENA22`            0xE000E180,        4, base=16,    bitRange=22-22
  193                           ;`ICER.CLRENA23`            0xE000E180,        4, base=16,    bitRange=23-23
  194                           ;`ICER.CLRENA24`            0xE000E180,        4, base=16,    bitRange=24-24
  195                           ;`ICER.CLRENA25`            0xE000E180,        4, base=16,    bitRange=25-25
  196                           ;`ICER.CLRENA26`            0xE000E180,        4, base=16,    bitRange=26-26
  197                           ;`ICER.CLRENA27`            0xE000E180,        4, base=16,    bitRange=27-27
  198                           ;`ICER.CLRENA28`            0xE000E180,        4, base=16,    bitRange=28-28
  199                           ;`ICER.CLRENA29`            0xE000E180,        4, base=16,    bitRange=29-29
  200                           ;`ICER.CLRENA30`            0xE000E180,        4, base=16,    bitRange=30-30
  201                           ;`ICER.CLRENA31`            0xE000E180,        4, base=16,    bitRange=31-31
  202                           
  203                           SETPEND0                 EQU  0xE000E200
  204                           ;`SETPEND0.SETPEND0`        0xE000E200,        4, base=16,    bitRange=0-0
  205                           ;`SETPEND0.SETPEND1`        0xE000E200,        4, base=16,    bitRange=1-1
  206                           ;`SETPEND0.SETPEND2`        0xE000E200,        4, base=16,    bitRange=2-2
  207                           ;`SETPEND0.SETPEND3`        0xE000E200,        4, base=16,    bitRange=3-3
  208                           ;`SETPEND0.SETPEND4`        0xE000E200,        4, base=16,    bitRange=4-4
  209                           ;`SETPEND0.SETPEND5`        0xE000E200,        4, base=16,    bitRange=5-5
  210                           ;`SETPEND0.SETPEND6`        0xE000E200,        4, base=16,    bitRange=6-6
  211                           ;`SETPEND0.SETPEND7`        0xE000E200,        4, base=16,    bitRange=7-7
  212                           ;`SETPEND0.SETPEND8`        0xE000E200,        4, base=16,    bitRange=8-8
  213                           ;`SETPEND0.SETPEND9`        0xE000E200,        4, base=16,    bitRange=9-9
  214                           ;`SETPEND0.SETPEND10`       0xE000E200,        4, base=16,    bitRange=10-10
  215                           ;`SETPEND0.SETPEND11`       0xE000E200,        4, base=16,    bitRange=11-11
  216                           ;`SETPEND0.SETPEND12`       0xE000E200,        4, base=16,    bitRange=12-12
  217                           ;`SETPEND0.SETPEND13`       0xE000E200,        4, base=16,    bitRange=13-13
  218                           ;`SETPEND0.SETPEND14`       0xE000E200,        4, base=16,    bitRange=14-14
  219                           ;`SETPEND0.SETPEND15`       0xE000E200,        4, base=16,    bitRange=15-15
  220                           ;`SETPEND0.SETPEND16`       0xE000E200,        4, base=16,    bitRange=16-16
  221                           ;`SETPEND0.SETPEND17`       0xE000E200,        4, base=16,    bitRange=17-17
  222                           ;`SETPEND0.SETPEND18`       0xE000E200,        4, base=16,    bitRange=18-18
  223                           ;`SETPEND0.SETPEND19`       0xE000E200,        4, base=16,    bitRange=19-19
  224                           ;`SETPEND0.SETPEND20`       0xE000E200,        4, base=16,    bitRange=20-20
  225                           ;`SETPEND0.SETPEND21`       0xE000E200,        4, base=16,    bitRange=21-21
  226                           ;`SETPEND0.SETPEND22`       0xE000E200,        4, base=16,    bitRange=22-22
  227                           ;`SETPEND0.SETPEND23`       0xE000E200,        4, base=16,    bitRange=23-23
  228                           ;`SETPEND0.SETPEND24`       0xE000E200,        4, base=16,    bitRange=24-24
  229                           ;`SETPEND0.SETPEND25`       0xE000E200,        4, base=16,    bitRange=25-25
  230                           ;`SETPEND0.SETPEND26`       0xE000E200,        4, base=16,    bitRange=26-26
  231                           ;`SETPEND0.SETPEND27`       0xE000E200,        4, base=16,    bitRange=27-27
  232                           ;`SETPEND0.SETPEND28`       0xE000E200,        4, base=16,    bitRange=28-28
  233                           ;`SETPEND0.SETPEND29`       0xE000E200,        4, base=16,    bitRange=29-29
  234                           ;`SETPEND0.SETPEND30`       0xE000E200,        4, base=16,    bitRange=30-30
  235                           ;`SETPEND0.SETPEND31`       0xE000E200,        4, base=16,    bitRange=31-31
  236                           
  237                           ISPR                     EQU  0xE000E200
  238                           ;`ISPR.SETPEND0`            0xE000E200,        4, base=16,    bitRange=0-0
  239                           ;`ISPR.SETPEND1`            0xE000E200,        4, base=16,    bitRange=1-1
  240                           ;`ISPR.SETPEND2`            0xE000E200,        4, base=16,    bitRange=2-2
  241                           ;`ISPR.SETPEND3`            0xE000E200,        4, base=16,    bitRange=3-3
  242                           ;`ISPR.SETPEND4`            0xE000E200,        4, base=16,    bitRange=4-4
  243                           ;`ISPR.SETPEND5`            0xE000E200,        4, base=16,    bitRange=5-5
  244                           ;`ISPR.SETPEND6`            0xE000E200,        4, base=16,    bitRange=6-6
  245                           ;`ISPR.SETPEND7`            0xE000E200,        4, base=16,    bitRange=7-7
  246                           ;`ISPR.SETPEND8`            0xE000E200,        4, base=16,    bitRange=8-8
  247                           ;`ISPR.SETPEND9`            0xE000E200,        4, base=16,    bitRange=9-9
  248                           ;`ISPR.SETPEND10`           0xE000E200,        4, base=16,    bitRange=10-10
  249                           ;`ISPR.SETPEND11`           0xE000E200,        4, base=16,    bitRange=11-11
  250                           ;`ISPR.SETPEND12`           0xE000E200,        4, base=16,    bitRange=12-12
  251                           ;`ISPR.SETPEND13`           0xE000E200,        4, base=16,    bitRange=13-13
  252                           ;`ISPR.SETPEND14`           0xE000E200,        4, base=16,    bitRange=14-14
  253                           ;`ISPR.SETPEND15`           0xE000E200,        4, base=16,    bitRange=15-15
  254                           ;`ISPR.SETPEND16`           0xE000E200,        4, base=16,    bitRange=16-16
  255                           ;`ISPR.SETPEND17`           0xE000E200,        4, base=16,    bitRange=17-17
  256                           ;`ISPR.SETPEND18`           0xE000E200,        4, base=16,    bitRange=18-18
  257                           ;`ISPR.SETPEND19`           0xE000E200,        4, base=16,    bitRange=19-19
  258                           ;`ISPR.SETPEND20`           0xE000E200,        4, base=16,    bitRange=20-20
  259                           ;`ISPR.SETPEND21`           0xE000E200,        4, base=16,    bitRange=21-21
  260                           ;`ISPR.SETPEND22`           0xE000E200,        4, base=16,    bitRange=22-22
  261                           ;`ISPR.SETPEND23`           0xE000E200,        4, base=16,    bitRange=23-23
  262                           ;`ISPR.SETPEND24`           0xE000E200,        4, base=16,    bitRange=24-24
  263                           ;`ISPR.SETPEND25`           0xE000E200,        4, base=16,    bitRange=25-25
  264                           ;`ISPR.SETPEND26`           0xE000E200,        4, base=16,    bitRange=26-26
  265                           ;`ISPR.SETPEND27`           0xE000E200,        4, base=16,    bitRange=27-27
  266                           ;`ISPR.SETPEND28`           0xE000E200,        4, base=16,    bitRange=28-28
  267                           ;`ISPR.SETPEND29`           0xE000E200,        4, base=16,    bitRange=29-29
  268                           ;`ISPR.SETPEND30`           0xE000E200,        4, base=16,    bitRange=30-30
  269                           ;`ISPR.SETPEND31`           0xE000E200,        4, base=16,    bitRange=31-31
  270                           
  271                           CLRPEND0                 EQU  0xE000E280
  272                           ;`CLRPEND0.CLRPEND0`        0xE000E280,        4, base=16,    bitRange=0-0
  273                           ;`CLRPEND0.CLRPEND1`        0xE000E280,        4, base=16,    bitRange=1-1
  274                           ;`CLRPEND0.CLRPEND2`        0xE000E280,        4, base=16,    bitRange=2-2
  275                           ;`CLRPEND0.CLRPEND3`        0xE000E280,        4, base=16,    bitRange=3-3
  276                           ;`CLRPEND0.CLRPEND4`        0xE000E280,        4, base=16,    bitRange=4-4
  277                           ;`CLRPEND0.CLRPEND5`        0xE000E280,        4, base=16,    bitRange=5-5
  278                           ;`CLRPEND0.CLRPEND6`        0xE000E280,        4, base=16,    bitRange=6-6
  279                           ;`CLRPEND0.CLRPEND7`        0xE000E280,        4, base=16,    bitRange=7-7
  280                           ;`CLRPEND0.CLRPEND8`        0xE000E280,        4, base=16,    bitRange=8-8
  281                           ;`CLRPEND0.CLRPEND9`        0xE000E280,        4, base=16,    bitRange=9-9
  282                           ;`CLRPEND0.CLRPEND10`       0xE000E280,        4, base=16,    bitRange=10-10
  283                           ;`CLRPEND0.CLRPEND11`       0xE000E280,        4, base=16,    bitRange=11-11
  284                           ;`CLRPEND0.CLRPEND12`       0xE000E280,        4, base=16,    bitRange=12-12
  285                           ;`CLRPEND0.CLRPEND13`       0xE000E280,        4, base=16,    bitRange=13-13
  286                           ;`CLRPEND0.CLRPEND14`       0xE000E280,        4, base=16,    bitRange=14-14
  287                           ;`CLRPEND0.CLRPEND15`       0xE000E280,        4, base=16,    bitRange=15-15
  288                           ;`CLRPEND0.CLRPEND16`       0xE000E280,        4, base=16,    bitRange=16-16
  289                           ;`CLRPEND0.CLRPEND17`       0xE000E280,        4, base=16,    bitRange=17-17
  290                           ;`CLRPEND0.CLRPEND18`       0xE000E280,        4, base=16,    bitRange=18-18
  291                           ;`CLRPEND0.CLRPEND19`       0xE000E280,        4, base=16,    bitRange=19-19
  292                           ;`CLRPEND0.CLRPEND20`       0xE000E280,        4, base=16,    bitRange=20-20
  293                           ;`CLRPEND0.CLRPEND21`       0xE000E280,        4, base=16,    bitRange=21-21
  294                           ;`CLRPEND0.CLRPEND22`       0xE000E280,        4, base=16,    bitRange=22-22
  295                           ;`CLRPEND0.CLRPEND23`       0xE000E280,        4, base=16,    bitRange=23-23
  296                           ;`CLRPEND0.CLRPEND24`       0xE000E280,        4, base=16,    bitRange=24-24
  297                           ;`CLRPEND0.CLRPEND25`       0xE000E280,        4, base=16,    bitRange=25-25
  298                           ;`CLRPEND0.CLRPEND26`       0xE000E280,        4, base=16,    bitRange=26-26
  299                           ;`CLRPEND0.CLRPEND27`       0xE000E280,        4, base=16,    bitRange=27-27
  300                           ;`CLRPEND0.CLRPEND28`       0xE000E280,        4, base=16,    bitRange=28-28
  301                           ;`CLRPEND0.CLRPEND29`       0xE000E280,        4, base=16,    bitRange=29-29
  302                           ;`CLRPEND0.CLRPEND30`       0xE000E280,        4, base=16,    bitRange=30-30
  303                           ;`CLRPEND0.CLRPEND31`       0xE000E280,        4, base=16,    bitRange=31-31
  304                           
  305                           ICPR                     EQU  0xE000E280
  306                           ;`ICPR.CLRPEND0`            0xE000E280,        4, base=16,    bitRange=0-0
  307                           ;`ICPR.CLRPEND1`            0xE000E280,        4, base=16,    bitRange=1-1
  308                           ;`ICPR.CLRPEND2`            0xE000E280,        4, base=16,    bitRange=2-2
  309                           ;`ICPR.CLRPEND3`            0xE000E280,        4, base=16,    bitRange=3-3
  310                           ;`ICPR.CLRPEND4`            0xE000E280,        4, base=16,    bitRange=4-4
  311                           ;`ICPR.CLRPEND5`            0xE000E280,        4, base=16,    bitRange=5-5
  312                           ;`ICPR.CLRPEND6`            0xE000E280,        4, base=16,    bitRange=6-6
  313                           ;`ICPR.CLRPEND7`            0xE000E280,        4, base=16,    bitRange=7-7
  314                           ;`ICPR.CLRPEND8`            0xE000E280,        4, base=16,    bitRange=8-8
  315                           ;`ICPR.CLRPEND9`            0xE000E280,        4, base=16,    bitRange=9-9
  316                           ;`ICPR.CLRPEND10`           0xE000E280,        4, base=16,    bitRange=10-10
  317                           ;`ICPR.CLRPEND11`           0xE000E280,        4, base=16,    bitRange=11-11
  318                           ;`ICPR.CLRPEND12`           0xE000E280,        4, base=16,    bitRange=12-12
  319                           ;`ICPR.CLRPEND13`           0xE000E280,        4, base=16,    bitRange=13-13
  320                           ;`ICPR.CLRPEND14`           0xE000E280,        4, base=16,    bitRange=14-14
  321                           ;`ICPR.CLRPEND15`           0xE000E280,        4, base=16,    bitRange=15-15
  322                           ;`ICPR.CLRPEND16`           0xE000E280,        4, base=16,    bitRange=16-16
  323                           ;`ICPR.CLRPEND17`           0xE000E280,        4, base=16,    bitRange=17-17
  324                           ;`ICPR.CLRPEND18`           0xE000E280,        4, base=16,    bitRange=18-18
  325                           ;`ICPR.CLRPEND19`           0xE000E280,        4, base=16,    bitRange=19-19
  326                           ;`ICPR.CLRPEND20`           0xE000E280,        4, base=16,    bitRange=20-20
  327                           ;`ICPR.CLRPEND21`           0xE000E280,        4, base=16,    bitRange=21-21
  328                           ;`ICPR.CLRPEND22`           0xE000E280,        4, base=16,    bitRange=22-22
  329                           ;`ICPR.CLRPEND23`           0xE000E280,        4, base=16,    bitRange=23-23
  330                           ;`ICPR.CLRPEND24`           0xE000E280,        4, base=16,    bitRange=24-24
  331                           ;`ICPR.CLRPEND25`           0xE000E280,        4, base=16,    bitRange=25-25
  332                           ;`ICPR.CLRPEND26`           0xE000E280,        4, base=16,    bitRange=26-26
  333                           ;`ICPR.CLRPEND27`           0xE000E280,        4, base=16,    bitRange=27-27
  334                           ;`ICPR.CLRPEND28`           0xE000E280,        4, base=16,    bitRange=28-28
  335                           ;`ICPR.CLRPEND29`           0xE000E280,        4, base=16,    bitRange=29-29
  336                           ;`ICPR.CLRPEND30`           0xE000E280,        4, base=16,    bitRange=30-30
  337                           ;`ICPR.CLRPEND31`           0xE000E280,        4, base=16,    bitRange=31-31
  338                           
  339                           IP0                      EQU  0xE000E400
  340                           ;`IP0.PRI_0`                0xE000E400,        4, base=16,    bitRange=0-7
  341                           ;`IP0.PRI_1`                0xE000E400,        4, base=16,    bitRange=8-15
  342                           ;`IP0.PRI_2`                0xE000E400,        4, base=16,    bitRange=16-23
  343                           ;`IP0.PRI_3`                0xE000E400,        4, base=16,    bitRange=24-31
  344                           
  345                           IP1                      EQU  0xE000E404
  346                           ;`IP1.PRI_4`                0xE000E404,        4, base=16,    bitRange=0-7
  347                           ;`IP1.PRI_5`                0xE000E404,        4, base=16,    bitRange=8-15
  348                           ;`IP1.PRI_6`                0xE000E404,        4, base=16,    bitRange=16-23
  349                           ;`IP1.PRI_7`                0xE000E404,        4, base=16,    bitRange=24-31
  350                           
  351                           IP2                      EQU  0xE000E408
  352                           ;`IP2.PRI_8`                0xE000E408,        4, base=16,    bitRange=0-7
  353                           ;`IP2.PRI_9`                0xE000E408,        4, base=16,    bitRange=8-15
  354                           ;`IP2.PRI_10`               0xE000E408,        4, base=16,    bitRange=16-23
  355                           ;`IP2.PRI_11`               0xE000E408,        4, base=16,    bitRange=24-31
  356                           
  357                           IP3                      EQU  0xE000E40C
  358                           ;`IP3.PRI_12`               0xE000E40C,        4, base=16,    bitRange=0-7
  359                           ;`IP3.PRI_13`               0xE000E40C,        4, base=16,    bitRange=8-15
  360                           ;`IP3.PRI_14`               0xE000E40C,        4, base=16,    bitRange=16-23
  361                           ;`IP3.PRI_15`               0xE000E40C,        4, base=16,    bitRange=24-31
  362                           
  363                           IP4                      EQU  0xE000E410
  364                           ;`IP4.PRI_16`               0xE000E410,        4, base=16,    bitRange=0-7
  365                           ;`IP4.PRI_17`               0xE000E410,        4, base=16,    bitRange=8-15
  366                           ;`IP4.PRI_18`               0xE000E410,        4, base=16,    bitRange=16-23
  367                           ;`IP4.PRI_19`               0xE000E410,        4, base=16,    bitRange=24-31
  368                           
  369                           IP5                      EQU  0xE000E414
  370                           ;`IP5.PRI_20`               0xE000E414,        4, base=16,    bitRange=0-7
  371                           ;`IP5.PRI_21`               0xE000E414,        4, base=16,    bitRange=8-15
  372                           ;`IP5.PRI_22`               0xE000E414,        4, base=16,    bitRange=16-23
  373                           ;`IP5.PRI_23`               0xE000E414,        4, base=16,    bitRange=24-31
  374                           
  375                           IP6                      EQU  0xE000E418
  376                           ;`IP6.PRI_24`               0xE000E418,        4, base=16,    bitRange=0-7
  377                           ;`IP6.PRI_25`               0xE000E418,        4, base=16,    bitRange=8-15
  378                           ;`IP6.PRI_26`               0xE000E418,        4, base=16,    bitRange=16-23
  379                           ;`IP6.PRI_27`               0xE000E418,        4, base=16,    bitRange=24-31
  380                           
  381                           IP7                      EQU  0xE000E41C
  382                           ;`IP7.PRI_28`               0xE000E41C,        4, base=16,    bitRange=0-7
  383                           ;`IP7.PRI_29`               0xE000E41C,        4, base=16,    bitRange=8-15
  384                           ;`IP7.PRI_30`               0xE000E41C,        4, base=16,    bitRange=16-23
  385                           ;`IP7.PRI_31`               0xE000E41C,        4, base=16,    bitRange=24-31
  386                           
  387                           CPUIDBR                  EQU  0xE000ED00
  388                           ;`CPUIDBR.REVISION`         0xE000ED00,        4, base=16,    bitRange=0-3
  389                           ;`CPUIDBR.PARTNO`           0xE000ED00,        4, base=16,    bitRange=4-15
  390                           ;`CPUIDBR.CONSTANT`         0xE000ED00,        4, base=16,    bitRange=16-19
  391                           ;`CPUIDBR.VARIANT`          0xE000ED00,        4, base=16,    bitRange=20-23
  392                           ;`CPUIDBR.IMPLEMENTER`      0xE000ED00,        4, base=16,    bitRange=24-31
  393                           
  394                           CPUID                    EQU  0xE000ED00
  395                           ;`CPUID.REVISION`           0xE000ED00,        4, base=16,    bitRange=0-3
  396                           ;`CPUID.PARTNO`             0xE000ED00,        4, base=16,    bitRange=4-15
  397                           ;`CPUID.CONSTANT`           0xE000ED00,        4, base=16,    bitRange=16-19
  398                           ;`CPUID.VARIANT`            0xE000ED00,        4, base=16,    bitRange=20-23
  399                           ;`CPUID.IMPLEMENTER`        0xE000ED00,        4, base=16,    bitRange=24-31
  400                           
  401                           ICSR                     EQU  0xE000ED04
  402                           ;`ICSR.VECTACTIVE`          0xE000ED04,        4, base=16,    bitRange=0-5
  403                           ;`ICSR.VECTPENDING`         0xE000ED04,        4, base=16,    bitRange=12-17
  404                           ;`ICSR.ISRPENDING`          0xE000ED04,        4, base=16,    bitRange=22-22
  405                           ;`ICSR.PENDSTCLR`           0xE000ED04,        4, base=16,    bitRange=25-25
  406                           ;`ICSR.PENDSTSET`           0xE000ED04,        4, base=16,    bitRange=26-26
  407                           ;`ICSR.PENDSVCLR`           0xE000ED04,        4, base=16,    bitRange=27-27
  408                           ;`ICSR.PENDSVSET`           0xE000ED04,        4, base=16,    bitRange=28-28
  409                           ;`ICSR.NMIPENDSET`          0xE000ED04,        4, base=16,    bitRange=31-31
  410                           
  411                           AIRCR                    EQU  0xE000ED0C
  412                           ;`AIRCR.VECTCLRACTIVE`      0xE000ED0C,        4, base=16,    bitRange=1-1
  413                           ;`AIRCR.SYSRESETREQ`        0xE000ED0C,        4, base=16,    bitRange=2-2
  414                           ;`AIRCR.ENDIANESS`          0xE000ED0C,        4, base=16,    bitRange=15-15
  415                           ;`AIRCR.VECTKEY`            0xE000ED0C,        4, base=16,    bitRange=16-31
  416                           
  417                           SCR                      EQU  0xE000ED10
  418                           ;`SCR.SLEEPONEXIT`          0xE000ED10,        4, base=16,    bitRange=1-1
  419                           ;`SCR.SLEEPDEEP`            0xE000ED10,        4, base=16,    bitRange=2-2
  420                           ;`SCR.SEVONPEND`            0xE000ED10,        4, base=16,    bitRange=4-4
  421                           
  422                           CCR                      EQU  0xE000ED14
  423                           ;`CCR.UNALIGN_TRP`          0xE000ED14,        4, base=16,    bitRange=3-3
  424                           ;`CCR.STKALIGN`             0xE000ED14,        4, base=16,    bitRange=8-8
  425                           
  426                           SHPR2                    EQU  0xE000ED1C
  427                           ;`SHPR2.PRI_11`             0xE000ED1C,        4, base=16,    bitRange=24-31
  428                           
  429                           SHPR3                    EQU  0xE000ED20
  430                           ;`SHPR3.PRI_14`             0xE000ED20,        4, base=16,    bitRange=16-23
  431                           ;`SHPR3.PRI_15`             0xE000ED20,        4, base=16,    bitRange=24-31
  432                           
  433                           
  434                           ;
  435                           ;               System control block
  436                           ;
  437                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
  438                           ;     ----                        ----      -------     --------  ----------- --------
  439                           
  440                           
  441                           SYSMEMREMAP              EQU  0x40048000
  442                           ;`SYSMEMREMAP.MAP`          0x40048000,        4, base=16,    bitRange=0-1
  443                           
  444                           PRESETCTRL               EQU  0x40048004
  445                           ;`PRESETCTRL.SSP0_RST_N`    0x40048004,        4, base=16,    bitRange=0-0
  446                           ;`PRESETCTRL.I2C_RST_N`     0x40048004,        4, base=16,    bitRange=1-1
  447                           ;`PRESETCTRL.SSP1_RST_N`    0x40048004,        4, base=16,    bitRange=2-2
  448                           
  449                           SYSPLLCTRL               EQU  0x40048008
  450                           ;`SYSPLLCTRL.MSEL`          0x40048008,        4, base=16,    bitRange=0-4
  451                           ;`SYSPLLCTRL.PSEL`          0x40048008,        4, base=16,    bitRange=5-6
  452                           
  453                           SYSPLLSTAT               EQU  0x4004800C
  454                           ;`SYSPLLSTAT.LOCK`          0x4004800C,        4, base=16,    bitRange=0-0
  455                           
  456                           SYSOSCCTRL               EQU  0x40048020
  457                           ;`SYSOSCCTRL.BYPASS`        0x40048020,        4, base=16,    bitRange=0-0
  458                           ;`SYSOSCCTRL.FREQRANGE`     0x40048020,        4, base=16,    bitRange=1-1
  459                           
  460                           WDTOSCCTRL               EQU  0x40048024
  461                           ;`WDTOSCCTRL.DIVSEL`        0x40048024,        4, base=16,    bitRange=0-4
  462                           ;`WDTOSCCTRL.FREQSEL`       0x40048024,        4, base=16,    bitRange=5-8
  463                           
  464                           IRCCTRL                  EQU  0x40048028
  465                           ;`IRCCTRL.TRIM`             0x40048028,        4, base=16,    bitRange=0-7
  466                           
  467                           SYSRSTSTAT              EQU 0x40048030 ; M0+
  468                           SYSRESSTAT              EQU SYSRSTSTAT ; VIC
  469                           ;`SYSRESSTAT.POR`           0x40048030,        4, base=16,    bitRange=0-0
  470                           ;`SYSRESSTAT.EXTRST`        0x40048030,        4, base=16,    bitRange=1-1
  471                           ;`SYSRESSTAT.WDT`           0x40048030,        4, base=16,    bitRange=2-2
  472                           ;`SYSRESSTAT.BOD`           0x40048030,        4, base=16,    bitRange=3-3
  473                           ;`SYSRESSTAT.SYSRST`        0x40048030,        4, base=16,    bitRange=4-4
  474                           
  475                           SYSPLLCLKSEL             EQU  0x40048040
  476                           ;`SYSPLLCLKSEL.SEL`         0x40048040,        4, base=16,    bitRange=0-1
  477                           
  478                           SYSPLLCLKUEN             EQU  0x40048044
  479                           ;`SYSPLLCLKUEN.ENA`         0x40048044,        4, base=16,    bitRange=0-0
  480                           
  481                           MAINCLKSEL               EQU  0x40048070
  482                           ;`MAINCLKSEL.SEL`           0x40048070,        4, base=16,    bitRange=0-1
  483                           
  484                           MAINCLKUEN               EQU  0x40048074
  485                           ;`MAINCLKUEN.ENA`           0x40048074,        4, base=16,    bitRange=0-0
  486                           
  487                           SYSAHBCLKDIV             EQU  0x40048078
  488                           ;`SYSAHBCLKDIV.DIV`         0x40048078,        4, base=16,    bitRange=0-7
  489                           
  490                           SYSAHBCLKCTRL            EQU  0x40048080
  491                           ;`SYSAHBCLKCTRL.SYS`        0x40048080,        4, base=16,    bitRange=0-0
  492                           ;`SYSAHBCLKCTRL.ROM`        0x40048080,        4, base=16,    bitRange=1-1
  493                           ;`SYSAHBCLKCTRL.RAM`        0x40048080,        4, base=16,    bitRange=2-2
  494                           ;`SYSAHBCLKCTRL.FLASHREG`   0x40048080,        4, base=16,    bitRange=3-3
  495                           ;`SYSAHBCLKCTRL.FLASHARRAY` 0x40048080,        4, base=16,    bitRange=4-4
  496                           ;`SYSAHBCLKCTRL.I2C`        0x40048080,        4, base=16,    bitRange=5-5
  497                           ;`SYSAHBCLKCTRL.GPIO`       0x40048080,        4, base=16,    bitRange=6-6
  498                           ;`SYSAHBCLKCTRL.CT16B0`     0x40048080,        4, base=16,    bitRange=7-7
  499                           ;`SYSAHBCLKCTRL.CT16B1`     0x40048080,        4, base=16,    bitRange=8-8
  500                           ;`SYSAHBCLKCTRL.CT32B0`     0x40048080,        4, base=16,    bitRange=9-9
  501                           ;`SYSAHBCLKCTRL.CT32B1`     0x40048080,        4, base=16,    bitRange=10-10
  502                           ;`SYSAHBCLKCTRL.SSP0`       0x40048080,        4, base=16,    bitRange=11-11
  503                           ;`SYSAHBCLKCTRL.UART`       0x40048080,        4, base=16,    bitRange=12-12
  504                           ;`SYSAHBCLKCTRL.ADC`        0x40048080,        4, base=16,    bitRange=13-13
  505                           ;`SYSAHBCLKCTRL.WDT`        0x40048080,        4, base=16,    bitRange=15-15
  506                           ;`SYSAHBCLKCTRL.IOCON`      0x40048080,        4, base=16,    bitRange=16-16
  507                           ;`SYSAHBCLKCTRL.SSP1`       0x40048080,        4, base=16,    bitRange=18-18
  508                           
  509                           SSP0CLKDIV               EQU  0x40048094
  510                           ;`SSP0CLKDIV.DIV`           0x40048094,        4, base=16,    bitRange=0-7
  511                           
  512                           UARTCLKDIV               EQU  0x40048098 ; 11xx
  513                           ;`UARTCLKDIV.DIV`           0x40048098,        4, base=16,    bitRange=0-7
  514                           
  515                           SSP1CLKDIV               EQU  0x4004809C
  516                           ;`SSP1CLKDIV.DIV`           0x4004809C,        4, base=16,    bitRange=0-7
  517                           
  518                           WDTCLKSEL                EQU  0x400480D0
  519                           ;`WDTCLKSEL.SEL`            0x400480D0,        4, base=16,    bitRange=0-1
  520                           
  521                           WDTCLKUEN                EQU  0x400480D4
  522                           ;`WDTCLKUEN.ENA`            0x400480D4,        4, base=16,    bitRange=0-0
  523                           
  524                           WDTCLKDIV                EQU  0x400480D8
  525                           ;`WDTCLKDIV.DIV`            0x400480D8,        4, base=16,    bitRange=0-7
  526                           
  527                           CLKOUTCLKSEL             EQU  0x400480E0
  528                           ;`CLKOUTCLKSEL.SEL`         0x400480E0,        4, base=16,    bitRange=0-1
  529                           
  530                           CLKOUTUEN                EQU  0x400480E4
  531                           ;`CLKOUTUEN.ENA`            0x400480E4,        4, base=16,    bitRange=0-0
  532                           
  533                           CLKOUTDIV               EQU  0x400480E8 ; M0+
  534                           CLKOUTCLKDIV            EQU  CLKOUTDIV  ; VIC
  535                           ; CLKOUTCLKDIV                EQU  0x400480E8
  536                           ;`CLKOUTDIV.DIV`            0x400480E8,        4, base=16,    bitRange=0-7
  537                           
  538                           PIOPORCAP0               EQU  0x40048100
  539                           ;`PIOPORCAP0.CAPPIO0_0`     0x40048100,        4, base=16,    bitRange=0-0
  540                           ;`PIOPORCAP0.CAPPIO0_1`     0x40048100,        4, base=16,    bitRange=1-1
  541                           ;`PIOPORCAP0.CAPPIO0_2`     0x40048100,        4, base=16,    bitRange=2-2
  542                           ;`PIOPORCAP0.CAPPIO0_3`     0x40048100,        4, base=16,    bitRange=3-3
  543                           ;`PIOPORCAP0.CAPPIO0_4`     0x40048100,        4, base=16,    bitRange=4-4
  544                           ;`PIOPORCAP0.CAPPIO0_5`     0x40048100,        4, base=16,    bitRange=5-5
  545                           ;`PIOPORCAP0.CAPPIO0_6`     0x40048100,        4, base=16,    bitRange=6-6
  546                           ;`PIOPORCAP0.CAPPIO0_7`     0x40048100,        4, base=16,    bitRange=7-7
  547                           ;`PIOPORCAP0.CAPPIO0_8`     0x40048100,        4, base=16,    bitRange=8-8
  548                           ;`PIOPORCAP0.CAPPIO0_9`     0x40048100,        4, base=16,    bitRange=9-9
  549                           ;`PIOPORCAP0.CAPPIO0_10`    0x40048100,        4, base=16,    bitRange=10-10
  550                           ;`PIOPORCAP0.CAPPIO0_11`    0x40048100,        4, base=16,    bitRange=11-11
  551                           ;`PIOPORCAP0.CAPPIO1_0`     0x40048100,        4, base=16,    bitRange=12-12
  552                           ;`PIOPORCAP0.CAPPIO1_1`     0x40048100,        4, base=16,    bitRange=13-13
  553                           ;`PIOPORCAP0.CAPPIO1_2`     0x40048100,        4, base=16,    bitRange=14-14
  554                           ;`PIOPORCAP0.CAPPIO1_3`     0x40048100,        4, base=16,    bitRange=15-15
  555                           ;`PIOPORCAP0.CAPPIO1_4`     0x40048100,        4, base=16,    bitRange=16-16
  556                           ;`PIOPORCAP0.CAPPIO1_5`     0x40048100,        4, base=16,    bitRange=17-17
  557                           ;`PIOPORCAP0.CAPPIO1_6`     0x40048100,        4, base=16,    bitRange=18-18
  558                           ;`PIOPORCAP0.CAPPIO1_7`     0x40048100,        4, base=16,    bitRange=19-19
  559                           ;`PIOPORCAP0.CAPPIO1_8`     0x40048100,        4, base=16,    bitRange=20-20
  560                           ;`PIOPORCAP0.CAPPIO1_9`     0x40048100,        4, base=16,    bitRange=21-21
  561                           ;`PIOPORCAP0.CAPPIO1_10`    0x40048100,        4, base=16,    bitRange=22-22
  562                           ;`PIOPORCAP0.CAPPIO1_11`    0x40048100,        4, base=16,    bitRange=23-23
  563                           ;`PIOPORCAP0.CAPPIO2_0`     0x40048100,        4, base=16,    bitRange=24-24
  564                           ;`PIOPORCAP0.CAPPIO2_1`     0x40048100,        4, base=16,    bitRange=25-25
  565                           ;`PIOPORCAP0.CAPPIO2_2`     0x40048100,        4, base=16,    bitRange=26-26
  566                           ;`PIOPORCAP0.CAPPIO2_3`     0x40048100,        4, base=16,    bitRange=27-27
  567                           ;`PIOPORCAP0.CAPPIO2_4`     0x40048100,        4, base=16,    bitRange=28-28
  568                           ;`PIOPORCAP0.CAPPIO2_5`     0x40048100,        4, base=16,    bitRange=29-29
  569                           ;`PIOPORCAP0.CAPPIO2_6`     0x40048100,        4, base=16,    bitRange=30-30
  570                           ;`PIOPORCAP0.CAPPIO2_7`     0x40048100,        4, base=16,    bitRange=31-31
  571                           
  572                           PIOPORCAP1               EQU  0x40048104
  573                           ;`PIOPORCAP1.CAPPIO2_8`     0x40048104,        4, base=16,    bitRange=0-0
  574                           ;`PIOPORCAP1.CAPPIO2_9`     0x40048104,        4, base=16,    bitRange=1-1
  575                           ;`PIOPORCAP1.CAPPIO2_10`    0x40048104,        4, base=16,    bitRange=2-2
  576                           ;`PIOPORCAP1.CAPPIO2_11`    0x40048104,        4, base=16,    bitRange=3-3
  577                           ;`PIOPORCAP1.CAPPIO3_0`     0x40048104,        4, base=16,    bitRange=4-4
  578                           ;`PIOPORCAP1.CAPPIO3_1`     0x40048104,        4, base=16,    bitRange=5-5
  579                           ;`PIOPORCAP1.CAPPIO3_2`     0x40048104,        4, base=16,    bitRange=6-6
  580                           ;`PIOPORCAP1.CAPPIO3_3`     0x40048104,        4, base=16,    bitRange=7-7
  581                           ;`PIOPORCAP1.CAPPIO3_4`     0x40048104,        4, base=16,    bitRange=8-8
  582                           ;`PIOPORCAP1.CAPPIO3_5`     0x40048104,        4, base=16,    bitRange=9-9
  583                           
  584                           BODCTRL                  EQU  0x40048150
  585                           ;`BODCTRL.BODRSTLEV`        0x40048150,        4, base=16,    bitRange=0-1
  586                           ;`BODCTRL.BODINTVAL`        0x40048150,        4, base=16,    bitRange=2-3
  587                           ;`BODCTRL.BODRSTENA`        0x40048150,        4, base=16,    bitRange=4-4
  588                           
  589                           SYSTCKCAL                EQU  0x40048154
  590                           ;`SYSTCKCAL.CAL`            0x40048154,        4, base=16,    bitRange=0-25
  591                           
  592                           NMISRC                   EQU  0x40048174
  593                           ;`NMISRC.IRQNO`             0x40048174,        4, base=16,    bitRange=0-4
  594                           ;`NMISRC.NMIEN`             0x40048174,        4, base=16,    bitRange=31-31
  595                           
  596                           STARTAPRP0               EQU  0x40048200
  597                           ;`STARTAPRP0.APRPIO0_0`     0x40048200,        4, base=16,    bitRange=0-0
  598                           ;`STARTAPRP0.APRPIO0_1`     0x40048200,        4, base=16,    bitRange=1-1
  599                           ;`STARTAPRP0.APRPIO0_2`     0x40048200,        4, base=16,    bitRange=2-2
  600                           ;`STARTAPRP0.APRPIO0_3`     0x40048200,        4, base=16,    bitRange=3-3
  601                           ;`STARTAPRP0.APRPIO0_4`     0x40048200,        4, base=16,    bitRange=4-4
  602                           ;`STARTAPRP0.APRPIO0_5`     0x40048200,        4, base=16,    bitRange=5-5
  603                           ;`STARTAPRP0.APRPIO0_6`     0x40048200,        4, base=16,    bitRange=6-6
  604                           ;`STARTAPRP0.APRPIO0_7`     0x40048200,        4, base=16,    bitRange=7-7
  605                           ;`STARTAPRP0.APRPIO0_8`     0x40048200,        4, base=16,    bitRange=8-8
  606                           ;`STARTAPRP0.APRPIO0_9`     0x40048200,        4, base=16,    bitRange=9-9
  607                           ;`STARTAPRP0.APRPIO0_10`    0x40048200,        4, base=16,    bitRange=10-10
  608                           ;`STARTAPRP0.APRPIO0_11`    0x40048200,        4, base=16,    bitRange=11-11
  609                           ;`STARTAPRP0.APRPIO1_0`     0x40048200,        4, base=16,    bitRange=12-12
  610                           
  611                           STARTERP0                EQU  0x40048204
  612                           ;`STARTERP0.ERPIO0_0`       0x40048204,        4, base=16,    bitRange=0-0
  613                           ;`STARTERP0.ERPIO0_1`       0x40048204,        4, base=16,    bitRange=1-1
  614                           ;`STARTERP0.ERPIO0_2`       0x40048204,        4, base=16,    bitRange=2-2
  615                           ;`STARTERP0.ERPIO0_3`       0x40048204,        4, base=16,    bitRange=3-3
  616                           ;`STARTERP0.ERPIO0_4`       0x40048204,        4, base=16,    bitRange=4-4
  617                           ;`STARTERP0.ERPIO0_5`       0x40048204,        4, base=16,    bitRange=5-5
  618                           ;`STARTERP0.ERPIO0_6`       0x40048204,        4, base=16,    bitRange=6-6
  619                           ;`STARTERP0.ERPIO0_7`       0x40048204,        4, base=16,    bitRange=7-7
  620                           ;`STARTERP0.ERPIO0_8`       0x40048204,        4, base=16,    bitRange=8-8
  621                           ;`STARTERP0.ERPIO0_9`       0x40048204,        4, base=16,    bitRange=9-9
  622                           ;`STARTERP0.ERPIO0_10`      0x40048204,        4, base=16,    bitRange=10-10
  623                           ;`STARTERP0.ERPIO0_11`      0x40048204,        4, base=16,    bitRange=11-11
  624                           ;`STARTERP0.ERPIO1_0`       0x40048204,        4, base=16,    bitRange=12-12
  625                           
  626                           STARTRSRP0CLR            EQU  0x40048208
  627                           
  628                           STARTSRP0                EQU  0x4004820C
  629                           ;`STARTSRP0.SRPIO0_0`       0x4004820C,        4, base=16,    bitRange=0-0
  630                           ;`STARTSRP0.SRPIO0_1`       0x4004820C,        4, base=16,    bitRange=1-1
  631                           ;`STARTSRP0.SRPIO0_2`       0x4004820C,        4, base=16,    bitRange=2-2
  632                           ;`STARTSRP0.SRPIO0_3`       0x4004820C,        4, base=16,    bitRange=3-3
  633                           ;`STARTSRP0.SRPIO0_4`       0x4004820C,        4, base=16,    bitRange=4-4
  634                           ;`STARTSRP0.SRPIO0_5`       0x4004820C,        4, base=16,    bitRange=5-5
  635                           ;`STARTSRP0.SRPIO0_6`       0x4004820C,        4, base=16,    bitRange=6-6
  636                           ;`STARTSRP0.SRPIO0_7`       0x4004820C,        4, base=16,    bitRange=7-7
  637                           ;`STARTSRP0.SRPIO0_8`       0x4004820C,        4, base=16,    bitRange=8-8
  638                           ;`STARTSRP0.SRPIO0_9`       0x4004820C,        4, base=16,    bitRange=9-9
  639                           ;`STARTSRP0.SRPIO0_10`      0x4004820C,        4, base=16,    bitRange=10-10
  640                           ;`STARTSRP0.SRPIO0_11`      0x4004820C,        4, base=16,    bitRange=11-11
  641                           ;`STARTSRP0.SRPIO1_0`       0x4004820C,        4, base=16,    bitRange=12-12
  642                           
  643                           PDSLEEPCFG               EQU  0x40048230
  644                           ;`PDSLEEPCFG.BOD_PD`        0x40048230,        4, base=16,    bitRange=3-3
  645                           ;`PDSLEEPCFG.WDTOSC_PD`     0x40048230,        4, base=16,    bitRange=6-6
  646                           
  647                           PDAWAKECFG               EQU  0x40048234
  648                           ;`PDAWAKECFG.IRCOUT_PD`     0x40048234,        4, base=16,    bitRange=0-0
  649                           ;`PDAWAKECFG.IRC_PD`        0x40048234,        4, base=16,    bitRange=1-1
  650                           ;`PDAWAKECFG.FLASH_PD`      0x40048234,        4, base=16,    bitRange=2-2
  651                           ;`PDAWAKECFG.BOD_PD`        0x40048234,        4, base=16,    bitRange=3-3
  652                           ;`PDAWAKECFG.ADC_PD`        0x40048234,        4, base=16,    bitRange=4-4
  653                           ;`PDAWAKECFG.SYSOSC_PD`     0x40048234,        4, base=16,    bitRange=5-5
  654                           ;`PDAWAKECFG.WDTOSC_PD`     0x40048234,        4, base=16,    bitRange=6-6
  655                           ;`PDAWAKECFG.SYSPLL_PD`     0x40048234,        4, base=16,    bitRange=7-7
  656                           
  657                           PDRUNCFG                 EQU  0x40048238
  658                           ;`PDRUNCFG.IRCOUT_PD`       0x40048238,        4, base=16,    bitRange=0-0
  659                           ;`PDRUNCFG.IRC_PD`          0x40048238,        4, base=16,    bitRange=1-1
  660                           ;`PDRUNCFG.FLASH_PD`        0x40048238,        4, base=16,    bitRange=2-2
  661                           ;`PDRUNCFG.BOD_PD`          0x40048238,        4, base=16,    bitRange=3-3
  662                           ;`PDRUNCFG.ADC_PD`          0x40048238,        4, base=16,    bitRange=4-4
  663                           ;`PDRUNCFG.SYSOSC_PD`       0x40048238,        4, base=16,    bitRange=5-5
  664                           ;`PDRUNCFG.WDTOSC_PD`       0x40048238,        4, base=16,    bitRange=6-6
  665                           ;`PDRUNCFG.SYSPLL_PD`       0x40048238,        4, base=16,    bitRange=7-7
  666                           
  667                           DEVICE_ID                EQU  0x400483F4 ; Part ID numbers for LPC111x/LPC11Cxx parts
  668                           
  669                           
  670                           ;
  671                           ;               PMU
  672                           ;
  673                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
  674                           ;     ----                        ----      -------     --------  ----------- --------
  675                           
  676                           
  677                           PCON                     EQU  0x40038000
  678                           ;`PCON.DPDEN`               0x40038000,        4, base=16,    bitRange=1-1
  679                           ;`PCON.SLEEPFLAG`           0x40038000,        4, base=16,    bitRange=8-8
  680                           ;`PCON.DPDFLAG`             0x40038000,        4, base=16,    bitRange=11-11
  681                           
  682                           GPREG0                   EQU  0x40038004
  683                           
  684                           GPREG1                   EQU  0x40038008
  685                           
  686                           GPREG2                   EQU  0x4003800C
  687                           
  688                           GPREG3                   EQU  0x40038010
  689                           
  690                           GPREG4                   EQU  0x40038014
  691                           ;`GPREG4.WAKEUPHYS`         0x40038014,        4, base=16,    bitRange=10-10
  692                           ;`GPREG4.GPDATA`            0x40038014,        4, base=16,    bitRange=11-31
  693                           
  694                           
  695                           ;
  696                           ;               I/O configuration
  697                           ;
  698                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
  699                           ;     ----                        ----      -------     --------  ----------- --------
  700                           
  701                           
  702                           IOCON_PIO2_6             EQU  0x40044000
  703                           ;`IOCON_PIO2_6.FUNC`        0x40044000,        4, base=16,    bitRange=0-2
  704                           ;`IOCON_PIO2_6.MODE`        0x40044000,        4, base=16,    bitRange=3-4
  705                           ;`IOCON_PIO2_6.HYS`         0x40044000,        4, base=16,    bitRange=5-5
  706                           ;`IOCON_PIO2_6.OD`          0x40044000,        4, base=16,    bitRange=10-10
  707                           
  708                           IOCON_PIO2_0             EQU  0x40044008
  709                           ;`IOCON_PIO2_0.FUNC`        0x40044008,        4, base=16,    bitRange=0-2
  710                           ;`IOCON_PIO2_0.MODE`        0x40044008,        4, base=16,    bitRange=3-4
  711                           ;`IOCON_PIO2_0.HYS`         0x40044008,        4, base=16,    bitRange=5-5
  712                           ;`IOCON_PIO2_0.OD`          0x40044008,        4, base=16,    bitRange=10-10
  713                           
  714                           IOCON_RESET_PIO0_0       EQU  0x4004400C
  715                           ;`IOCON_RESET_PIO0_0.FUNC`  0x4004400C,        4, base=16,    bitRange=0-2
  716                           ;`IOCON_RESET_PIO0_0.MODE`  0x4004400C,        4, base=16,    bitRange=3-4
  717                           ;`IOCON_RESET_PIO0_0.HYS`   0x4004400C,        4, base=16,    bitRange=5-5
  718                           ;`IOCON_RESET_PIO0_0.OD`    0x4004400C,        4, base=16,    bitRange=10-10
  719                           
  720                           IOCON_PIO0_1             EQU  0x40044010
  721                           ;`IOCON_PIO0_1.FUNC`        0x40044010,        4, base=16,    bitRange=0-2
  722                           ;`IOCON_PIO0_1.MODE`        0x40044010,        4, base=16,    bitRange=3-4
  723                           ;`IOCON_PIO0_1.HYS`         0x40044010,        4, base=16,    bitRange=5-5
  724                           ;`IOCON_PIO0_1.OD`          0x40044010,        4, base=16,    bitRange=10-10
  725                           
  726                           IOCON_PIO1_8             EQU  0x40044014
  727                           ;`IOCON_PIO1_8.FUNC`        0x40044014,        4, base=16,    bitRange=0-2
  728                           ;`IOCON_PIO1_8.MODE`        0x40044014,        4, base=16,    bitRange=3-4
  729                           ;`IOCON_PIO1_8.HYS`         0x40044014,        4, base=16,    bitRange=5-5
  730                           ;`IOCON_PIO1_8.OD`          0x40044014,        4, base=16,    bitRange=10-10
  731                           
  732                           IOCON_PIO0_2             EQU  0x4004401C
  733                           ;`IOCON_PIO0_2.FUNC`        0x4004401C,        4, base=16,    bitRange=0-2
  734                           ;`IOCON_PIO0_2.MODE`        0x4004401C,        4, base=16,    bitRange=3-4
  735                           ;`IOCON_PIO0_2.HYS`         0x4004401C,        4, base=16,    bitRange=5-5
  736                           ;`IOCON_PIO0_2.OD`          0x4004401C,        4, base=16,    bitRange=10-10
  737                           
  738                           IOCON_PIO2_7             EQU  0x40044020
  739                           ;`IOCON_PIO2_7.FUNC`        0x40044020,        4, base=16,    bitRange=0-2
  740                           ;`IOCON_PIO2_7.MODE`        0x40044020,        4, base=16,    bitRange=3-4
  741                           ;`IOCON_PIO2_7.HYS`         0x40044020,        4, base=16,    bitRange=5-5
  742                           ;`IOCON_PIO2_7.OD`          0x40044020,        4, base=16,    bitRange=10-10
  743                           
  744                           IOCON_PIO2_8             EQU  0x40044024
  745                           ;`IOCON_PIO2_8.FUNC`        0x40044024,        4, base=16,    bitRange=0-2
  746                           ;`IOCON_PIO2_8.MODE`        0x40044024,        4, base=16,    bitRange=3-4
  747                           ;`IOCON_PIO2_8.HYS`         0x40044024,        4, base=16,    bitRange=5-5
  748                           ;`IOCON_PIO2_8.OD`          0x40044024,        4, base=16,    bitRange=10-10
  749                           
  750                           IOCON_PIO2_1             EQU  0x40044028
  751                           ;`IOCON_PIO2_1.FUNC`        0x40044028,        4, base=16,    bitRange=0-2
  752                           ;`IOCON_PIO2_1.MODE`        0x40044028,        4, base=16,    bitRange=3-4
  753                           ;`IOCON_PIO2_1.HYS`         0x40044028,        4, base=16,    bitRange=5-5
  754                           ;`IOCON_PIO2_1.OD`          0x40044028,        4, base=16,    bitRange=10-10
  755                           
  756                           IOCON_PIO0_3             EQU  0x4004402C
  757                           ;`IOCON_PIO0_3.FUNC`        0x4004402C,        4, base=16,    bitRange=0-2
  758                           ;`IOCON_PIO0_3.MODE`        0x4004402C,        4, base=16,    bitRange=3-4
  759                           ;`IOCON_PIO0_3.HYS`         0x4004402C,        4, base=16,    bitRange=5-5
  760                           ;`IOCON_PIO0_3.OD`          0x4004402C,        4, base=16,    bitRange=10-10
  761                           
  762                           IOCON_PIO0_4             EQU  0x40044030
  763                           ;`IOCON_PIO0_4.FUNC`        0x40044030,        4, base=16,    bitRange=0-2
  764                           ;`IOCON_PIO0_4.I2CMODE`     0x40044030,        4, base=16,    bitRange=8-9
  765                           
  766                           IOCON_PIO0_5             EQU  0x40044034
  767                           ;`IOCON_PIO0_5.FUNC`        0x40044034,        4, base=16,    bitRange=0-2
  768                           ;`IOCON_PIO0_5.I2CMODE`     0x40044034,        4, base=16,    bitRange=8-9
  769                           
  770                           IOCON_PIO1_9             EQU  0x40044038
  771                           ;`IOCON_PIO1_9.FUNC`        0x40044038,        4, base=16,    bitRange=0-2
  772                           ;`IOCON_PIO1_9.MODE`        0x40044038,        4, base=16,    bitRange=3-4
  773                           ;`IOCON_PIO1_9.HYS`         0x40044038,        4, base=16,    bitRange=5-5
  774                           ;`IOCON_PIO1_9.OD`          0x40044038,        4, base=16,    bitRange=10-10
  775                           
  776                           IOCON_PIO3_4             EQU  0x4004403C
  777                           ;`IOCON_PIO3_4.FUNC`        0x4004403C,        4, base=16,    bitRange=0-2
  778                           ;`IOCON_PIO3_4.MODE`        0x4004403C,        4, base=16,    bitRange=3-4
  779                           ;`IOCON_PIO3_4.HYS`         0x4004403C,        4, base=16,    bitRange=5-5
  780                           ;`IOCON_PIO3_4.OD`          0x4004403C,        4, base=16,    bitRange=10-10
  781                           
  782                           IOCON_PIO2_4             EQU  0x40044040
  783                           ;`IOCON_PIO2_4.FUNC`        0x40044040,        4, base=16,    bitRange=0-2
  784                           ;`IOCON_PIO2_4.MODE`        0x40044040,        4, base=16,    bitRange=3-4
  785                           ;`IOCON_PIO2_4.HYS`         0x40044040,        4, base=16,    bitRange=5-5
  786                           ;`IOCON_PIO2_4.OD`          0x40044040,        4, base=16,    bitRange=10-10
  787                           
  788                           IOCON_PIO2_5             EQU  0x40044044
  789                           ;`IOCON_PIO2_5.FUNC`        0x40044044,        4, base=16,    bitRange=0-2
  790                           ;`IOCON_PIO2_5.MODE`        0x40044044,        4, base=16,    bitRange=3-4
  791                           ;`IOCON_PIO2_5.HYS`         0x40044044,        4, base=16,    bitRange=5-5
  792                           ;`IOCON_PIO2_5.OD`          0x40044044,        4, base=16,    bitRange=10-10
  793                           
  794                           IOCON_PIO3_5             EQU  0x40044048
  795                           ;`IOCON_PIO3_5.FUNC`        0x40044048,        4, base=16,    bitRange=0-2
  796                           ;`IOCON_PIO3_5.MODE`        0x40044048,        4, base=16,    bitRange=3-4
  797                           ;`IOCON_PIO3_5.HYS`         0x40044048,        4, base=16,    bitRange=5-5
  798                           ;`IOCON_PIO3_5.OD`          0x40044048,        4, base=16,    bitRange=10-10
  799                           
  800                           IOCON_PIO0_6             EQU  0x4004404C
  801                           ;`IOCON_PIO0_6.FUNC`        0x4004404C,        4, base=16,    bitRange=0-2
  802                           ;`IOCON_PIO0_6.MODE`        0x4004404C,        4, base=16,    bitRange=3-4
  803                           ;`IOCON_PIO0_6.HYS`         0x4004404C,        4, base=16,    bitRange=5-5
  804                           ;`IOCON_PIO0_6.OD`          0x4004404C,        4, base=16,    bitRange=10-10
  805                           
  806                           IOCON_PIO0_7             EQU  0x40044050
  807                           ;`IOCON_PIO0_7.FUNC`        0x40044050,        4, base=16,    bitRange=0-2
  808                           ;`IOCON_PIO0_7.MODE`        0x40044050,        4, base=16,    bitRange=3-4
  809                           ;`IOCON_PIO0_7.HYS`         0x40044050,        4, base=16,    bitRange=5-5
  810                           ;`IOCON_PIO0_7.OD`          0x40044050,        4, base=16,    bitRange=10-10
  811                           
  812                           IOCON_PIO2_9             EQU  0x40044054
  813                           ;`IOCON_PIO2_9.FUNC`        0x40044054,        4, base=16,    bitRange=0-2
  814                           ;`IOCON_PIO2_9.MODE`        0x40044054,        4, base=16,    bitRange=3-4
  815                           ;`IOCON_PIO2_9.HYS`         0x40044054,        4, base=16,    bitRange=5-5
  816                           ;`IOCON_PIO2_9.OD`          0x40044054,        4, base=16,    bitRange=10-10
  817                           
  818                           IOCON_PIO2_10            EQU  0x40044058
  819                           ;`IOCON_PIO2_10.FUNC`       0x40044058,        4, base=16,    bitRange=0-2
  820                           ;`IOCON_PIO2_10.MODE`       0x40044058,        4, base=16,    bitRange=3-4
  821                           ;`IOCON_PIO2_10.HYS`        0x40044058,        4, base=16,    bitRange=5-5
  822                           ;`IOCON_PIO2_10.OD`         0x40044058,        4, base=16,    bitRange=10-10
  823                           
  824                           IOCON_PIO2_2             EQU  0x4004405C
  825                           ;`IOCON_PIO2_2.FUNC`        0x4004405C,        4, base=16,    bitRange=0-2
  826                           ;`IOCON_PIO2_2.MODE`        0x4004405C,        4, base=16,    bitRange=3-4
  827                           ;`IOCON_PIO2_2.HYS`         0x4004405C,        4, base=16,    bitRange=5-5
  828                           ;`IOCON_PIO2_2.OD`          0x4004405C,        4, base=16,    bitRange=10-10
  829                           
  830                           IOCON_PIO0_8             EQU  0x40044060
  831                           ;`IOCON_PIO0_8.FUNC`        0x40044060,        4, base=16,    bitRange=0-2
  832                           ;`IOCON_PIO0_8.MODE`        0x40044060,        4, base=16,    bitRange=3-4
  833                           ;`IOCON_PIO0_8.HYS`         0x40044060,        4, base=16,    bitRange=5-5
  834                           ;`IOCON_PIO0_8.OD`          0x40044060,        4, base=16,    bitRange=10-10
  835                           
  836                           IOCON_PIO0_9             EQU  0x40044064
  837                           ;`IOCON_PIO0_9.FUNC`        0x40044064,        4, base=16,    bitRange=0-2
  838                           ;`IOCON_PIO0_9.MODE`        0x40044064,        4, base=16,    bitRange=3-4
  839                           ;`IOCON_PIO0_9.HYS`         0x40044064,        4, base=16,    bitRange=5-5
  840                           ;`IOCON_PIO0_9.OD`          0x40044064,        4, base=16,    bitRange=10-10
  841                           
  842                           IOCON_SWCLK_PIO0_10      EQU  0x40044068
  843                           ;`IOCON_SWCLK_PIO0_10.FUNC` 0x40044068,        4, base=16,    bitRange=0-2
  844                           ;`IOCON_SWCLK_PIO0_10.MODE` 0x40044068,        4, base=16,    bitRange=3-4
  845                           ;`IOCON_SWCLK_PIO0_10.HYS`  0x40044068,        4, base=16,    bitRange=5-5
  846                           ;`IOCON_SWCLK_PIO0_10.OD`   0x40044068,        4, base=16,    bitRange=10-10
  847                           
  848                           IOCON_PIO1_10            EQU  0x4004406C
  849                           ;`IOCON_PIO1_10.FUNC`       0x4004406C,        4, base=16,    bitRange=0-2
  850                           ;`IOCON_PIO1_10.MODE`       0x4004406C,        4, base=16,    bitRange=3-4
  851                           ;`IOCON_PIO1_10.HYS`        0x4004406C,        4, base=16,    bitRange=5-5
  852                           ;`IOCON_PIO1_10.ADMODE`     0x4004406C,        4, base=16,    bitRange=7-7
  853                           ;`IOCON_PIO1_10.OD`         0x4004406C,        4, base=16,    bitRange=10-10
  854                           
  855                           IOCON_PIO2_11            EQU  0x40044070
  856                           ;`IOCON_PIO2_11.FUNC`       0x40044070,        4, base=16,    bitRange=0-2
  857                           ;`IOCON_PIO2_11.MODE`       0x40044070,        4, base=16,    bitRange=3-4
  858                           ;`IOCON_PIO2_11.HYS`        0x40044070,        4, base=16,    bitRange=5-5
  859                           ;`IOCON_PIO2_11.OD`         0x40044070,        4, base=16,    bitRange=10-10
  860                           
  861                           IOCON_R_PIO0_11          EQU  0x40044074
  862                           ;`IOCON_R_PIO0_11.FUNC`     0x40044074,        4, base=16,    bitRange=0-2
  863                           ;`IOCON_R_PIO0_11.MODE`     0x40044074,        4, base=16,    bitRange=3-4
  864                           ;`IOCON_R_PIO0_11.HYS`      0x40044074,        4, base=16,    bitRange=5-5
  865                           ;`IOCON_R_PIO0_11.ADMODE`   0x40044074,        4, base=16,    bitRange=7-7
  866                           ;`IOCON_R_PIO0_11.OD`       0x40044074,        4, base=16,    bitRange=10-10
  867                           
  868                           IOCON_R_PIO1_0           EQU  0x40044078
  869                           ;`IOCON_R_PIO1_0.FUNC`      0x40044078,        4, base=16,    bitRange=0-2
  870                           ;`IOCON_R_PIO1_0.MODE`      0x40044078,        4, base=16,    bitRange=3-4
  871                           ;`IOCON_R_PIO1_0.HYS`       0x40044078,        4, base=16,    bitRange=5-5
  872                           ;`IOCON_R_PIO1_0.ADMODE`    0x40044078,        4, base=16,    bitRange=7-7
  873                           ;`IOCON_R_PIO1_0.OD`        0x40044078,        4, base=16,    bitRange=10-10
  874                           
  875                           IOCON_R_PIO1_1           EQU  0x4004407C
  876                           ;`IOCON_R_PIO1_1.FUNC`      0x4004407C,        4, base=16,    bitRange=0-2
  877                           ;`IOCON_R_PIO1_1.MODE`      0x4004407C,        4, base=16,    bitRange=3-4
  878                           ;`IOCON_R_PIO1_1.HYS`       0x4004407C,        4, base=16,    bitRange=5-5
  879                           ;`IOCON_R_PIO1_1.ADMODE`    0x4004407C,        4, base=16,    bitRange=7-7
  880                           ;`IOCON_R_PIO1_1.OD`        0x4004407C,        4, base=16,    bitRange=10-10
  881                           
  882                           IOCON_R_PIO1_2           EQU  0x40044080
  883                           ;`IOCON_R_PIO1_2.FUNC`      0x40044080,        4, base=16,    bitRange=0-2
  884                           ;`IOCON_R_PIO1_2.MODE`      0x40044080,        4, base=16,    bitRange=3-4
  885                           ;`IOCON_R_PIO1_2.HYS`       0x40044080,        4, base=16,    bitRange=5-5
  886                           ;`IOCON_R_PIO1_2.ADMODE`    0x40044080,        4, base=16,    bitRange=7-7
  887                           ;`IOCON_R_PIO1_2.OD`        0x40044080,        4, base=16,    bitRange=10-10
  888                           
  889                           IOCON_PIO3_0             EQU  0x40044084
  890                           ;`IOCON_PIO3_0.FUNC`        0x40044084,        4, base=16,    bitRange=0-2
  891                           ;`IOCON_PIO3_0.MODE`        0x40044084,        4, base=16,    bitRange=3-4
  892                           ;`IOCON_PIO3_0.HYS`         0x40044084,        4, base=16,    bitRange=5-5
  893                           ;`IOCON_PIO3_0.OD`          0x40044084,        4, base=16,    bitRange=10-10
  894                           
  895                           IOCON_PIO3_1             EQU  0x40044088
  896                           ;`IOCON_PIO3_1.FUNC`        0x40044088,        4, base=16,    bitRange=0-2
  897                           ;`IOCON_PIO3_1.MODE`        0x40044088,        4, base=16,    bitRange=3-4
  898                           ;`IOCON_PIO3_1.HYS`         0x40044088,        4, base=16,    bitRange=5-5
  899                           ;`IOCON_PIO3_1.OD`          0x40044088,        4, base=16,    bitRange=10-10
  900                           
  901                           IOCON_PIO2_3             EQU  0x4004408C
  902                           ;`IOCON_PIO2_3.FUNC`        0x4004408C,        4, base=16,    bitRange=0-2
  903                           ;`IOCON_PIO2_3.MODE`        0x4004408C,        4, base=16,    bitRange=3-4
  904                           ;`IOCON_PIO2_3.HYS`         0x4004408C,        4, base=16,    bitRange=5-5
  905                           ;`IOCON_PIO2_3.OD`          0x4004408C,        4, base=16,    bitRange=10-10
  906                           
  907                           IOCON_SWDIO_PIO1_3       EQU  0x40044090
  908                           ;`IOCON_SWDIO_PIO1_3.FUNC`  0x40044090,        4, base=16,    bitRange=0-2
  909                           ;`IOCON_SWDIO_PIO1_3.MODE`  0x40044090,        4, base=16,    bitRange=3-4
  910                           ;`IOCON_SWDIO_PIO1_3.HYS`   0x40044090,        4, base=16,    bitRange=5-5
  911                           ;`IOCON_SWDIO_PIO1_3.ADMODE` 0x40044090,        4, base=16,    bitRange=7-7
  912                           ;`IOCON_SWDIO_PIO1_3.OD`    0x40044090,        4, base=16,    bitRange=10-10
  913                           
  914                           IOCON_PIO1_4             EQU  0x40044094
  915                           ;`IOCON_PIO1_4.FUNC`        0x40044094,        4, base=16,    bitRange=0-2
  916                           ;`IOCON_PIO1_4.MODE`        0x40044094,        4, base=16,    bitRange=3-4
  917                           ;`IOCON_PIO1_4.HYS`         0x40044094,        4, base=16,    bitRange=5-5
  918                           ;`IOCON_PIO1_4.ADMODE`      0x40044094,        4, base=16,    bitRange=7-7
  919                           ;`IOCON_PIO1_4.OD`          0x40044094,        4, base=16,    bitRange=10-10
  920                           
  921                           IOCON_PIO1_11            EQU  0x40044098
  922                           ;`IOCON_PIO1_11.FUNC`       0x40044098,        4, base=16,    bitRange=0-2
  923                           ;`IOCON_PIO1_11.MODE`       0x40044098,        4, base=16,    bitRange=3-4
  924                           ;`IOCON_PIO1_11.HYS`        0x40044098,        4, base=16,    bitRange=5-5
  925                           ;`IOCON_PIO1_11.ADMODE`     0x40044098,        4, base=16,    bitRange=7-7
  926                           ;`IOCON_PIO1_11.OD`         0x40044098,        4, base=16,    bitRange=10-10
  927                           
  928                           IOCON_PIO3_2             EQU  0x4004409C
  929                           ;`IOCON_PIO3_2.FUNC`        0x4004409C,        4, base=16,    bitRange=0-2
  930                           ;`IOCON_PIO3_2.MODE`        0x4004409C,        4, base=16,    bitRange=3-4
  931                           ;`IOCON_PIO3_2.HYS`         0x4004409C,        4, base=16,    bitRange=5-5
  932                           ;`IOCON_PIO3_2.OD`          0x4004409C,        4, base=16,    bitRange=10-10
  933                           
  934                           IOCON_PIO1_5             EQU  0x400440A0
  935                           ;`IOCON_PIO1_5.FUNC`        0x400440A0,        4, base=16,    bitRange=0-2
  936                           ;`IOCON_PIO1_5.MODE`        0x400440A0,        4, base=16,    bitRange=3-4
  937                           ;`IOCON_PIO1_5.HYS`         0x400440A0,        4, base=16,    bitRange=5-5
  938                           ;`IOCON_PIO1_5.OD`          0x400440A0,        4, base=16,    bitRange=10-10
  939                           
  940                           IOCON_PIO1_6             EQU  0x400440A4
  941                           ;`IOCON_PIO1_6.FUNC`        0x400440A4,        4, base=16,    bitRange=0-2
  942                           ;`IOCON_PIO1_6.MODE`        0x400440A4,        4, base=16,    bitRange=3-4
  943                           ;`IOCON_PIO1_6.HYS`         0x400440A4,        4, base=16,    bitRange=5-5
  944                           ;`IOCON_PIO1_6.OD`          0x400440A4,        4, base=16,    bitRange=10-10
  945                           
  946                           IOCON_PIO1_7             EQU  0x400440A8
  947                           ;`IOCON_PIO1_7.FUNC`        0x400440A8,        4, base=16,    bitRange=0-2
  948                           ;`IOCON_PIO1_7.MODE`        0x400440A8,        4, base=16,    bitRange=3-4
  949                           ;`IOCON_PIO1_7.HYS`         0x400440A8,        4, base=16,    bitRange=5-5
  950                           ;`IOCON_PIO1_7.OD`          0x400440A8,        4, base=16,    bitRange=10-10
  951                           
  952                           IOCON_PIO3_3             EQU  0x400440AC
  953                           ;`IOCON_PIO3_3.FUNC`        0x400440AC,        4, base=16,    bitRange=0-2
  954                           ;`IOCON_PIO3_3.MODE`        0x400440AC,        4, base=16,    bitRange=3-4
  955                           ;`IOCON_PIO3_3.HYS`         0x400440AC,        4, base=16,    bitRange=5-5
  956                           ;`IOCON_PIO3_3.OD`          0x400440AC,        4, base=16,    bitRange=10-10
  957                           
  958                           IOCON_SCK_LOC            EQU  0x400440B0
  959                           ;`IOCON_SCK_LOC.SCKLOC`     0x400440B0,        4, base=16,    bitRange=0-1
  960                           
  961                           IOCON_DSR_LOC            EQU  0x400440B4
  962                           ;`IOCON_DSR_LOC.DSRLOC`     0x400440B4,        4, base=16,    bitRange=0-1
  963                           
  964                           IOCON_DCD_LOC            EQU  0x400440B8
  965                           ;`IOCON_DCD_LOC.DCDLOC`     0x400440B8,        4, base=16,    bitRange=0-1
  966                           
  967                           IOCON_RI_LOC             EQU  0x400440BC
  968                           ;`IOCON_RI_LOC.RILOC`       0x400440BC,        4, base=16,    bitRange=0-1
  969                           
  970                           
  971                           ;
  972                           ;               CPIO
  973                           ;
  974                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
  975                           ;     ----                        ----      -------     --------  ----------- --------
  976                           
  977                           
  978                           GPIO0DATA                EQU  0x50003FFC
  979                           ;`GPIO0DATA.P0_0`           0x50003FFC,        4, base=16,    bitRange=0-0
  980                           ;`GPIO0DATA.P0_1`           0x50003FFC,        4, base=16,    bitRange=1-1
  981                           ;`GPIO0DATA.P0_2`           0x50003FFC,        4, base=16,    bitRange=2-2
  982                           ;`GPIO0DATA.P0_3`           0x50003FFC,        4, base=16,    bitRange=3-3
  983                           ;`GPIO0DATA.P0_4`           0x50003FFC,        4, base=16,    bitRange=4-4
  984                           ;`GPIO0DATA.P0_5`           0x50003FFC,        4, base=16,    bitRange=5-5
  985                           ;`GPIO0DATA.P0_6`           0x50003FFC,        4, base=16,    bitRange=6-6
  986                           ;`GPIO0DATA.P0_7`           0x50003FFC,        4, base=16,    bitRange=7-7
  987                           ;`GPIO0DATA.P0_8`           0x50003FFC,        4, base=16,    bitRange=8-8
  988                           ;`GPIO0DATA.P0_9`           0x50003FFC,        4, base=16,    bitRange=9-9
  989                           ;`GPIO0DATA.P0_10`          0x50003FFC,        4, base=16,    bitRange=10-10
  990                           ;`GPIO0DATA.P0_11`          0x50003FFC,        4, base=16,    bitRange=11-11
  991                           
  992                           GPIO0DATA0               EQU  0x50003FFC
  993                           ;`GPIO0DATA0.P0_0`          0x50003FFC,        1, base=16,    bitRange=0-0
  994                           ;`GPIO0DATA0.P0_1`          0x50003FFC,        1, base=16,    bitRange=1-1
  995                           ;`GPIO0DATA0.P0_2`          0x50003FFC,        1, base=16,    bitRange=2-2
  996                           ;`GPIO0DATA0.P0_3`          0x50003FFC,        1, base=16,    bitRange=3-3
  997                           ;`GPIO0DATA0.P0_4`          0x50003FFC,        1, base=16,    bitRange=4-4
  998                           ;`GPIO0DATA0.P0_5`          0x50003FFC,        1, base=16,    bitRange=5-5
  999                           ;`GPIO0DATA0.P0_6`          0x50003FFC,        1, base=16,    bitRange=6-6
 1000                           ;`GPIO0DATA0.P0_7`          0x50003FFC,        1, base=16,    bitRange=7-7
 1001                           
 1002                           GPIO0DATA1               EQU  0x50003FFD
 1003                           ;`GPIO0DATA1.P0_8`          0x50003FFD,        1, base=16,    bitRange=0-0
 1004                           ;`GPIO0DATA1.P0_9`          0x50003FFD,        1, base=16,    bitRange=1-1
 1005                           ;`GPIO0DATA1.P0_10`         0x50003FFD,        1, base=16,    bitRange=2-2
 1006                           ;`GPIO0DATA1.P0_11`         0x50003FFD,        1, base=16,    bitRange=3-3
 1007                           
 1008                           GPIO0DATAL               EQU  0x50003FFC
 1009                           ;`GPIO0DATAL.P0_0`          0x50003FFC,        2, base=16,    bitRange=0-0
 1010                           ;`GPIO0DATAL.P0_1`          0x50003FFC,        2, base=16,    bitRange=1-1
 1011                           ;`GPIO0DATAL.P0_2`          0x50003FFC,        2, base=16,    bitRange=2-2
 1012                           ;`GPIO0DATAL.P0_3`          0x50003FFC,        2, base=16,    bitRange=3-3
 1013                           ;`GPIO0DATAL.P0_4`          0x50003FFC,        2, base=16,    bitRange=4-4
 1014                           ;`GPIO0DATAL.P0_5`          0x50003FFC,        2, base=16,    bitRange=5-5
 1015                           ;`GPIO0DATAL.P0_6`          0x50003FFC,        2, base=16,    bitRange=6-6
 1016                           ;`GPIO0DATAL.P0_7`          0x50003FFC,        2, base=16,    bitRange=7-7
 1017                           ;`GPIO0DATAL.P0_8`          0x50003FFC,        2, base=16,    bitRange=8-8
 1018                           ;`GPIO0DATAL.P0_9`          0x50003FFC,        2, base=16,    bitRange=9-9
 1019                           ;`GPIO0DATAL.P0_10`         0x50003FFC,        2, base=16,    bitRange=10-10
 1020                           ;`GPIO0DATAL.P0_11`         0x50003FFC,        2, base=16,    bitRange=11-11
 1021                           
 1022                           GPIO0DIR                 EQU  0x50008000
 1023                           ;`GPIO0DIR.P0_0`            0x50008000,        4, base=16,    bitRange=0-0
 1024                           ;`GPIO0DIR.P0_1`            0x50008000,        4, base=16,    bitRange=1-1
 1025                           ;`GPIO0DIR.P0_2`            0x50008000,        4, base=16,    bitRange=2-2
 1026                           ;`GPIO0DIR.P0_3`            0x50008000,        4, base=16,    bitRange=3-3
 1027                           ;`GPIO0DIR.P0_4`            0x50008000,        4, base=16,    bitRange=4-4
 1028                           ;`GPIO0DIR.P0_5`            0x50008000,        4, base=16,    bitRange=5-5
 1029                           ;`GPIO0DIR.P0_6`            0x50008000,        4, base=16,    bitRange=6-6
 1030                           ;`GPIO0DIR.P0_7`            0x50008000,        4, base=16,    bitRange=7-7
 1031                           ;`GPIO0DIR.P0_8`            0x50008000,        4, base=16,    bitRange=8-8
 1032                           ;`GPIO0DIR.P0_9`            0x50008000,        4, base=16,    bitRange=9-9
 1033                           ;`GPIO0DIR.P0_10`           0x50008000,        4, base=16,    bitRange=10-10
 1034                           ;`GPIO0DIR.P0_11`           0x50008000,        4, base=16,    bitRange=11-11
 1035                           
 1036                           GPIO0DIR0                EQU  0x50008000
 1037                           ;`GPIO0DIR0.P0_0`           0x50008000,        1, base=16,    bitRange=0-0
 1038                           ;`GPIO0DIR0.P0_1`           0x50008000,        1, base=16,    bitRange=1-1
 1039                           ;`GPIO0DIR0.P0_2`           0x50008000,        1, base=16,    bitRange=2-2
 1040                           ;`GPIO0DIR0.P0_3`           0x50008000,        1, base=16,    bitRange=3-3
 1041                           ;`GPIO0DIR0.P0_4`           0x50008000,        1, base=16,    bitRange=4-4
 1042                           ;`GPIO0DIR0.P0_5`           0x50008000,        1, base=16,    bitRange=5-5
 1043                           ;`GPIO0DIR0.P0_6`           0x50008000,        1, base=16,    bitRange=6-6
 1044                           ;`GPIO0DIR0.P0_7`           0x50008000,        1, base=16,    bitRange=7-7
 1045                           
 1046                           GPIO0DIR1                EQU  0x50008001
 1047                           ;`GPIO0DIR1.P0_8`           0x50008001,        1, base=16,    bitRange=0-0
 1048                           ;`GPIO0DIR1.P0_9`           0x50008001,        1, base=16,    bitRange=1-1
 1049                           ;`GPIO0DIR1.P0_10`          0x50008001,        1, base=16,    bitRange=2-2
 1050                           ;`GPIO0DIR1.P0_11`          0x50008001,        1, base=16,    bitRange=3-3
 1051                           
 1052                           GPIO0DIRL                EQU  0x50008000
 1053                           ;`GPIO0DIRL.P0_0`           0x50008000,        2, base=16,    bitRange=0-0
 1054                           ;`GPIO0DIRL.P0_1`           0x50008000,        2, base=16,    bitRange=1-1
 1055                           ;`GPIO0DIRL.P0_2`           0x50008000,        2, base=16,    bitRange=2-2
 1056                           ;`GPIO0DIRL.P0_3`           0x50008000,        2, base=16,    bitRange=3-3
 1057                           ;`GPIO0DIRL.P0_4`           0x50008000,        2, base=16,    bitRange=4-4
 1058                           ;`GPIO0DIRL.P0_5`           0x50008000,        2, base=16,    bitRange=5-5
 1059                           ;`GPIO0DIRL.P0_6`           0x50008000,        2, base=16,    bitRange=6-6
 1060                           ;`GPIO0DIRL.P0_7`           0x50008000,        2, base=16,    bitRange=7-7
 1061                           ;`GPIO0DIRL.P0_8`           0x50008000,        2, base=16,    bitRange=8-8
 1062                           ;`GPIO0DIRL.P0_9`           0x50008000,        2, base=16,    bitRange=9-9
 1063                           ;`GPIO0DIRL.P0_10`          0x50008000,        2, base=16,    bitRange=10-10
 1064                           ;`GPIO0DIRL.P0_11`          0x50008000,        2, base=16,    bitRange=11-11
 1065                           
 1066                           GPIO0IS                  EQU  0x50008004
 1067                           ;`GPIO0IS.P0_0`             0x50008004,        4, base=16,    bitRange=0-0
 1068                           ;`GPIO0IS.P0_1`             0x50008004,        4, base=16,    bitRange=1-1
 1069                           ;`GPIO0IS.P0_2`             0x50008004,        4, base=16,    bitRange=2-2
 1070                           ;`GPIO0IS.P0_3`             0x50008004,        4, base=16,    bitRange=3-3
 1071                           ;`GPIO0IS.P0_4`             0x50008004,        4, base=16,    bitRange=4-4
 1072                           ;`GPIO0IS.P0_5`             0x50008004,        4, base=16,    bitRange=5-5
 1073                           ;`GPIO0IS.P0_6`             0x50008004,        4, base=16,    bitRange=6-6
 1074                           ;`GPIO0IS.P0_7`             0x50008004,        4, base=16,    bitRange=7-7
 1075                           ;`GPIO0IS.P0_8`             0x50008004,        4, base=16,    bitRange=8-8
 1076                           ;`GPIO0IS.P0_9`             0x50008004,        4, base=16,    bitRange=9-9
 1077                           ;`GPIO0IS.P0_10`            0x50008004,        4, base=16,    bitRange=10-10
 1078                           ;`GPIO0IS.P0_11`            0x50008004,        4, base=16,    bitRange=11-11
 1079                           
 1080                           GPIO0IS0                 EQU  0x50008004
 1081                           ;`GPIO0IS0.P0_0`            0x50008004,        1, base=16,    bitRange=0-0
 1082                           ;`GPIO0IS0.P0_1`            0x50008004,        1, base=16,    bitRange=1-1
 1083                           ;`GPIO0IS0.P0_2`            0x50008004,        1, base=16,    bitRange=2-2
 1084                           ;`GPIO0IS0.P0_3`            0x50008004,        1, base=16,    bitRange=3-3
 1085                           ;`GPIO0IS0.P0_4`            0x50008004,        1, base=16,    bitRange=4-4
 1086                           ;`GPIO0IS0.P0_5`            0x50008004,        1, base=16,    bitRange=5-5
 1087                           ;`GPIO0IS0.P0_6`            0x50008004,        1, base=16,    bitRange=6-6
 1088                           ;`GPIO0IS0.P0_7`            0x50008004,        1, base=16,    bitRange=7-7
 1089                           
 1090                           GPIO0IS1                 EQU  0x50008005
 1091                           ;`GPIO0IS1.P0_8`            0x50008005,        1, base=16,    bitRange=0-0
 1092                           ;`GPIO0IS1.P0_9`            0x50008005,        1, base=16,    bitRange=1-1
 1093                           ;`GPIO0IS1.P0_10`           0x50008005,        1, base=16,    bitRange=2-2
 1094                           ;`GPIO0IS1.P0_11`           0x50008005,        1, base=16,    bitRange=3-3
 1095                           
 1096                           GPIO0ISL                 EQU  0x50008004
 1097                           ;`GPIO0ISL.P0_0`            0x50008004,        2, base=16,    bitRange=0-0
 1098                           ;`GPIO0ISL.P0_1`            0x50008004,        2, base=16,    bitRange=1-1
 1099                           ;`GPIO0ISL.P0_2`            0x50008004,        2, base=16,    bitRange=2-2
 1100                           ;`GPIO0ISL.P0_3`            0x50008004,        2, base=16,    bitRange=3-3
 1101                           ;`GPIO0ISL.P0_4`            0x50008004,        2, base=16,    bitRange=4-4
 1102                           ;`GPIO0ISL.P0_5`            0x50008004,        2, base=16,    bitRange=5-5
 1103                           ;`GPIO0ISL.P0_6`            0x50008004,        2, base=16,    bitRange=6-6
 1104                           ;`GPIO0ISL.P0_7`            0x50008004,        2, base=16,    bitRange=7-7
 1105                           ;`GPIO0ISL.P0_8`            0x50008004,        2, base=16,    bitRange=8-8
 1106                           ;`GPIO0ISL.P0_9`            0x50008004,        2, base=16,    bitRange=9-9
 1107                           ;`GPIO0ISL.P0_10`           0x50008004,        2, base=16,    bitRange=10-10
 1108                           ;`GPIO0ISL.P0_11`           0x50008004,        2, base=16,    bitRange=11-11
 1109                           
 1110                           GPIO0IBE                 EQU  0x50008008
 1111                           ;`GPIO0IBE.P0_0`            0x50008008,        4, base=16,    bitRange=0-0
 1112                           ;`GPIO0IBE.P0_1`            0x50008008,        4, base=16,    bitRange=1-1
 1113                           ;`GPIO0IBE.P0_2`            0x50008008,        4, base=16,    bitRange=2-2
 1114                           ;`GPIO0IBE.P0_3`            0x50008008,        4, base=16,    bitRange=3-3
 1115                           ;`GPIO0IBE.P0_4`            0x50008008,        4, base=16,    bitRange=4-4
 1116                           ;`GPIO0IBE.P0_5`            0x50008008,        4, base=16,    bitRange=5-5
 1117                           ;`GPIO0IBE.P0_6`            0x50008008,        4, base=16,    bitRange=6-6
 1118                           ;`GPIO0IBE.P0_7`            0x50008008,        4, base=16,    bitRange=7-7
 1119                           ;`GPIO0IBE.P0_8`            0x50008008,        4, base=16,    bitRange=8-8
 1120                           ;`GPIO0IBE.P0_9`            0x50008008,        4, base=16,    bitRange=9-9
 1121                           ;`GPIO0IBE.P0_10`           0x50008008,        4, base=16,    bitRange=10-10
 1122                           ;`GPIO0IBE.P0_11`           0x50008008,        4, base=16,    bitRange=11-11
 1123                           
 1124                           GPIO0IBE0                EQU  0x50008008
 1125                           ;`GPIO0IBE0.P0_0`           0x50008008,        1, base=16,    bitRange=0-0
 1126                           ;`GPIO0IBE0.P0_1`           0x50008008,        1, base=16,    bitRange=1-1
 1127                           ;`GPIO0IBE0.P0_2`           0x50008008,        1, base=16,    bitRange=2-2
 1128                           ;`GPIO0IBE0.P0_3`           0x50008008,        1, base=16,    bitRange=3-3
 1129                           ;`GPIO0IBE0.P0_4`           0x50008008,        1, base=16,    bitRange=4-4
 1130                           ;`GPIO0IBE0.P0_5`           0x50008008,        1, base=16,    bitRange=5-5
 1131                           ;`GPIO0IBE0.P0_6`           0x50008008,        1, base=16,    bitRange=6-6
 1132                           ;`GPIO0IBE0.P0_7`           0x50008008,        1, base=16,    bitRange=7-7
 1133                           
 1134                           GPIO0IBE1                EQU  0x50008009
 1135                           ;`GPIO0IBE1.P0_8`           0x50008009,        1, base=16,    bitRange=0-0
 1136                           ;`GPIO0IBE1.P0_9`           0x50008009,        1, base=16,    bitRange=1-1
 1137                           ;`GPIO0IBE1.P0_10`          0x50008009,        1, base=16,    bitRange=2-2
 1138                           ;`GPIO0IBE1.P0_11`          0x50008009,        1, base=16,    bitRange=3-3
 1139                           
 1140                           GPIO0IBEL                EQU  0x50008008
 1141                           ;`GPIO0IBEL.P0_0`           0x50008008,        2, base=16,    bitRange=0-0
 1142                           ;`GPIO0IBEL.P0_1`           0x50008008,        2, base=16,    bitRange=1-1
 1143                           ;`GPIO0IBEL.P0_2`           0x50008008,        2, base=16,    bitRange=2-2
 1144                           ;`GPIO0IBEL.P0_3`           0x50008008,        2, base=16,    bitRange=3-3
 1145                           ;`GPIO0IBEL.P0_4`           0x50008008,        2, base=16,    bitRange=4-4
 1146                           ;`GPIO0IBEL.P0_5`           0x50008008,        2, base=16,    bitRange=5-5
 1147                           ;`GPIO0IBEL.P0_6`           0x50008008,        2, base=16,    bitRange=6-6
 1148                           ;`GPIO0IBEL.P0_7`           0x50008008,        2, base=16,    bitRange=7-7
 1149                           ;`GPIO0IBEL.P0_8`           0x50008008,        2, base=16,    bitRange=8-8
 1150                           ;`GPIO0IBEL.P0_9`           0x50008008,        2, base=16,    bitRange=9-9
 1151                           ;`GPIO0IBEL.P0_10`          0x50008008,        2, base=16,    bitRange=10-10
 1152                           ;`GPIO0IBEL.P0_11`          0x50008008,        2, base=16,    bitRange=11-11
 1153                           
 1154                           GPIO0IEV                 EQU  0x5000800C
 1155                           ;`GPIO0IEV.P0_0`            0x5000800C,        4, base=16,    bitRange=0-0
 1156                           ;`GPIO0IEV.P0_1`            0x5000800C,        4, base=16,    bitRange=1-1
 1157                           ;`GPIO0IEV.P0_2`            0x5000800C,        4, base=16,    bitRange=2-2
 1158                           ;`GPIO0IEV.P0_3`            0x5000800C,        4, base=16,    bitRange=3-3
 1159                           ;`GPIO0IEV.P0_4`            0x5000800C,        4, base=16,    bitRange=4-4
 1160                           ;`GPIO0IEV.P0_5`            0x5000800C,        4, base=16,    bitRange=5-5
 1161                           ;`GPIO0IEV.P0_6`            0x5000800C,        4, base=16,    bitRange=6-6
 1162                           ;`GPIO0IEV.P0_7`            0x5000800C,        4, base=16,    bitRange=7-7
 1163                           ;`GPIO0IEV.P0_8`            0x5000800C,        4, base=16,    bitRange=8-8
 1164                           ;`GPIO0IEV.P0_9`            0x5000800C,        4, base=16,    bitRange=9-9
 1165                           ;`GPIO0IEV.P0_10`           0x5000800C,        4, base=16,    bitRange=10-10
 1166                           ;`GPIO0IEV.P0_11`           0x5000800C,        4, base=16,    bitRange=11-11
 1167                           
 1168                           GPIO0IEV0                EQU  0x5000800C
 1169                           ;`GPIO0IEV0.P0_0`           0x5000800C,        1, base=16,    bitRange=0-0
 1170                           ;`GPIO0IEV0.P0_1`           0x5000800C,        1, base=16,    bitRange=1-1
 1171                           ;`GPIO0IEV0.P0_2`           0x5000800C,        1, base=16,    bitRange=2-2
 1172                           ;`GPIO0IEV0.P0_3`           0x5000800C,        1, base=16,    bitRange=3-3
 1173                           ;`GPIO0IEV0.P0_4`           0x5000800C,        1, base=16,    bitRange=4-4
 1174                           ;`GPIO0IEV0.P0_5`           0x5000800C,        1, base=16,    bitRange=5-5
 1175                           ;`GPIO0IEV0.P0_6`           0x5000800C,        1, base=16,    bitRange=6-6
 1176                           ;`GPIO0IEV0.P0_7`           0x5000800C,        1, base=16,    bitRange=7-7
 1177                           
 1178                           GPIO0IEV1                EQU  0x5000800D
 1179                           ;`GPIO0IEV1.P0_8`           0x5000800D,        1, base=16,    bitRange=0-0
 1180                           ;`GPIO0IEV1.P0_9`           0x5000800D,        1, base=16,    bitRange=1-1
 1181                           ;`GPIO0IEV1.P0_10`          0x5000800D,        1, base=16,    bitRange=2-2
 1182                           ;`GPIO0IEV1.P0_11`          0x5000800D,        1, base=16,    bitRange=3-3
 1183                           
 1184                           GPIO0IEVL                EQU  0x5000800C
 1185                           ;`GPIO0IEVL.P0_0`           0x5000800C,        2, base=16,    bitRange=0-0
 1186                           ;`GPIO0IEVL.P0_1`           0x5000800C,        2, base=16,    bitRange=1-1
 1187                           ;`GPIO0IEVL.P0_2`           0x5000800C,        2, base=16,    bitRange=2-2
 1188                           ;`GPIO0IEVL.P0_3`           0x5000800C,        2, base=16,    bitRange=3-3
 1189                           ;`GPIO0IEVL.P0_4`           0x5000800C,        2, base=16,    bitRange=4-4
 1190                           ;`GPIO0IEVL.P0_5`           0x5000800C,        2, base=16,    bitRange=5-5
 1191                           ;`GPIO0IEVL.P0_6`           0x5000800C,        2, base=16,    bitRange=6-6
 1192                           ;`GPIO0IEVL.P0_7`           0x5000800C,        2, base=16,    bitRange=7-7
 1193                           ;`GPIO0IEVL.P0_8`           0x5000800C,        2, base=16,    bitRange=8-8
 1194                           ;`GPIO0IEVL.P0_9`           0x5000800C,        2, base=16,    bitRange=9-9
 1195                           ;`GPIO0IEVL.P0_10`          0x5000800C,        2, base=16,    bitRange=10-10
 1196                           ;`GPIO0IEVL.P0_11`          0x5000800C,        2, base=16,    bitRange=11-11
 1197                           
 1198                           GPIO0IE                  EQU  0x50008010
 1199                           ;`GPIO0IE.P0_0`             0x50008010,        4, base=16,    bitRange=0-0
 1200                           ;`GPIO0IE.P0_1`             0x50008010,        4, base=16,    bitRange=1-1
 1201                           ;`GPIO0IE.P0_2`             0x50008010,        4, base=16,    bitRange=2-2
 1202                           ;`GPIO0IE.P0_3`             0x50008010,        4, base=16,    bitRange=3-3
 1203                           ;`GPIO0IE.P0_4`             0x50008010,        4, base=16,    bitRange=4-4
 1204                           ;`GPIO0IE.P0_5`             0x50008010,        4, base=16,    bitRange=5-5
 1205                           ;`GPIO0IE.P0_6`             0x50008010,        4, base=16,    bitRange=6-6
 1206                           ;`GPIO0IE.P0_7`             0x50008010,        4, base=16,    bitRange=7-7
 1207                           ;`GPIO0IE.P0_8`             0x50008010,        4, base=16,    bitRange=8-8
 1208                           ;`GPIO0IE.P0_9`             0x50008010,        4, base=16,    bitRange=9-9
 1209                           ;`GPIO0IE.P0_10`            0x50008010,        4, base=16,    bitRange=10-10
 1210                           ;`GPIO0IE.P0_11`            0x50008010,        4, base=16,    bitRange=11-11
 1211                           
 1212                           GPIO0IE0                 EQU  0x50008010
 1213                           ;`GPIO0IE0.P0_0`            0x50008010,        1, base=16,    bitRange=0-0
 1214                           ;`GPIO0IE0.P0_1`            0x50008010,        1, base=16,    bitRange=1-1
 1215                           ;`GPIO0IE0.P0_2`            0x50008010,        1, base=16,    bitRange=2-2
 1216                           ;`GPIO0IE0.P0_3`            0x50008010,        1, base=16,    bitRange=3-3
 1217                           ;`GPIO0IE0.P0_4`            0x50008010,        1, base=16,    bitRange=4-4
 1218                           ;`GPIO0IE0.P0_5`            0x50008010,        1, base=16,    bitRange=5-5
 1219                           ;`GPIO0IE0.P0_6`            0x50008010,        1, base=16,    bitRange=6-6
 1220                           ;`GPIO0IE0.P0_7`            0x50008010,        1, base=16,    bitRange=7-7
 1221                           
 1222                           GPIO0IE1                 EQU  0x50008011
 1223                           ;`GPIO0IE1.P0_8`            0x50008011,        1, base=16,    bitRange=0-0
 1224                           ;`GPIO0IE1.P0_9`            0x50008011,        1, base=16,    bitRange=1-1
 1225                           ;`GPIO0IE1.P0_10`           0x50008011,        1, base=16,    bitRange=2-2
 1226                           ;`GPIO0IE1.P0_11`           0x50008011,        1, base=16,    bitRange=3-3
 1227                           
 1228                           GPIO0IEL                 EQU  0x50008010
 1229                           ;`GPIO0IEL.P0_0`            0x50008010,        2, base=16,    bitRange=0-0
 1230                           ;`GPIO0IEL.P0_1`            0x50008010,        2, base=16,    bitRange=1-1
 1231                           ;`GPIO0IEL.P0_2`            0x50008010,        2, base=16,    bitRange=2-2
 1232                           ;`GPIO0IEL.P0_3`            0x50008010,        2, base=16,    bitRange=3-3
 1233                           ;`GPIO0IEL.P0_4`            0x50008010,        2, base=16,    bitRange=4-4
 1234                           ;`GPIO0IEL.P0_5`            0x50008010,        2, base=16,    bitRange=5-5
 1235                           ;`GPIO0IEL.P0_6`            0x50008010,        2, base=16,    bitRange=6-6
 1236                           ;`GPIO0IEL.P0_7`            0x50008010,        2, base=16,    bitRange=7-7
 1237                           ;`GPIO0IEL.P0_8`            0x50008010,        2, base=16,    bitRange=8-8
 1238                           ;`GPIO0IEL.P0_9`            0x50008010,        2, base=16,    bitRange=9-9
 1239                           ;`GPIO0IEL.P0_10`           0x50008010,        2, base=16,    bitRange=10-10
 1240                           ;`GPIO0IEL.P0_11`           0x50008010,        2, base=16,    bitRange=11-11
 1241                           
 1242                           GPIO0RIS                 EQU  0x50008014
 1243                           ;`GPIO0RIS.P0_0`            0x50008014,        4, base=16,    bitRange=0-0
 1244                           ;`GPIO0RIS.P0_1`            0x50008014,        4, base=16,    bitRange=1-1
 1245                           ;`GPIO0RIS.P0_2`            0x50008014,        4, base=16,    bitRange=2-2
 1246                           ;`GPIO0RIS.P0_3`            0x50008014,        4, base=16,    bitRange=3-3
 1247                           ;`GPIO0RIS.P0_4`            0x50008014,        4, base=16,    bitRange=4-4
 1248                           ;`GPIO0RIS.P0_5`            0x50008014,        4, base=16,    bitRange=5-5
 1249                           ;`GPIO0RIS.P0_6`            0x50008014,        4, base=16,    bitRange=6-6
 1250                           ;`GPIO0RIS.P0_7`            0x50008014,        4, base=16,    bitRange=7-7
 1251                           ;`GPIO0RIS.P0_8`            0x50008014,        4, base=16,    bitRange=8-8
 1252                           ;`GPIO0RIS.P0_9`            0x50008014,        4, base=16,    bitRange=9-9
 1253                           ;`GPIO0RIS.P0_10`           0x50008014,        4, base=16,    bitRange=10-10
 1254                           ;`GPIO0RIS.P0_11`           0x50008014,        4, base=16,    bitRange=11-11
 1255                           
 1256                           GPIO0RIS0                EQU  0x50008014
 1257                           ;`GPIO0RIS0.P0_0`           0x50008014,        1, base=16,    bitRange=0-0
 1258                           ;`GPIO0RIS0.P0_1`           0x50008014,        1, base=16,    bitRange=1-1
 1259                           ;`GPIO0RIS0.P0_2`           0x50008014,        1, base=16,    bitRange=2-2
 1260                           ;`GPIO0RIS0.P0_3`           0x50008014,        1, base=16,    bitRange=3-3
 1261                           ;`GPIO0RIS0.P0_4`           0x50008014,        1, base=16,    bitRange=4-4
 1262                           ;`GPIO0RIS0.P0_5`           0x50008014,        1, base=16,    bitRange=5-5
 1263                           ;`GPIO0RIS0.P0_6`           0x50008014,        1, base=16,    bitRange=6-6
 1264                           ;`GPIO0RIS0.P0_7`           0x50008014,        1, base=16,    bitRange=7-7
 1265                           
 1266                           GPIO0RIS1                EQU  0x50008015
 1267                           ;`GPIO0RIS1.P0_8`           0x50008015,        1, base=16,    bitRange=0-0
 1268                           ;`GPIO0RIS1.P0_9`           0x50008015,        1, base=16,    bitRange=1-1
 1269                           ;`GPIO0RIS1.P0_10`          0x50008015,        1, base=16,    bitRange=2-2
 1270                           ;`GPIO0RIS1.P0_11`          0x50008015,        1, base=16,    bitRange=3-3
 1271                           
 1272                           GPIO0RISL                EQU  0x50008014
 1273                           ;`GPIO0RISL.P0_0`           0x50008014,        2, base=16,    bitRange=0-0
 1274                           ;`GPIO0RISL.P0_1`           0x50008014,        2, base=16,    bitRange=1-1
 1275                           ;`GPIO0RISL.P0_2`           0x50008014,        2, base=16,    bitRange=2-2
 1276                           ;`GPIO0RISL.P0_3`           0x50008014,        2, base=16,    bitRange=3-3
 1277                           ;`GPIO0RISL.P0_4`           0x50008014,        2, base=16,    bitRange=4-4
 1278                           ;`GPIO0RISL.P0_5`           0x50008014,        2, base=16,    bitRange=5-5
 1279                           ;`GPIO0RISL.P0_6`           0x50008014,        2, base=16,    bitRange=6-6
 1280                           ;`GPIO0RISL.P0_7`           0x50008014,        2, base=16,    bitRange=7-7
 1281                           ;`GPIO0RISL.P0_8`           0x50008014,        2, base=16,    bitRange=8-8
 1282                           ;`GPIO0RISL.P0_9`           0x50008014,        2, base=16,    bitRange=9-9
 1283                           ;`GPIO0RISL.P0_10`          0x50008014,        2, base=16,    bitRange=10-10
 1284                           ;`GPIO0RISL.P0_11`          0x50008014,        2, base=16,    bitRange=11-11
 1285                           
 1286                           GPIO0MIS                 EQU  0x50008018
 1287                           ;`GPIO0MIS.P0_0`            0x50008018,        4, base=16,    bitRange=0-0
 1288                           ;`GPIO0MIS.P0_1`            0x50008018,        4, base=16,    bitRange=1-1
 1289                           ;`GPIO0MIS.P0_2`            0x50008018,        4, base=16,    bitRange=2-2
 1290                           ;`GPIO0MIS.P0_3`            0x50008018,        4, base=16,    bitRange=3-3
 1291                           ;`GPIO0MIS.P0_4`            0x50008018,        4, base=16,    bitRange=4-4
 1292                           ;`GPIO0MIS.P0_5`            0x50008018,        4, base=16,    bitRange=5-5
 1293                           ;`GPIO0MIS.P0_6`            0x50008018,        4, base=16,    bitRange=6-6
 1294                           ;`GPIO0MIS.P0_7`            0x50008018,        4, base=16,    bitRange=7-7
 1295                           ;`GPIO0MIS.P0_8`            0x50008018,        4, base=16,    bitRange=8-8
 1296                           ;`GPIO0MIS.P0_9`            0x50008018,        4, base=16,    bitRange=9-9
 1297                           ;`GPIO0MIS.P0_10`           0x50008018,        4, base=16,    bitRange=10-10
 1298                           ;`GPIO0MIS.P0_11`           0x50008018,        4, base=16,    bitRange=11-11
 1299                           
 1300                           GPIO0MIS0                EQU  0x50008018
 1301                           ;`GPIO0MIS0.P0_0`           0x50008018,        1, base=16,    bitRange=0-0
 1302                           ;`GPIO0MIS0.P0_1`           0x50008018,        1, base=16,    bitRange=1-1
 1303                           ;`GPIO0MIS0.P0_2`           0x50008018,        1, base=16,    bitRange=2-2
 1304                           ;`GPIO0MIS0.P0_3`           0x50008018,        1, base=16,    bitRange=3-3
 1305                           ;`GPIO0MIS0.P0_4`           0x50008018,        1, base=16,    bitRange=4-4
 1306                           ;`GPIO0MIS0.P0_5`           0x50008018,        1, base=16,    bitRange=5-5
 1307                           ;`GPIO0MIS0.P0_6`           0x50008018,        1, base=16,    bitRange=6-6
 1308                           ;`GPIO0MIS0.P0_7`           0x50008018,        1, base=16,    bitRange=7-7
 1309                           
 1310                           GPIO0MIS1                EQU  0x50008019
 1311                           ;`GPIO0MIS1.P0_8`           0x50008019,        1, base=16,    bitRange=0-0
 1312                           ;`GPIO0MIS1.P0_9`           0x50008019,        1, base=16,    bitRange=1-1
 1313                           ;`GPIO0MIS1.P0_10`          0x50008019,        1, base=16,    bitRange=2-2
 1314                           ;`GPIO0MIS1.P0_11`          0x50008019,        1, base=16,    bitRange=3-3
 1315                           
 1316                           GPIO0MISL                EQU  0x50008018
 1317                           ;`GPIO0MISL.P0_0`           0x50008018,        2, base=16,    bitRange=0-0
 1318                           ;`GPIO0MISL.P0_1`           0x50008018,        2, base=16,    bitRange=1-1
 1319                           ;`GPIO0MISL.P0_2`           0x50008018,        2, base=16,    bitRange=2-2
 1320                           ;`GPIO0MISL.P0_3`           0x50008018,        2, base=16,    bitRange=3-3
 1321                           ;`GPIO0MISL.P0_4`           0x50008018,        2, base=16,    bitRange=4-4
 1322                           ;`GPIO0MISL.P0_5`           0x50008018,        2, base=16,    bitRange=5-5
 1323                           ;`GPIO0MISL.P0_6`           0x50008018,        2, base=16,    bitRange=6-6
 1324                           ;`GPIO0MISL.P0_7`           0x50008018,        2, base=16,    bitRange=7-7
 1325                           ;`GPIO0MISL.P0_8`           0x50008018,        2, base=16,    bitRange=8-8
 1326                           ;`GPIO0MISL.P0_9`           0x50008018,        2, base=16,    bitRange=9-9
 1327                           ;`GPIO0MISL.P0_10`          0x50008018,        2, base=16,    bitRange=10-10
 1328                           ;`GPIO0MISL.P0_11`          0x50008018,        2, base=16,    bitRange=11-11
 1329                           
 1330                           GPIO0IC                  EQU  0x5000801C
 1331                           
 1332                           GPIO1DATA                EQU  0x50013FFC
 1333                           ;`GPIO1DATA.P1_0`           0x50013FFC,        4, base=16,    bitRange=0-0
 1334                           ;`GPIO1DATA.P1_1`           0x50013FFC,        4, base=16,    bitRange=1-1
 1335                           ;`GPIO1DATA.P1_2`           0x50013FFC,        4, base=16,    bitRange=2-2
 1336                           ;`GPIO1DATA.P1_3`           0x50013FFC,        4, base=16,    bitRange=3-3
 1337                           ;`GPIO1DATA.P1_4`           0x50013FFC,        4, base=16,    bitRange=4-4
 1338                           ;`GPIO1DATA.P1_5`           0x50013FFC,        4, base=16,    bitRange=5-5
 1339                           ;`GPIO1DATA.P1_6`           0x50013FFC,        4, base=16,    bitRange=6-6
 1340                           ;`GPIO1DATA.P1_7`           0x50013FFC,        4, base=16,    bitRange=7-7
 1341                           ;`GPIO1DATA.P1_8`           0x50013FFC,        4, base=16,    bitRange=8-8
 1342                           ;`GPIO1DATA.P1_9`           0x50013FFC,        4, base=16,    bitRange=9-9
 1343                           ;`GPIO1DATA.P1_10`          0x50013FFC,        4, base=16,    bitRange=10-10
 1344                           ;`GPIO1DATA.P1_11`          0x50013FFC,        4, base=16,    bitRange=11-11
 1345                           
 1346                           GPIO1DATA0               EQU  0x50013FFC
 1347                           ;`GPIO1DATA0.P1_0`          0x50013FFC,        1, base=16,    bitRange=0-0
 1348                           ;`GPIO1DATA0.P1_1`          0x50013FFC,        1, base=16,    bitRange=1-1
 1349                           ;`GPIO1DATA0.P1_2`          0x50013FFC,        1, base=16,    bitRange=2-2
 1350                           ;`GPIO1DATA0.P1_3`          0x50013FFC,        1, base=16,    bitRange=3-3
 1351                           ;`GPIO1DATA0.P1_4`          0x50013FFC,        1, base=16,    bitRange=4-4
 1352                           ;`GPIO1DATA0.P1_5`          0x50013FFC,        1, base=16,    bitRange=5-5
 1353                           ;`GPIO1DATA0.P1_6`          0x50013FFC,        1, base=16,    bitRange=6-6
 1354                           ;`GPIO1DATA0.P1_7`          0x50013FFC,        1, base=16,    bitRange=7-7
 1355                           
 1356                           GPIO1DATA1               EQU  0x50013FFD
 1357                           ;`GPIO1DATA1.P1_8`          0x50013FFD,        1, base=16,    bitRange=0-0
 1358                           ;`GPIO1DATA1.P1_9`          0x50013FFD,        1, base=16,    bitRange=1-1
 1359                           ;`GPIO1DATA1.P1_10`         0x50013FFD,        1, base=16,    bitRange=2-2
 1360                           ;`GPIO1DATA1.P1_11`         0x50013FFD,        1, base=16,    bitRange=3-3
 1361                           
 1362                           GPIO1DATAL               EQU  0x50013FFC
 1363                           ;`GPIO1DATAL.P1_0`          0x50013FFC,        2, base=16,    bitRange=0-0
 1364                           ;`GPIO1DATAL.P1_1`          0x50013FFC,        2, base=16,    bitRange=1-1
 1365                           ;`GPIO1DATAL.P1_2`          0x50013FFC,        2, base=16,    bitRange=2-2
 1366                           ;`GPIO1DATAL.P1_3`          0x50013FFC,        2, base=16,    bitRange=3-3
 1367                           ;`GPIO1DATAL.P1_4`          0x50013FFC,        2, base=16,    bitRange=4-4
 1368                           ;`GPIO1DATAL.P1_5`          0x50013FFC,        2, base=16,    bitRange=5-5
 1369                           ;`GPIO1DATAL.P1_6`          0x50013FFC,        2, base=16,    bitRange=6-6
 1370                           ;`GPIO1DATAL.P1_7`          0x50013FFC,        2, base=16,    bitRange=7-7
 1371                           ;`GPIO1DATAL.P1_8`          0x50013FFC,        2, base=16,    bitRange=8-8
 1372                           ;`GPIO1DATAL.P1_9`          0x50013FFC,        2, base=16,    bitRange=9-9
 1373                           ;`GPIO1DATAL.P1_10`         0x50013FFC,        2, base=16,    bitRange=10-10
 1374                           ;`GPIO1DATAL.P1_11`         0x50013FFC,        2, base=16,    bitRange=11-11
 1375                           
 1376                           GPIO1DIR                 EQU  0x50018000
 1377                           ;`GPIO1DIR.P1_0`            0x50018000,        4, base=16,    bitRange=0-0
 1378                           ;`GPIO1DIR.P1_1`            0x50018000,        4, base=16,    bitRange=1-1
 1379                           ;`GPIO1DIR.P1_2`            0x50018000,        4, base=16,    bitRange=2-2
 1380                           ;`GPIO1DIR.P1_3`            0x50018000,        4, base=16,    bitRange=3-3
 1381                           ;`GPIO1DIR.P1_4`            0x50018000,        4, base=16,    bitRange=4-4
 1382                           ;`GPIO1DIR.P1_5`            0x50018000,        4, base=16,    bitRange=5-5
 1383                           ;`GPIO1DIR.P1_6`            0x50018000,        4, base=16,    bitRange=6-6
 1384                           ;`GPIO1DIR.P1_7`            0x50018000,        4, base=16,    bitRange=7-7
 1385                           ;`GPIO1DIR.P1_8`            0x50018000,        4, base=16,    bitRange=8-8
 1386                           ;`GPIO1DIR.P1_9`            0x50018000,        4, base=16,    bitRange=9-9
 1387                           ;`GPIO1DIR.P1_10`           0x50018000,        4, base=16,    bitRange=10-10
 1388                           ;`GPIO1DIR.P1_11`           0x50018000,        4, base=16,    bitRange=11-11
 1389                           
 1390                           GPIO1DIR0                EQU  0x50018000
 1391                           ;`GPIO1DIR0.P1_0`           0x50018000,        1, base=16,    bitRange=0-0
 1392                           ;`GPIO1DIR0.P1_1`           0x50018000,        1, base=16,    bitRange=1-1
 1393                           ;`GPIO1DIR0.P1_2`           0x50018000,        1, base=16,    bitRange=2-2
 1394                           ;`GPIO1DIR0.P1_3`           0x50018000,        1, base=16,    bitRange=3-3
 1395                           ;`GPIO1DIR0.P1_4`           0x50018000,        1, base=16,    bitRange=4-4
 1396                           ;`GPIO1DIR0.P1_5`           0x50018000,        1, base=16,    bitRange=5-5
 1397                           ;`GPIO1DIR0.P1_6`           0x50018000,        1, base=16,    bitRange=6-6
 1398                           ;`GPIO1DIR0.P1_7`           0x50018000,        1, base=16,    bitRange=7-7
 1399                           
 1400                           GPIO1DIR1                EQU  0x50018001
 1401                           ;`GPIO1DIR1.P1_8`           0x50018001,        1, base=16,    bitRange=0-0
 1402                           ;`GPIO1DIR1.P1_9`           0x50018001,        1, base=16,    bitRange=1-1
 1403                           ;`GPIO1DIR1.P1_10`          0x50018001,        1, base=16,    bitRange=2-2
 1404                           ;`GPIO1DIR1.P1_11`          0x50018001,        1, base=16,    bitRange=3-3
 1405                           
 1406                           GPIO1DIRL                EQU  0x50018000
 1407                           ;`GPIO1DIRL.P1_0`           0x50018000,        2, base=16,    bitRange=0-0
 1408                           ;`GPIO1DIRL.P1_1`           0x50018000,        2, base=16,    bitRange=1-1
 1409                           ;`GPIO1DIRL.P1_2`           0x50018000,        2, base=16,    bitRange=2-2
 1410                           ;`GPIO1DIRL.P1_3`           0x50018000,        2, base=16,    bitRange=3-3
 1411                           ;`GPIO1DIRL.P1_4`           0x50018000,        2, base=16,    bitRange=4-4
 1412                           ;`GPIO1DIRL.P1_5`           0x50018000,        2, base=16,    bitRange=5-5
 1413                           ;`GPIO1DIRL.P1_6`           0x50018000,        2, base=16,    bitRange=6-6
 1414                           ;`GPIO1DIRL.P1_7`           0x50018000,        2, base=16,    bitRange=7-7
 1415                           ;`GPIO1DIRL.P1_8`           0x50018000,        2, base=16,    bitRange=8-8
 1416                           ;`GPIO1DIRL.P1_9`           0x50018000,        2, base=16,    bitRange=9-9
 1417                           ;`GPIO1DIRL.P1_10`          0x50018000,        2, base=16,    bitRange=10-10
 1418                           ;`GPIO1DIRL.P1_11`          0x50018000,        2, base=16,    bitRange=11-11
 1419                           
 1420                           GPIO1IS                  EQU  0x50018004
 1421                           ;`GPIO1IS.P1_0`             0x50018004,        4, base=16,    bitRange=0-0
 1422                           ;`GPIO1IS.P1_1`             0x50018004,        4, base=16,    bitRange=1-1
 1423                           ;`GPIO1IS.P1_2`             0x50018004,        4, base=16,    bitRange=2-2
 1424                           ;`GPIO1IS.P1_3`             0x50018004,        4, base=16,    bitRange=3-3
 1425                           ;`GPIO1IS.P1_4`             0x50018004,        4, base=16,    bitRange=4-4
 1426                           ;`GPIO1IS.P1_5`             0x50018004,        4, base=16,    bitRange=5-5
 1427                           ;`GPIO1IS.P1_6`             0x50018004,        4, base=16,    bitRange=6-6
 1428                           ;`GPIO1IS.P1_7`             0x50018004,        4, base=16,    bitRange=7-7
 1429                           ;`GPIO1IS.P1_8`             0x50018004,        4, base=16,    bitRange=8-8
 1430                           ;`GPIO1IS.P1_9`             0x50018004,        4, base=16,    bitRange=9-9
 1431                           ;`GPIO1IS.P1_10`            0x50018004,        4, base=16,    bitRange=10-10
 1432                           ;`GPIO1IS.P1_11`            0x50018004,        4, base=16,    bitRange=11-11
 1433                           
 1434                           GPIO1IS0                 EQU  0x50018004
 1435                           ;`GPIO1IS0.P1_0`            0x50018004,        1, base=16,    bitRange=0-0
 1436                           ;`GPIO1IS0.P1_1`            0x50018004,        1, base=16,    bitRange=1-1
 1437                           ;`GPIO1IS0.P1_2`            0x50018004,        1, base=16,    bitRange=2-2
 1438                           ;`GPIO1IS0.P1_3`            0x50018004,        1, base=16,    bitRange=3-3
 1439                           ;`GPIO1IS0.P1_4`            0x50018004,        1, base=16,    bitRange=4-4
 1440                           ;`GPIO1IS0.P1_5`            0x50018004,        1, base=16,    bitRange=5-5
 1441                           ;`GPIO1IS0.P1_6`            0x50018004,        1, base=16,    bitRange=6-6
 1442                           ;`GPIO1IS0.P1_7`            0x50018004,        1, base=16,    bitRange=7-7
 1443                           
 1444                           GPIO1IS1                 EQU  0x50018005
 1445                           ;`GPIO1IS1.P1_8`            0x50018005,        1, base=16,    bitRange=0-0
 1446                           ;`GPIO1IS1.P1_9`            0x50018005,        1, base=16,    bitRange=1-1
 1447                           ;`GPIO1IS1.P1_10`           0x50018005,        1, base=16,    bitRange=2-2
 1448                           ;`GPIO1IS1.P1_11`           0x50018005,        1, base=16,    bitRange=3-3
 1449                           
 1450                           GPIO1ISL                 EQU  0x50018004
 1451                           ;`GPIO1ISL.P1_0`            0x50018004,        2, base=16,    bitRange=0-0
 1452                           ;`GPIO1ISL.P1_1`            0x50018004,        2, base=16,    bitRange=1-1
 1453                           ;`GPIO1ISL.P1_2`            0x50018004,        2, base=16,    bitRange=2-2
 1454                           ;`GPIO1ISL.P1_3`            0x50018004,        2, base=16,    bitRange=3-3
 1455                           ;`GPIO1ISL.P1_4`            0x50018004,        2, base=16,    bitRange=4-4
 1456                           ;`GPIO1ISL.P1_5`            0x50018004,        2, base=16,    bitRange=5-5
 1457                           ;`GPIO1ISL.P1_6`            0x50018004,        2, base=16,    bitRange=6-6
 1458                           ;`GPIO1ISL.P1_7`            0x50018004,        2, base=16,    bitRange=7-7
 1459                           ;`GPIO1ISL.P1_8`            0x50018004,        2, base=16,    bitRange=8-8
 1460                           ;`GPIO1ISL.P1_9`            0x50018004,        2, base=16,    bitRange=9-9
 1461                           ;`GPIO1ISL.P1_10`           0x50018004,        2, base=16,    bitRange=10-10
 1462                           ;`GPIO1ISL.P1_11`           0x50018004,        2, base=16,    bitRange=11-11
 1463                           
 1464                           GPIO1IBE                 EQU  0x50018008
 1465                           ;`GPIO1IBE.P1_0`            0x50018008,        4, base=16,    bitRange=0-0
 1466                           ;`GPIO1IBE.P1_1`            0x50018008,        4, base=16,    bitRange=1-1
 1467                           ;`GPIO1IBE.P1_2`            0x50018008,        4, base=16,    bitRange=2-2
 1468                           ;`GPIO1IBE.P1_3`            0x50018008,        4, base=16,    bitRange=3-3
 1469                           ;`GPIO1IBE.P1_4`            0x50018008,        4, base=16,    bitRange=4-4
 1470                           ;`GPIO1IBE.P1_5`            0x50018008,        4, base=16,    bitRange=5-5
 1471                           ;`GPIO1IBE.P1_6`            0x50018008,        4, base=16,    bitRange=6-6
 1472                           ;`GPIO1IBE.P1_7`            0x50018008,        4, base=16,    bitRange=7-7
 1473                           ;`GPIO1IBE.P1_8`            0x50018008,        4, base=16,    bitRange=8-8
 1474                           ;`GPIO1IBE.P1_9`            0x50018008,        4, base=16,    bitRange=9-9
 1475                           ;`GPIO1IBE.P1_10`           0x50018008,        4, base=16,    bitRange=10-10
 1476                           ;`GPIO1IBE.P1_11`           0x50018008,        4, base=16,    bitRange=11-11
 1477                           
 1478                           GPIO1IBE0                EQU  0x50018008
 1479                           ;`GPIO1IBE0.P1_0`           0x50018008,        1, base=16,    bitRange=0-0
 1480                           ;`GPIO1IBE0.P1_1`           0x50018008,        1, base=16,    bitRange=1-1
 1481                           ;`GPIO1IBE0.P1_2`           0x50018008,        1, base=16,    bitRange=2-2
 1482                           ;`GPIO1IBE0.P1_3`           0x50018008,        1, base=16,    bitRange=3-3
 1483                           ;`GPIO1IBE0.P1_4`           0x50018008,        1, base=16,    bitRange=4-4
 1484                           ;`GPIO1IBE0.P1_5`           0x50018008,        1, base=16,    bitRange=5-5
 1485                           ;`GPIO1IBE0.P1_6`           0x50018008,        1, base=16,    bitRange=6-6
 1486                           ;`GPIO1IBE0.P1_7`           0x50018008,        1, base=16,    bitRange=7-7
 1487                           
 1488                           GPIO1IBE1                EQU  0x50018009
 1489                           ;`GPIO1IBE1.P1_8`           0x50018009,        1, base=16,    bitRange=0-0
 1490                           ;`GPIO1IBE1.P1_9`           0x50018009,        1, base=16,    bitRange=1-1
 1491                           ;`GPIO1IBE1.P1_10`          0x50018009,        1, base=16,    bitRange=2-2
 1492                           ;`GPIO1IBE1.P1_11`          0x50018009,        1, base=16,    bitRange=3-3
 1493                           
 1494                           GPIO1IBEL                EQU  0x50018008
 1495                           ;`GPIO1IBEL.P1_0`           0x50018008,        2, base=16,    bitRange=0-0
 1496                           ;`GPIO1IBEL.P1_1`           0x50018008,        2, base=16,    bitRange=1-1
 1497                           ;`GPIO1IBEL.P1_2`           0x50018008,        2, base=16,    bitRange=2-2
 1498                           ;`GPIO1IBEL.P1_3`           0x50018008,        2, base=16,    bitRange=3-3
 1499                           ;`GPIO1IBEL.P1_4`           0x50018008,        2, base=16,    bitRange=4-4
 1500                           ;`GPIO1IBEL.P1_5`           0x50018008,        2, base=16,    bitRange=5-5
 1501                           ;`GPIO1IBEL.P1_6`           0x50018008,        2, base=16,    bitRange=6-6
 1502                           ;`GPIO1IBEL.P1_7`           0x50018008,        2, base=16,    bitRange=7-7
 1503                           ;`GPIO1IBEL.P1_8`           0x50018008,        2, base=16,    bitRange=8-8
 1504                           ;`GPIO1IBEL.P1_9`           0x50018008,        2, base=16,    bitRange=9-9
 1505                           ;`GPIO1IBEL.P1_10`          0x50018008,        2, base=16,    bitRange=10-10
 1506                           ;`GPIO1IBEL.P1_11`          0x50018008,        2, base=16,    bitRange=11-11
 1507                           
 1508                           GPIO1IEV                 EQU  0x5001800C
 1509                           ;`GPIO1IEV.P1_0`            0x5001800C,        4, base=16,    bitRange=0-0
 1510                           ;`GPIO1IEV.P1_1`            0x5001800C,        4, base=16,    bitRange=1-1
 1511                           ;`GPIO1IEV.P1_2`            0x5001800C,        4, base=16,    bitRange=2-2
 1512                           ;`GPIO1IEV.P1_3`            0x5001800C,        4, base=16,    bitRange=3-3
 1513                           ;`GPIO1IEV.P1_4`            0x5001800C,        4, base=16,    bitRange=4-4
 1514                           ;`GPIO1IEV.P1_5`            0x5001800C,        4, base=16,    bitRange=5-5
 1515                           ;`GPIO1IEV.P1_6`            0x5001800C,        4, base=16,    bitRange=6-6
 1516                           ;`GPIO1IEV.P1_7`            0x5001800C,        4, base=16,    bitRange=7-7
 1517                           ;`GPIO1IEV.P1_8`            0x5001800C,        4, base=16,    bitRange=8-8
 1518                           ;`GPIO1IEV.P1_9`            0x5001800C,        4, base=16,    bitRange=9-9
 1519                           ;`GPIO1IEV.P1_10`           0x5001800C,        4, base=16,    bitRange=10-10
 1520                           ;`GPIO1IEV.P1_11`           0x5001800C,        4, base=16,    bitRange=11-11
 1521                           
 1522                           GPIO1IEV0                EQU  0x5001800C
 1523                           ;`GPIO1IEV0.P1_0`           0x5001800C,        1, base=16,    bitRange=0-0
 1524                           ;`GPIO1IEV0.P1_1`           0x5001800C,        1, base=16,    bitRange=1-1
 1525                           ;`GPIO1IEV0.P1_2`           0x5001800C,        1, base=16,    bitRange=2-2
 1526                           ;`GPIO1IEV0.P1_3`           0x5001800C,        1, base=16,    bitRange=3-3
 1527                           ;`GPIO1IEV0.P1_4`           0x5001800C,        1, base=16,    bitRange=4-4
 1528                           ;`GPIO1IEV0.P1_5`           0x5001800C,        1, base=16,    bitRange=5-5
 1529                           ;`GPIO1IEV0.P1_6`           0x5001800C,        1, base=16,    bitRange=6-6
 1530                           ;`GPIO1IEV0.P1_7`           0x5001800C,        1, base=16,    bitRange=7-7
 1531                           
 1532                           GPIO1IEV1                EQU  0x5001800D
 1533                           ;`GPIO1IEV1.P1_8`           0x5001800D,        1, base=16,    bitRange=0-0
 1534                           ;`GPIO1IEV1.P1_9`           0x5001800D,        1, base=16,    bitRange=1-1
 1535                           ;`GPIO1IEV1.P1_10`          0x5001800D,        1, base=16,    bitRange=2-2
 1536                           ;`GPIO1IEV1.P1_11`          0x5001800D,        1, base=16,    bitRange=3-3
 1537                           
 1538                           GPIO1IEVL                EQU  0x5001800C
 1539                           ;`GPIO1IEVL.P1_0`           0x5001800C,        2, base=16,    bitRange=0-0
 1540                           ;`GPIO1IEVL.P1_1`           0x5001800C,        2, base=16,    bitRange=1-1
 1541                           ;`GPIO1IEVL.P1_2`           0x5001800C,        2, base=16,    bitRange=2-2
 1542                           ;`GPIO1IEVL.P1_3`           0x5001800C,        2, base=16,    bitRange=3-3
 1543                           ;`GPIO1IEVL.P1_4`           0x5001800C,        2, base=16,    bitRange=4-4
 1544                           ;`GPIO1IEVL.P1_5`           0x5001800C,        2, base=16,    bitRange=5-5
 1545                           ;`GPIO1IEVL.P1_6`           0x5001800C,        2, base=16,    bitRange=6-6
 1546                           ;`GPIO1IEVL.P1_7`           0x5001800C,        2, base=16,    bitRange=7-7
 1547                           ;`GPIO1IEVL.P1_8`           0x5001800C,        2, base=16,    bitRange=8-8
 1548                           ;`GPIO1IEVL.P1_9`           0x5001800C,        2, base=16,    bitRange=9-9
 1549                           ;`GPIO1IEVL.P1_10`          0x5001800C,        2, base=16,    bitRange=10-10
 1550                           ;`GPIO1IEVL.P1_11`          0x5001800C,        2, base=16,    bitRange=11-11
 1551                           
 1552                           GPIO1IE                  EQU  0x50018010
 1553                           ;`GPIO1IE.P1_0`             0x50018010,        4, base=16,    bitRange=0-0
 1554                           ;`GPIO1IE.P1_1`             0x50018010,        4, base=16,    bitRange=1-1
 1555                           ;`GPIO1IE.P1_2`             0x50018010,        4, base=16,    bitRange=2-2
 1556                           ;`GPIO1IE.P1_3`             0x50018010,        4, base=16,    bitRange=3-3
 1557                           ;`GPIO1IE.P1_4`             0x50018010,        4, base=16,    bitRange=4-4
 1558                           ;`GPIO1IE.P1_5`             0x50018010,        4, base=16,    bitRange=5-5
 1559                           ;`GPIO1IE.P1_6`             0x50018010,        4, base=16,    bitRange=6-6
 1560                           ;`GPIO1IE.P1_7`             0x50018010,        4, base=16,    bitRange=7-7
 1561                           ;`GPIO1IE.P1_8`             0x50018010,        4, base=16,    bitRange=8-8
 1562                           ;`GPIO1IE.P1_9`             0x50018010,        4, base=16,    bitRange=9-9
 1563                           ;`GPIO1IE.P1_10`            0x50018010,        4, base=16,    bitRange=10-10
 1564                           ;`GPIO1IE.P1_11`            0x50018010,        4, base=16,    bitRange=11-11
 1565                           
 1566                           GPIO1IE0                 EQU  0x50018010
 1567                           ;`GPIO1IE0.P1_0`            0x50018010,        1, base=16,    bitRange=0-0
 1568                           ;`GPIO1IE0.P1_1`            0x50018010,        1, base=16,    bitRange=1-1
 1569                           ;`GPIO1IE0.P1_2`            0x50018010,        1, base=16,    bitRange=2-2
 1570                           ;`GPIO1IE0.P1_3`            0x50018010,        1, base=16,    bitRange=3-3
 1571                           ;`GPIO1IE0.P1_4`            0x50018010,        1, base=16,    bitRange=4-4
 1572                           ;`GPIO1IE0.P1_5`            0x50018010,        1, base=16,    bitRange=5-5
 1573                           ;`GPIO1IE0.P1_6`            0x50018010,        1, base=16,    bitRange=6-6
 1574                           ;`GPIO1IE0.P1_7`            0x50018010,        1, base=16,    bitRange=7-7
 1575                           
 1576                           GPIO1IE1                 EQU  0x50018011
 1577                           ;`GPIO1IE1.P1_8`            0x50018011,        1, base=16,    bitRange=0-0
 1578                           ;`GPIO1IE1.P1_9`            0x50018011,        1, base=16,    bitRange=1-1
 1579                           ;`GPIO1IE1.P1_10`           0x50018011,        1, base=16,    bitRange=2-2
 1580                           ;`GPIO1IE1.P1_11`           0x50018011,        1, base=16,    bitRange=3-3
 1581                           
 1582                           GPIO1IEL                 EQU  0x50018010
 1583                           ;`GPIO1IEL.P1_0`            0x50018010,        2, base=16,    bitRange=0-0
 1584                           ;`GPIO1IEL.P1_1`            0x50018010,        2, base=16,    bitRange=1-1
 1585                           ;`GPIO1IEL.P1_2`            0x50018010,        2, base=16,    bitRange=2-2
 1586                           ;`GPIO1IEL.P1_3`            0x50018010,        2, base=16,    bitRange=3-3
 1587                           ;`GPIO1IEL.P1_4`            0x50018010,        2, base=16,    bitRange=4-4
 1588                           ;`GPIO1IEL.P1_5`            0x50018010,        2, base=16,    bitRange=5-5
 1589                           ;`GPIO1IEL.P1_6`            0x50018010,        2, base=16,    bitRange=6-6
 1590                           ;`GPIO1IEL.P1_7`            0x50018010,        2, base=16,    bitRange=7-7
 1591                           ;`GPIO1IEL.P1_8`            0x50018010,        2, base=16,    bitRange=8-8
 1592                           ;`GPIO1IEL.P1_9`            0x50018010,        2, base=16,    bitRange=9-9
 1593                           ;`GPIO1IEL.P1_10`           0x50018010,        2, base=16,    bitRange=10-10
 1594                           ;`GPIO1IEL.P1_11`           0x50018010,        2, base=16,    bitRange=11-11
 1595                           
 1596                           GPIO1RIS                 EQU  0x50018014
 1597                           ;`GPIO1RIS.P1_0`            0x50018014,        4, base=16,    bitRange=0-0
 1598                           ;`GPIO1RIS.P1_1`            0x50018014,        4, base=16,    bitRange=1-1
 1599                           ;`GPIO1RIS.P1_2`            0x50018014,        4, base=16,    bitRange=2-2
 1600                           ;`GPIO1RIS.P1_3`            0x50018014,        4, base=16,    bitRange=3-3
 1601                           ;`GPIO1RIS.P1_4`            0x50018014,        4, base=16,    bitRange=4-4
 1602                           ;`GPIO1RIS.P1_5`            0x50018014,        4, base=16,    bitRange=5-5
 1603                           ;`GPIO1RIS.P1_6`            0x50018014,        4, base=16,    bitRange=6-6
 1604                           ;`GPIO1RIS.P1_7`            0x50018014,        4, base=16,    bitRange=7-7
 1605                           ;`GPIO1RIS.P1_8`            0x50018014,        4, base=16,    bitRange=8-8
 1606                           ;`GPIO1RIS.P1_9`            0x50018014,        4, base=16,    bitRange=9-9
 1607                           ;`GPIO1RIS.P1_10`           0x50018014,        4, base=16,    bitRange=10-10
 1608                           ;`GPIO1RIS.P1_11`           0x50018014,        4, base=16,    bitRange=11-11
 1609                           
 1610                           GPIO1RIS0                EQU  0x50018014
 1611                           ;`GPIO1RIS0.P1_0`           0x50018014,        1, base=16,    bitRange=0-0
 1612                           ;`GPIO1RIS0.P1_1`           0x50018014,        1, base=16,    bitRange=1-1
 1613                           ;`GPIO1RIS0.P1_2`           0x50018014,        1, base=16,    bitRange=2-2
 1614                           ;`GPIO1RIS0.P1_3`           0x50018014,        1, base=16,    bitRange=3-3
 1615                           ;`GPIO1RIS0.P1_4`           0x50018014,        1, base=16,    bitRange=4-4
 1616                           ;`GPIO1RIS0.P1_5`           0x50018014,        1, base=16,    bitRange=5-5
 1617                           ;`GPIO1RIS0.P1_6`           0x50018014,        1, base=16,    bitRange=6-6
 1618                           ;`GPIO1RIS0.P1_7`           0x50018014,        1, base=16,    bitRange=7-7
 1619                           
 1620                           GPIO1RIS1                EQU  0x50018015
 1621                           ;`GPIO1RIS1.P1_8`           0x50018015,        1, base=16,    bitRange=0-0
 1622                           ;`GPIO1RIS1.P1_9`           0x50018015,        1, base=16,    bitRange=1-1
 1623                           ;`GPIO1RIS1.P1_10`          0x50018015,        1, base=16,    bitRange=2-2
 1624                           ;`GPIO1RIS1.P1_11`          0x50018015,        1, base=16,    bitRange=3-3
 1625                           
 1626                           GPIO1RISL                EQU  0x50018014
 1627                           ;`GPIO1RISL.P1_0`           0x50018014,        2, base=16,    bitRange=0-0
 1628                           ;`GPIO1RISL.P1_1`           0x50018014,        2, base=16,    bitRange=1-1
 1629                           ;`GPIO1RISL.P1_2`           0x50018014,        2, base=16,    bitRange=2-2
 1630                           ;`GPIO1RISL.P1_3`           0x50018014,        2, base=16,    bitRange=3-3
 1631                           ;`GPIO1RISL.P1_4`           0x50018014,        2, base=16,    bitRange=4-4
 1632                           ;`GPIO1RISL.P1_5`           0x50018014,        2, base=16,    bitRange=5-5
 1633                           ;`GPIO1RISL.P1_6`           0x50018014,        2, base=16,    bitRange=6-6
 1634                           ;`GPIO1RISL.P1_7`           0x50018014,        2, base=16,    bitRange=7-7
 1635                           ;`GPIO1RISL.P1_8`           0x50018014,        2, base=16,    bitRange=8-8
 1636                           ;`GPIO1RISL.P1_9`           0x50018014,        2, base=16,    bitRange=9-9
 1637                           ;`GPIO1RISL.P1_10`          0x50018014,        2, base=16,    bitRange=10-10
 1638                           ;`GPIO1RISL.P1_11`          0x50018014,        2, base=16,    bitRange=11-11
 1639                           
 1640                           GPIO1MIS                 EQU  0x50018018
 1641                           ;`GPIO1MIS.P1_0`            0x50018018,        4, base=16,    bitRange=0-0
 1642                           ;`GPIO1MIS.P1_1`            0x50018018,        4, base=16,    bitRange=1-1
 1643                           ;`GPIO1MIS.P1_2`            0x50018018,        4, base=16,    bitRange=2-2
 1644                           ;`GPIO1MIS.P1_3`            0x50018018,        4, base=16,    bitRange=3-3
 1645                           ;`GPIO1MIS.P1_4`            0x50018018,        4, base=16,    bitRange=4-4
 1646                           ;`GPIO1MIS.P1_5`            0x50018018,        4, base=16,    bitRange=5-5
 1647                           ;`GPIO1MIS.P1_6`            0x50018018,        4, base=16,    bitRange=6-6
 1648                           ;`GPIO1MIS.P1_7`            0x50018018,        4, base=16,    bitRange=7-7
 1649                           ;`GPIO1MIS.P1_8`            0x50018018,        4, base=16,    bitRange=8-8
 1650                           ;`GPIO1MIS.P1_9`            0x50018018,        4, base=16,    bitRange=9-9
 1651                           ;`GPIO1MIS.P1_10`           0x50018018,        4, base=16,    bitRange=10-10
 1652                           ;`GPIO1MIS.P1_11`           0x50018018,        4, base=16,    bitRange=11-11
 1653                           
 1654                           GPIO1MIS0                EQU  0x50018018
 1655                           ;`GPIO1MIS0.P1_0`           0x50018018,        1, base=16,    bitRange=0-0
 1656                           ;`GPIO1MIS0.P1_1`           0x50018018,        1, base=16,    bitRange=1-1
 1657                           ;`GPIO1MIS0.P1_2`           0x50018018,        1, base=16,    bitRange=2-2
 1658                           ;`GPIO1MIS0.P1_3`           0x50018018,        1, base=16,    bitRange=3-3
 1659                           ;`GPIO1MIS0.P1_4`           0x50018018,        1, base=16,    bitRange=4-4
 1660                           ;`GPIO1MIS0.P1_5`           0x50018018,        1, base=16,    bitRange=5-5
 1661                           ;`GPIO1MIS0.P1_6`           0x50018018,        1, base=16,    bitRange=6-6
 1662                           ;`GPIO1MIS0.P1_7`           0x50018018,        1, base=16,    bitRange=7-7
 1663                           
 1664                           GPIO1MIS1                EQU  0x50018019
 1665                           ;`GPIO1MIS1.P1_8`           0x50018019,        1, base=16,    bitRange=0-0
 1666                           ;`GPIO1MIS1.P1_9`           0x50018019,        1, base=16,    bitRange=1-1
 1667                           ;`GPIO1MIS1.P1_10`          0x50018019,        1, base=16,    bitRange=2-2
 1668                           ;`GPIO1MIS1.P1_11`          0x50018019,        1, base=16,    bitRange=3-3
 1669                           
 1670                           GPIO1MISL                EQU  0x50018018
 1671                           ;`GPIO1MISL.P1_0`           0x50018018,        2, base=16,    bitRange=0-0
 1672                           ;`GPIO1MISL.P1_1`           0x50018018,        2, base=16,    bitRange=1-1
 1673                           ;`GPIO1MISL.P1_2`           0x50018018,        2, base=16,    bitRange=2-2
 1674                           ;`GPIO1MISL.P1_3`           0x50018018,        2, base=16,    bitRange=3-3
 1675                           ;`GPIO1MISL.P1_4`           0x50018018,        2, base=16,    bitRange=4-4
 1676                           ;`GPIO1MISL.P1_5`           0x50018018,        2, base=16,    bitRange=5-5
 1677                           ;`GPIO1MISL.P1_6`           0x50018018,        2, base=16,    bitRange=6-6
 1678                           ;`GPIO1MISL.P1_7`           0x50018018,        2, base=16,    bitRange=7-7
 1679                           ;`GPIO1MISL.P1_8`           0x50018018,        2, base=16,    bitRange=8-8
 1680                           ;`GPIO1MISL.P1_9`           0x50018018,        2, base=16,    bitRange=9-9
 1681                           ;`GPIO1MISL.P1_10`          0x50018018,        2, base=16,    bitRange=10-10
 1682                           ;`GPIO1MISL.P1_11`          0x50018018,        2, base=16,    bitRange=11-11
 1683                           
 1684                           GPIO1IC                  EQU  0x5001801C
 1685                           
 1686                           GPIO2DATA                EQU  0x50023FFC
 1687                           ;`GPIO2DATA.P2_0`           0x50023FFC,        4, base=16,    bitRange=0-0
 1688                           ;`GPIO2DATA.P2_1`           0x50023FFC,        4, base=16,    bitRange=1-1
 1689                           ;`GPIO2DATA.P2_2`           0x50023FFC,        4, base=16,    bitRange=2-2
 1690                           ;`GPIO2DATA.P2_3`           0x50023FFC,        4, base=16,    bitRange=3-3
 1691                           ;`GPIO2DATA.P2_4`           0x50023FFC,        4, base=16,    bitRange=4-4
 1692                           ;`GPIO2DATA.P2_5`           0x50023FFC,        4, base=16,    bitRange=5-5
 1693                           ;`GPIO2DATA.P2_6`           0x50023FFC,        4, base=16,    bitRange=6-6
 1694                           ;`GPIO2DATA.P2_7`           0x50023FFC,        4, base=16,    bitRange=7-7
 1695                           ;`GPIO2DATA.P2_8`           0x50023FFC,        4, base=16,    bitRange=8-8
 1696                           ;`GPIO2DATA.P2_9`           0x50023FFC,        4, base=16,    bitRange=9-9
 1697                           ;`GPIO2DATA.P2_10`          0x50023FFC,        4, base=16,    bitRange=10-10
 1698                           ;`GPIO2DATA.P2_11`          0x50023FFC,        4, base=16,    bitRange=11-11
 1699                           
 1700                           GPIO2DATA0               EQU  0x50023FFC
 1701                           ;`GPIO2DATA0.P2_0`          0x50023FFC,        1, base=16,    bitRange=0-0
 1702                           ;`GPIO2DATA0.P2_1`          0x50023FFC,        1, base=16,    bitRange=1-1
 1703                           ;`GPIO2DATA0.P2_2`          0x50023FFC,        1, base=16,    bitRange=2-2
 1704                           ;`GPIO2DATA0.P2_3`          0x50023FFC,        1, base=16,    bitRange=3-3
 1705                           ;`GPIO2DATA0.P2_4`          0x50023FFC,        1, base=16,    bitRange=4-4
 1706                           ;`GPIO2DATA0.P2_5`          0x50023FFC,        1, base=16,    bitRange=5-5
 1707                           ;`GPIO2DATA0.P2_6`          0x50023FFC,        1, base=16,    bitRange=6-6
 1708                           ;`GPIO2DATA0.P2_7`          0x50023FFC,        1, base=16,    bitRange=7-7
 1709                           
 1710                           GPIO2DATA1               EQU  0x50023FFD
 1711                           ;`GPIO2DATA1.P2_8`          0x50023FFD,        1, base=16,    bitRange=0-0
 1712                           ;`GPIO2DATA1.P2_9`          0x50023FFD,        1, base=16,    bitRange=1-1
 1713                           ;`GPIO2DATA1.P2_10`         0x50023FFD,        1, base=16,    bitRange=2-2
 1714                           ;`GPIO2DATA1.P2_11`         0x50023FFD,        1, base=16,    bitRange=3-3
 1715                           
 1716                           GPIO2DATAL               EQU  0x50023FFC
 1717                           ;`GPIO2DATAL.P2_0`          0x50023FFC,        2, base=16,    bitRange=0-0
 1718                           ;`GPIO2DATAL.P2_1`          0x50023FFC,        2, base=16,    bitRange=1-1
 1719                           ;`GPIO2DATAL.P2_2`          0x50023FFC,        2, base=16,    bitRange=2-2
 1720                           ;`GPIO2DATAL.P2_3`          0x50023FFC,        2, base=16,    bitRange=3-3
 1721                           ;`GPIO2DATAL.P2_4`          0x50023FFC,        2, base=16,    bitRange=4-4
 1722                           ;`GPIO2DATAL.P2_5`          0x50023FFC,        2, base=16,    bitRange=5-5
 1723                           ;`GPIO2DATAL.P2_6`          0x50023FFC,        2, base=16,    bitRange=6-6
 1724                           ;`GPIO2DATAL.P2_7`          0x50023FFC,        2, base=16,    bitRange=7-7
 1725                           ;`GPIO2DATAL.P2_8`          0x50023FFC,        2, base=16,    bitRange=8-8
 1726                           ;`GPIO2DATAL.P2_9`          0x50023FFC,        2, base=16,    bitRange=9-9
 1727                           ;`GPIO2DATAL.P2_10`         0x50023FFC,        2, base=16,    bitRange=10-10
 1728                           ;`GPIO2DATAL.P2_11`         0x50023FFC,        2, base=16,    bitRange=11-11
 1729                           
 1730                           GPIO2DIR                 EQU  0x50028000
 1731                           ;`GPIO2DIR.P2_0`            0x50028000,        4, base=16,    bitRange=0-0
 1732                           ;`GPIO2DIR.P2_1`            0x50028000,        4, base=16,    bitRange=1-1
 1733                           ;`GPIO2DIR.P2_2`            0x50028000,        4, base=16,    bitRange=2-2
 1734                           ;`GPIO2DIR.P2_3`            0x50028000,        4, base=16,    bitRange=3-3
 1735                           ;`GPIO2DIR.P2_4`            0x50028000,        4, base=16,    bitRange=4-4
 1736                           ;`GPIO2DIR.P2_5`            0x50028000,        4, base=16,    bitRange=5-5
 1737                           ;`GPIO2DIR.P2_6`            0x50028000,        4, base=16,    bitRange=6-6
 1738                           ;`GPIO2DIR.P2_7`            0x50028000,        4, base=16,    bitRange=7-7
 1739                           ;`GPIO2DIR.P2_8`            0x50028000,        4, base=16,    bitRange=8-8
 1740                           ;`GPIO2DIR.P2_9`            0x50028000,        4, base=16,    bitRange=9-9
 1741                           ;`GPIO2DIR.P2_10`           0x50028000,        4, base=16,    bitRange=10-10
 1742                           ;`GPIO2DIR.P2_11`           0x50028000,        4, base=16,    bitRange=11-11
 1743                           
 1744                           GPIO2DIR0                EQU  0x50028000
 1745                           ;`GPIO2DIR0.P2_0`           0x50028000,        1, base=16,    bitRange=0-0
 1746                           ;`GPIO2DIR0.P2_1`           0x50028000,        1, base=16,    bitRange=1-1
 1747                           ;`GPIO2DIR0.P2_2`           0x50028000,        1, base=16,    bitRange=2-2
 1748                           ;`GPIO2DIR0.P2_3`           0x50028000,        1, base=16,    bitRange=3-3
 1749                           ;`GPIO2DIR0.P2_4`           0x50028000,        1, base=16,    bitRange=4-4
 1750                           ;`GPIO2DIR0.P2_5`           0x50028000,        1, base=16,    bitRange=5-5
 1751                           ;`GPIO2DIR0.P2_6`           0x50028000,        1, base=16,    bitRange=6-6
 1752                           ;`GPIO2DIR0.P2_7`           0x50028000,        1, base=16,    bitRange=7-7
 1753                           
 1754                           GPIO2DIR1                EQU  0x50028001
 1755                           ;`GPIO2DIR1.P2_8`           0x50028001,        1, base=16,    bitRange=0-0
 1756                           ;`GPIO2DIR1.P2_9`           0x50028001,        1, base=16,    bitRange=1-1
 1757                           ;`GPIO2DIR1.P2_10`          0x50028001,        1, base=16,    bitRange=2-2
 1758                           ;`GPIO2DIR1.P2_11`          0x50028001,        1, base=16,    bitRange=3-3
 1759                           
 1760                           GPIO2DIRL                EQU  0x50028000
 1761                           ;`GPIO2DIRL.P2_0`           0x50028000,        2, base=16,    bitRange=0-0
 1762                           ;`GPIO2DIRL.P2_1`           0x50028000,        2, base=16,    bitRange=1-1
 1763                           ;`GPIO2DIRL.P2_2`           0x50028000,        2, base=16,    bitRange=2-2
 1764                           ;`GPIO2DIRL.P2_3`           0x50028000,        2, base=16,    bitRange=3-3
 1765                           ;`GPIO2DIRL.P2_4`           0x50028000,        2, base=16,    bitRange=4-4
 1766                           ;`GPIO2DIRL.P2_5`           0x50028000,        2, base=16,    bitRange=5-5
 1767                           ;`GPIO2DIRL.P2_6`           0x50028000,        2, base=16,    bitRange=6-6
 1768                           ;`GPIO2DIRL.P2_7`           0x50028000,        2, base=16,    bitRange=7-7
 1769                           ;`GPIO2DIRL.P2_8`           0x50028000,        2, base=16,    bitRange=8-8
 1770                           ;`GPIO2DIRL.P2_9`           0x50028000,        2, base=16,    bitRange=9-9
 1771                           ;`GPIO2DIRL.P2_10`          0x50028000,        2, base=16,    bitRange=10-10
 1772                           ;`GPIO2DIRL.P2_11`          0x50028000,        2, base=16,    bitRange=11-11
 1773                           
 1774                           GPIO2IS                  EQU  0x50028004
 1775                           ;`GPIO2IS.P2_0`             0x50028004,        4, base=16,    bitRange=0-0
 1776                           ;`GPIO2IS.P2_1`             0x50028004,        4, base=16,    bitRange=1-1
 1777                           ;`GPIO2IS.P2_2`             0x50028004,        4, base=16,    bitRange=2-2
 1778                           ;`GPIO2IS.P2_3`             0x50028004,        4, base=16,    bitRange=3-3
 1779                           ;`GPIO2IS.P2_4`             0x50028004,        4, base=16,    bitRange=4-4
 1780                           ;`GPIO2IS.P2_5`             0x50028004,        4, base=16,    bitRange=5-5
 1781                           ;`GPIO2IS.P2_6`             0x50028004,        4, base=16,    bitRange=6-6
 1782                           ;`GPIO2IS.P2_7`             0x50028004,        4, base=16,    bitRange=7-7
 1783                           ;`GPIO2IS.P2_8`             0x50028004,        4, base=16,    bitRange=8-8
 1784                           ;`GPIO2IS.P2_9`             0x50028004,        4, base=16,    bitRange=9-9
 1785                           ;`GPIO2IS.P2_10`            0x50028004,        4, base=16,    bitRange=10-10
 1786                           ;`GPIO2IS.P2_11`            0x50028004,        4, base=16,    bitRange=11-11
 1787                           
 1788                           GPIO2IS0                 EQU  0x50028004
 1789                           ;`GPIO2IS0.P2_0`            0x50028004,        1, base=16,    bitRange=0-0
 1790                           ;`GPIO2IS0.P2_1`            0x50028004,        1, base=16,    bitRange=1-1
 1791                           ;`GPIO2IS0.P2_2`            0x50028004,        1, base=16,    bitRange=2-2
 1792                           ;`GPIO2IS0.P2_3`            0x50028004,        1, base=16,    bitRange=3-3
 1793                           ;`GPIO2IS0.P2_4`            0x50028004,        1, base=16,    bitRange=4-4
 1794                           ;`GPIO2IS0.P2_5`            0x50028004,        1, base=16,    bitRange=5-5
 1795                           ;`GPIO2IS0.P2_6`            0x50028004,        1, base=16,    bitRange=6-6
 1796                           ;`GPIO2IS0.P2_7`            0x50028004,        1, base=16,    bitRange=7-7
 1797                           
 1798                           GPIO2IS1                 EQU  0x50028005
 1799                           ;`GPIO2IS1.P2_8`            0x50028005,        1, base=16,    bitRange=0-0
 1800                           ;`GPIO2IS1.P2_9`            0x50028005,        1, base=16,    bitRange=1-1
 1801                           ;`GPIO2IS1.P2_10`           0x50028005,        1, base=16,    bitRange=2-2
 1802                           ;`GPIO2IS1.P2_11`           0x50028005,        1, base=16,    bitRange=3-3
 1803                           
 1804                           GPIO2ISL                 EQU  0x50028004
 1805                           ;`GPIO2ISL.P2_0`            0x50028004,        2, base=16,    bitRange=0-0
 1806                           ;`GPIO2ISL.P2_1`            0x50028004,        2, base=16,    bitRange=1-1
 1807                           ;`GPIO2ISL.P2_2`            0x50028004,        2, base=16,    bitRange=2-2
 1808                           ;`GPIO2ISL.P2_3`            0x50028004,        2, base=16,    bitRange=3-3
 1809                           ;`GPIO2ISL.P2_4`            0x50028004,        2, base=16,    bitRange=4-4
 1810                           ;`GPIO2ISL.P2_5`            0x50028004,        2, base=16,    bitRange=5-5
 1811                           ;`GPIO2ISL.P2_6`            0x50028004,        2, base=16,    bitRange=6-6
 1812                           ;`GPIO2ISL.P2_7`            0x50028004,        2, base=16,    bitRange=7-7
 1813                           ;`GPIO2ISL.P2_8`            0x50028004,        2, base=16,    bitRange=8-8
 1814                           ;`GPIO2ISL.P2_9`            0x50028004,        2, base=16,    bitRange=9-9
 1815                           ;`GPIO2ISL.P2_10`           0x50028004,        2, base=16,    bitRange=10-10
 1816                           ;`GPIO2ISL.P2_11`           0x50028004,        2, base=16,    bitRange=11-11
 1817                           
 1818                           GPIO2IBE                 EQU  0x50028008
 1819                           ;`GPIO2IBE.P2_0`            0x50028008,        4, base=16,    bitRange=0-0
 1820                           ;`GPIO2IBE.P2_1`            0x50028008,        4, base=16,    bitRange=1-1
 1821                           ;`GPIO2IBE.P2_2`            0x50028008,        4, base=16,    bitRange=2-2
 1822                           ;`GPIO2IBE.P2_3`            0x50028008,        4, base=16,    bitRange=3-3
 1823                           ;`GPIO2IBE.P2_4`            0x50028008,        4, base=16,    bitRange=4-4
 1824                           ;`GPIO2IBE.P2_5`            0x50028008,        4, base=16,    bitRange=5-5
 1825                           ;`GPIO2IBE.P2_6`            0x50028008,        4, base=16,    bitRange=6-6
 1826                           ;`GPIO2IBE.P2_7`            0x50028008,        4, base=16,    bitRange=7-7
 1827                           ;`GPIO2IBE.P2_8`            0x50028008,        4, base=16,    bitRange=8-8
 1828                           ;`GPIO2IBE.P2_9`            0x50028008,        4, base=16,    bitRange=9-9
 1829                           ;`GPIO2IBE.P2_10`           0x50028008,        4, base=16,    bitRange=10-10
 1830                           ;`GPIO2IBE.P2_11`           0x50028008,        4, base=16,    bitRange=11-11
 1831                           
 1832                           GPIO2IBE0                EQU  0x50028008
 1833                           ;`GPIO2IBE0.P2_0`           0x50028008,        1, base=16,    bitRange=0-0
 1834                           ;`GPIO2IBE0.P2_1`           0x50028008,        1, base=16,    bitRange=1-1
 1835                           ;`GPIO2IBE0.P2_2`           0x50028008,        1, base=16,    bitRange=2-2
 1836                           ;`GPIO2IBE0.P2_3`           0x50028008,        1, base=16,    bitRange=3-3
 1837                           ;`GPIO2IBE0.P2_4`           0x50028008,        1, base=16,    bitRange=4-4
 1838                           ;`GPIO2IBE0.P2_5`           0x50028008,        1, base=16,    bitRange=5-5
 1839                           ;`GPIO2IBE0.P2_6`           0x50028008,        1, base=16,    bitRange=6-6
 1840                           ;`GPIO2IBE0.P2_7`           0x50028008,        1, base=16,    bitRange=7-7
 1841                           
 1842                           GPIO2IBE1                EQU  0x50028009
 1843                           ;`GPIO2IBE1.P2_8`           0x50028009,        1, base=16,    bitRange=0-0
 1844                           ;`GPIO2IBE1.P2_9`           0x50028009,        1, base=16,    bitRange=1-1
 1845                           ;`GPIO2IBE1.P2_10`          0x50028009,        1, base=16,    bitRange=2-2
 1846                           ;`GPIO2IBE1.P2_11`          0x50028009,        1, base=16,    bitRange=3-3
 1847                           
 1848                           GPIO2IBEL                EQU  0x50028008
 1849                           ;`GPIO2IBEL.P2_0`           0x50028008,        2, base=16,    bitRange=0-0
 1850                           ;`GPIO2IBEL.P2_1`           0x50028008,        2, base=16,    bitRange=1-1
 1851                           ;`GPIO2IBEL.P2_2`           0x50028008,        2, base=16,    bitRange=2-2
 1852                           ;`GPIO2IBEL.P2_3`           0x50028008,        2, base=16,    bitRange=3-3
 1853                           ;`GPIO2IBEL.P2_4`           0x50028008,        2, base=16,    bitRange=4-4
 1854                           ;`GPIO2IBEL.P2_5`           0x50028008,        2, base=16,    bitRange=5-5
 1855                           ;`GPIO2IBEL.P2_6`           0x50028008,        2, base=16,    bitRange=6-6
 1856                           ;`GPIO2IBEL.P2_7`           0x50028008,        2, base=16,    bitRange=7-7
 1857                           ;`GPIO2IBEL.P2_8`           0x50028008,        2, base=16,    bitRange=8-8
 1858                           ;`GPIO2IBEL.P2_9`           0x50028008,        2, base=16,    bitRange=9-9
 1859                           ;`GPIO2IBEL.P2_10`          0x50028008,        2, base=16,    bitRange=10-10
 1860                           ;`GPIO2IBEL.P2_11`          0x50028008,        2, base=16,    bitRange=11-11
 1861                           
 1862                           GPIO2IEV                 EQU  0x5002800C
 1863                           ;`GPIO2IEV.P2_0`            0x5002800C,        4, base=16,    bitRange=0-0
 1864                           ;`GPIO2IEV.P2_1`            0x5002800C,        4, base=16,    bitRange=1-1
 1865                           ;`GPIO2IEV.P2_2`            0x5002800C,        4, base=16,    bitRange=2-2
 1866                           ;`GPIO2IEV.P2_3`            0x5002800C,        4, base=16,    bitRange=3-3
 1867                           ;`GPIO2IEV.P2_4`            0x5002800C,        4, base=16,    bitRange=4-4
 1868                           ;`GPIO2IEV.P2_5`            0x5002800C,        4, base=16,    bitRange=5-5
 1869                           ;`GPIO2IEV.P2_6`            0x5002800C,        4, base=16,    bitRange=6-6
 1870                           ;`GPIO2IEV.P2_7`            0x5002800C,        4, base=16,    bitRange=7-7
 1871                           ;`GPIO2IEV.P2_8`            0x5002800C,        4, base=16,    bitRange=8-8
 1872                           ;`GPIO2IEV.P2_9`            0x5002800C,        4, base=16,    bitRange=9-9
 1873                           ;`GPIO2IEV.P2_10`           0x5002800C,        4, base=16,    bitRange=10-10
 1874                           ;`GPIO2IEV.P2_11`           0x5002800C,        4, base=16,    bitRange=11-11
 1875                           
 1876                           GPIO2IEV0                EQU  0x5002800C
 1877                           ;`GPIO2IEV0.P2_0`           0x5002800C,        1, base=16,    bitRange=0-0
 1878                           ;`GPIO2IEV0.P2_1`           0x5002800C,        1, base=16,    bitRange=1-1
 1879                           ;`GPIO2IEV0.P2_2`           0x5002800C,        1, base=16,    bitRange=2-2
 1880                           ;`GPIO2IEV0.P2_3`           0x5002800C,        1, base=16,    bitRange=3-3
 1881                           ;`GPIO2IEV0.P2_4`           0x5002800C,        1, base=16,    bitRange=4-4
 1882                           ;`GPIO2IEV0.P2_5`           0x5002800C,        1, base=16,    bitRange=5-5
 1883                           ;`GPIO2IEV0.P2_6`           0x5002800C,        1, base=16,    bitRange=6-6
 1884                           ;`GPIO2IEV0.P2_7`           0x5002800C,        1, base=16,    bitRange=7-7
 1885                           
 1886                           GPIO2IEV1                EQU  0x5002800D
 1887                           ;`GPIO2IEV1.P2_8`           0x5002800D,        1, base=16,    bitRange=0-0
 1888                           ;`GPIO2IEV1.P2_9`           0x5002800D,        1, base=16,    bitRange=1-1
 1889                           ;`GPIO2IEV1.P2_10`          0x5002800D,        1, base=16,    bitRange=2-2
 1890                           ;`GPIO2IEV1.P2_11`          0x5002800D,        1, base=16,    bitRange=3-3
 1891                           
 1892                           GPIO2IEVL                EQU  0x5002800C
 1893                           ;`GPIO2IEVL.P2_0`           0x5002800C,        2, base=16,    bitRange=0-0
 1894                           ;`GPIO2IEVL.P2_1`           0x5002800C,        2, base=16,    bitRange=1-1
 1895                           ;`GPIO2IEVL.P2_2`           0x5002800C,        2, base=16,    bitRange=2-2
 1896                           ;`GPIO2IEVL.P2_3`           0x5002800C,        2, base=16,    bitRange=3-3
 1897                           ;`GPIO2IEVL.P2_4`           0x5002800C,        2, base=16,    bitRange=4-4
 1898                           ;`GPIO2IEVL.P2_5`           0x5002800C,        2, base=16,    bitRange=5-5
 1899                           ;`GPIO2IEVL.P2_6`           0x5002800C,        2, base=16,    bitRange=6-6
 1900                           ;`GPIO2IEVL.P2_7`           0x5002800C,        2, base=16,    bitRange=7-7
 1901                           ;`GPIO2IEVL.P2_8`           0x5002800C,        2, base=16,    bitRange=8-8
 1902                           ;`GPIO2IEVL.P2_9`           0x5002800C,        2, base=16,    bitRange=9-9
 1903                           ;`GPIO2IEVL.P2_10`          0x5002800C,        2, base=16,    bitRange=10-10
 1904                           ;`GPIO2IEVL.P2_11`          0x5002800C,        2, base=16,    bitRange=11-11
 1905                           
 1906                           GPIO2IE                  EQU  0x50028010
 1907                           ;`GPIO2IE.P2_0`             0x50028010,        4, base=16,    bitRange=0-0
 1908                           ;`GPIO2IE.P2_1`             0x50028010,        4, base=16,    bitRange=1-1
 1909                           ;`GPIO2IE.P2_2`             0x50028010,        4, base=16,    bitRange=2-2
 1910                           ;`GPIO2IE.P2_3`             0x50028010,        4, base=16,    bitRange=3-3
 1911                           ;`GPIO2IE.P2_4`             0x50028010,        4, base=16,    bitRange=4-4
 1912                           ;`GPIO2IE.P2_5`             0x50028010,        4, base=16,    bitRange=5-5
 1913                           ;`GPIO2IE.P2_6`             0x50028010,        4, base=16,    bitRange=6-6
 1914                           ;`GPIO2IE.P2_7`             0x50028010,        4, base=16,    bitRange=7-7
 1915                           ;`GPIO2IE.P2_8`             0x50028010,        4, base=16,    bitRange=8-8
 1916                           ;`GPIO2IE.P2_9`             0x50028010,        4, base=16,    bitRange=9-9
 1917                           ;`GPIO2IE.P2_10`            0x50028010,        4, base=16,    bitRange=10-10
 1918                           ;`GPIO2IE.P2_11`            0x50028010,        4, base=16,    bitRange=11-11
 1919                           
 1920                           GPIO2IE0                 EQU  0x50028010
 1921                           ;`GPIO2IE0.P2_0`            0x50028010,        1, base=16,    bitRange=0-0
 1922                           ;`GPIO2IE0.P2_1`            0x50028010,        1, base=16,    bitRange=1-1
 1923                           ;`GPIO2IE0.P2_2`            0x50028010,        1, base=16,    bitRange=2-2
 1924                           ;`GPIO2IE0.P2_3`            0x50028010,        1, base=16,    bitRange=3-3
 1925                           ;`GPIO2IE0.P2_4`            0x50028010,        1, base=16,    bitRange=4-4
 1926                           ;`GPIO2IE0.P2_5`            0x50028010,        1, base=16,    bitRange=5-5
 1927                           ;`GPIO2IE0.P2_6`            0x50028010,        1, base=16,    bitRange=6-6
 1928                           ;`GPIO2IE0.P2_7`            0x50028010,        1, base=16,    bitRange=7-7
 1929                           
 1930                           GPIO2IE1                 EQU  0x50028011
 1931                           ;`GPIO2IE1.P2_8`            0x50028011,        1, base=16,    bitRange=0-0
 1932                           ;`GPIO2IE1.P2_9`            0x50028011,        1, base=16,    bitRange=1-1
 1933                           ;`GPIO2IE1.P2_10`           0x50028011,        1, base=16,    bitRange=2-2
 1934                           ;`GPIO2IE1.P2_11`           0x50028011,        1, base=16,    bitRange=3-3
 1935                           
 1936                           GPIO2IEL                 EQU  0x50028010
 1937                           ;`GPIO2IEL.P2_0`            0x50028010,        2, base=16,    bitRange=0-0
 1938                           ;`GPIO2IEL.P2_1`            0x50028010,        2, base=16,    bitRange=1-1
 1939                           ;`GPIO2IEL.P2_2`            0x50028010,        2, base=16,    bitRange=2-2
 1940                           ;`GPIO2IEL.P2_3`            0x50028010,        2, base=16,    bitRange=3-3
 1941                           ;`GPIO2IEL.P2_4`            0x50028010,        2, base=16,    bitRange=4-4
 1942                           ;`GPIO2IEL.P2_5`            0x50028010,        2, base=16,    bitRange=5-5
 1943                           ;`GPIO2IEL.P2_6`            0x50028010,        2, base=16,    bitRange=6-6
 1944                           ;`GPIO2IEL.P2_7`            0x50028010,        2, base=16,    bitRange=7-7
 1945                           ;`GPIO2IEL.P2_8`            0x50028010,        2, base=16,    bitRange=8-8
 1946                           ;`GPIO2IEL.P2_9`            0x50028010,        2, base=16,    bitRange=9-9
 1947                           ;`GPIO2IEL.P2_10`           0x50028010,        2, base=16,    bitRange=10-10
 1948                           ;`GPIO2IEL.P2_11`           0x50028010,        2, base=16,    bitRange=11-11
 1949                           
 1950                           GPIO2RIS                 EQU  0x50028014
 1951                           ;`GPIO2RIS.P2_0`            0x50028014,        4, base=16,    bitRange=0-0
 1952                           ;`GPIO2RIS.P2_1`            0x50028014,        4, base=16,    bitRange=1-1
 1953                           ;`GPIO2RIS.P2_2`            0x50028014,        4, base=16,    bitRange=2-2
 1954                           ;`GPIO2RIS.P2_3`            0x50028014,        4, base=16,    bitRange=3-3
 1955                           ;`GPIO2RIS.P2_4`            0x50028014,        4, base=16,    bitRange=4-4
 1956                           ;`GPIO2RIS.P2_5`            0x50028014,        4, base=16,    bitRange=5-5
 1957                           ;`GPIO2RIS.P2_6`            0x50028014,        4, base=16,    bitRange=6-6
 1958                           ;`GPIO2RIS.P2_7`            0x50028014,        4, base=16,    bitRange=7-7
 1959                           ;`GPIO2RIS.P2_8`            0x50028014,        4, base=16,    bitRange=8-8
 1960                           ;`GPIO2RIS.P2_9`            0x50028014,        4, base=16,    bitRange=9-9
 1961                           ;`GPIO2RIS.P2_10`           0x50028014,        4, base=16,    bitRange=10-10
 1962                           ;`GPIO2RIS.P2_11`           0x50028014,        4, base=16,    bitRange=11-11
 1963                           
 1964                           GPIO2RIS0                EQU  0x50028014
 1965                           ;`GPIO2RIS0.P2_0`           0x50028014,        1, base=16,    bitRange=0-0
 1966                           ;`GPIO2RIS0.P2_1`           0x50028014,        1, base=16,    bitRange=1-1
 1967                           ;`GPIO2RIS0.P2_2`           0x50028014,        1, base=16,    bitRange=2-2
 1968                           ;`GPIO2RIS0.P2_3`           0x50028014,        1, base=16,    bitRange=3-3
 1969                           ;`GPIO2RIS0.P2_4`           0x50028014,        1, base=16,    bitRange=4-4
 1970                           ;`GPIO2RIS0.P2_5`           0x50028014,        1, base=16,    bitRange=5-5
 1971                           ;`GPIO2RIS0.P2_6`           0x50028014,        1, base=16,    bitRange=6-6
 1972                           ;`GPIO2RIS0.P2_7`           0x50028014,        1, base=16,    bitRange=7-7
 1973                           
 1974                           GPIO2RIS1                EQU  0x50028015
 1975                           ;`GPIO2RIS1.P2_8`           0x50028015,        1, base=16,    bitRange=0-0
 1976                           ;`GPIO2RIS1.P2_9`           0x50028015,        1, base=16,    bitRange=1-1
 1977                           ;`GPIO2RIS1.P2_10`          0x50028015,        1, base=16,    bitRange=2-2
 1978                           ;`GPIO2RIS1.P2_11`          0x50028015,        1, base=16,    bitRange=3-3
 1979                           
 1980                           GPIO2RISL                EQU  0x50028014
 1981                           ;`GPIO2RISL.P2_0`           0x50028014,        2, base=16,    bitRange=0-0
 1982                           ;`GPIO2RISL.P2_1`           0x50028014,        2, base=16,    bitRange=1-1
 1983                           ;`GPIO2RISL.P2_2`           0x50028014,        2, base=16,    bitRange=2-2
 1984                           ;`GPIO2RISL.P2_3`           0x50028014,        2, base=16,    bitRange=3-3
 1985                           ;`GPIO2RISL.P2_4`           0x50028014,        2, base=16,    bitRange=4-4
 1986                           ;`GPIO2RISL.P2_5`           0x50028014,        2, base=16,    bitRange=5-5
 1987                           ;`GPIO2RISL.P2_6`           0x50028014,        2, base=16,    bitRange=6-6
 1988                           ;`GPIO2RISL.P2_7`           0x50028014,        2, base=16,    bitRange=7-7
 1989                           ;`GPIO2RISL.P2_8`           0x50028014,        2, base=16,    bitRange=8-8
 1990                           ;`GPIO2RISL.P2_9`           0x50028014,        2, base=16,    bitRange=9-9
 1991                           ;`GPIO2RISL.P2_10`          0x50028014,        2, base=16,    bitRange=10-10
 1992                           ;`GPIO2RISL.P2_11`          0x50028014,        2, base=16,    bitRange=11-11
 1993                           
 1994                           GPIO2MIS                 EQU  0x50028018
 1995                           ;`GPIO2MIS.P2_0`            0x50028018,        4, base=16,    bitRange=0-0
 1996                           ;`GPIO2MIS.P2_1`            0x50028018,        4, base=16,    bitRange=1-1
 1997                           ;`GPIO2MIS.P2_2`            0x50028018,        4, base=16,    bitRange=2-2
 1998                           ;`GPIO2MIS.P2_3`            0x50028018,        4, base=16,    bitRange=3-3
 1999                           ;`GPIO2MIS.P2_4`            0x50028018,        4, base=16,    bitRange=4-4
 2000                           ;`GPIO2MIS.P2_5`            0x50028018,        4, base=16,    bitRange=5-5
 2001                           ;`GPIO2MIS.P2_6`            0x50028018,        4, base=16,    bitRange=6-6
 2002                           ;`GPIO2MIS.P2_7`            0x50028018,        4, base=16,    bitRange=7-7
 2003                           ;`GPIO2MIS.P2_8`            0x50028018,        4, base=16,    bitRange=8-8
 2004                           ;`GPIO2MIS.P2_9`            0x50028018,        4, base=16,    bitRange=9-9
 2005                           ;`GPIO2MIS.P2_10`           0x50028018,        4, base=16,    bitRange=10-10
 2006                           ;`GPIO2MIS.P2_11`           0x50028018,        4, base=16,    bitRange=11-11
 2007                           
 2008                           GPIO2MIS0                EQU  0x50028018
 2009                           ;`GPIO2MIS0.P2_0`           0x50028018,        1, base=16,    bitRange=0-0
 2010                           ;`GPIO2MIS0.P2_1`           0x50028018,        1, base=16,    bitRange=1-1
 2011                           ;`GPIO2MIS0.P2_2`           0x50028018,        1, base=16,    bitRange=2-2
 2012                           ;`GPIO2MIS0.P2_3`           0x50028018,        1, base=16,    bitRange=3-3
 2013                           ;`GPIO2MIS0.P2_4`           0x50028018,        1, base=16,    bitRange=4-4
 2014                           ;`GPIO2MIS0.P2_5`           0x50028018,        1, base=16,    bitRange=5-5
 2015                           ;`GPIO2MIS0.P2_6`           0x50028018,        1, base=16,    bitRange=6-6
 2016                           ;`GPIO2MIS0.P2_7`           0x50028018,        1, base=16,    bitRange=7-7
 2017                           
 2018                           GPIO2MIS1                EQU  0x50028019
 2019                           ;`GPIO2MIS1.P2_8`           0x50028019,        1, base=16,    bitRange=0-0
 2020                           ;`GPIO2MIS1.P2_9`           0x50028019,        1, base=16,    bitRange=1-1
 2021                           ;`GPIO2MIS1.P2_10`          0x50028019,        1, base=16,    bitRange=2-2
 2022                           ;`GPIO2MIS1.P2_11`          0x50028019,        1, base=16,    bitRange=3-3
 2023                           
 2024                           GPIO2MISL                EQU  0x50028018
 2025                           ;`GPIO2MISL.P2_0`           0x50028018,        2, base=16,    bitRange=0-0
 2026                           ;`GPIO2MISL.P2_1`           0x50028018,        2, base=16,    bitRange=1-1
 2027                           ;`GPIO2MISL.P2_2`           0x50028018,        2, base=16,    bitRange=2-2
 2028                           ;`GPIO2MISL.P2_3`           0x50028018,        2, base=16,    bitRange=3-3
 2029                           ;`GPIO2MISL.P2_4`           0x50028018,        2, base=16,    bitRange=4-4
 2030                           ;`GPIO2MISL.P2_5`           0x50028018,        2, base=16,    bitRange=5-5
 2031                           ;`GPIO2MISL.P2_6`           0x50028018,        2, base=16,    bitRange=6-6
 2032                           ;`GPIO2MISL.P2_7`           0x50028018,        2, base=16,    bitRange=7-7
 2033                           ;`GPIO2MISL.P2_8`           0x50028018,        2, base=16,    bitRange=8-8
 2034                           ;`GPIO2MISL.P2_9`           0x50028018,        2, base=16,    bitRange=9-9
 2035                           ;`GPIO2MISL.P2_10`          0x50028018,        2, base=16,    bitRange=10-10
 2036                           ;`GPIO2MISL.P2_11`          0x50028018,        2, base=16,    bitRange=11-11
 2037                           
 2038                           GPIO2IC                  EQU  0x5002801C
 2039                           
 2040                           GPIO3DATA                EQU  0x50033FFC
 2041                           ;`GPIO3DATA.P3_0`           0x50033FFC,        4, base=16,    bitRange=0-0
 2042                           ;`GPIO3DATA.P3_1`           0x50033FFC,        4, base=16,    bitRange=1-1
 2043                           ;`GPIO3DATA.P3_2`           0x50033FFC,        4, base=16,    bitRange=2-2
 2044                           ;`GPIO3DATA.P3_3`           0x50033FFC,        4, base=16,    bitRange=3-3
 2045                           ;`GPIO3DATA.P3_4`           0x50033FFC,        4, base=16,    bitRange=4-4
 2046                           ;`GPIO3DATA.P3_5`           0x50033FFC,        4, base=16,    bitRange=5-5
 2047                           
 2048                           GPIO3DATA0               EQU  0x50033FFC
 2049                           ;`GPIO3DATA0.P3_0`          0x50033FFC,        1, base=16,    bitRange=0-0
 2050                           ;`GPIO3DATA0.P3_1`          0x50033FFC,        1, base=16,    bitRange=1-1
 2051                           ;`GPIO3DATA0.P3_2`          0x50033FFC,        1, base=16,    bitRange=2-2
 2052                           ;`GPIO3DATA0.P3_3`          0x50033FFC,        1, base=16,    bitRange=3-3
 2053                           ;`GPIO3DATA0.P3_4`          0x50033FFC,        1, base=16,    bitRange=4-4
 2054                           ;`GPIO3DATA0.P3_5`          0x50033FFC,        1, base=16,    bitRange=5-5
 2055                           
 2056                           GPIO3DATAL               EQU  0x50033FFC
 2057                           ;`GPIO3DATAL.P3_0`          0x50033FFC,        2, base=16,    bitRange=0-0
 2058                           ;`GPIO3DATAL.P3_1`          0x50033FFC,        2, base=16,    bitRange=1-1
 2059                           ;`GPIO3DATAL.P3_2`          0x50033FFC,        2, base=16,    bitRange=2-2
 2060                           ;`GPIO3DATAL.P3_3`          0x50033FFC,        2, base=16,    bitRange=3-3
 2061                           ;`GPIO3DATAL.P3_4`          0x50033FFC,        2, base=16,    bitRange=4-4
 2062                           ;`GPIO3DATAL.P3_5`          0x50033FFC,        2, base=16,    bitRange=5-5
 2063                           
 2064                           GPIO3DIR                 EQU  0x50038000
 2065                           ;`GPIO3DIR.P3_0`            0x50038000,        4, base=16,    bitRange=0-0
 2066                           ;`GPIO3DIR.P3_1`            0x50038000,        4, base=16,    bitRange=1-1
 2067                           ;`GPIO3DIR.P3_2`            0x50038000,        4, base=16,    bitRange=2-2
 2068                           ;`GPIO3DIR.P3_3`            0x50038000,        4, base=16,    bitRange=3-3
 2069                           ;`GPIO3DIR.P3_4`            0x50038000,        4, base=16,    bitRange=4-4
 2070                           ;`GPIO3DIR.P3_5`            0x50038000,        4, base=16,    bitRange=5-5
 2071                           
 2072                           GPIO3DIR0                EQU  0x50038000
 2073                           ;`GPIO3DIR0.P3_0`           0x50038000,        1, base=16,    bitRange=0-0
 2074                           ;`GPIO3DIR0.P3_1`           0x50038000,        1, base=16,    bitRange=1-1
 2075                           ;`GPIO3DIR0.P3_2`           0x50038000,        1, base=16,    bitRange=2-2
 2076                           ;`GPIO3DIR0.P3_3`           0x50038000,        1, base=16,    bitRange=3-3
 2077                           ;`GPIO3DIR0.P3_4`           0x50038000,        1, base=16,    bitRange=4-4
 2078                           ;`GPIO3DIR0.P3_5`           0x50038000,        1, base=16,    bitRange=5-5
 2079                           
 2080                           GPIO3DIRL                EQU  0x50038000
 2081                           ;`GPIO3DIRL.P3_0`           0x50038000,        2, base=16,    bitRange=0-0
 2082                           ;`GPIO3DIRL.P3_1`           0x50038000,        2, base=16,    bitRange=1-1
 2083                           ;`GPIO3DIRL.P3_2`           0x50038000,        2, base=16,    bitRange=2-2
 2084                           ;`GPIO3DIRL.P3_3`           0x50038000,        2, base=16,    bitRange=3-3
 2085                           ;`GPIO3DIRL.P3_4`           0x50038000,        2, base=16,    bitRange=4-4
 2086                           ;`GPIO3DIRL.P3_5`           0x50038000,        2, base=16,    bitRange=5-5
 2087                           
 2088                           GPIO3IS                  EQU  0x50038004
 2089                           ;`GPIO3IS.P3_0`             0x50038004,        4, base=16,    bitRange=0-0
 2090                           ;`GPIO3IS.P3_1`             0x50038004,        4, base=16,    bitRange=1-1
 2091                           ;`GPIO3IS.P3_2`             0x50038004,        4, base=16,    bitRange=2-2
 2092                           ;`GPIO3IS.P3_3`             0x50038004,        4, base=16,    bitRange=3-3
 2093                           ;`GPIO3IS.P3_4`             0x50038004,        4, base=16,    bitRange=4-4
 2094                           ;`GPIO3IS.P3_5`             0x50038004,        4, base=16,    bitRange=5-5
 2095                           
 2096                           GPIO3IS0                 EQU  0x50038004
 2097                           ;`GPIO3IS0.P3_0`            0x50038004,        1, base=16,    bitRange=0-0
 2098                           ;`GPIO3IS0.P3_1`            0x50038004,        1, base=16,    bitRange=1-1
 2099                           ;`GPIO3IS0.P3_2`            0x50038004,        1, base=16,    bitRange=2-2
 2100                           ;`GPIO3IS0.P3_3`            0x50038004,        1, base=16,    bitRange=3-3
 2101                           ;`GPIO3IS0.P3_4`            0x50038004,        1, base=16,    bitRange=4-4
 2102                           ;`GPIO3IS0.P3_5`            0x50038004,        1, base=16,    bitRange=5-5
 2103                           
 2104                           GPIO3ISL                 EQU  0x50038004
 2105                           ;`GPIO3ISL.P3_0`            0x50038004,        2, base=16,    bitRange=0-0
 2106                           ;`GPIO3ISL.P3_1`            0x50038004,        2, base=16,    bitRange=1-1
 2107                           ;`GPIO3ISL.P3_2`            0x50038004,        2, base=16,    bitRange=2-2
 2108                           ;`GPIO3ISL.P3_3`            0x50038004,        2, base=16,    bitRange=3-3
 2109                           ;`GPIO3ISL.P3_4`            0x50038004,        2, base=16,    bitRange=4-4
 2110                           ;`GPIO3ISL.P3_5`            0x50038004,        2, base=16,    bitRange=5-5
 2111                           
 2112                           GPIO3IBE                 EQU  0x50038008
 2113                           ;`GPIO3IBE.P3_0`            0x50038008,        4, base=16,    bitRange=0-0
 2114                           ;`GPIO3IBE.P3_1`            0x50038008,        4, base=16,    bitRange=1-1
 2115                           ;`GPIO3IBE.P3_2`            0x50038008,        4, base=16,    bitRange=2-2
 2116                           ;`GPIO3IBE.P3_3`            0x50038008,        4, base=16,    bitRange=3-3
 2117                           ;`GPIO3IBE.P3_4`            0x50038008,        4, base=16,    bitRange=4-4
 2118                           ;`GPIO3IBE.P3_5`            0x50038008,        4, base=16,    bitRange=5-5
 2119                           
 2120                           GPIO3IBE0                EQU  0x50038008
 2121                           ;`GPIO3IBE0.P3_0`           0x50038008,        1, base=16,    bitRange=0-0
 2122                           ;`GPIO3IBE0.P3_1`           0x50038008,        1, base=16,    bitRange=1-1
 2123                           ;`GPIO3IBE0.P3_2`           0x50038008,        1, base=16,    bitRange=2-2
 2124                           ;`GPIO3IBE0.P3_3`           0x50038008,        1, base=16,    bitRange=3-3
 2125                           ;`GPIO3IBE0.P3_4`           0x50038008,        1, base=16,    bitRange=4-4
 2126                           ;`GPIO3IBE0.P3_5`           0x50038008,        1, base=16,    bitRange=5-5
 2127                           
 2128                           GPIO3IBEL                EQU  0x50038008
 2129                           ;`GPIO3IBEL.P3_0`           0x50038008,        2, base=16,    bitRange=0-0
 2130                           ;`GPIO3IBEL.P3_1`           0x50038008,        2, base=16,    bitRange=1-1
 2131                           ;`GPIO3IBEL.P3_2`           0x50038008,        2, base=16,    bitRange=2-2
 2132                           ;`GPIO3IBEL.P3_3`           0x50038008,        2, base=16,    bitRange=3-3
 2133                           ;`GPIO3IBEL.P3_4`           0x50038008,        2, base=16,    bitRange=4-4
 2134                           ;`GPIO3IBEL.P3_5`           0x50038008,        2, base=16,    bitRange=5-5
 2135                           
 2136                           GPIO3IEV                 EQU  0x5003800C
 2137                           ;`GPIO3IEV.P3_0`            0x5003800C,        4, base=16,    bitRange=0-0
 2138                           ;`GPIO3IEV.P3_1`            0x5003800C,        4, base=16,    bitRange=1-1
 2139                           ;`GPIO3IEV.P3_2`            0x5003800C,        4, base=16,    bitRange=2-2
 2140                           ;`GPIO3IEV.P3_3`            0x5003800C,        4, base=16,    bitRange=3-3
 2141                           ;`GPIO3IEV.P3_4`            0x5003800C,        4, base=16,    bitRange=4-4
 2142                           ;`GPIO3IEV.P3_5`            0x5003800C,        4, base=16,    bitRange=5-5
 2143                           
 2144                           GPIO3IEV0                EQU  0x5003800C
 2145                           ;`GPIO3IEV0.P3_0`           0x5003800C,        1, base=16,    bitRange=0-0
 2146                           ;`GPIO3IEV0.P3_1`           0x5003800C,        1, base=16,    bitRange=1-1
 2147                           ;`GPIO3IEV0.P3_2`           0x5003800C,        1, base=16,    bitRange=2-2
 2148                           ;`GPIO3IEV0.P3_3`           0x5003800C,        1, base=16,    bitRange=3-3
 2149                           ;`GPIO3IEV0.P3_4`           0x5003800C,        1, base=16,    bitRange=4-4
 2150                           ;`GPIO3IEV0.P3_5`           0x5003800C,        1, base=16,    bitRange=5-5
 2151                           
 2152                           GPIO3IEVL                EQU  0x5003800C
 2153                           ;`GPIO3IEVL.P3_0`           0x5003800C,        2, base=16,    bitRange=0-0
 2154                           ;`GPIO3IEVL.P3_1`           0x5003800C,        2, base=16,    bitRange=1-1
 2155                           ;`GPIO3IEVL.P3_2`           0x5003800C,        2, base=16,    bitRange=2-2
 2156                           ;`GPIO3IEVL.P3_3`           0x5003800C,        2, base=16,    bitRange=3-3
 2157                           ;`GPIO3IEVL.P3_4`           0x5003800C,        2, base=16,    bitRange=4-4
 2158                           ;`GPIO3IEVL.P3_5`           0x5003800C,        2, base=16,    bitRange=5-5
 2159                           
 2160                           GPIO3IE                  EQU  0x50038010
 2161                           ;`GPIO3IE.P3_0`             0x50038010,        4, base=16,    bitRange=0-0
 2162                           ;`GPIO3IE.P3_1`             0x50038010,        4, base=16,    bitRange=1-1
 2163                           ;`GPIO3IE.P3_2`             0x50038010,        4, base=16,    bitRange=2-2
 2164                           ;`GPIO3IE.P3_3`             0x50038010,        4, base=16,    bitRange=3-3
 2165                           ;`GPIO3IE.P3_4`             0x50038010,        4, base=16,    bitRange=4-4
 2166                           ;`GPIO3IE.P3_5`             0x50038010,        4, base=16,    bitRange=5-5
 2167                           
 2168                           GPIO3IE0                 EQU  0x50038010
 2169                           ;`GPIO3IE0.P3_0`            0x50038010,        1, base=16,    bitRange=0-0
 2170                           ;`GPIO3IE0.P3_1`            0x50038010,        1, base=16,    bitRange=1-1
 2171                           ;`GPIO3IE0.P3_2`            0x50038010,        1, base=16,    bitRange=2-2
 2172                           ;`GPIO3IE0.P3_3`            0x50038010,        1, base=16,    bitRange=3-3
 2173                           ;`GPIO3IE0.P3_4`            0x50038010,        1, base=16,    bitRange=4-4
 2174                           ;`GPIO3IE0.P3_5`            0x50038010,        1, base=16,    bitRange=5-5
 2175                           
 2176                           GPIO3IEL                 EQU  0x50038010
 2177                           ;`GPIO3IEL.P3_0`            0x50038010,        2, base=16,    bitRange=0-0
 2178                           ;`GPIO3IEL.P3_1`            0x50038010,        2, base=16,    bitRange=1-1
 2179                           ;`GPIO3IEL.P3_2`            0x50038010,        2, base=16,    bitRange=2-2
 2180                           ;`GPIO3IEL.P3_3`            0x50038010,        2, base=16,    bitRange=3-3
 2181                           ;`GPIO3IEL.P3_4`            0x50038010,        2, base=16,    bitRange=4-4
 2182                           ;`GPIO3IEL.P3_5`            0x50038010,        2, base=16,    bitRange=5-5
 2183                           
 2184                           GPIO3RIS                 EQU  0x50038014
 2185                           ;`GPIO3RIS.P3_0`            0x50038014,        4, base=16,    bitRange=0-0
 2186                           ;`GPIO3RIS.P3_1`            0x50038014,        4, base=16,    bitRange=1-1
 2187                           ;`GPIO3RIS.P3_2`            0x50038014,        4, base=16,    bitRange=2-2
 2188                           ;`GPIO3RIS.P3_3`            0x50038014,        4, base=16,    bitRange=3-3
 2189                           ;`GPIO3RIS.P3_4`            0x50038014,        4, base=16,    bitRange=4-4
 2190                           ;`GPIO3RIS.P3_5`            0x50038014,        4, base=16,    bitRange=5-5
 2191                           
 2192                           GPIO3RIS0                EQU  0x50038014
 2193                           ;`GPIO3RIS0.P3_0`           0x50038014,        1, base=16,    bitRange=0-0
 2194                           ;`GPIO3RIS0.P3_1`           0x50038014,        1, base=16,    bitRange=1-1
 2195                           ;`GPIO3RIS0.P3_2`           0x50038014,        1, base=16,    bitRange=2-2
 2196                           ;`GPIO3RIS0.P3_3`           0x50038014,        1, base=16,    bitRange=3-3
 2197                           ;`GPIO3RIS0.P3_4`           0x50038014,        1, base=16,    bitRange=4-4
 2198                           ;`GPIO3RIS0.P3_5`           0x50038014,        1, base=16,    bitRange=5-5
 2199                           
 2200                           GPIO3RISL                EQU  0x50038014
 2201                           ;`GPIO3RISL.P3_0`           0x50038014,        2, base=16,    bitRange=0-0
 2202                           ;`GPIO3RISL.P3_1`           0x50038014,        2, base=16,    bitRange=1-1
 2203                           ;`GPIO3RISL.P3_2`           0x50038014,        2, base=16,    bitRange=2-2
 2204                           ;`GPIO3RISL.P3_3`           0x50038014,        2, base=16,    bitRange=3-3
 2205                           ;`GPIO3RISL.P3_4`           0x50038014,        2, base=16,    bitRange=4-4
 2206                           ;`GPIO3RISL.P3_5`           0x50038014,        2, base=16,    bitRange=5-5
 2207                           
 2208                           GPIO3MIS                 EQU  0x50038018
 2209                           ;`GPIO3MIS.P3_0`            0x50038018,        4, base=16,    bitRange=0-0
 2210                           ;`GPIO3MIS.P3_1`            0x50038018,        4, base=16,    bitRange=1-1
 2211                           ;`GPIO3MIS.P3_2`            0x50038018,        4, base=16,    bitRange=2-2
 2212                           ;`GPIO3MIS.P3_3`            0x50038018,        4, base=16,    bitRange=3-3
 2213                           ;`GPIO3MIS.P3_4`            0x50038018,        4, base=16,    bitRange=4-4
 2214                           ;`GPIO3MIS.P3_5`            0x50038018,        4, base=16,    bitRange=5-5
 2215                           
 2216                           GPIO3MIS0                EQU  0x50038018
 2217                           ;`GPIO3MIS0.P3_0`           0x50038018,        1, base=16,    bitRange=0-0
 2218                           ;`GPIO3MIS0.P3_1`           0x50038018,        1, base=16,    bitRange=1-1
 2219                           ;`GPIO3MIS0.P3_2`           0x50038018,        1, base=16,    bitRange=2-2
 2220                           ;`GPIO3MIS0.P3_3`           0x50038018,        1, base=16,    bitRange=3-3
 2221                           ;`GPIO3MIS0.P3_4`           0x50038018,        1, base=16,    bitRange=4-4
 2222                           ;`GPIO3MIS0.P3_5`           0x50038018,        1, base=16,    bitRange=5-5
 2223                           
 2224                           GPIO3MISL                EQU  0x50038018
 2225                           ;`GPIO3MISL.P3_0`           0x50038018,        2, base=16,    bitRange=0-0
 2226                           ;`GPIO3MISL.P3_1`           0x50038018,        2, base=16,    bitRange=1-1
 2227                           ;`GPIO3MISL.P3_2`           0x50038018,        2, base=16,    bitRange=2-2
 2228                           ;`GPIO3MISL.P3_3`           0x50038018,        2, base=16,    bitRange=3-3
 2229                           ;`GPIO3MISL.P3_4`           0x50038018,        2, base=16,    bitRange=4-4
 2230                           ;`GPIO3MISL.P3_5`           0x50038018,        2, base=16,    bitRange=5-5
 2231                           
 2232                           GPIO3IC                  EQU  0x5003801C
 2233                           
 2234                           
 2235                           ;
 2236                           ;               UART
 2237                           ;
 2238                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2239                           ;     ----                        ----      -------     --------  ----------- --------
 2240                           
 2241                           
 2242                           U0RBRTHR                 EQU  0x40008000
 2243                           
 2244                           U0RBR                    EQU  0x40008000
 2245                           
 2246                           U0THR                    EQU  0x40008000
 2247                           
 2248                           U0DLL                    EQU  0x40008000
 2249                           
 2250                           U0DLM                    EQU  0x40008004
 2251                           
 2252                           U0IER                    EQU  0x40008004
 2253                           ;`U0IER.RDAIE`              0x40008004,        4, base=16,    bitRange=0-0
 2254                           ;`U0IER.THREIE`             0x40008004,        4, base=16,    bitRange=1-1
 2255                           ;`U0IER.RXLSIE`             0x40008004,        4, base=16,    bitRange=2-2
 2256                           ;`U0IER.ABEOINTEN`          0x40008004,        4, base=16,    bitRange=8-8
 2257                           ;`U0IER.ABTOINTEN`          0x40008004,        4, base=16,    bitRange=9-9
 2258                           
 2259                           U0FCR                    EQU  0x40008008
 2260                           ;`U0FCR.FCRFE`              0x40008008,        4, base=16,    bitRange=0-0
 2261                           ;`U0FCR.RFR`                0x40008008,        4, base=16,    bitRange=1-1
 2262                           ;`U0FCR.TFR`                0x40008008,        4, base=16,    bitRange=2-2
 2263                           ;`U0FCR.RTLS`               0x40008008,        4, base=16,    bitRange=6-7
 2264                           
 2265                           U0IIR                    EQU  0x40008008
 2266                           ;`U0IIR.IP`                 0x40008008,        4, base=16,    bitRange=0-0
 2267                           ;`U0IIR.IID`                0x40008008,        4, base=16,    bitRange=1-3
 2268                           ;`U0IIR.IIRFE`              0x40008008,        4, base=16,    bitRange=6-7
 2269                           ;`U0IIR.ABEOINT`            0x40008008,        4, base=16,    bitRange=8-8
 2270                           ;`U0IIR.ABTOINT`            0x40008008,        4, base=16,    bitRange=9-9
 2271                           
 2272                           U0LCR                    EQU  0x4000800C
 2273                           ;`U0LCR.WLS`                0x4000800C,        1, base=16,    bitRange=0-1
 2274                           ;`U0LCR.SBS`                0x4000800C,        1, base=16,    bitRange=2-2
 2275                           ;`U0LCR.PE`                 0x4000800C,        1, base=16,    bitRange=3-3
 2276                           ;`U0LCR.PS`                 0x4000800C,        1, base=16,    bitRange=4-5
 2277                           ;`U0LCR.BC`                 0x4000800C,        1, base=16,    bitRange=6-6
 2278                           ;`U0LCR.DLAB`               0x4000800C,        1, base=16,    bitRange=7-7
 2279                           
 2280                           U0MCR                    EQU  0x40008010
 2281                           ;`U0MCR.DTR`                0x40008010,        1, base=16,    bitRange=0-0
 2282                           ;`U0MCR.RTS`                0x40008010,        1, base=16,    bitRange=1-1
 2283                           ;`U0MCR.LMS`                0x40008010,        1, base=16,    bitRange=4-4
 2284                           ;`U0MCR.RTSEN`              0x40008010,        1, base=16,    bitRange=6-6
 2285                           ;`U0MCR.CTSEN`              0x40008010,        1, base=16,    bitRange=7-7
 2286                           
 2287                           U0LSR                    EQU  0x40008014
 2288                           ;`U0LSR.DR`                 0x40008014,        1, base=16,    bitRange=0-0
 2289                           ;`U0LSR.OE`                 0x40008014,        1, base=16,    bitRange=1-1
 2290                           ;`U0LSR.PE`                 0x40008014,        1, base=16,    bitRange=2-2
 2291                           ;`U0LSR.FE`                 0x40008014,        1, base=16,    bitRange=3-3
 2292                           ;`U0LSR.BI`                 0x40008014,        1, base=16,    bitRange=4-4
 2293                           ;`U0LSR.THRE`               0x40008014,        1, base=16,    bitRange=5-5
 2294                           ;`U0LSR.TEMT`               0x40008014,        1, base=16,    bitRange=6-6
 2295                           ;`U0LSR.RXFE`               0x40008014,        1, base=16,    bitRange=7-7
 2296                           
 2297                           U0MSR                    EQU  0x40008018
 2298                           ;`U0MSR.DCTS`               0x40008018,        1, base=16,    bitRange=0-0
 2299                           ;`U0MSR.DDSR`               0x40008018,        1, base=16,    bitRange=1-1
 2300                           ;`U0MSR.TERI`               0x40008018,        1, base=16,    bitRange=2-2
 2301                           ;`U0MSR.DDCD`               0x40008018,        1, base=16,    bitRange=3-3
 2302                           ;`U0MSR.CTS`                0x40008018,        1, base=16,    bitRange=4-4
 2303                           ;`U0MSR.DSR`                0x40008018,        1, base=16,    bitRange=5-5
 2304                           ;`U0MSR.RI`                 0x40008018,        1, base=16,    bitRange=6-6
 2305                           ;`U0MSR.DCD`                0x40008018,        1, base=16,    bitRange=7-7
 2306                           
 2307                           U0SCR                    EQU  0x4000801C
 2308                           
 2309                           U0ACR                    EQU  0x40008020
 2310                           ;`U0ACR.START`              0x40008020,        4, base=16,    bitRange=0-0
 2311                           ;`U0ACR.MODE`               0x40008020,        4, base=16,    bitRange=1-1
 2312                           ;`U0ACR.AUTORESTART`        0x40008020,        4, base=16,    bitRange=2-2
 2313                           ;`U0ACR.ABEOINTCLR`         0x40008020,        4, base=16,    bitRange=8-8
 2314                           ;`U0ACR.ABTOINTCLR`         0x40008020,        4, base=16,    bitRange=9-9
 2315                           
 2316                           U0FDR                    EQU  0x40008028
 2317                           ;`U0FDR.DIVADDVAL`          0x40008028,        4, base=16,    bitRange=0-3
 2318                           ;`U0FDR.MULVAL`             0x40008028,        4, base=16,    bitRange=4-7
 2319                           
 2320                           U0TER                    EQU  0x40008030
 2321                           ;`U0TER.TXEN`               0x40008030,        1, base=16,    bitRange=7-7
 2322                           
 2323                           U0RS485CTRL              EQU  0x4000804C
 2324                           ;`U0RS485CTRL.NMMEN`        0x4000804C,        4, base=16,    bitRange=0-0
 2325                           ;`U0RS485CTRL.RXDIS`        0x4000804C,        4, base=16,    bitRange=1-1
 2326                           ;`U0RS485CTRL.AADEN`        0x4000804C,        4, base=16,    bitRange=2-2
 2327                           ;`U0RS485CTRL.SEL`          0x4000804C,        4, base=16,    bitRange=3-3
 2328                           ;`U0RS485CTRL.DCTRL`        0x4000804C,        4, base=16,    bitRange=4-4
 2329                           ;`U0RS485CTRL.OINV`         0x4000804C,        4, base=16,    bitRange=5-5
 2330                           
 2331                           U0ADRMATCH               EQU  0x40008050
 2332                           
 2333                           U0RS485DLY               EQU  0x40008054
 2334                           
 2335                           
 2336                           ;
 2337                           ;               SSP0
 2338                           ;
 2339                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2340                           ;     ----                        ----      -------     --------  ----------- --------
 2341                           
 2342                           
 2343                           SSP0CR0                  EQU  0x40040000
 2344                           ;`SSP0CR0.DSS`              0x40040000,        4, base=16,    bitRange=0-3
 2345                           ;`SSP0CR0.FRF`              0x40040000,        4, base=16,    bitRange=4-5
 2346                           ;`SSP0CR0.CPOL`             0x40040000,        4, base=16,    bitRange=6-6
 2347                           ;`SSP0CR0.CPHA`             0x40040000,        4, base=16,    bitRange=7-7
 2348                           ;`SSP0CR0.SCR`              0x40040000,        4, base=16,    bitRange=8-15
 2349                           
 2350                           SSP0CR1                  EQU  0x40040004
 2351                           ;`SSP0CR1.LBM`              0x40040004,        4, base=16,    bitRange=0-0
 2352                           ;`SSP0CR1.SSE`              0x40040004,        4, base=16,    bitRange=1-1
 2353                           ;`SSP0CR1.MS`               0x40040004,        4, base=16,    bitRange=2-2
 2354                           ;`SSP0CR1.SOD`              0x40040004,        4, base=16,    bitRange=3-3
 2355                           
 2356                           SSP0DR                   EQU  0x40040008
 2357                           ;`SSP0DR.DATA`              0x40040008,        4, base=16,    bitRange=0-15
 2358                           
 2359                           SSP0SR                   EQU  0x4004000C
 2360                           ;`SSP0SR.TFE`               0x4004000C,        4, base=16,    bitRange=0-0
 2361                           ;`SSP0SR.TNF`               0x4004000C,        4, base=16,    bitRange=1-1
 2362                           ;`SSP0SR.RNE`               0x4004000C,        4, base=16,    bitRange=2-2
 2363                           ;`SSP0SR.RFF`               0x4004000C,        4, base=16,    bitRange=3-3
 2364                           ;`SSP0SR.BSY`               0x4004000C,        4, base=16,    bitRange=4-4
 2365                           
 2366                           SSP0CPSR                 EQU  0x40040010
 2367                           ;`SSP0CPSR.CPSDVSR`         0x40040010,        4, base=16,    bitRange=0-7
 2368                           
 2369                           SSP0IMSC                 EQU  0x40040014
 2370                           ;`SSP0IMSC.RORIM`           0x40040014,        4, base=16,    bitRange=0-0
 2371                           ;`SSP0IMSC.RTIM`            0x40040014,        4, base=16,    bitRange=1-1
 2372                           ;`SSP0IMSC.RXIM`            0x40040014,        4, base=16,    bitRange=2-2
 2373                           ;`SSP0IMSC.TXIM`            0x40040014,        4, base=16,    bitRange=3-3
 2374                           
 2375                           SSP0RIS                  EQU  0x40040018
 2376                           ;`SSP0RIS.RORRIS`           0x40040018,        4, base=16,    bitRange=0-0
 2377                           ;`SSP0RIS.RTRIS`            0x40040018,        4, base=16,    bitRange=1-1
 2378                           ;`SSP0RIS.RXRIS`            0x40040018,        4, base=16,    bitRange=2-2
 2379                           ;`SSP0RIS.TXRIS`            0x40040018,        4, base=16,    bitRange=3-3
 2380                           
 2381                           SSP0MIS                  EQU  0x4004001C
 2382                           ;`SSP0MIS.RORMIS`           0x4004001C,        4, base=16,    bitRange=0-0
 2383                           ;`SSP0MIS.RTMIS`            0x4004001C,        4, base=16,    bitRange=1-1
 2384                           ;`SSP0MIS.RXMIS`            0x4004001C,        4, base=16,    bitRange=2-2
 2385                           ;`SSP0MIS.TXMIS`            0x4004001C,        4, base=16,    bitRange=3-3
 2386                           
 2387                           SSP0ICR                  EQU  0x40040020
 2388                           ;`SSP0ICR.RORIC`            0x40040020,        4, base=16,    bitRange=0-0
 2389                           ;`SSP0ICR.RTIC`             0x40040020,        4, base=16,    bitRange=1-1
 2390                           
 2391                           
 2392                           ;
 2393                           ;               SSP1
 2394                           ;
 2395                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2396                           ;     ----                        ----      -------     --------  ----------- --------
 2397                           
 2398                           
 2399                           SSP1CR0                  EQU  0x40058000
 2400                           ;`SSP1CR0.DSS`              0x40058000,        4, base=16,    bitRange=0-3
 2401                           ;`SSP1CR0.FRF`              0x40058000,        4, base=16,    bitRange=4-5
 2402                           ;`SSP1CR0.CPOL`             0x40058000,        4, base=16,    bitRange=6-6
 2403                           ;`SSP1CR0.CPHA`             0x40058000,        4, base=16,    bitRange=7-7
 2404                           ;`SSP1CR0.SCR`              0x40058000,        4, base=16,    bitRange=8-15
 2405                           
 2406                           SSP1CR1                  EQU  0x40058004
 2407                           ;`SSP1CR1.LBM`              0x40058004,        4, base=16,    bitRange=0-0
 2408                           ;`SSP1CR1.SSE`              0x40058004,        4, base=16,    bitRange=1-1
 2409                           ;`SSP1CR1.MS`               0x40058004,        4, base=16,    bitRange=2-2
 2410                           ;`SSP1CR1.SOD`              0x40058004,        4, base=16,    bitRange=3-3
 2411                           
 2412                           SSP1DR                   EQU  0x40058008
 2413                           ;`SSP1DR.DATA`              0x40058008,        4, base=16,    bitRange=0-15
 2414                           
 2415                           SSP1SR                   EQU  0x4005800C
 2416                           ;`SSP1SR.TFE`               0x4005800C,        4, base=16,    bitRange=0-0
 2417                           ;`SSP1SR.TNF`               0x4005800C,        4, base=16,    bitRange=1-1
 2418                           ;`SSP1SR.RNE`               0x4005800C,        4, base=16,    bitRange=2-2
 2419                           ;`SSP1SR.RFF`               0x4005800C,        4, base=16,    bitRange=3-3
 2420                           ;`SSP1SR.BSY`               0x4005800C,        4, base=16,    bitRange=4-4
 2421                           
 2422                           SSP1CPSR                 EQU  0x40058010
 2423                           ;`SSP1CPSR.CPSDVSR`         0x40058010,        4, base=16,    bitRange=0-7
 2424                           
 2425                           SSP1IMSC                 EQU  0x40058014
 2426                           ;`SSP1IMSC.RORIM`           0x40058014,        4, base=16,    bitRange=0-0
 2427                           ;`SSP1IMSC.RTIM`            0x40058014,        4, base=16,    bitRange=1-1
 2428                           ;`SSP1IMSC.RXIM`            0x40058014,        4, base=16,    bitRange=2-2
 2429                           ;`SSP1IMSC.TXIM`            0x40058014,        4, base=16,    bitRange=3-3
 2430                           
 2431                           SSP1RIS                  EQU  0x40058018
 2432                           ;`SSP1RIS.RORRIS`           0x40058018,        4, base=16,    bitRange=0-0
 2433                           ;`SSP1RIS.RTRIS`            0x40058018,        4, base=16,    bitRange=1-1
 2434                           ;`SSP1RIS.RXRIS`            0x40058018,        4, base=16,    bitRange=2-2
 2435                           ;`SSP1RIS.TXRIS`            0x40058018,        4, base=16,    bitRange=3-3
 2436                           
 2437                           SSP1MIS                  EQU  0x4005801C
 2438                           ;`SSP1MIS.RORMIS`           0x4005801C,        4, base=16,    bitRange=0-0
 2439                           ;`SSP1MIS.RTMIS`            0x4005801C,        4, base=16,    bitRange=1-1
 2440                           ;`SSP1MIS.RXMIS`            0x4005801C,        4, base=16,    bitRange=2-2
 2441                           ;`SSP1MIS.TXMIS`            0x4005801C,        4, base=16,    bitRange=3-3
 2442                           
 2443                           SSP1ICR                  EQU  0x40058020
 2444                           ;`SSP1ICR.RORIC`            0x40058020,        4, base=16,    bitRange=0-0
 2445                           ;`SSP1ICR.RTIC`             0x40058020,        4, base=16,    bitRange=1-1
 2446                           
 2447                           
 2448                           ;
 2449                           ;               I2C
 2450                           ;
 2451                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2452                           ;     ----                        ----      -------     --------  ----------- --------
 2453                           
 2454                           
 2455                           I2C0CONSET               EQU  0x40000000
 2456                           ;`I2C0CONSET.AA`            0x40000000,        4, base=16,    bitRange=2-2
 2457                           ;`I2C0CONSET.SI`            0x40000000,        4, base=16,    bitRange=3-3
 2458                           ;`I2C0CONSET.STO`           0x40000000,        4, base=16,    bitRange=4-4
 2459                           ;`I2C0CONSET.STA`           0x40000000,        4, base=16,    bitRange=5-5
 2460                           ;`I2C0CONSET.I2EN`          0x40000000,        4, base=16,    bitRange=6-6
 2461                           
 2462                           I2C0STAT                 EQU  0x40000004
 2463                           ;`I2C0STAT.STATUS`          0x40000004,        4, base=16,    bitRange=0-7
 2464                           
 2465                           I2C0DAT                  EQU  0x40000008
 2466                           ;`I2C0DAT.DATA`             0x40000008,        4, base=16,    bitRange=0-7
 2467                           
 2468                           I2C0ADR                  EQU  0x4000000C
 2469                           ;`I2C0ADR.GC`               0x4000000C,        4, base=16,    bitRange=0-0
 2470                           ;`I2C0ADR.ADDR`             0x4000000C,        4, base=16,    bitRange=1-7
 2471                           
 2472                           I2C0SCLH                 EQU  0x40000010
 2473                           ;`I2C0SCLH.SCLH`            0x40000010,        4, base=16,    bitRange=0-15
 2474                           
 2475                           I2C0SCLL                 EQU  0x40000014
 2476                           ;`I2C0SCLL.SCLL`            0x40000014,        4, base=16,    bitRange=0-15
 2477                           
 2478                           I2C0CONCLR               EQU  0x40000018
 2479                           
 2480                           I2C0MMCTRL               EQU  0x4000001C
 2481                           ;`I2C0MMCTRL.MM_ENA`        0x4000001C,        4, base=16,    bitRange=0-0
 2482                           ;`I2C0MMCTRL.ENA_SCL`       0x4000001C,        4, base=16,    bitRange=1-1
 2483                           ;`I2C0MMCTRL.MATCH_ALL`     0x4000001C,        4, base=16,    bitRange=2-2
 2484                           
 2485                           I2C0ADR1                 EQU  0x40000020
 2486                           ;`I2C0ADR1.GC`              0x40000020,        4, base=16,    bitRange=0-0
 2487                           ;`I2C0ADR1.ADDR`            0x40000020,        4, base=16,    bitRange=1-7
 2488                           
 2489                           I2C0ADR2                 EQU  0x40000024
 2490                           ;`I2C0ADR2.GC`              0x40000024,        4, base=16,    bitRange=0-0
 2491                           ;`I2C0ADR2.ADDR`            0x40000024,        4, base=16,    bitRange=1-7
 2492                           
 2493                           I2C0ADR3                 EQU  0x40000028
 2494                           ;`I2C0ADR3.GC`              0x40000028,        4, base=16,    bitRange=0-0
 2495                           ;`I2C0ADR3.ADDR`            0x40000028,        4, base=16,    bitRange=1-7
 2496                           
 2497                           I2C0DATABUFFER           EQU  0x4000002C
 2498                           ;`I2C0DATABUFFER.DATA`      0x4000002C,        4, base=16,    bitRange=0-7
 2499                           
 2500                           I2C0MASK0                EQU  0x40000030
 2501                           ;`I2C0MASK0.MASK`           0x40000030,        4, base=16,    bitRange=1-7
 2502                           
 2503                           I2C0MASK1                EQU  0x40000034
 2504                           ;`I2C0MASK1.MASK`           0x40000034,        4, base=16,    bitRange=1-7
 2505                           
 2506                           I2C0MASK2                EQU  0x40000038
 2507                           ;`I2C0MASK2.MASK`           0x40000038,        4, base=16,    bitRange=1-7
 2508                           
 2509                           I2C0MASK3                EQU  0x4000003C
 2510                           ;`I2C0MASK3.MASK`           0x4000003C,        4, base=16,    bitRange=1-7
 2511                           
 2512                           
 2513                           ;
 2514                           ;               CT16B0
 2515                           ;
 2516                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2517                           ;     ----                        ----      -------     --------  ----------- --------
 2518                           
 2519                           
 2520                           TMR16B0IR                EQU  0x4000C000
 2521                           ;`TMR16B0IR.MR0INT`         0x4000C000,        4, base=16,    bitRange=0-0
 2522                           ;`TMR16B0IR.MR1INT`         0x4000C000,        4, base=16,    bitRange=1-1
 2523                           ;`TMR16B0IR.MR2INT`         0x4000C000,        4, base=16,    bitRange=2-2
 2524                           ;`TMR16B0IR.MR3INT`         0x4000C000,        4, base=16,    bitRange=3-3
 2525                           ;`TMR16B0IR.CR0INT`         0x4000C000,        4, base=16,    bitRange=4-4
 2526                           
 2527                           TMR16B0TCR               EQU  0x4000C004
 2528                           ;`TMR16B0TCR.CE`            0x4000C004,        4, base=16,    bitRange=0-0
 2529                           ;`TMR16B0TCR.CR`            0x4000C004,        4, base=16,    bitRange=1-1
 2530                           
 2531                           TMR16B0TC                EQU  0x4000C008
 2532                           
 2533                           TMR16B0PR                EQU  0x4000C00C
 2534                           
 2535                           TMR16B0PC                EQU  0x4000C010
 2536                           
 2537                           TMR16B0MCR               EQU  0x4000C014
 2538                           ;`TMR16B0MCR.MR0I`          0x4000C014,        4, base=16,    bitRange=0-0
 2539                           ;`TMR16B0MCR.MR0R`          0x4000C014,        4, base=16,    bitRange=1-1
 2540                           ;`TMR16B0MCR.MR0S`          0x4000C014,        4, base=16,    bitRange=2-2
 2541                           ;`TMR16B0MCR.MR1I`          0x4000C014,        4, base=16,    bitRange=3-3
 2542                           ;`TMR16B0MCR.MR1R`          0x4000C014,        4, base=16,    bitRange=4-4
 2543                           ;`TMR16B0MCR.MR1S`          0x4000C014,        4, base=16,    bitRange=5-5
 2544                           ;`TMR16B0MCR.MR2I`          0x4000C014,        4, base=16,    bitRange=6-6
 2545                           ;`TMR16B0MCR.MR2R`          0x4000C014,        4, base=16,    bitRange=7-7
 2546                           ;`TMR16B0MCR.MR2S`          0x4000C014,        4, base=16,    bitRange=8-8
 2547                           ;`TMR16B0MCR.MR3I`          0x4000C014,        4, base=16,    bitRange=9-9
 2548                           ;`TMR16B0MCR.MR3R`          0x4000C014,        4, base=16,    bitRange=10-10
 2549                           ;`TMR16B0MCR.MR3S`          0x4000C014,        4, base=16,    bitRange=11-11
 2550                           
 2551                           TMR16B0MR0               EQU  0x4000C018
 2552                           
 2553                           TMR16B0MR1               EQU  0x4000C01C
 2554                           
 2555                           TMR16B0MR2               EQU  0x4000C020
 2556                           
 2557                           TMR16B0MR3               EQU  0x4000C024
 2558                           
 2559                           TMR16B0CCR               EQU  0x4000C028
 2560                           ;`TMR16B0CCR.CAP0RE`        0x4000C028,        4, base=16,    bitRange=0-0
 2561                           ;`TMR16B0CCR.CAP0FE`        0x4000C028,        4, base=16,    bitRange=1-1
 2562                           ;`TMR16B0CCR.CAP0I`         0x4000C028,        4, base=16,    bitRange=2-2
 2563                           
 2564                           TMR16B0CR0               EQU  0x4000C02C
 2565                           
 2566                           TMR16B0EMR               EQU  0x4000C03C
 2567                           ;`TMR16B0EMR.EM0`           0x4000C03C,        4, base=16,    bitRange=0-0
 2568                           ;`TMR16B0EMR.EM1`           0x4000C03C,        4, base=16,    bitRange=1-1
 2569                           ;`TMR16B0EMR.EM2`           0x4000C03C,        4, base=16,    bitRange=2-2
 2570                           ;`TMR16B0EMR.EM3`           0x4000C03C,        4, base=16,    bitRange=3-3
 2571                           ;`TMR16B0EMR.EMC0`          0x4000C03C,        4, base=16,    bitRange=4-5
 2572                           ;`TMR16B0EMR.EMC1`          0x4000C03C,        4, base=16,    bitRange=6-7
 2573                           ;`TMR16B0EMR.EMC2`          0x4000C03C,        4, base=16,    bitRange=8-9
 2574                           ;`TMR16B0EMR.EMC3`          0x4000C03C,        4, base=16,    bitRange=10-11
 2575                           
 2576                           TMR16B0CTCR              EQU  0x4000C070
 2577                           ;`TMR16B0CTCR.CTM`          0x4000C070,        4, base=16,    bitRange=0-1
 2578                           ;`TMR16B0CTCR.CIS`          0x4000C070,        4, base=16,    bitRange=2-3
 2579                           
 2580                           TMR16B0PWMC              EQU  0x4000C074
 2581                           ;`TMR16B0PWMC.PWM0ENA`      0x4000C074,        4, base=16,    bitRange=0-0
 2582                           ;`TMR16B0PWMC.PWM1ENA`      0x4000C074,        4, base=16,    bitRange=1-1
 2583                           ;`TMR16B0PWMC.PWM2ENA`      0x4000C074,        4, base=16,    bitRange=2-2
 2584                           ;`TMR16B0PWMC.PWM3ENA`      0x4000C074,        4, base=16,    bitRange=3-3
 2585                           
 2586                           
 2587                           ;
 2588                           ;               CT16B1
 2589                           ;
 2590                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2591                           ;     ----                        ----      -------     --------  ----------- --------
 2592                           
 2593                           
 2594                           TMR16B1IR                EQU  0x40010000
 2595                           ;`TMR16B1IR.MR0INT`         0x40010000,        4, base=16,    bitRange=0-0
 2596                           ;`TMR16B1IR.MR1INT`         0x40010000,        4, base=16,    bitRange=1-1
 2597                           ;`TMR16B1IR.MR2INT`         0x40010000,        4, base=16,    bitRange=2-2
 2598                           ;`TMR16B1IR.MR3INT`         0x40010000,        4, base=16,    bitRange=3-3
 2599                           ;`TMR16B1IR.CR0INT`         0x40010000,        4, base=16,    bitRange=4-4
 2600                           
 2601                           TMR16B1TCR               EQU  0x40010004
 2602                           ;`TMR16B1TCR.CE`            0x40010004,        4, base=16,    bitRange=0-0
 2603                           ;`TMR16B1TCR.CR`            0x40010004,        4, base=16,    bitRange=1-1
 2604                           
 2605                           TMR16B1TC                EQU  0x40010008
 2606                           
 2607                           TMR16B1PR                EQU  0x4001000C
 2608                           
 2609                           TMR16B1PC                EQU  0x40010010
 2610                           
 2611                           TMR16B1MCR               EQU  0x40010014
 2612                           ;`TMR16B1MCR.MR0I`          0x40010014,        4, base=16,    bitRange=0-0
 2613                           ;`TMR16B1MCR.MR0R`          0x40010014,        4, base=16,    bitRange=1-1
 2614                           ;`TMR16B1MCR.MR0S`          0x40010014,        4, base=16,    bitRange=2-2
 2615                           ;`TMR16B1MCR.MR1I`          0x40010014,        4, base=16,    bitRange=3-3
 2616                           ;`TMR16B1MCR.MR1R`          0x40010014,        4, base=16,    bitRange=4-4
 2617                           ;`TMR16B1MCR.MR1S`          0x40010014,        4, base=16,    bitRange=5-5
 2618                           ;`TMR16B1MCR.MR2I`          0x40010014,        4, base=16,    bitRange=6-6
 2619                           ;`TMR16B1MCR.MR2R`          0x40010014,        4, base=16,    bitRange=7-7
 2620                           ;`TMR16B1MCR.MR2S`          0x40010014,        4, base=16,    bitRange=8-8
 2621                           ;`TMR16B1MCR.MR3I`          0x40010014,        4, base=16,    bitRange=9-9
 2622                           ;`TMR16B1MCR.MR3R`          0x40010014,        4, base=16,    bitRange=10-10
 2623                           ;`TMR16B1MCR.MR3S`          0x40010014,        4, base=16,    bitRange=11-11
 2624                           
 2625                           TMR16B1MR0               EQU  0x40010018
 2626                           
 2627                           TMR16B1MR1               EQU  0x4001001C
 2628                           
 2629                           TMR16B1MR2               EQU  0x40010020
 2630                           
 2631                           TMR16B1MR3               EQU  0x40010024
 2632                           
 2633                           TMR16B1CCR               EQU  0x40010028
 2634                           ;`TMR16B1CCR.CAP0RE`        0x40010028,        4, base=16,    bitRange=0-0
 2635                           ;`TMR16B1CCR.CAP0FE`        0x40010028,        4, base=16,    bitRange=1-1
 2636                           ;`TMR16B1CCR.CAP0I`         0x40010028,        4, base=16,    bitRange=2-2
 2637                           
 2638                           TMR16B1CR0               EQU  0x4001002C
 2639                           
 2640                           TMR16B1EMR               EQU  0x4001003C
 2641                           ;`TMR16B1EMR.EM0`           0x4001003C,        4, base=16,    bitRange=0-0
 2642                           ;`TMR16B1EMR.EM1`           0x4001003C,        4, base=16,    bitRange=1-1
 2643                           ;`TMR16B1EMR.EM2`           0x4001003C,        4, base=16,    bitRange=2-2
 2644                           ;`TMR16B1EMR.EM3`           0x4001003C,        4, base=16,    bitRange=3-3
 2645                           ;`TMR16B1EMR.EMC0`          0x4001003C,        4, base=16,    bitRange=4-5
 2646                           ;`TMR16B1EMR.EMC1`          0x4001003C,        4, base=16,    bitRange=6-7
 2647                           ;`TMR16B1EMR.EMC2`          0x4001003C,        4, base=16,    bitRange=8-9
 2648                           ;`TMR16B1EMR.EMC3`          0x4001003C,        4, base=16,    bitRange=10-11
 2649                           
 2650                           TMR16B1CTCR              EQU  0x40010070
 2651                           ;`TMR16B1CTCR.CTM`          0x40010070,        4, base=16,    bitRange=0-1
 2652                           ;`TMR16B1CTCR.CIS`          0x40010070,        4, base=16,    bitRange=2-3
 2653                           
 2654                           TMR16B1PWMC              EQU  0x40010074
 2655                           ;`TMR16B1PWMC.PWM0ENA`      0x40010074,        4, base=16,    bitRange=0-0
 2656                           ;`TMR16B1PWMC.PWM1ENA`      0x40010074,        4, base=16,    bitRange=1-1
 2657                           ;`TMR16B1PWMC.PWM2ENA`      0x40010074,        4, base=16,    bitRange=2-2
 2658                           ;`TMR16B1PWMC.PWM3ENA`      0x40010074,        4, base=16,    bitRange=3-3
 2659                           
 2660                           
 2661                           ;
 2662                           ;               CT32B0
 2663                           ;
 2664                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2665                           ;     ----                        ----      -------     --------  ----------- --------
 2666                           
 2667                           
 2668                           TMR32B0IR                EQU  0x40014000
 2669                           ;`TMR32B0IR.MR0INT`         0x40014000,        4, base=16,    bitRange=0-0
 2670                           ;`TMR32B0IR.MR1INT`         0x40014000,        4, base=16,    bitRange=1-1
 2671                           ;`TMR32B0IR.MR2INT`         0x40014000,        4, base=16,    bitRange=2-2
 2672                           ;`TMR32B0IR.MR3INT`         0x40014000,        4, base=16,    bitRange=3-3
 2673                           ;`TMR32B0IR.CR0INT`         0x40014000,        4, base=16,    bitRange=4-4
 2674                           
 2675                           TMR32B0TCR               EQU  0x40014004
 2676                           ;`TMR32B0TCR.CE`            0x40014004,        4, base=16,    bitRange=0-0
 2677                           ;`TMR32B0TCR.CR`            0x40014004,        4, base=16,    bitRange=1-1
 2678                           
 2679                           TMR32B0TC                EQU  0x40014008
 2680                           
 2681                           TMR32B0PR                EQU  0x4001400C
 2682                           
 2683                           TMR32B0PC                EQU  0x40014010
 2684                           
 2685                           TMR32B0MCR               EQU  0x40014014
 2686                           ;`TMR32B0MCR.MR0I`          0x40014014,        4, base=16,    bitRange=0-0
 2687                           ;`TMR32B0MCR.MR0R`          0x40014014,        4, base=16,    bitRange=1-1
 2688                           ;`TMR32B0MCR.MR0S`          0x40014014,        4, base=16,    bitRange=2-2
 2689                           ;`TMR32B0MCR.MR1I`          0x40014014,        4, base=16,    bitRange=3-3
 2690                           ;`TMR32B0MCR.MR1R`          0x40014014,        4, base=16,    bitRange=4-4
 2691                           ;`TMR32B0MCR.MR1S`          0x40014014,        4, base=16,    bitRange=5-5
 2692                           ;`TMR32B0MCR.MR2I`          0x40014014,        4, base=16,    bitRange=6-6
 2693                           ;`TMR32B0MCR.MR2R`          0x40014014,        4, base=16,    bitRange=7-7
 2694                           ;`TMR32B0MCR.MR2S`          0x40014014,        4, base=16,    bitRange=8-8
 2695                           ;`TMR32B0MCR.MR3I`          0x40014014,        4, base=16,    bitRange=9-9
 2696                           ;`TMR32B0MCR.MR3R`          0x40014014,        4, base=16,    bitRange=10-10
 2697                           ;`TMR32B0MCR.MR3S`          0x40014014,        4, base=16,    bitRange=11-11
 2698                           
 2699                           TMR32B0MR0               EQU  0x40014018
 2700                           
 2701                           TMR32B0MR1               EQU  0x4001401C
 2702                           
 2703                           TMR32B0MR2               EQU  0x40014020
 2704                           
 2705                           TMR32B0MR3               EQU  0x40014024
 2706                           
 2707                           TMR32B0CCR               EQU  0x40014028
 2708                           ;`TMR32B0CCR.CAP0RE`        0x40014028,        4, base=16,    bitRange=0-0
 2709                           ;`TMR32B0CCR.CAP0FE`        0x40014028,        4, base=16,    bitRange=1-1
 2710                           ;`TMR32B0CCR.CAP0I`         0x40014028,        4, base=16,    bitRange=2-2
 2711                           
 2712                           TMR32B0CR0               EQU  0x4001402C
 2713                           
 2714                           TMR32B0EMR               EQU  0x4001403C
 2715                           ;`TMR32B0EMR.EM0`           0x4001403C,        4, base=16,    bitRange=0-0
 2716                           ;`TMR32B0EMR.EM1`           0x4001403C,        4, base=16,    bitRange=1-1
 2717                           ;`TMR32B0EMR.EM2`           0x4001403C,        4, base=16,    bitRange=2-2
 2718                           ;`TMR32B0EMR.EM3`           0x4001403C,        4, base=16,    bitRange=3-3
 2719                           ;`TMR32B0EMR.EMC0`          0x4001403C,        4, base=16,    bitRange=4-5
 2720                           ;`TMR32B0EMR.EMC1`          0x4001403C,        4, base=16,    bitRange=6-7
 2721                           ;`TMR32B0EMR.EMC2`          0x4001403C,        4, base=16,    bitRange=8-9
 2722                           ;`TMR32B0EMR.EMC3`          0x4001403C,        4, base=16,    bitRange=10-11
 2723                           
 2724                           TMR32B0CTCR              EQU  0x40014070
 2725                           ;`TMR32B0CTCR.CTM`          0x40014070,        4, base=16,    bitRange=0-1
 2726                           ;`TMR32B0CTCR.CIS`          0x40014070,        4, base=16,    bitRange=2-3
 2727                           
 2728                           TMR32B0PWMC              EQU  0x40014074
 2729                           ;`TMR32B0PWMC.PWM0ENA`      0x40014074,        4, base=16,    bitRange=0-0
 2730                           ;`TMR32B0PWMC.PWM1ENA`      0x40014074,        4, base=16,    bitRange=1-1
 2731                           ;`TMR32B0PWMC.PWM2ENA`      0x40014074,        4, base=16,    bitRange=2-2
 2732                           ;`TMR32B0PWMC.PWM3ENA`      0x40014074,        4, base=16,    bitRange=3-3
 2733                           
 2734                           
 2735                           ;
 2736                           ;               CT32B1
 2737                           ;
 2738                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2739                           ;     ----                        ----      -------     --------  ----------- --------
 2740                           
 2741                           
 2742                           TMR32B1IR                EQU  0x40018000
 2743                           ;`TMR32B1IR.MR0INT`         0x40018000,        4, base=16,    bitRange=0-0
 2744                           ;`TMR32B1IR.MR1INT`         0x40018000,        4, base=16,    bitRange=1-1
 2745                           ;`TMR32B1IR.MR2INT`         0x40018000,        4, base=16,    bitRange=2-2
 2746                           ;`TMR32B1IR.MR3INT`         0x40018000,        4, base=16,    bitRange=3-3
 2747                           ;`TMR32B1IR.CR0INT`         0x40018000,        4, base=16,    bitRange=4-4
 2748                           
 2749                           TMR32B1TCR               EQU  0x40018004
 2750                           ;`TMR32B1TCR.CE`            0x40018004,        4, base=16,    bitRange=0-0
 2751                           ;`TMR32B1TCR.CR`            0x40018004,        4, base=16,    bitRange=1-1
 2752                           
 2753                           TMR32B1TC                EQU  0x40018008
 2754                           
 2755                           TMR32B1PR                EQU  0x4001800C
 2756                           
 2757                           TMR32B1PC                EQU  0x40018010
 2758                           
 2759                           TMR32B1MCR               EQU  0x40018014
 2760                           ;`TMR32B1MCR.MR0I`          0x40018014,        4, base=16,    bitRange=0-0
 2761                           ;`TMR32B1MCR.MR0R`          0x40018014,        4, base=16,    bitRange=1-1
 2762                           ;`TMR32B1MCR.MR0S`          0x40018014,        4, base=16,    bitRange=2-2
 2763                           ;`TMR32B1MCR.MR1I`          0x40018014,        4, base=16,    bitRange=3-3
 2764                           ;`TMR32B1MCR.MR1R`          0x40018014,        4, base=16,    bitRange=4-4
 2765                           ;`TMR32B1MCR.MR1S`          0x40018014,        4, base=16,    bitRange=5-5
 2766                           ;`TMR32B1MCR.MR2I`          0x40018014,        4, base=16,    bitRange=6-6
 2767                           ;`TMR32B1MCR.MR2R`          0x40018014,        4, base=16,    bitRange=7-7
 2768                           ;`TMR32B1MCR.MR2S`          0x40018014,        4, base=16,    bitRange=8-8
 2769                           ;`TMR32B1MCR.MR3I`          0x40018014,        4, base=16,    bitRange=9-9
 2770                           ;`TMR32B1MCR.MR3R`          0x40018014,        4, base=16,    bitRange=10-10
 2771                           ;`TMR32B1MCR.MR3S`          0x40018014,        4, base=16,    bitRange=11-11
 2772                           
 2773                           TMR32B1MR0               EQU  0x40018018
 2774                           
 2775                           TMR32B1MR1               EQU  0x4001801C
 2776                           
 2777                           TMR32B1MR2               EQU  0x40018020
 2778                           
 2779                           TMR32B1MR3               EQU  0x40018024
 2780                           
 2781                           TMR32B1CCR               EQU  0x40018028
 2782                           ;`TMR32B1CCR.CAP0RE`        0x40018028,        4, base=16,    bitRange=0-0
 2783                           ;`TMR32B1CCR.CAP0FE`        0x40018028,        4, base=16,    bitRange=1-1
 2784                           ;`TMR32B1CCR.CAP0I`         0x40018028,        4, base=16,    bitRange=2-2
 2785                           
 2786                           TMR32B1CR0               EQU  0x4001802C
 2787                           
 2788                           TMR32B1EMR               EQU  0x4001803C
 2789                           ;`TMR32B1EMR.EM0`           0x4001803C,        4, base=16,    bitRange=0-0
 2790                           ;`TMR32B1EMR.EM1`           0x4001803C,        4, base=16,    bitRange=1-1
 2791                           ;`TMR32B1EMR.EM2`           0x4001803C,        4, base=16,    bitRange=2-2
 2792                           ;`TMR32B1EMR.EM3`           0x4001803C,        4, base=16,    bitRange=3-3
 2793                           ;`TMR32B1EMR.EMC0`          0x4001803C,        4, base=16,    bitRange=4-5
 2794                           ;`TMR32B1EMR.EMC1`          0x4001803C,        4, base=16,    bitRange=6-7
 2795                           ;`TMR32B1EMR.EMC2`          0x4001803C,        4, base=16,    bitRange=8-9
 2796                           ;`TMR32B1EMR.EMC3`          0x4001803C,        4, base=16,    bitRange=10-11
 2797                           
 2798                           TMR32B1CTCR              EQU  0x40018070
 2799                           ;`TMR32B1CTCR.CTM`          0x40018070,        4, base=16,    bitRange=0-1
 2800                           ;`TMR32B1CTCR.CIS`          0x40018070,        4, base=16,    bitRange=2-3
 2801                           
 2802                           TMR32B1PWMC              EQU  0x40018074
 2803                           ;`TMR32B1PWMC.PWM0ENA`      0x40018074,        4, base=16,    bitRange=0-0
 2804                           ;`TMR32B1PWMC.PWM1ENA`      0x40018074,        4, base=16,    bitRange=1-1
 2805                           ;`TMR32B1PWMC.PWM2ENA`      0x40018074,        4, base=16,    bitRange=2-2
 2806                           ;`TMR32B1PWMC.PWM3ENA`      0x40018074,        4, base=16,    bitRange=3-3
 2807                           
 2808                           
 2809                           ;
 2810                           ;               A/D Converters
 2811                           ;
 2812                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2813                           ;     ----                        ----      -------     --------  ----------- --------
 2814                           
 2815                           
 2816                           AD0CR                    EQU  0x4001C000
 2817                           ;`AD0CR.SEL`                0x4001C000,        4, base=16,    bitRange=0-7
 2818                           ;`AD0CR.CLKDIV`             0x4001C000,        4, base=16,    bitRange=8-15
 2819                           ;`AD0CR.BURST`              0x4001C000,        4, base=16,    bitRange=16-16
 2820                           ;`AD0CR.CLKS`               0x4001C000,        4, base=16,    bitRange=17-19
 2821                           ;`AD0CR.START`              0x4001C000,        4, base=16,    bitRange=24-26
 2822                           ;`AD0CR.EDGE`               0x4001C000,        4, base=16,    bitRange=27-27
 2823                           
 2824                           AD0GDR                   EQU  0x4001C004
 2825                           ;`AD0GDR.RESULT`            0x4001C004,        4, base=16,    bitRange=6-15
 2826                           ;`AD0GDR.CHN`               0x4001C004,        4, base=16,    bitRange=24-26
 2827                           ;`AD0GDR.OVERUN`            0x4001C004,        4, base=16,    bitRange=30-30
 2828                           ;`AD0GDR.DONE`              0x4001C004,        4, base=16,    bitRange=31-31
 2829                           
 2830                           AD0INTEN                 EQU  0x4001C00C
 2831                           ;`AD0INTEN.ADINTEN0`        0x4001C00C,        4, base=16,    bitRange=0-0
 2832                           ;`AD0INTEN.ADINTEN1`        0x4001C00C,        4, base=16,    bitRange=1-1
 2833                           ;`AD0INTEN.ADINTEN2`        0x4001C00C,        4, base=16,    bitRange=2-2
 2834                           ;`AD0INTEN.ADINTEN3`        0x4001C00C,        4, base=16,    bitRange=3-3
 2835                           ;`AD0INTEN.ADINTEN4`        0x4001C00C,        4, base=16,    bitRange=4-4
 2836                           ;`AD0INTEN.ADINTEN5`        0x4001C00C,        4, base=16,    bitRange=5-5
 2837                           ;`AD0INTEN.ADINTEN6`        0x4001C00C,        4, base=16,    bitRange=6-6
 2838                           ;`AD0INTEN.ADINTEN7`        0x4001C00C,        4, base=16,    bitRange=7-7
 2839                           ;`AD0INTEN.ADGINTEN`        0x4001C00C,        4, base=16,    bitRange=8-8
 2840                           
 2841                           AD0DR0                   EQU  0x4001C010
 2842                           ;`AD0DR0.RESULT`            0x4001C010,        4, base=16,    bitRange=6-15
 2843                           ;`AD0DR0.OVERUN`            0x4001C010,        4, base=16,    bitRange=30-30
 2844                           ;`AD0DR0.DONE`              0x4001C010,        4, base=16,    bitRange=31-31
 2845                           
 2846                           AD0DR1                   EQU  0x4001C014
 2847                           ;`AD0DR1.RESULT`            0x4001C014,        4, base=16,    bitRange=6-15
 2848                           ;`AD0DR1.OVERUN`            0x4001C014,        4, base=16,    bitRange=30-30
 2849                           ;`AD0DR1.DONE`              0x4001C014,        4, base=16,    bitRange=31-31
 2850                           
 2851                           AD0DR2                   EQU  0x4001C018
 2852                           ;`AD0DR2.RESULT`            0x4001C018,        4, base=16,    bitRange=6-15
 2853                           ;`AD0DR2.OVERUN`            0x4001C018,        4, base=16,    bitRange=30-30
 2854                           ;`AD0DR2.DONE`              0x4001C018,        4, base=16,    bitRange=31-31
 2855                           
 2856                           AD0DR3                   EQU  0x4001C01C
 2857                           ;`AD0DR3.RESULT`            0x4001C01C,        4, base=16,    bitRange=6-15
 2858                           ;`AD0DR3.OVERUN`            0x4001C01C,        4, base=16,    bitRange=30-30
 2859                           ;`AD0DR3.DONE`              0x4001C01C,        4, base=16,    bitRange=31-31
 2860                           
 2861                           AD0DR4                   EQU  0x4001C020
 2862                           ;`AD0DR4.RESULT`            0x4001C020,        4, base=16,    bitRange=6-15
 2863                           ;`AD0DR4.OVERUN`            0x4001C020,        4, base=16,    bitRange=30-30
 2864                           ;`AD0DR4.DONE`              0x4001C020,        4, base=16,    bitRange=31-31
 2865                           
 2866                           AD0DR5                   EQU  0x4001C024
 2867                           ;`AD0DR5.RESULT`            0x4001C024,        4, base=16,    bitRange=6-15
 2868                           ;`AD0DR5.OVERUN`            0x4001C024,        4, base=16,    bitRange=30-30
 2869                           ;`AD0DR5.DONE`              0x4001C024,        4, base=16,    bitRange=31-31
 2870                           
 2871                           AD0DR6                   EQU  0x4001C028
 2872                           ;`AD0DR6.RESULT`            0x4001C028,        4, base=16,    bitRange=6-15
 2873                           ;`AD0DR6.OVERUN`            0x4001C028,        4, base=16,    bitRange=30-30
 2874                           ;`AD0DR6.DONE`              0x4001C028,        4, base=16,    bitRange=31-31
 2875                           
 2876                           AD0DR7                   EQU  0x4001C02C
 2877                           ;`AD0DR7.RESULT`            0x4001C02C,        4, base=16,    bitRange=6-15
 2878                           ;`AD0DR7.OVERUN`            0x4001C02C,        4, base=16,    bitRange=30-30
 2879                           ;`AD0DR7.DONE`              0x4001C02C,        4, base=16,    bitRange=31-31
 2880                           
 2881                           AD0STAT                  EQU  0x4001C030
 2882                           ;`AD0STAT.DONE0`            0x4001C030,        4, base=16,    bitRange=0-0
 2883                           ;`AD0STAT.DONE1`            0x4001C030,        4, base=16,    bitRange=1-1
 2884                           ;`AD0STAT.DONE2`            0x4001C030,        4, base=16,    bitRange=2-2
 2885                           ;`AD0STAT.DONE3`            0x4001C030,        4, base=16,    bitRange=3-3
 2886                           ;`AD0STAT.DONE4`            0x4001C030,        4, base=16,    bitRange=4-4
 2887                           ;`AD0STAT.DONE5`            0x4001C030,        4, base=16,    bitRange=5-5
 2888                           ;`AD0STAT.DONE6`            0x4001C030,        4, base=16,    bitRange=6-6
 2889                           ;`AD0STAT.DONE7`            0x4001C030,        4, base=16,    bitRange=7-7
 2890                           ;`AD0STAT.OVERRUN0`         0x4001C030,        4, base=16,    bitRange=8-8
 2891                           ;`AD0STAT.OVERRUN1`         0x4001C030,        4, base=16,    bitRange=9-9
 2892                           ;`AD0STAT.OVERRUN2`         0x4001C030,        4, base=16,    bitRange=10-10
 2893                           ;`AD0STAT.OVERRUN3`         0x4001C030,        4, base=16,    bitRange=11-11
 2894                           ;`AD0STAT.OVERRUN4`         0x4001C030,        4, base=16,    bitRange=12-12
 2895                           ;`AD0STAT.OVERRUN5`         0x4001C030,        4, base=16,    bitRange=13-13
 2896                           ;`AD0STAT.OVERRUN6`         0x4001C030,        4, base=16,    bitRange=14-14
 2897                           ;`AD0STAT.OVERRUN7`         0x4001C030,        4, base=16,    bitRange=15-15
 2898                           ;`AD0STAT.ADINT`            0x4001C030,        4, base=16,    bitRange=16-16
 2899                           
 2900                           
 2901                           ;
 2902                           ;               Watchdog
 2903                           ;
 2904                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2905                           ;     ----                        ----      -------     --------  ----------- --------
 2906                           
 2907                           
 2908                           WDMOD                    EQU  0x40004000
 2909                           ;`WDMOD.WDEN`               0x40004000,        4, base=16,    bitRange=0-0
 2910                           ;`WDMOD.WDRESET`            0x40004000,        4, base=16,    bitRange=1-1
 2911                           ;`WDMOD.WDTOF`              0x40004000,        4, base=16,    bitRange=2-2
 2912                           ;`WDMOD.WDINT`              0x40004000,        4, base=16,    bitRange=3-3
 2913                           
 2914                           WDTC                     EQU  0x40004004
 2915                           ;`WDTC.COUNT`               0x40004004,        4, base=16,    bitRange=0-23
 2916                           
 2917                           WDFEED                   EQU  0x40004008
 2918                           
 2919                           WDTV                     EQU  0x4000400C
 2920                           ;`WDTV.COUNT`               0x4000400C,        4, base=16,    bitRange=0-23
 2921                           
 2922                           
 2923                           ;
 2924                           ;               Flash
 2925                           ;
 2926                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2927                           ;     ----                        ----      -------     --------  ----------- --------
 2928                           
 2929                           
 2930                           FLASHCFG                 EQU  0x4003C010
 2931                           ;`FLASHCFG.FLASHTIM`        0x4003C010,        4, base=16,    bitRange=0-1
 2932                           
 2933                           
 2934                           ;
 2935                           ;               Flash signature generation
 2936                           ;
 2937                           ;     Name                        Zone      Address     Bytesize  Displaybase Bitrange
 2938                           ;     ----                        ----      -------     --------  ----------- --------
 2939                           
 2940                           
 2941                           FMSSTART                 EQU  0x4003C020
 2942                           ;`FMSSTART.START`           0x4003C020,        4, base=16,    bitRange=0-16
 2943                           
 2944                           FMSSTOP                  EQU  0x4003C024
 2945                           ;`FMSSTOP.STOP`             0x4003C024,        4, base=16,    bitRange=0-16
 2946                           ;`FMSSTOP.SIG_START`        0x4003C024,        4, base=16,    bitRange=17-17
 2947                           
 2948                           FMSW0                    EQU  0x4003C02C
 2949                           
 2950                           FMSW1                    EQU  0x4003C030
 2951                           
 2952                           FMSW2                    EQU  0x4003C034
 2953                           
 2954                           FMSW3                    EQU  0x4003C038
 2955                           
 2956                           FMSTAT                   EQU  0x4003CFE0
 2957                           ;`FMSTAT.SIG_DONE`          0x4003CFE0,        4, base=16,    bitRange=2-2
 2958                           
 2959                           FMSTATCLR                EQU  0x4003CFE8
 2960                           
 2961                           
 2962                           ;;
 2963                           ;; Group info for SFR Window.
 2964                           ;;
 2965                           ;[SfrGroupInfo]
 2966                           
 2967                           ;group = `NVIC`,`SYSTICKCSR`,`SYSTICKRVR`,`SYSTICKCVR`,`SYSTICKCALVR`,`SETENA0`,`ISER`,`CLRENA0`,`I
                                CER`,`SETPEND0`,`ISPR`,`CLRPEND0`,`ICPR`,`IP0`,`IP1`,`IP2`,`IP3`,`IP4`,`IP5`,`IP6`,`IP7`,`CPUIDBR`,`
                                CPUID`,`ICSR`,`AIRCR`,`SCR`,`CCR`,`SHPR2`,`SHPR3`
 2968                           ;group = `System control block`,`SYSMEMREMAP`,`PRESETCTRL`,`SYSPLLCTRL`,`SYSPLLSTAT`,`SYSOSCCTRL`,`
                                WDTOSCCTRL`,`IRCCTRL`,`SYSRESSTAT`,`SYSPLLCLKSEL`,`SYSPLLCLKUEN`,`MAINCLKSEL`,`MAINCLKUEN`,`SYSAHBCL
                                KDIV`,`SYSAHBCLKCTRL`,`SSP0CLKDIV`,`UARTCLKDIV`,`SSP1CLKDIV`,`WDTCLKSEL`,`WDTCLKUEN`,`WDTCLKDIV`,`CL
                                KOUTCLKSEL`,`CLKOUTUEN`,`CLKOUTDIV`,`PIOPORCAP0`,`PIOPORCAP1`,`BODCTRL`,`SYSTCKCAL`,`NMISRC`,`STARTA
                                PRP0`,`STARTERP0`,`STARTRSRP0CLR`,`STARTSRP0`,`PDSLEEPCFG`,`PDAWAKECFG`,`PDRUNCFG`,`DEVICE_ID`
 2969                           ;group = `PMU`,`PCON`,`GPREG0`,`GPREG1`,`GPREG2`,`GPREG3`,`GPREG4`
 2970                           ;group = `I/O configuration`,`IOCON_PIO2_6`,`IOCON_PIO2_0`,`IOCON_RESET_PIO0_0`,`IOCON_PIO0_1`,`IOC
                                ON_PIO1_8`,`IOCON_PIO0_2`,`IOCON_PIO2_7`,`IOCON_PIO2_8`,`IOCON_PIO2_1`,`IOCON_PIO0_3`,`IOCON_PIO0_4`
                                ,`IOCON_PIO0_5`,`IOCON_PIO1_9`,`IOCON_PIO3_4`,`IOCON_PIO2_4`,`IOCON_PIO2_5`,`IOCON_PIO3_5`,`IOCON_PI
                                O0_6`,`IOCON_PIO0_7`,`IOCON_PIO2_9`,`IOCON_PIO2_10`,`IOCON_PIO2_2`,`IOCON_PIO0_8`,`IOCON_PIO0_9`,`IO
                                CON_SWCLK_PIO0_10`,`IOCON_PIO1_10`,`IOCON_PIO2_11`,`IOCON_R_PIO0_11`,`IOCON_R_PIO1_0`,`IOCON_R_PIO1_
                                1`,`IOCON_R_PIO1_2`,`IOCON_PIO3_0`,`IOCON_PIO3_1`,`IOCON_PIO2_3`,`IOCON_SWDIO_PIO1_3`,`IOCON_PIO1_4`
                                ,`IOCON_PIO1_11`,`IOCON_PIO3_2`,`IOCON_PIO1_5`,`IOCON_PIO1_6`,`IOCON_PIO1_7`,`IOCON_PIO3_3`,`IOCON_S
                                CK_LOC`,`IOCON_DSR_LOC`,`IOCON_DCD_LOC`,`IOCON_RI_LOC`
 2971                           ;group = `CPIO`,`GPIO0DATA`,`GPIO0DATA0`,`GPIO0DATA1`,`GPIO0DATAL`,`GPIO0DIR`,`GPIO0DIR0`,`GPIO0DIR
                                1`,`GPIO0DIRL`,`GPIO0IS`,`GPIO0IS0`,`GPIO0IS1`,`GPIO0ISL`,`GPIO0IBE`,`GPIO0IBE0`,`GPIO0IBE1`,`GPIO0I
                                BEL`,`GPIO0IEV`,`GPIO0IEV0`,`GPIO0IEV1`,`GPIO0IEVL`,`GPIO0IE`,`GPIO0IE0`,`GPIO0IE1`,`GPIO0IEL`,`GPIO
                                0RIS`,`GPIO0RIS0`,`GPIO0RIS1`,`GPIO0RISL`,`GPIO0MIS`,`GPIO0MIS0`,`GPIO0MIS1`,`GPIO0MISL`,`GPIO0IC`,`
                                GPIO1DATA`,`GPIO1DATA0`,`GPIO1DATA1`,`GPIO1DATAL`,`GPIO1DIR`,`GPIO1DIR0`,`GPIO1DIR1`,`GPIO1DIRL`,`GP
                                IO1IS`,`GPIO1IS0`,`GPIO1IS1`,`GPIO1ISL`,`GPIO1IBE`,`GPIO1IBE0`,`GPIO1IBE1`,`GPIO1IBEL`,`GPIO1IEV`,`G
                                PIO1IEV0`,`GPIO1IEV1`,`GPIO1IEVL`,`GPIO1IE`,`GPIO1IE0`,`GPIO1IE1`,`GPIO1IEL`,`GPIO1RIS`,`GPIO1RIS0`,
                                `GPIO1RIS1`,`GPIO1RISL`,`GPIO1MIS`,`GPIO1MIS0`,`GPIO1MIS1`,`GPIO1MISL`,`GPIO1IC`,`GPIO2DATA`,`GPIO2D
                                ATA0`,`GPIO2DATA1`,`GPIO2DATAL`,`GPIO2DIR`,`GPIO2DIR0`,`GPIO2DIR1`,`GPIO2DIRL`,`GPIO2IS`,`GPIO2IS0`,
                                `GPIO2IS1`,`GPIO2ISL`,`GPIO2IBE`,`GPIO2IBE0`,`GPIO2IBE1`,`GPIO2IBEL`,`GPIO2IEV`,`GPIO2IEV0`,`GPIO2IE
                                V1`,`GPIO2IEVL`,`GPIO2IE`,`GPIO2IE0`,`GPIO2IE1`,`GPIO2IEL`,`GPIO2RIS`,`GPIO2RIS0`,`GPIO2RIS1`,`GPIO2
                                RISL`,`GPIO2MIS`,`GPIO2MIS0`,`GPIO2MIS1`,`GPIO2MISL`,`GPIO2IC`,`GPIO3DATA`,`GPIO3DATA0`,`GPIO3DATAL`
                                ,`GPIO3DIR`,`GPIO3DIR0`,`GPIO3DIRL`,`GPIO3IS`,`GPIO3IS0`,`GPIO3ISL`,`GPIO3IBE`,`GPIO3IBE0`,`GPIO3IBE
                                L`,`GPIO3IEV`,`GPIO3IEV0`,`GPIO3IEVL`,`GPIO3IE`,`GPIO3IE0`,`GPIO3IEL`,`GPIO3RIS`,`GPIO3RIS0`,`GPIO3R
                                ISL`,`GPIO3MIS`,`GPIO3MIS0`,`GPIO3MISL`,`GPIO3IC`
 2972                           ;group = `UART`,`U0RBRTHR`,`U0DLL`,`U0RBR`,`U0THR`,`U0IER`,`U0DLM`,`U0FCR`,`U0IIR`,`U0LCR`,`U0MCR`,
                                `U0LSR`,`U0MSR`,`U0SCR`,`U0ACR`,`U0FDR`,`U0TER`,`U0RS485CTRL`,`U0ADRMATCH`,`U0RS485DLY`
 2973                           ;group = `SSP0`,`SSP0CR0`,`SSP0CR1`,`SSP0DR`,`SSP0SR`,`SSP0CPSR`,`SSP0IMSC`,`SSP0RIS`,`SSP0MIS`,`SS
                                P0ICR`
 2974                           ;group = `SSP1`,`SSP1CR0`,`SSP1CR1`,`SSP1DR`,`SSP1SR`,`SSP1CPSR`,`SSP1IMSC`,`SSP1RIS`,`SSP1MIS`,`SS
                                P1ICR`
 2975                           ;group = `I2C`,`I2C0CONSET`,`I2C0STAT`,`I2C0DAT`,`I2C0ADR`,`I2C0SCLH`,`I2C0SCLL`,`I2C0CONCLR`,`I2C0
                                MMCTRL`,`I2C0ADR1`,`I2C0ADR2`,`I2C0ADR3`,`I2C0DATABUFFER`,`I2C0MASK0`,`I2C0MASK1`,`I2C0MASK2`,`I2C0M
                                ASK3`
 2976                           ;group = `CT16B0`,`TMR16B0IR`,`TMR16B0TCR`,`TMR16B0TC`,`TMR16B0PR`,`TMR16B0PC`,`TMR16B0MCR`,`TMR16B
                                0MR0`,`TMR16B0MR1`,`TMR16B0MR2`,`TMR16B0MR3`,`TMR16B0CCR`,`TMR16B0CR0`,`TMR16B0EMR`,`TMR16B0CTCR`,`T
                                MR16B0PWMC`
 2977                           ;group = `CT16B1`,`TMR16B1IR`,`TMR16B1TCR`,`TMR16B1TC`,`TMR16B1PR`,`TMR16B1PC`,`TMR16B1MCR`,`TMR16B
                                1MR0`,`TMR16B1MR1`,`TMR16B1MR2`,`TMR16B1MR3`,`TMR16B1CCR`,`TMR16B1CR0`,`TMR16B1EMR`,`TMR16B1CTCR`,`T
                                MR16B1PWMC`
 2978                           ;group = `CT32B0`,`TMR32B0IR`,`TMR32B0TCR`,`TMR32B0TC`,`TMR32B0PR`,`TMR32B0PC`,`TMR32B0MCR`,`TMR32B
                                0MR0`,`TMR32B0MR1`,`TMR32B0MR2`,`TMR32B0MR3`,`TMR32B0CCR`,`TMR32B0CR0`,`TMR32B0EMR`,`TMR32B0CTCR`,`T
                                MR32B0PWMC`
 2979                           ;group = `CT32B1`,`TMR32B1IR`,`TMR32B1TCR`,`TMR32B1TC`,`TMR32B1PR`,`TMR32B1PC`,`TMR32B1MCR`,`TMR32B
                                1MR0`,`TMR32B1MR1`,`TMR32B1MR2`,`TMR32B1MR3`,`TMR32B1CCR`,`TMR32B1CR0`,`TMR32B1EMR`,`TMR32B1CTCR`,`T
                                MR32B1PWMC`
 2980                           ;group = `A/D Converters`,`AD0CR`,`AD0GDR`,`AD0INTEN`,`AD0DR0`,`AD0DR1`,`AD0DR2`,`AD0DR3`,`AD0DR4`,
                                `AD0DR5`,`AD0DR6`,`AD0DR7`,`AD0STAT`
 2981                           ;group = `Watchdog`,`WDMOD`,`WDTC`,`WDFEED`,`WDTV`
 2982                           ;group = `Flash`,`FLASHCFG`
 2983                           ;group = `Flash signature generation`,`FMSSTART`,`FMSSTOP`,`FMSW0`,`FMSW1`,`FMSW2`,`FMSW3`,`FMSTAT`
                                ,`FMSTATCLR`
 2984                           
 2985                           ;;
 2986                           ;; Interrupt list for SWO interrupt view.
 2987                           ;;
 2988                           ;[InterruptList]
 2989                           ;Interrupt0   = NMI            0x08
 2990                           ;Interrupt1   = HardFault      0x0C
 2991                           ;Interrupt2   = MemManage      0x10
 2992                           ;Interrupt3   = BusFault       0x14
 2993                           ;Interrupt4   = UsageFault     0x18
 2994                           ;Interrupt5   = SVC            0x2C
 2995                           ;Interrupt6   = DebugMon       0x30
 2996                           ;Interrupt7   = PendSV         0x38
 2997                           ;Interrupt8   = SysTick        0x3C
 2998                           ;Interrupt9   = WAKE_UP0       0x40
 2999                           ;Interrupt10  = WAKE_UP1       0x44
 3000                           ;Interrupt11  = WAKE_UP2       0x48
 3001                           ;Interrupt12  = WAKE_UP3       0x4C
 3002                           ;Interrupt13  = WAKE_UP4       0x50
 3003                           ;Interrupt14  = WAKE_UP5       0x54
 3004                           ;Interrupt15  = WAKE_UP6       0x58
 3005                           ;Interrupt16  = WAKE_UP7       0x5C
 3006                           ;Interrupt17  = WAKE_UP8       0x60
 3007                           ;Interrupt18  = WAKE_UP9       0x64
 3008                           ;Interrupt19  = WAKE_UP10      0x68
 3009                           ;Interrupt20  = WAKE_UP11      0x6C
 3010                           ;Interrupt21  = WAKE_UP12      0x70
 3011                           ;Interrupt22  = SSP1           0x78
 3012                           ;Interrupt23  = I2C0           0x7C
 3013                           ;Interrupt24  = CT16B0         0x80
 3014                           ;Interrupt25  = CT16B1         0x84
 3015                           ;Interrupt26  = CT32B0         0x88
 3016                           ;Interrupt27  = CT32B1         0x8C
 3017                           ;Interrupt28  = SSP0           0x90
 3018                           ;Interrupt29  = UART0          0x94
 3019                           ;Interrupt30  = ADC            0xA0
 3020                           ;Interrupt31  = WDT            0xA4
 3021                           ;Interrupt32  = BOD            0xA8
 3022                           ;Interrupt33  = PIO_3          0xB0
 3023                           ;Interrupt34  = PIO_2          0xB4
 3024                           ;Interrupt35  = PIO_1          0xB8
 3025                           ;Interrupt36  = PIO_0          0xBC
    9                           // IAR C:\Program Files\IAR Systems\Embedded Workbench 7.1\arm\inc\NXP
   10                           //------------------------------------------------------------------------------
   11                           $FISH_ARM_CORTEX_M_REGS.h
    1                           // t    r0
    2                           // n    r1
    3                           // w    r2
    4                           // x    r3
    5                           // y    r4
    6                           // i    r5
    7                           // r    r6
    8                           // p    r7
    9                           // r8   lr
   10                           // r9   pc
   11                           // ra   r10
   12                           // rb   r11
   13                           // k    r12
   14                           
   15                           #define t       r0      //                          AX
   16                           #define n       r1      // v4th
   17                           #define w       r2      // v4th NOS DPUSH           DX
   18                           #define x       r3      // Execution
   19                           #define y       r4      //                          BX as scratch (ROT)
   20                           #define i       r5      // IP                       DX:SI
   21                           #define r       r6      // Return Stack Pointer
   22                           #define p       r7      // Parameter Stack Pointer
   23                           //              r8      // Link register
   24                           //              r9      // Program Counter
   25                           //      ARMv6 Cortex M0 LPC 1114 is 16 bit thumb ISA.
   26                           //      Use of the following registers limited to local variables mostly
   27                           #define ra      r10     // 
   28                           #define rb      r11     // 
   29                           #define k       r12     // 
   12                           $FISH_NXP_M0_MACROS.h
    1                           
    2                           //ss    SET     1       // "single-step" switch for debug/shakedown testing
    3                           //#define ss
    4                           
    5                           //------------------------------------------------------------------------------
    6                           //      Inner Interpreter Macros
    7                           //      Beauty is you can put any ISA in a macro and no prob till referenced!
    8                           
    9                           // IF   ss
   10                           #ifdef ss
   18                           #else
   19                           NEXT1   MACRO   
   20                                   LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   21                                   BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
   22                                   ENDM
   23                           #endif
   24                           // ENDIF
   25                           
   26                           NEXT    MACRO   
   27                                   LDM     i!, {w} // get cfa addr to w, incr i after
   28                                   NEXT1
   29                                   ENDM
   30                           
   31                           TPUSH   MACRO   
   32                                   PUSHt   // push t to p, pre decrement p
   33                                   NEXT
   34                                   ENDM
   35                           
   36                           DPUSH   MACRO   
   37                                   PUSHw   // push w to p, pre decrement p
   38                                   TPUSH
   39                                   ENDM
   40                           
   41                           //------------------------------------------------------------------------------
   42                           //      FISH STACK MACRO's
   43                           //      Beauty is you can put any ISA in a macro and no prob till referenced!
   44                           //      Cortex M0 THUMB only does STMia and LDMia
   45                           //      I (rstack value to pstack) expects POP to be post increment
   46                           //      Meaning that TOS is = to current p or r
   47                           //      Therefore PUSH is pre decrement
   48                           
   49                           PUSHt   MACRO
   50                                   SUBS    p, p, #4        // push t to p, pre decrement p
   51                                   STR     t, [p]
   52                                   ENDM
   53                           
   54                           POP2t   MACRO
   55                           #ifndef TOSCT
   56                                   LDR     t, [p]          // pop tos to t, post increment p
   57                           #endif
   58                                   ADDS    p, p, #4
   59                                   ENDM
   60                           
   61                           NDPOP2t MACRO                   // macro = copy tos to t, leave it on the stack
   62                                   LDR     t, [p]
   63                                   ENDM
   64                           
   65                           PUSHn   MACRO
   66                                   SUBS    p, p, #4        // push n to p, pre decrement p
   67                                   STR     n, [p]
   68                                   ENDM
   69                           
   70                           POP2n   MACRO
   71                                   LDR     n, [p]
   72                                   ADDS    p, p, #4
   73                                   ENDM
   74                           
   75                           PUSHw   MACRO
   76                                   SUBS    p, p, #4        //  push w to p, pre decrement p
   77                                   STR     w, [p]
   78                                   ENDM
   79                           
   80                           POP2w   MACRO
   81                                   LDR     w, [p]
   82                                   ADDS    p, p, #4
   83                                   ENDM
   84                           
   85                           NDPOP2w MACRO                   // macro = copy tos to w, leave it on the stack
   86                                   LDR     w, [p]
   87                                   ENDM
   88                           
   89                           PUSHx   MACRO
   90                                   SUBS    p, p, #4        //  push x to p, pre decrement p
   91                                   STR     x, [p]
   92                                   ENDM
   93                           
   94                           POP2x   MACRO
   95                                   LDR     x, [p]
   96                                   ADDS    p, p, #4
   97                                   ENDM
   98                           
   99                           NDPOP2x MACRO                   // macro = copy tos to w, leave it on the stack
  100                                   LDR     x, [p]
  101                                   ENDM
  102                           
  103                           PUSHi   MACRO
  104                                   SUBS    p, p, #4        // push i to p, pore increment p
  105                                   STR     i, [p]
  106                                   ENDM
  107                           
  108                           POP2i   MACRO
  109                                   LDR     i, [p]
  110                                   ADDS    p, p, #4
  111                                   ENDM
  112                           
  113                           PUSHt2r MACRO
  114                                   SUBS    r, r, #4        //  push t to r, pre decrement r
  115                                   STR     t, [r]
  116                                   ENDM
  117                           
  118                           PUSHi2r MACRO
  119                                   SUBS    r, r, #4        //  push i to r, pre decrement r
  120                                   STR     i, [r]
  121                                   ENDM
  122                           
  123                           POPr2i  MACRO
  124                                   LDR i, [r]              //  pop r to i, post increment r
  125                                   ADDS    r, r, #4
  126                                   ENDM
  127                           
  128                           //POP2p MACRO
  129                           //      ENDM
  130                           //POP2PC        MACRO 
  131                           //      ENDM
  132                           
  133                           POPr2t  MACRO 
  134                                   LDR     t, [r]
  135                                   ADDS    r, r, #4
  136                                   ENDM
  137                           
  138                           PUSHn2r MACRO
  139                                   SUBS    r, r, #4        //  push t to r, pre decrement r
  140                                   STR     n, [r]
  141                                   ENDM
  142                           
  143                           PUSHw2r MACRO
  144                                   SUBS    r, r, #4        //  push w to r, pre decrement r
  145                                   STR     w, [r]
  146                                   ENDM
  147                           
  148                           LIT2t   MACRO
  149                                   // as in xeq token at ToS setup for lit
  150                                   LDM     i!, {t} // fetch memory p points to into {t}, inc i
  151                                   ENDM
  152                           
  153                           POPp2w  MACRO
  154                                   // as in xeq token at ToS setup for exec
  155                                   LDM     p!, {w} // fetch memory p points to into {w}, inc p
  156                                   ENDM
  157                           
   13                           //------------------------------------------------------------------------------
   14                           // #defines for XON, -1 TRUE, IO2TP, etc.
   15                           // COPY OF Assembler Preproccesor Defined Symbols for each configuration
   16                           $FISH_RM_CONFIG_#DEFINES.h
    1                           // FISH #defines for system wide control
    2                           // this define must keep RESET!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    3                           //#define USE_CMAIN     // Affects cstartup_M.c FM0_COLD and RET2c
    4                           #define FISH_STM32F4_Peripheral_Register_ADDRS
    5                           #define TRUE_EQU_NEG_ONE
    6                           #define XON_XOFF        // Use XON_XOFF Flow Control
    7                           #define ABORT_STOP_TILL_CO
    8                           #define EOL_DLE         // DLE 0x10/16d in QUIT after last line interpreted
    9                           #define EOL_NAK         // NAK in error messages for STDLED editor highlight
   10                           //#define DEFAULT_BAUD_TEST
   11                           //#define CTS_RTS       // Use Hardware Flow Control
   12                           //#define IO2TP         // for ports before i/o done - enable PADCLR and TIBCLR
   13                           //#define TOSCT         // TOS Cache Testing QUERY BACKSPACING OVER INPUT!!!
   14                           //#define SLOW_POWERUP  // For slow power supply
   15                           //#define CLKOUT        // PIO0_1 is CLKOUT
   16                           //#define TESTRAM       // run flogram at start-up
   17                           //#define DEBUG_FLASH   // 
   18                           
   19                           //#define IOBUFS_DEBUG
   20                           //IOBUFS_DEBUG #define:
   21                           //NOOP & .SH IN EXPECT AFTER LEAVE 
   22                           //TIB DUMP OF EXPECT IN QUERY
   23                           //HERE DUMP IN INTERPRET'S DFIND
   24                           //WORD PARSES USING SPACE - DOES SPACE AFTER? 
   25                           
   26                           // VTOR_PATCH defined in 205 ASM PREPROC CONFIG - UNTIL 205 VTOR issue RESOLVED.
   27                           
   28                           // COPY OF ALL CONFIGURATION Assembly Preprocessor sections.
   29                           
   30                           /* ALL CONFIGURATIONS:
   31                           Assembly Preprocessor Additional Include Directories:
   32                           $PROJ_DIR$\..\FISH_RM_COMMON
   33                           $PROJ_DIR$\..\FISH_RM_COMMON_CODE_CORTEX_M
   34                           */
   35                           
   36                           /*
   37                           STM32F205RC-STM118mhg Configuration Assembly Preprocessor Section:
   38                           Assembly Preprocessor Defined Symbols:
   39                           FISH_PubRel_WORDSET
   40                           FISH_Debug_WORDSET
   41                           VTOR_PATCH
   42                           STM32F205RC
   43                           STM32F205RC_SRAM128
   44                           STM32F205RC_XRC10_118MHZ
   45                           */
   46                           /*
   47                           STM32F4_PubRel Configuration Assembly Preprocessor Section:
   48                           Assembly Preprocessor Defined Symbols:
   49                           FISH_PubRel_WORDSET
   50                           STM32F4_XRC08_168MHZ
   51                           */
   52                           /*
   53                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   54                           Assembly Preprocessor Defined Symbols:
   55                           FISH_PubRel_WORDSET
   56                           FISH_Debug_WORDSET
   57                           STM32F4_XRC08_168MHZ
   58                           */
   59                           /*
   60                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   61                           Assembly Preprocessor Additional Include Directories:
   62                           
   63                           Assembly Preprocessor Defined Symbols:
   64                           */
   65                           /*
   66                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   67                           Assembly Preprocessor Additional Include Directories:
   68                           
   69                           Assembly Preprocessor Defined Symbols:
   70                           */
   71                           /*
   72                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   73                           Assembly Preprocessor Additional Include Directories:
   74                           
   75                           Assembly Preprocessor Defined Symbols:
   76                           */
   77                           /*
   78                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   79                           Assembly Preprocessor Additional Include Directories:
   80                           
   81                           Assembly Preprocessor Defined Symbols:
   82                           */
   83                           /*
   84                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   85                           Assembly Preprocessor Additional Include Directories:
   86                           
   87                           Assembly Preprocessor Defined Symbols:
   88                           */
   89                           /*
   90                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   91                           Assembly Preprocessor Additional Include Directories:
   92                           
   93                           Assembly Preprocessor Defined Symbols:
   94                           */
   95                           /*
   96                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
   97                           Assembly Preprocessor Additional Include Directories:
   98                           
   99                           Assembly Preprocessor Defined Symbols:
  100                           */
  101                           /*
  102                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  103                           Assembly Preprocessor Additional Include Directories:
  104                           
  105                           Assembly Preprocessor Defined Symbols:
  106                           */
  107                           /*
  108                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  109                           Assembly Preprocessor Additional Include Directories:
  110                           
  111                           Assembly Preprocessor Defined Symbols:
  112                           */
  113                           /*
  114                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  115                           Assembly Preprocessor Additional Include Directories:
  116                           
  117                           Assembly Preprocessor Defined Symbols:
  118                           */
  119                           /*
  120                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  121                           Assembly Preprocessor Additional Include Directories:
  122                           
  123                           Assembly Preprocessor Defined Symbols:
  124                           */
  125                           /*
  126                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  127                           Assembly Preprocessor Additional Include Directories:
  128                           
  129                           Assembly Preprocessor Defined Symbols:
  130                           */
  131                           /*
  132                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  133                           Assembly Preprocessor Additional Include Directories:
  134                           
  135                           Assembly Preprocessor Defined Symbols:
  136                           */
  137                           /*
  138                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  139                           Assembly Preprocessor Additional Include Directories:
  140                           
  141                           Assembly Preprocessor Defined Symbols:
  142                           */
  143                           /*
  144                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  145                           Assembly Preprocessor Additional Include Directories:
  146                           
  147                           Assembly Preprocessor Defined Symbols:
  148                           */
  149                           /*
  150                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  151                           Assembly Preprocessor Additional Include Directories:
  152                           
  153                           Assembly Preprocessor Defined Symbols:
  154                           */
  155                           /*
  156                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  157                           Assembly Preprocessor Additional Include Directories:
  158                           
  159                           Assembly Preprocessor Defined Symbols:
  160                           */
  161                           /*
  162                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  163                           Assembly Preprocessor Additional Include Directories:
  164                           
  165                           Assembly Preprocessor Defined Symbols:
  166                           */
  167                           /*
  168                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  169                           Assembly Preprocessor Additional Include Directories:
  170                           
  171                           Assembly Preprocessor Defined Symbols:
  172                           */
  173                           /*
  174                           STM32F4_DEBUG Configuration Assembly Preprocessor Section:
  175                           Assembly Preprocessor Additional Include Directories:
  176                           
  177                           Assembly Preprocessor Defined Symbols:
  178                           */
   17                           //------------------------------------------------------------------------------
   18                           // NXP M0 FLASH, RAM, CLOCK Configurations:
   19                           // Placed in each configurations ( Debug, etc )'s
   20                           $FISH_M0_EQUATES.h // #defines of FISH_M0_CONFIG_DEFINES.s
    1                           // FISH NXP M0/M1+ VARIANTS FOR THIS SOURCE
    2                           // #def are placed in the Assembler Preproccesor Defined Symbols section.
    3                           // EQUATES are for REAL VALUES used in FISH assembly code
    4                           #ifdef NXP_M0_11xx_XRC10_50MHZ
    6                           #endif
    7                           #ifdef NXP_M0_11xx_IRC12_48MHZ
    9                           #endif
   10                           #ifdef NXP_M0_81x_IRC12_12MHZ
   12                           #endif
   13                           #ifdef NXP_M0_81x_IRC12_24MHZ
   14                           SYSTEMCLOCK     EQU     24000000        // Use 12mhz IRC for 24mhz 16E3600h
   15                           #endif
   16                           
   17                           //---------------------------------NXP M0/M1+ Flash Equates --------------------------------
   18                           // Starting and Last Page cannot equal FLASH_PPAGE - which may be reserved and fault if read
   19                           // FLASH_UPAGE1 = 0 = NO FLASH AVAILABLE
   20                           
   21                           // This section for NXP M0 1115 64k Flash parts
   22                           #ifdef NXP_M0_064kFlash_4KWrite
   28                           #endif  // NXP_M0_064kFlash_4KWrite
   29                           
   30                           // This section for NXP M0 1114 32k Flash parts
   31                           #ifdef NXP_M0_032kFlash_4KWrite
   37                           #endif  // NXP_M0_032kFlash_4KWrite
   38                           
   39                           // This section for NXP M1 812 16k Flash parts
   40                           #ifdef NXP_M0_016kFlash_1KWrite
   41                           FLASH_WR_SIZE   EQU     0x0400          // Smallest writeable page size
   42                           #ifndef SRM
   43                           FLASH_SPAGE     EQU     0x3C00          // 1K FREE
   44                           #else
   48                           #endif  // SRM
   49                           FLASH_LPAGE     EQU     0x3C00          // Last Page for user FLASH storage
   50                           // FOR LOOP CONTROL AND BOUNDS CHECKING
   51                           FLASH_PPAGE     EQU     0x4000          // Past Last Page
   52                           #endif  // NXP_M0_016kFlash_1KWrite
   53                           
   54                           // Various RAM sizes set here
   55                           // This is universal in NXP, Cortex M0/M1+'s !?!
   56                           RAM_START       EQU     0x10000000
   57                           
   58                           #ifdef NXP_M0_004kRam
   59                           RAM_END         EQU     0x10001000      // LPC1114FD/102 32k/4k STP ATEAM BOARD
   60                           #endif
   61                           #ifdef NXP_M0_008kRam                   // STP NXP 32k/8k, 64k/8k and LPCxpresso Boards:
   63                           #endif
   64                           
   65                           DEFAULT_BAUD    EQU     9600            // 9600 until UART0_INIT USED
   66                           DEFAULT_BASE    EQU     10              // BASE at powerup
   67                           XON_CHAR        EQU     17              // ASCII DECIMAL XON_CHAR
   68                           XOFF_CHAR       EQU     19              // ASCII DECIMAL XOFF_CHAR
   69                           IOBUFSIZE       EQU     96              // For Tib and Pad
   70                           MAXWORDLEN      EQU     31              // magic!!! for ID. <<<<<<<<<<<<<<<<<<<<
   71                           
   72                           // RESERVE SPACE FOR IAP PROGRAMMING execution and STACK:
   73                           /* UM10398 LPC111x/LPC11Cxx User manual
   74                           26.4.7 Interrupts during IAP
   75                           The on-chip flash memory is not accessible during erase/write operations. When the user 
   76                           application code starts executing the interrupt vectors from the user flash area are active.
                                 
   77                           Before making any IAP call, either disable the interrupts or ensure that the user interrupt
                                 
   78                           vectors are active in RAM and that the interrupt handlers reside in RAM. The IAP code 
   79                           does not use or disable interrupts.
   80                           26.4.8 RAM used by ISP command handler
   81                           ISP commands use on-chip RAM from 0x1000 017C to 0x1000 025B. The user could use 
   82                           this area, but the contents may be lost upon reset. Flash programming commands use the 
   83                           top 32 bytes of on-chip RAM. The stack is located at (RAM top - 32). The maximum stack 
   84                           usage is 256 bytes and it grows downwards.
   85                           26.4.9 RAM used by IAP command handler
   86                           Flash programming commands use the top 32bytes of on-chip RAM. The maximum stack 
   87                           usage in the user allocated stack space is 128 bytes and it grows downwards.
   88                           */
   89                           
   90                           // So (RAM top - 32) + 256 byte stack needs to be provided!
   91                           // By section IAP-ISP_Reserved in memap and .icf (The 32 bytes)
   92                           // - Verify SP? (is it sp or cstack?) has 256 bytes available
   93                           
   94                           // IAR PROJECT->LINKER->COMFIG->EDIT->MEMORY REGIONS->RAM->END<<<<<<<<<<<<<<<<<<
   95                           // RESERVE SPACE FOR CSTACK
   96                           // IAR PROJECT->LINKER->COMFIG->EDIT->STACK/HEAP SIZES<<<<<<<<<<<<<<<<<<<<<<<<<<
   97                           // FISH SETS THESE VALUES TO 0x40
   98                           IAPCALL         EQU     0x1FFF1FF1      // Call Address of IAP routine
   99                           /*
  100                           #ifdef NXP_M0_004kRam
  101                           BOTTOM_IAPSTACK EQU     0x10000FE0      // 0x10000FE0 VALUES SET BY FISH
  102                           TOP_IAPSTACK    EQU     BOTTOM_IAPSTACK+32
  103                           #endif
  104                           #ifdef NXP_M0_008kRam
  105                           BOTTOM_IAPSTACK EQU     0x10001FE0      // 0x10000FE0 VALUES SET BY FISH
  106                           TOP_IAPSTACK    EQU     BOTTOM_IAPSTACK+32
  107                           #endif
  108                           */
  109                           STACKSIZE       EQU     32*4            // SHOOULD BE GOOD - 120 BYTES 0x78
  110                           
  111                           //------------------------------------------------------------------------------
  112                           // RESERVE SPACE AFTER .bss FOR FISH STACKS, AND UNINITIALIZED RAM
  113                           
  114                           PINIT   EQU     (RAM_END-16)           // FISH PARAMETER STACK in register p
  115                           RINIT   EQU     (PINIT - STACKSIZE)     // FISH RETURN STACK in register r
  116                           BOTTOM_RSTACK   EQU     (RINIT - STACKSIZE)     // FISH END OF RETURN STACK ADDR
  117                           
  118                           // Uninitialized RAM is between CSTACK$$Limit and RINIT-(size)
  119                           // RECALCULATE IF ANY NEW _SV'S ADDED OR STACKSIZE CHANGED<<<<<<<<<<<<<<<<<<<<<<
  120                           // CSTACK AND HEAP IF ALLOCATED FOLLOWS .bss ( FOLLOWING FROM SYM FILE )
  121                           
  122                           // 10000c78 B CSTACK$$Limit
  123                           // 10000c80 a UNINITRAMBASE
  124                           // 10000edc a UNINITRAMEND 592 BYTES
  125                           // 10000ee0 a BOTTOM_RSTACK
  126                           #ifdef NXP_M0_004kRam
  127                           ALL_UNINITRAM_START     EQU     0x10000D40      // ROUND UP CSTACK$$Limit
  128                           // USED FOR SAVING BAUDRATE BETWEEN RESETS AND HARD FAULT RESETS
  129                           #define DBAUD   ALL_UNINITRAM_START     // .bss zeroing out one word past WARNING
  130                           #define UBAUD   ALL_UNINITRAM_START+4
  131                           // Define space for user use of this resource - After DBAUD and UBAUD so far!
  132                           ALL_UNINITRAM_FREE_START        EQU     ALL_UNINITRAM_START+8
  133                           ALL_UNINITRAM_END               EQU     BOTTOM_RSTACK-4         // UNINT TO HERE
  134                           #endif  // NXP_M0_004kRam
  135                           
  136                           #ifdef NXP_M0_008kRam
  139                           #define DBAUD   ALL_UNINITRAM_START     // .bss zeroing out one word past WARNING
  140                           #define UBAUD   ALL_UNINITRAM_START+4
  144                           #endif  // NXP_M0_008kRam
  145                           
  146                           DBAUDADDR       EQU     DBAUD
  147                           UBAUDADDR       EQU     UBAUD
   21                           //$FISH_M0_MEMMAP.s  // SYSTEM AND USER MEMORY MAPPING
   22                           //------------------------------------------------------------------------------
   23                           // Place (select?) :NONAME's before dynamic content to make CFA addresses static.
   24                           $FISH_NXP_M0_SLIB.s
    1                           // Created FISH_NXP_M0_SLIB.s
    2                           // - To place :NONAME's before dynamic content to make their CFA addresses static.
    3                           
    4                           //------------------------------------------------------------------------------
    5                           // SECTION HEADER TO ALIGN ALL HI LEVEL CODE - ASM SECTION AT END DIFFERS!
    6                            SECTION .text : CONST (2)
    7                            ALIGNROM 2,0xFFFFFFFF
    8                           //------------------------------------------------------------------------------
    9                           //:NONAME BELL:       ( -- ) Emit BELL char.
   10                           BELL:
   11    00000000 .............         DC32    DOCOL, LIT, 0x07, EMIT, SEMIS
                  ...07000000..
                  .............
                  .            
   12                           
   13                           //:NONAME EIGHT:      ( -- n )
   14                           //= :NONAME BACKSPACE_CHAR:  ( -- n ) 
   15                           EIGHT:
   16                           BACKSPACE_CHAR:
   17    00000014 ........08000         DC32    DOCON, 8
                  000          
   18                           
   19                           //:NONAME BSOUT:      ( -- ) Emit BACKSPACE char erasing it and maintain OUT.
   20                           BSOUT:
   21    0000001C ........              DC32    DOCOL
   22    00000020 .............         DC32    BACKSPACE_CHAR, EMIT
                  ...          
   23    00000028 ........              DC32    SPACE
   24    0000002C .............         DC32    BACKSPACE_CHAR, EMIT
                  ...          
   25    00000034 ........FDFFF         DC32    LIT, -3, OUT_SV, PSTORE // Keep OUT in synch
                  FFF..........
                  ......       
   26    00000044 ........              DC32    SEMIS
   27                           
   28                           //------------------------------------------------------------------------------
   29                           #ifndef SRM
   30                           //:NONAME DOTSBASE:   ( n -- ) Pass n as base to .S
   31                           DOTSBASE:
   32    00000048 ........              DC32    DOCOL
   33    0000004C ........              DC32    BASE_TO_R12     // Save current BASE
   34    00000050 .............         DC32    BASE_SV, STORE, DOTS
                  ...........  
   35    0000005C ........              DC32    BASE_FROM_R12   // Restore BASE
   36    00000060 ........              DC32    SEMIS
   37                           
   38                           //:NONAME PRINT_SUFFIX ( -- ) Print char representing BASE ( b d or h )
   39                           PRINT_SUFFIX:
   40    00000064 ........              DC32    DOCOL
   41    00000068 .............         DC32    BASE_SV, AT, DUP
                  ...........  
   42    00000074 .............         DC32    TWO, EQUAL
                  ...          
   43    0000007C ........              DC32    ZBRAN
   44    00000080 18000000              DC32     DEC_OR_HEX-.
   45                           
   46                           IS_BIN:        
   47    00000084 ........62000         DC32    LIT, 'b', EMIT, DROP
                  000..........
                  ......       
   48    00000094 ........              DC32    SEMIS
   49                                   
   50                           DEC_OR_HEX:
   51    00000098 ........0A000         DC32    LIT, 10, EQUAL
                  000........  
   52    000000A4 ........              DC32    ZBRAN
   53    000000A8 14000000              DC32     IS_HEX-.
   54                           
   55                           IS_DECIMAL:
   56    000000AC ........64000         DC32    LIT, 'd', EMIT
                  000........  
   57    000000B8 ........              DC32    SEMIS
   58                           
   59                           IS_HEX:
   60    000000BC ........68000         DC32    LIT, 'h', EMIT
                  000........  
   61    000000C8 ........              DC32    SEMIS
   62                           
   63                           //#ifndef SRM
   64                           //:NONAME DOT_BASE_SUFFIX: ( n -- ) DOT with BASE suffix appended.
   65                           // USED in . .D and .SD
   66                            SECTION .text : CONST (2)
   67                           DOT_BASE_SUFFIX:
   68    00000000 ........              DC32    DOCOL
   69    00000004 ........              DC32    STOD            // Extend sign
   70    00000008 ........              DC32    ZERO            // and no padding
   71    0000000C ........              DC32    DDOTR           // in call to D.R
   72    00000010 ........              DC32    PRINT_SUFFIX    // Read BASE and print suffix
   73    00000014 ........              DC32    SEMIS
   74                           
   75                           //:NONAME UDOT_BASE_SUFFIX: ( n -- ) UDOT with BASE suffix appended.
   76                           // USED in .B .H .SB AND .SH
   77                           UDOT_BASE_SUFFIX:
   78    00000018 ........              DC32    DOCOL
   79    0000001C .............         DC32    ZERO, ZERO      // No sign and no padding
                  ...          
   80    00000024 ........              DC32    DDOTR           // in call to D.R
   81    00000028 ........              DC32    PRINT_SUFFIX    // Read BASE and print suffix
   82    0000002C ........              DC32    SEMIS
   83                           
   84                           //:NONAME DOTBASE:   ( n n -- ) Use TOP n as temporary BASE to output with.
   85                           //       Save current BASE and use n as BASE for this DOT or U.
   86                           //       Used by .B .D and .H
   87                           DOTBASE:
   88    00000030 ........              DC32    DOCOL
   89    00000034 ........              DC32    BASE_TO_R12     // Save current BASE
   90    00000038 .............         DC32    DUP, BASE_SV, STORE     // Save and set BASE to use
                  ...........  
   91                           // IF THIS IS ELIMINATED AND UDOT ONLY USED -1 .D IS 42432762367
   92    00000044 ........0A000         DC32    LIT, 10, EQUAL  // Use saved BASE for DECIMAL case
                  000........  
   93    00000050 ........              DC32    ZBRAN           // Fall thru for DECIMAL Case
   94    00000054 10000000              DC32    DBUSEDUDOT-.    // Else handle BIN and HEX as unsigned.
   95                           
   96    00000058 ........              DC32    DOT_BASE_SUFFIX
   97                           
   98    0000005C ........              DC32    BRAN
   99    00000060 08000000              DC32    DBASEDONE-.     // Finish with space and reestoration of BASE.
  100                           
  101                           DBUSEDUDOT:
  102    00000064 ........              DC32    UDOT_BASE_SUFFIX
  103                           
  104                           DBASEDONE:
  105    00000068 ........              DC32    SPACE           // Provide normal . formatting
  106    0000006C ........              DC32    BASE_FROM_R12   // Restore BASE
  107    00000070 ........              DC32    SEMIS
  108                           #endif  // not SRM
  109                           //------------------------------------------------------------------------------
  110                           
  111                           //:NONAME INITSO_SV:    ( -- addr of INITSO )
  112                           //      A system variable that contains the initial value for the stack pointer.
  113                           //      Pronounced S-zero. See SP!
  114                           INITSO_SV:
  115    00000074 .............         DC32    DOCON, INITSO
                  ...          
  116                           
  117                           //:NONAME INITRO_SV:    ( -- addr of INITRO )
  118                           //      A system variable containing the initial location of the return stack.
  119                           //      Pronounced R-zero. See RP!
  120                           INITRO_SV:
  121    0000007C .............         DC32    DOCON, INITRO
                  ...          
  122                           
  123                           
  124                           //:NONAME CSP_SV:       ( -- addr of CSP ) Stack address save for compile error checking
  125                           //       A system variable temporarily storing the stack pointer position, for
  126                           //       compilation error checking.
  127                           CSP_SV:
  128    00000084 .............         DC32    DOCON, CSP
                  ...          
  129                           
  130                           //:NONAME HLD_SV:       ( -- addr of NHLD ) Holds address of numeric output conversion
  131                           //      A system variable that holds the address of the latest character of
  132                           //      text during numeric output conversion. Usually pad relative.
  133                           HLD_SV:
  134    0000008C .............         DC32    DOCON, NHLD
                  ...          
  135                           
  136                           //:NONAME DICTFULL_ABORT ( -- ) Issue Dictionary Full Message and ABORT
  137                           DICTFULL_ABORT:
  138    00000094 ........              DC32    DOCOL
  139    00000098 .............         DC32    LIT, msg_dictfull
                  ...          
  140    000000A0 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  141    000000A8 ........              DC32    ABORT
  142                           
  143                           //:NONAME ALLOT_PRIM: ( un -- ) ALLOT WITHOUT DICTIONARY CHECK
  144                           ALLOT_PRIM:
  145    000000AC ........              DC32    DOCOL
  146    000000B0 ........              DC32    DP_SV
  147    000000B4 ........              DC32    PSTORE
  148    000000B8 ........              DC32    SEMIS
  149                           
  150                           //:NONAME COMMA_PRIM ( CFA -- ) COMMA WITHOUT DICTSPACE TEST
  151                           COMMA_PRIM:
  152    000000BC ........              DC32    DOCOL
  153    000000C0 ........              DC32    ALIGN32_FF_PAD  // ASM CANDIDATE
  154    000000C4 ........              DC32    HERE            // is NEW DP
  155    000000C8 ........              DC32    STORE           // CFA
  156    000000CC ........              DC32    FOUR
  157    000000D0 ........              DC32    ALLOT_PRIM      // ALLOT W/O DICTSPACE CHECK
  158    000000D4 ........              DC32    SEMIS
  159                           
  160                           //:NONAME QCOMP: ( -- ) Issue error message if not compiling.
  161                           QCOMP:
  162    000000D8 ........              DC32    DOCOL
  163    000000DC ........              DC32    STATE_SV
  164    000000E0 ........              DC32    AT
  165    000000E4 ........              DC32    ZEQU
  166    000000E8 .............         DC32    LIT, msg_qcomp
                  ...          
  167    000000F0 ........              DC32    QERROR    // ( f nullstr-addr -- )
  168    000000F4 ........              DC32    SEMIS
  169                           
  170                           //:NONAME QEXEC:        ( -- ) Issue error message if not executing.
  171                           QEXEC:
  172    000000F8 ........              DC32    DOCOL
  173    000000FC ........              DC32    STATE_SV
  174    00000100 ........              DC32    AT
  175    00000104 .............         DC32    LIT, msg_qexec
                  ...          
  176    0000010C ........              DC32    QERROR    // ( f nullstr-addr -- )
  177    00000110 ........              DC32    SEMIS
  178                           
  179                           //:NONAME QPAIR:        ( n1 n2 -- ) Issue an error message if n1 does not equal n2.
  180                           //      The message indicates that compiled conditionals do not match.
  181                           QPAIR:
  182    00000114 ........              DC32    DOCOL
  183    00000118 ........              DC32    SUBB
  184    0000011C .............         DC32    LIT, msg_qpair
                  ...          
  185    00000124 ........              DC32    QERROR    // ( f nullstr-addr -- )
  186    00000128 ........              DC32    SEMIS
  187                           
  188                           //:NONAME QSTACK:       ( -- ) If Stack Error type error message then Abort.
  189                           //      Issue an error message if the stack is out of bounds. This
  190                           //      definition may be installation dependent.
  191                           QSTACK:
  192    0000012C ........              DC32    DOCOL
  193    00000130 ........              DC32    SPAT
  194    00000134 ........              DC32    INITSO_SV
  195    00000138 ........              DC32    AT
  196    0000013C ........              DC32    SWAP
  197    00000140 ........              DC32    ULESSTHAN       // U< ( 2 1 -- 0 ) ( 1 2 -- 1 )
  198    00000144 .............         DC32    LIT, msg_qstack
                  ...          
  199    0000014C ........              DC32    QERROR    // ( f nullstr-addr -- )
  200    00000150 ........              DC32    SEMIS
  201                           
  202                           //:NONAME PDOTQ:        ( -- ) DOTQ run-time
  203                           //      The run-time proceedure, compiled by ." which transmits the
  204                           //      following in-line text to the selected output device. See ."
  205                           //      USE SINGLE QUOTES in SOURCE USAGE!!!!
  206                           PDOTQ:
  207    00000154 ........              DC32    DOCOL
  208    00000158 ........              DC32    RFROM                           // Addr of string = aofstr
  209    0000015C .............         DC32    DUP, COUNT, TYPE
                  ...........  
  210    00000168 .............         DC32    COUNT, PLUS
                  ...          
  211    00000170 ........              DC32    ALIGNED
  212    00000174 ........              DC32    TOR
  213    00000178 ........              DC32    SEMIS
  214                           
  215                           //:NONAME QUERY:        ( -- ) Use Expect to fill TIB
  216                           //      Input characters into TIB as a NULL terminated string using EXPECT.
  217                           //      TIB is filled until CR/EMTER or count argument to EXPECT is reached.
  218                           //      IN is set to zero and the string in TIB is NULL terminated. 
  219                           QUERY:
  220    0000017C ........              DC32    DOCOL
  221    00000180 ........              DC32    TIB_SV               // LIT, TIB-1      //TIB_SV
  222    00000184 ........5E000         DC32    LIT, IOBUFSIZE-2        // 96-2=94
                  000          
  223    0000018C ........              DC32    EXPECT          // expect = counted null terminated string now.
  224    00000190 ........01000         DC32    STRVA, 1, IN    // so skip count byte
                  000........  
  225                           #ifdef  IOBUFS_DEBUG        
  227                           #endif        
  228    0000019C ........              DC32    SEMIS
  229                           
  230                           //:NONAME PNUMBER:      ( 0 0 addr1 -- d addr2 )
  231                           //                      ( 0 0 addr1 -- LSW MSW addr2=addr1+chars )
  232                           //      Convert the ascii text beginning at addr1+l
  233                           //      with regard to BASE into a 64 bIt unsigned number d.
  234                           //      Addr2 is the address of the first unconvertable digit, usually space
  235                           //      or NULL.
  236                           //      Used by NUMBER.
  237                           PNUMBER:
  238    000001A0 ........              DC32    DOCOL
  239                           PNUM1:                          // Begin
  240    000001A4 ........              DC32    ONEP            // ( LSW MSW addr+1 -- )
  241    000001A8 .............         DC32    DUP, TOR        // ( LSW MSW  addr+1 -- ) copy of addr+1 >r
                  ...          
  242    000001B0 ........              DC32    CAT             // ( LSW MSW c -- )
  243    000001B4 .............         DC32    BASE_SV, AT     // ( LSW MSW c base -- )
                  ...          
  244    000001BC ........              DC32    DIGIT           // ( LSW MSW c base -- 0 0 digit 1 (ok)
  245                                                          // | ( 0 0 0 (bad))
  246                           // digit gets 0, 0x20 or 0x2E and returns 0 then branches to fromr semis...
  247    000001C0 ........              DC32    ZBRAN           //
  248    000001C4 58000000              DC32     PNUM2-.        // If digit retuned 0 branch, else fall thru
  249                           
  250    000001C8 ........              DC32    SWAP            // ( LSW MSW digit -- )
  251    000001CC .............         DC32    BASE_SV, AT     // ( LSW digit MSW base -- )
                  ...          
  252                           //      U* (un un --  ud=<LSW MSW> )
  253    000001D4 ........              DC32   USTAR            // ( LSW digit LSW MSW  -- )
  254    000001D8 ........              DC32    DROP
  255    000001DC ........              DC32    ROT
  256    000001E0 .............         DC32    BASE_SV, AT     // ( base*accn bn base -- )
                  ...          
  257    000001E8 ........              DC32    USTAR           // ( base*accn bn*base --   )
  258    000001EC ........              DC32    DPLUS           // ( base*accn+bn*base --   )
  259    000001F0 .............         DC32    DPL_SV, AT, ONEP
                  ...........  
  260    000001FC ........              DC32    ZBRAN           // IF true
  261    00000200 10000000              DC32    PNUM3-.         // else do
  262                           
  263    00000204 .............         DC32    ONE, DPL_SV, PSTORE
                  ...........  
  264                           
  265                           PNUM3:                          // endif
  266                                                           // ( 0 0 <c | 0> -- )
  267    00000210 ........              DC32    RFROM           // ( 0 0 <c | 0> addr+1 -- ) copy of addr+1 <r
  268    00000214 ........              DC32    BRAN
  269    00000218 8CFFFFFF              DC32    PNUM1-.         // REPEAT
  270                           
  271                           PNUM2:
  272    0000021C ........              DC32    RFROM           // copy of addr+1 <r
  273    00000220 ........              DC32    SEMIS
  274                           
  275                           //:NONAME DFIND:        ( --- pfa len tf )(found)
  276                           //              ( --- ff ) (not found)
  277                           //      Accepts the next text word (delimited by blanks) in the input stream
  278                           //      to HERE, and searches the CONTEXT and then CURRENT vocabularies
  279                           //      for a matching entry. If found, the dictionary entry's parameter
  280                           //      field address, its length byte, and a boolean true is left.
  281                           //      Otherwise, only a boolean false is left.
  282                           //      DFIND LEN HAS TO BE smudged header byte for INTERPRET.
  283                           DFIND:
  284    00000224 ........              DC32    DOCOL
  285                           #ifdef IO2TP
  288                           #endif
  289    00000228 ........              DC32    BLANK   // ( ch -- )
  290    0000022C ........              DC32    WORD    // ( cH-DELIM  --- )
  291    00000230 ........              DC32    HERE    // ( txt -- )
  292                           #ifdef  IOBUFS_DEBUG        
  294                           #endif        
  295    00000234 ........              DC32    LATEST  // ( txt nfa -- )
  296    00000238 ........              DC32    PFIND   // ( txt nfa -- pfa wordlen 1 ) (ok)
  297                                                   // | ( txt nfa -- 0 ) (bad)
  298    0000023C ........              DC32    SEMIS
  299                           
  300                           //:NONAME COMP: ( -- ) Compile CFA of word that follows inside a definition.
  301                           // DOTQ: DO: LOOP: PLOOP: LITERAL: DLITERALl COLON: SEMIS:
  302                           // DO DICTSPACE CHECK, AS DOES COMMA, CCOMMA and ALLOT
  303                           // SO COMMA_PRIM CREATED AND USED HERE FOR COMPILER SPEEDUP
  304                           //      Compile CFA of word that follows.
  305                           //      When the word containing COMPILE executes, the execution address of
  306                           //      the word following COMPILE is copied (compiled) into the dictionary.
  307                           //      This allows specific compilation situations to be handled in
  308                           //      addition to simply compiling an execution address (which the
  309                           //      interpreter already does).
  310                           COMP:
  311    00000240 ........              DC32    DOCOL
  312                           //      DC32    QEXEC   // QCOMP
  313    00000244 ........              DC32    RFROM   // addr of next word in body of this word
  314    00000248 ........              DC32    DUP
  315    0000024C ........              DC32    FOURP   // addr past next word...
  316    00000250 ........              DC32    TOR     // that where execution resumes after
  317    00000254 ........              DC32    AT      // compiling this word
  318                           //      DC32    COMMA   // ALIGNED, INCREMENTS DP REFLECTED by HERE
  319    00000258 ........              DC32    COMMA_PRIM // NO DICTSPACE CHECK HERE
  320    0000025C ........              DC32    SEMIS
  321                           
  322                           //:NONAME MSMOD:        ( ud1 n2 -- n3 ud4 )
  323                           //      An unsigned mixed magnitude math operation which leaves a double
  324                           //      quotient ud4 and remainder u3, from a double dividend ud1 and single
  325                           //      divisor u2. Primarily used in pictured numeric output DIG
  326                           MSMOD:
  327    00000260 ........              DC32    DOCOL           // EX 1 0 A
  328    00000264 ........              DC32    TOR             // -- 1 0
  329    00000268 ........              DC32    ZERO            // -- 1 0 0
  330    0000026C ........              DC32    R               // -- 1 0 0 A
  331    00000270 ........              DC32    USLASH          // ( uLSW uMSW u32 --- u32REMAINDER u32QUOTIENT )
  332    00000274 ........              DC32    RFROM
  333    00000278 ........              DC32    SWAP            // -- 0 A 0 1 0
  334    0000027C ........              DC32    TOR
  335    00000280 ........              DC32    USLASH
  336    00000284 ........              DC32    RFROM
  337    00000288 ........              DC32    SEMIS
  338                           
  339                           //:NONAME SCSP: ( -- ) Save the parameter stack position in CSP.
  340                           //      Part of the compiler security.
  341                           //      Means Store (save) Compile time stack position.
  342                           SCSP:
  343    0000028C ........              DC32    DOCOL
  344    00000290 ........              DC32    SPAT
  345    00000294 ........              DC32    CSP_SV
  346    00000298 ........              DC32    STORE
  347    0000029C ........              DC32    SEMIS
  348                           
  349                           //:NONAME QCSP: ( -- ) Issue error message if stack and CSP don't match.
  350                           //      Indicates unbalanced compilation. Part of compiler security
  351                           QCSP:
  352    000002A0 ........              DC32    DOCOL
  353    000002A4 ........              DC32    SPAT
  354    000002A8 ........              DC32    CSP_SV
  355    000002AC ........              DC32    AT
  356    000002B0 ........              DC32    SUBB
  357    000002B4 .............         DC32    LIT, msg_qstack
                  ...          
  358    000002BC ........              DC32    QERROR    // ( f nullstr-addr -- )
  359    000002C0 ........              DC32    SEMIS
  360                           
  361                           //:NONAME INTERPRET:    ( -- ) The space delimited text Token Interpreter
  362                           //      Find or convert a text token then execute it's semantics or compile it,
  363                           //      depending on STATE. The token text is from the TIB.
  364                           
  365                           //      If the token cannot be found in a dictionary (by a search of CURRENT),
  366                           //      an attempt to converte it to a number according to the current base.
  367                           //      is tried. That also failing, an error message will TYPE and ABORT.
  368                           
  369                           //      Text input will be taken according to the convention for WORD. If a
  370                           //      decimal point is found as part of a number, a double number value
  371                           //      will be left. The decimal point is saved in DPL but otherwise
  372                           //      has no other purpose than to force this action.
  373                           //      See NUMBER.
  374                           INTERPRET:
  375    000002C4 ........              DC32    DOCOL
  376                           INTE1:                          // Begin
  377    000002C8 ........              DC32    DFIND           // IO2TP noop there for TIB entry
  378                           //      -FIND ( --- pfa len tf )(found) ( --- ff ) (not found)
  379    000002CC ........              DC32    ZBRAN           // IF not a word,
  380    000002D0 3C000000              DC32     INTE2-.        // TRY AS A NUMBER
  381                           
  382    000002D4 ........              DC32    STATE_SV        // CSTATE 0 = INTERPRET, Cxh = COMPILING
  383    000002D8 ........              DC32    AT              // DFIND len has to be SMUDGED NFA count
  384    000002DC ........              DC32    LESSTHAN        // for CSTATE to pass IMMEDIATE words
  385    000002E0 ........              DC32    ZBRAN           // To execute immdeiate words while compiling
  386    000002E4 14000000              DC32     INTE3-.
  387                           
  388    000002E8 ........              DC32    CFA
  389    000002EC ........              DC32    COMMA_PRIM      // No DICTSPACE check, aligned.
  390    000002F0 ........              DC32    BRAN    //ELSE
  391    000002F4 0C000000              DC32     INTE4-.
  392                           
  393                           INTE3:
  394    000002F8 ........              DC32    CFA     //EXECUTE FOUND WORD
  395    000002FC ........              DC32    EXEC    //endif
  396                           INTE4:
  397    00000300 ........              DC32    QSTACK   // IF STACK error abort using qerr
  398    00000304 ........              DC32    BRAN    //ELSE
  399    00000308 C0FFFFFF              DC32     INTE1-.
  400                           
  401                           INTE2:
  402    0000030C ........              DC32    HERE
  403    00000310 ........              DC32    NUMBER //( addr   ---   32LSW 32MSW ) IF error quit
  404    00000314 ........              DC32    DPL_SV
  405    00000318 ........              DC32    AT
  406    0000031C ........              DC32    ONEP
  407    00000320 ........              DC32    ZBRAN   // IF 1+ = 0
  408    00000324 10000000              DC32     INTE6-.        // SINGLE NUMBER
  409                           
  410    00000328 ........              DC32    DLITERAL   // PUSH DOUBLE NUMBER TO STACK
  411    0000032C ........              DC32    BRAN    // ELSE DOUBLE NUMBER
  412    00000330 0C000000              DC32     INTE7-.
  413                           
  414                           INTE6:
  415    00000334 ........              DC32    DROP
  416    00000338 ........              DC32    LITERAL // PUSH SINGLE NUMBER TO STACK
  417                           
  418                           INTE7:
  419    0000033C ........              DC32    QSTACK  // endif   // IF STACK error abort using qerr
  420                           
  421                           INTE5:
  422    00000340 ........              DC32    BRAN    // AGAIN
  423    00000344 84FFFFFF              DC32     INTE1-.
  424                           
  425                           //:NONAME QUIT: ( -- ) The Outer Interpreter.
  426                           //      THE OUTER INTERPRETER WAITS FOR INPUT
  427                           //      THEN CONVERTS NUMBERS AND EXECUTES WORDS
  428                           //      Clear the return stack, stop compilation, and return control to the
  429                           //      operators terminal. No message is given.
  430                           QUIT:
  431    00000348 ........              DC32    DOCOL
  432    0000034C ........              DC32    LBRAC   // Set CSTATE to zero - not compiling.
  433    00000350 ........              DC32    SPSTO   // ADDED in PAREN TEST
  434                           QUIT1:                  // Begin
  435                           #ifdef IO2TP
  437                           #endif
  438    00000354 ........              DC32    RPSTO
  439    00000358 ........              DC32    QUERY           // ( -- ) Input to TIB
  440    0000035C ........              DC32    INTERPRET       // ( -- ) RETURN BY CR placing null in tib ->  NULL:
  441                           #ifdef IO2TP
  444                           #endif
  445                           // ISSUE INLY CR IF COMPILING OR IF PROMPT: SET TO 0 WITH POFF(PROMPTOFF)
  446    00000360 ........              DC32    STATE_SV        // 0xC0 is compiling
  447    00000364 ........              DC32    AT
  448    00000368 ........              DC32    ZEQU            // NOT = TO ZERO IF COMPILING SO 0 IF COMPILING
  449    0000036C ........              DC32    ZBRAN           // BRANCH IF 0 - CSTATE IS NON-ZERO = compiling
  450    00000370 38000000              DC32     QUIT2-.        // CR, LOOP AGAIN
  451                           
  452                           // v1.7 new feature to vector the system prompt
  453                           // zero means only cr with every line - for download suppression of all but errs
  454    00000374 .............         DC32    LIT, PROMPT, AT
                  ...........  
  455    00000380 ........              DC32    ZBRAN           // IF PROMPT$ = 0
  456    00000384 24000000              DC32     QUIT2-.        // CR, LOOP AGAIN
  457                           
  458                           // PROMPT$ is not zero
  459    00000388 .............         DC32    LIT, PROMPT, AT
                  ...........  
  460                           //        DC32    LIT, msg_MY_OK
  461    00000394 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  462                           //------------------------------------------------------------------------------
  463                           #ifdef SRM
  469                           #else
  470    0000039C .............         DC32    BASE_SV, AT
                  ...          
  471    000003A4 ........              DC32    DOTDEC
  472                           #endif
  473                           
  474                           //------------------------------------------------------------------------------
  475                           BP1_QUIT:
  476                           #ifdef IO2TP
  480                           #endif
  481                           QUIT2:
  482                           if EOL_DLE
  483                           QUIT_EOL_DLE:
  484    000003A8 ........10000         DC32    LIT, 0x10, EMIT // 16d DLE Data Link Escape
                  000........  
  485                           //        DC32    LIT, 0xFE, EMIT // 255d BLACK SQUARE or '|o' in EOL_DLE
  486                           endif
  487    000003B4 ........              DC32    CR              // HERE FOR BOTH COMPILE AND INTERPRET
  488    000003B8 ........              DC32    BRAN            // AGAIN
  489    000003BC 98FFFFFF              DC32     QUIT1-.
  490                           
  491                           //:NONAME BACK: ( addr -- ) Branch back primitive
  492                           //      Calculate the backward branch offset from HERE to addr and compile
  493                           //      into the next available dictionary memory address.
  494                           BACK:
  495    000003C0 ........              DC32    DOCOL
  496    000003C4 ........              DC32    HERE
  497    000003C8 ........              DC32    SUBB
  498    000003CC ........              DC32    COMMA
  499    000003D0 ........              DC32    SEMIS
  500                           
  501                           //:NONAME SEMIC_CREATE:      ( -- ) Used after CREATE to reset CSDP
  502                           //      Used in ; CON and VAR to reset CSDP which is used to auto forget
  503                           //      Words that have errors during compilation.
  504                           SEMIC_CREATE:
  505    000003D4 ........              DC32    DOCOL
  506    000003D8 ........00000         DC32    STRVA, 0, CSDP  // RESET AUTO FORGET WHEN CREATE ERROR
                  000........  
  507    000003E4 ........              DC32    SEMIS
  508                           
  509                           //:NONAME CSDP_SV ( -- addr of CSDP ) Holds where to reset if definition fails
  510                           CSDP_SV:
  511    000003E8 .............         DC32    DOCON, CSDP
                  ...          
  512                           
  513                           //:NONAME       PM:  ( n1 n2 -- n3 ) Apply the sign of n2 to n1, which is left as n3.
  514                           PM:
  515    000003F0 ........              DC32    DOCOL
  516    000003F4 ........              DC32    ZLESS
  517    000003F8 ........              DC32    ZBRAN   //IF
  518    000003FC 08000000              DC32    PM1-.
  519                           
  520    00000400 ........              DC32    NEGATE  //endif
  521                           PM1:
  522    00000404 ........              DC32    SEMIS
  523                           
  524                           //:NONAME       DPM: ( d1 n -- d2) Apply the sign of n to the double number d1.
  525                           DPM:
  526    00000408 ........              DC32    DOCOL
  527    0000040C ........              DC32    ZLESS
  528    00000410 ........              DC32    ZBRAN   //IF
  529    00000414 08000000              DC32    DPM1-.
  530                           
  531    00000418 ........              DC32    DNEGATE //endif
  532                           DPM1:
  533    0000041C ........              DC32    SEMIS
  534                           
  535                           //:NONAME SIGNON:     ( -- ) type SIGNON message.
  536                           SIGNON:
  537    00000420 ........              DC32    DOCOL
  538                           #ifdef IO2TP
  541                           #endif
  542    00000424 .............         DC32    CR, LIT, msg_FISH
                  ...........  
  543    00000430 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  544                           #ifdef SRM
  546                           #endif
  547                           #ifndef SRM
  548    00000438 .............         DC32    LIT, msg_FISH_TIMESTAMP
                  ...          
  549    00000440 .............         DC32    NULLSTRLEN, TYPE, CR
                  ...........  
  550                           #endif
  551                           #ifdef IO2TP
  554                           #endif
  555    0000044C ........              DC32    SEMIS
  556                           
  557                           //:NONAME WARM:       ( -- ) Perform FWARM and FLASH_SCAN
  558                           //      SYSTEM RAMVARSPACE INIT
  559                           //      Patch in FLASH_SAVE'd Code.
  560                           WARM:
  561    00000450 ........              DC32    DOCOL
  562    00000454 ........              DC32    FWARM
  563    00000458 ........              DC32    FLASH_SCAN
  564    0000045C ........              DC32    SEMIS
  565                           
  566                           //:NONAME       TRAVERSE TRAVERSE: ( addr1 n -- addr2 ) Used in NFA and PFA
  567                           //      USED only in NFA and PFA, padding alignment is done there.
  568                           //      Move across a variable length padding aligned name field with smudged 1rst and last
                                 byte.
  569                           //      addr1 is the address of either the length byte or the last letter.
  570                           //      If n=1, the motion is toward nfa - hi memory, if n=-l, the motion is
  571                           //      toward CFA - low memory. The addr2 resulting is address
  572                           //      of the other end of the name.
  573                           TRAVERSE:
  574    00000460 ........              DC32    DOCOL
  575    00000464 ........              DC32    SWAP
  576                           TRAVERSE_BEGIN:
  577    00000468 ........              DC32    OVER    // Begin
  578    0000046C ........              DC32    PLUS
  579    00000470 ........7F000         DC32    LIT,0x7F
                  000          
  580    00000478 ........              DC32    OVER
  581    0000047C ........              DC32    CAT
  582    00000480 ........              DC32    LESSTHAN
  583    00000484 ........              DC32    ZBRAN   //until
  584    00000488 E0FFFFFF              DC32     TRAVERSE_BEGIN-.
  585                           
  586    0000048C ........              DC32    SWAP
  587    00000490 ........              DC32    DROP
  588    00000494 ........              DC32    SEMIS
  589                           
  590                           //------------------------------------------------------------------------------
  591                           // ASM CODE START - MUST BE ALLIGNED AGAIN
  592                           /* AS in:
  593                            SECTION .text : CONST (2)
  594                            ALIGNROM 2,0xFFFFFFFF
  595                           LABEL:
  596                                   DC32    .+5
  597                            SECTION .text : CODE (2)
  598                                   ASM     CODE
  599                           */
  600                           //------------------------------------------------------------------------------
  601                           //:NONAME SECTION:
  602                           //:NONAME SV_INIT_VALUES: Table of FISH SYSTEM VAR Iinitial values.
  603                            SECTION .text : CONST (2)
  604                            ALIGNROM 2,0xFFFFFFFF
  605                           SV_INIT_VALUES:
  606                           // 4 words of System Variables
  607    00000000 0A000000              DC32    DEFAULT_BASE            // NBASE
  608    00000004 01000000              DC32    1                       // IN
  609    00000008 00000000              DC32    0                       // OUT
  610    0000000C 00000000              DC32    0                       // CSTATE
  611                           // 5 addresses of System Data Structures
  612    00000010 F00F0010              DC32    PINIT                   // INITSO
  613    00000014 700F0010              DC32    RINIT                   // INITRO
  614    00000018 ........              DC32    TIB                     // INITTIB
  615    0000001C ........              DC32    RAMVARSPACE             // UP
  616    00000020 ........              DC32    ORIG                    // DP
  617                           // 4 addresses of System Pointers
  618    00000024 00000000              DC32    0                       // CSDP
  619    00000028 00000000              DC32    0                       // FENCE
  620                           #ifdef FISH_PubRel_WORDSET
  621    0000002C ........              DC32    WC_FISH_PubRel_NFA      // 11d CURRENT
  622                           #endif
  623                           #ifdef FISH_NXP_M0_PRO_WORDCAT
  625                           #endif
  626    00000030 ........              DC32    msg_MY_OK               // 13d PROMPT
  627    00000034 00000000              DC32    0                       // 14d ERROR_HALT
  628                           // 14d WORDS TO COPY
  629                           
  630                           
  631                           //:NONAME FWARM   ( -- ) FISH SYSTEM VAR Initialization primitive.
  632                            SECTION .text : CONST (2)
  633                            ALIGNROM 2,0xFFFFFFFF
  634                           FWARM:
  635    00000000 ........              DC32    .+5
  636                            SECTION .text : CODE (2)
  637    00000000 0548                  LDR     t, = SV_INIT_VALUES
  638    00000002 0649                  LDR     n, = END_RAMVARSPACE_SV_START
  639    00000004 0E22                  LDR     w, = 14d
  640                           FWBEGIN:
  641    00000006 0368                  LDR     x, [t]
  642    00000008 0B60                  STR     x, [n]
  643    0000000A 0430                  ADDS    t, #4
  644    0000000C 0431                  ADDS    n, #4
  645    0000000E 013A                  SUBS    w, #1
  646    00000010 F9D1                  BNE     FWBEGIN
  647                                   NEXT
  647.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  647                                   NEXT1
  647.1  00000014 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  647.2  00000016 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  647.3                                 ENDM
  647.4                                 ENDM
  648                            LTORG  // Always outside of code, else data in words
  648.1                                  TABLE
  648.2  00000018 ........              Reference on line 637
  648.3  0000001C ........              Reference on line 638
  649                           
  650                           //:NONAME DOCOL   ( -- )  COMPILED VERSION OF COLON
  651                            SECTION .text : CODE (2)
  652                            ALIGNROM 2,0xFFFFFFFF
  653                           DOCOL:  // no cfa for DOCOL!!!!!        <<<<<<<<<<<<<<<<<<
  654                                   PUSHi2r         // save IP to Rstack
  654.1  00000000 361F                  SUBS    r, r, #4        //  push i to r, pre decrement r
  654.2  00000002 3560                  STR     i, [r]
  654.3                                 ENDM
  655    00000004 1546                  MOV     i, w    // jam new IP = cfa+4
  656                                   NEXT
  656.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  656                                   NEXT1
  656.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  656.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  656.3                                 ENDM
  656.4                                 ENDM
  657                           
  658                           //:NONAME SEMIS:        ( -- ) COMPILED VERSION OF SEMICOLON
  659                           //      Terminate a colon-definition,
  660                           //      : pushed the calling word return addr to the return stack
  661                           //      This retrieves it and returns to calling word.
  662                            SECTION .text : CONST (2)
  663                            ALIGNROM 2,0xFFFFFFFF
  664                           SEMIS:
  665    00000000 ........              DC32    .+5
  666                            SECTION .text : CODE (2)
  667                                   POPr2i  // pop docol saved IP from Rstack
  667.1  00000000 3568                  LDR i, [r]              //  pop r to i, post increment r
  667.2  00000002 361D                  ADDS    r, r, #4
  667.3                                 ENDM
  668                                   NEXT
  668.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  668                                   NEXT1
  668.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  668.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  668.3                                 ENDM
  668.4                                 ENDM
  669                           
  670                           //:NONAME DOVAR   ( -- ) COMPILED VERSION OF VAR
  671                           // VAR is a CON but DOVAR is 'duplicated' to allow search for it's CFA
  672                           // so FORGET can reclaim VAR space.
  673                            SECTION .text : CODE (2)
  674                            ALIGNROM 2,0xFFFFFFFF
  675                           DOVAR:
  676    00000000 01CA                  LDM     w!, {t}
  677                                   TPUSH
  677                                   PUSHt   // push t to p, pre decrement p
  677.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  677.2  00000004 3860                  STR     t, [p]
  677.3                                 ENDM
  677                                   NEXT
  677.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  677                                   NEXT1
  677.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  677.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  677.3                                 ENDM
  677.4                                 ENDM
  677.5                                 ENDM
  678                           
  679                           //:NONAME DOCON   ( -- ) COMPILED VERSION OF CON
  680                            SECTION .text : CODE (2)
  681                            ALIGNROM 2,0xFFFFFFFF
  682                           DOCON:
  683    00000000 01CA                  LDM     w!, {t}
  684                                   TPUSH
  684                                   PUSHt   // push t to p, pre decrement p
  684.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  684.2  00000004 3860                  STR     t, [p]
  684.3                                 ENDM
  684                                   NEXT
  684.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  684                                   NEXT1
  684.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  684.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  684.3                                 ENDM
  684.4                                 ENDM
  684.5                                 ENDM
  685                           
  686                           //:NONAME LIT:        ( -- n ) The primitive that pushes a number in a definition.
  687                           //      Within a colon-definition, LIT is automatically compiled before each
  688                           //      32 bit literal number encountered in input text. Later execution of
  689                           //      LIT causes the contents of the next dictionary address ( the LITERAL #)
  690                           //      to be pushed to the stack.
  691                           //      Use LITERAL
  692                            SECTION .text : CONST (2)
  693                            ALIGNROM 2,0xFFFFFFFF
  694                           LIT:
  695    00000000 ........              DC32    .+5
  696                            SECTION .text : CODE (2)
  697                                   LIT2t   // LDM          i!, {t}
  697.1                                 // as in xeq token at ToS setup for lit
  697.2  00000000 01CD                  LDM     i!, {t} // fetch memory p points to into {t}, inc i
  697.3                                 ENDM
  698                                           // fetch memory i points to into {t}, inc i after
  699                                   TPUSH
  699                                   PUSHt   // push t to p, pre decrement p
  699.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  699.2  00000004 3860                  STR     t, [p]
  699.3                                 ENDM
  699                                   NEXT
  699.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  699                                   NEXT1
  699.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  699.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  699.3                                 ENDM
  699.4                                 ENDM
  699.5                                 ENDM
  700                           
  701                           //:NONAME RLIT: ( -- n ) LIT primitive that can have it's value relocated.
  702                           //      SEE LIT. ALLOWS RELOCATION OF THIS type OF LIT
  703                            SECTION .text : CONST (2)
  704                            ALIGNROM 2,0xFFFFFFFF
  705                           RLIT:
  706    00000000 ........              DC32    .+5
  707                            SECTION .text : CODE (2)
  708                                   LIT2t           // LDM          i!, {t}
  708.1                                 // as in xeq token at ToS setup for lit
  708.2  00000000 01CD                  LDM     i!, {t} // fetch memory p points to into {t}, inc i
  708.3                                 ENDM
  709                                                   // fetch memory i points to into {t}, inc i after
  710                                   TPUSH
  710                                   PUSHt   // push t to p, pre decrement p
  710.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  710.2  00000004 3860                  STR     t, [p]
  710.3                                 ENDM
  710                                   NEXT
  710.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  710                                   NEXT1
  710.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  710.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  710.3                                 ENDM
  710.4                                 ENDM
  710.5                                 ENDM
  711                           
  712                           //:NONAME GOTO:   ( cfa -- ) Redirect execution to cfa in another hi-level word.
  713                           //      CAUTION!!!!!!! A SYSTEM WORD EXPOSED FOR THE BOLD AND BRAVE!!!!!!!
  714                           //      Stack in CURRENT WORD MUST BE CLEANED UP!
  715                           //      AND STACK MUSTE BE SET UP as expected where you GOTO.
  716                           //      YOU CANNOT VIOLATE controls structure (LOOPS, BEGINs IFs, etc).
  717                           //      Unless you come from the same point in the same control structure!
  718                            SECTION .text : CONST (2)
  719                            ALIGNROM 2,0xFFFFFFFF
  720                           GOTO:
  721    00000000 ........              DC32    .+5
  722                            SECTION .text : CODE (2)
  723                                   POP2i // set i as pointer to cfa to start execution
  723.1  00000000 3D68                  LDR     i, [p]
  723.2  00000002 3F1D                  ADDS    p, p, #4
  723.3                                 ENDM
  724                                   NEXT
  724.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  724                                   NEXT1
  724.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  724.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  724.3                                 ENDM
  724.4                                 ENDM
  725                           
  726                           //:NONAME CREATE_DOES_GOTO:   ( -- )
  727                           //      PUSH ADDRESS OF CREATED WORDS PFA THEN
  728                           //      Redirect execution to cfa of the CREATE DOES> word.
  729                           //      THIS IS LIKE A DOCON IE NO DOCOL!!!!
  730                           //      CAUTION!!!!!!! A SYSTEM WORD EXPOSED FOR THE BOLD AND BRAVE!!!!!!!
  731                           //      Stack in CURRENT WORD MUST BE CLEANED UP!
  732                           //      AND STACK MUSTE BE SET UP as expected where you GOTO.
  733                           //      YOU CANNOT VIOLATE controls structure (LOOPS, BEGINs IFs, etc).
  734                           //      Unless you come from the same point in the same control structure!
  735                           CREATE_DOES_GOTO:
  736                            SECTION .text : CODE (2)
  737                           // WILL NEED A NEW CASE in FLASH_SAVE!
  738                           // NO DOCOL - SO FUDGE ONE
  739                           // PUSH ADDR AFTER EXEC in INTERPRET TO r:
  740                                   PUSHi2r         // save IP to Rstack
  740.1  00000000 361F                  SUBS    r, r, #4        //  push i to r, pre decrement r
  740.2  00000002 3560                  STR     i, [r]
  740.3                                 ENDM
  741                           // AND THIS LOADS GOTO ADDR
  742    00000004 4568                  LDR     i, [t, #4]      // GET GOTO ADDRESS
  743                           // THIS PUSHES PFA TO t
  744    00000006 0830                  ADDS    t, t, #8        // COMPUTE REAL PFA
  745                                   PUSHt
  745.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  745.2  0000000A 3860                  STR     t, [p]
  745.3                                 ENDM
  746                                   NEXT
  746.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  746                                   NEXT1
  746.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  746.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  746.3                                 ENDM
  746.4                                 ENDM
  747                           
  748                           //:NONAME DICTSPACE:  ( -- n ) Calculate and push dictionary space available
  749                            SECTION .text : CONST (2)
  750                            ALIGNROM 2,0xFFFFFFFF
  751                           DICTSPACE:
  752    00000000 ........              DC32    .+5
  753                            SECTION .text : CODE (2)
  754    00000000 0448                  LDR     t, = DICTSPACE_END
  755    00000002 0549                  LDR     n, = DP
  756    00000004 0968                  LDR     n, [n]
  757    00000006 401A                  SUBS    t, t, n
  758                                   TPUSH
  758                                   PUSHt   // push t to p, pre decrement p
  758.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  758.2  0000000A 3860                  STR     t, [p]
  758.3                                 ENDM
  758                                   NEXT
  758.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  758                                   NEXT1
  758.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  758.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  758.3                                 ENDM
  758.4                                 ENDM
  758.5                                 ENDM
  759                           // LTORG
  760                           
  761                           //:NONAME VARSPACE:    ( -- n ) Calculate and push VAR space available
  761.1                                  TABLE
  761.2  00000014 ........              Reference on line 754
  761.3  00000018 ........              Reference on line 755
  762                            SECTION .text : CONST (2)
  763                            ALIGNROM 2,0xFFFFFFFF
  764                           VARSPACE:
  765    00000000 ........              DC32    .+5
  766                            SECTION .text : CODE (2)
  767    00000000 0448                  LDR     t, = END_RAMVARSPACE_SV_START
  768    00000002 0549                  LDR     n, = UP // UP IS ALLOCATION POINTER FOR VARS AND VARALLOT
  769    00000004 0968                  LDR     n, [n]
  770    00000006 401A                  SUBS    t, t, n
  771                                   TPUSH
  771                                   PUSHt   // push t to p, pre decrement p
  771.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  771.2  0000000A 3860                  STR     t, [p]
  771.3                                 ENDM
  771                                   NEXT
  771.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  771                                   NEXT1
  771.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  771.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  771.3                                 ENDM
  771.4                                 ENDM
  771.5                                 ENDM
  772    00000012 0000           LTORG
  772.1                                  TABLE
  772.2  00000014 ........              Reference on line 767
  772.3  00000018 ........              Reference on line 768
  773                           
  774                           // Rewrite for TOSCT interop?
  775                           //:NONAME PFIND:        ( addr1 addr2 -- pfa b tf ) (ok)
  776                           //              ( addr1 addr2 -- ff ) (bad)
  777                           //      LEN HAS TO BE smudged header byte for INTERPRET.
  778                           //      Header LEN BYTE REQUIRED by Interpret for immediate word execution
  779                           //      Searches the dictionary starting at the name field address addr2,
  780                           //      matching to the text at addr1. Returns parameter field address,
  781                           //      length byte of name field and boolean true for a good match. If no
  782                           //      match is found, only a boolean false is left.
  783                           //
  784                           //      To step thru to a word set bp at :NONAME
  785                           //      and watch r3 for match of word addr from symbol file
  786                            SECTION .text : CONST (2)
  787                            ALIGNROM 2,0xFFFFFFFF
  788                           PFIND:
  789    00000000 ........              DC32    .+5
  790                            SECTION .text : CODE (2)
  791                                   POP2x   // r3 Dict Name NFA
  791.1  00000000 3B68                  LDR     x, [p]
  791.2  00000002 3F1D                  ADDS    p, p, #4
  791.3                                 ENDM
  792                                   POP2w   // r2 String Addr usually at here
  792.1  00000004 3A68                  LDR     w, [p]
  792.2  00000006 3F1D                  ADDS    p, p, #4
  792.3                                 ENDM
  793    00000008 9346                  MOV     rb, w   // r11 Save TXT String ADDR
  794                           
  795                           //      SEARCH LOOP
  796                           //      nfa length test
  797                           //      x must = Dict nfa
  798                           PFIN1:                  // ADDR-->char counted strings
  799    0000000A 5A46                  MOV     w, rb   // restore txt str addr
  800    0000000C 1878                  LDRB    t, [x]  // GET nfa LENGTH from r3
  801                           //      LEN HAS TO BE smudged header byte for DFIND -> INTERPRET.
  802                           //      ELSE DO THIS HERE TO MAKE IT ACTUAL & REMOVE SECTION BELOW
  803                           //      MOVS    y, #0x3F
  804                           //      ANDS    t, y
  805    0000000E 8446                  MOV     k, t    // r12 Save search word length
  806    00000010 1178                  LDRB    n, [w]  // r1 r2 TXT WORD LEN
  807    00000012 4840                  EORS    t, t, n
  808    00000014 3F24                  MOVS    y, # 03Fh
  809    00000016 2040                  ANDS    t, y
  810    00000018 19D1                  BNE     PFIN5   // Len mismatch, GET NEXT LINK FIELD ADDR (lfa)
  811                           
  812                           //      LENGTHS MATCH - CHECK EACH CHARACTER in NAME
  813                           //      TEST FIRST CHAR AND DETERMINE IF LAST
  814                           PFIN2:
  815    0000001A 521C                  ADDS    w, w, #1        // str
  816    0000001C 5B1C                  ADDS    x, x, #1        // nfa
  817    0000001E 1878                  LDRB    t, [x]          // GET nfa 1RST CHAR
  818    00000020 1178                  LDRB    n, [w]          // GET TXT 1RST CHAR
  819    00000022 8842                  CMP     t, n            // eor was working but this make 0x80 subb
  820    00000024 F9D0                  BEQ     PFIN2           // matched try next char
  821                             
  822    00000026 8024                  MOVS    y, #0x80
  823    00000028 001B                  SUBS    t, t, y         // ascii only in t and n
  824    0000002A 8842                  cmp     t, n
  825    0000002C 10D1                  BNE     PFIN51          // goto  WORD MISMATCH
  826                           
  827                           //      FOUND END OF NAME (BIT 8 SET) - A MATCH
  828                           //      GET to pfa of found word
  829                           PFIN21:
  830                           
  831    0000002E 5B1C                  ADDS    x, x, #1        // Dict addr
  832    00000030 1878                  LDRB    t, [x]
  833    00000032 FF28                  CMP     t, #0xFF
  834    00000034 FBD0                  BEQ     PFIN21
  835                           
  836                           thispfa:
  837                           
  838    00000036 0833                  ADDS    x, x, #8        // at cfa -> pfa
  839                                   PUSHx                   // PUSH pfa
  839.1  00000038 3F1F                  SUBS    p, p, #4        //  push x to p, pre decrement p
  839.2  0000003A 3B60                  STR     x, [p]
  839.3                                 ENDM
  840    0000003C 0120                  MOVS    t, #1           // TRUE VALUE
  841    0000003E 6246                  MOV     w, k            // RETURN Header Byte LENGTH
  842                                   DPUSH
  842                                   PUSHw   // push w to p, pre decrement p
  842.1  00000040 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
  842.2  00000042 3A60                  STR     w, [p]
  842.3                                 ENDM
  842                                   TPUSH
  842                                   PUSHt   // push t to p, pre decrement p
  842.1  00000044 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  842.2  00000046 3860                  STR     t, [p]
  842.3                                 ENDM
  842                                   NEXT
  842.1  00000048 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  842                                   NEXT1
  842.1  0000004A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  842.2  0000004C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  842.3                                 ENDM
  842.4                                 ENDM
  842.5                                 ENDM
  842.6                                 ENDM
  843                           
  844                           //      NO NAME MATCH - TRY ANOTHER
  845                           //      Set NEXT LINK FIELD ADDR (lfa) to x
  846                           //      ( ZERO = FIRST WORD OF DICTIONARY )
  847                           //      GET TO END OF NAME BEFORE Padding IF ANY
  848                           //      ENTER HERE FROM LEN!= (RB->CNT)
  849                           PFIN5:
  850    0000004E 5B1C                  ADDS     x, x, #1       // inc char in name addr
  851                           
  852                           //      ENTER HERE FROM WORD MISMATCH
  853                           PFIN51:
  854    00000050 1878                  LDRB    t, [x]          // get Dict Word char
  855    00000052 8024                  MOVS    y, #0x80
  856    00000054 2042                  TST     t, y            // is last char in word bit set
  857    00000056 FAD0                  BEQ     PFIN5
  858                           
  859                           //      UNMATCHED NAME - POINTING AT LAST CHAR BEFORE Padding IF ANY
  860                           //      GET PAST FF Padding AND GET lfa
  861                           PFIN7:
  862                           // Code for ALIGNED
  863                           //      ADDS            x, x, #3
  864    00000058 1B1D                  ADDS            x, x, #4        // add 1 for entry
  865    0000005A 0648                  LDR             t, =-4
  866    0000005C 0340                  ANDS            x, x, t
  867    0000005E 1B68                  LDR     x, [x]  // r3 GET lfa to next word
  868    00000060 002B                  CMP     x, #0   // START OF DICT ( 0 ) ?
  869    00000062 00D0                  BEQ             WORDNOTFOUND
  870                           
  871                           // NOT A BRAN TARGET - This one used for breakpoint
  872                           PFIND_NEXT_NFA:
  873    00000064 D1E7                  B       PFIN1           // Search next word x must = Dict nfa
  874                           
  875                           WORDNOTFOUND:                   // PFIND: DONE ( NO MATCH FOUND )
  876    00000066 0020                  MOVS     t, #0
  877                                   TPUSH
  877                                   PUSHt   // push t to p, pre decrement p
  877.1  00000068 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  877.2  0000006A 3860                  STR     t, [p]
  877.3                                 ENDM
  877                                   NEXT
  877.1  0000006C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  877                                   NEXT1
  877.1  0000006E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  877.2  00000070 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  877.3                                 ENDM
  877.4                                 ENDM
  877.5                                 ENDM
  878    00000072 0000           LTORG
  878.1                                  TABLE
  878.2  00000074 FCFFFFFF              Reference on line 865
  879                           
  880                           //:NONAME BRAN: ( -- ) Branch in definitions primitive
  881                           //      In IAR branch target MUST BE ON Next LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
  882                           //      The run-time proceedure to unconditionally branch. An in-line offset
  883                           //      is added to the interpretive pointer IP to branch ahead or back.
  884                           //      BRANCH is compiled by ELSE, AGAIN, REPEAT.
  885                            SECTION .text : CONST (2)
  886                            ALIGNROM 2,0xFFFFFFFF
  887                           BRAN:
  888    00000000 ........              DC32    .+5
  889                            SECTION .text : CODE (2)
  890                           BRAN1:
  891    00000000 2B68                  LDR     x, [i]          // Get branck target
  892    00000002 ED18                  ADDS    i, i, x         // use as offset
  893                                   NEXT
  893.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  893                                   NEXT1
  893.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  893.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  893.3                                 ENDM
  893.4                                 ENDM
  894                           
  895                           //:NONAME ZBRAN:        ( f -- ) Branch if zero definition primitive.
  896                           //      In IAR branch target MUST BE ON Next LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
  897                           //      The run-time proceedure to conditionally branch. If f is false
  898                           //      (zero), the following in-line parameter is added to the interpretive
  899                           //      pointer to branch ahead or back. Compiled by IF, UNTIL, and WHILE.
  900                            SECTION .text : CONST (2)
  901                            ALIGNROM 2,0xFFFFFFFF
  902                           ZBRAN:
  903    00000000 ........              DC32    .+5
  904                            SECTION .text : CODE (2)
  905                                   POP2t
  905.1                         #ifndef TOSCT
  905.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  905.3                         #endif
  905.4  00000002 3F1D                  ADDS    p, p, #4
  905.5                                 ENDM
  906    00000004 0028                  CMP     t, #0           // ZERO?
  907                           #ifdef TOSCT                    // CMP CONSUMES t
  909                           #endif
  910    00000006 ....                  beq     BRAN1           // YES, BRANCH
  911                           
  912    00000008 2D1D                  ADDS    i, i, #4        // NO - CONTINUE...
  913                                   NEXT
  913.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  913                                   NEXT1
  913.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  913.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  913.3                                 ENDM
  913.4                                 ENDM
  914                           
  915                           //:NONAME XLOOP:        ( -- ) Loop primitive in a definition.
  916                           //      The run-time proceedure compiled by LOOP which increments
  917                           //      the loop index by one and tests for loop completion.
  918                           //      See LOOP.
  919                            SECTION .text : CONST (2)
  920                            ALIGNROM 2,0xFFFFFFFF
  921                           XLOOP:
  922    00000000 ........              DC32    .+5
  923                            SECTION .text : CODE (2)
  924    00000000 0123                  MOVS            x, #1
  925                           XLOO1:
  926                                   // Get Limit and Index from r w/o popping them
  927    00000002 7468                  LDR     y, [r, #4]      // Limit
  928    00000004 3268                  LDR     w, [r]          // Index
  929    00000006 9442                  CMP     y, w            // If equal
  930    00000008 03D0                  BEQ     XLOO2           // done
  931                           
  932    0000000A D218                  adds    w, w, x         // INDEX = INDEX + INCR
  933    0000000C 3260                  str     w, [r]          // Put it back by overwrite for I
  934    0000000E A41A                  SUBS    y, y, w
  935    00000010 ....                  BNE     BRAN1           // End of `DO' LOOP
  936                           XLOO2:
  937                                   // Drop Limit and Index, increment i
  938    00000012 0836                  ADDS    r, r, #8
  939    00000014 2D1D                  ADDS    i, i, #4
  940                                   NEXT
  940.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  940                                   NEXT1
  940.1  00000018 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  940.2  0000001A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  940.3                                 ENDM
  940.4                                 ENDM
  941                           
  942                           //:NONAME XPLOOP:       ( n -- ) +LOOP primitive in definitions.
  943                           //      The run-time proceedure compiled by +LOOP, which increments the loop
  944                           //      index by n and tests for loop completion. See +LOOP.
  945                            SECTION .text : CONST (2)
  946                            ALIGNROM 2,0xFFFFFFFF
  947                           XPLOOP:
  948    00000000 ........              DC32    .+5
  949                            SECTION .text : CODE (2)
  950                                   POP2x                   // GET LOOP VALUE
  950.1  00000000 3B68                  LDR     x, [p]
  950.2  00000002 3F1D                  ADDS    p, p, #4
  950.3                                 ENDM
  951                           #ifdef TOSCT
  953                           #endif
  954    00000004 ....                  b       XLOO1           // see XLOO1 for why it's put in x
  955                           
  956                           //:NONAME XDO:  ( Limit Index -- ) The DO primitive in definitions.
  957                           //      ( Limit = addr+cnt Index = addr  -- ) as in ( TIB+LEN TIB -- )
  958                           //      The run-time proceedure compiled by DO which moves the loop control
  959                           //      parameters to the return stack. See DO.
  960                            SECTION .text : CONST (2)
  961                            ALIGNROM 2,0xFFFFFFFF
  962                           XDO:
  963    00000000 ........              DC32    .+5
  964                            SECTION .text : CODE (2)
  965                                   POP2t                   // INITIAL INDEX VALUE = ADDR
  965.1                         #ifndef TOSCT
  965.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  965.3                         #endif
  965.4  00000002 3F1D                  ADDS    p, p, #4
  965.5                                 ENDM
  966                                   POP2w                   // LIMIT VALUE = ADDR+CNT
  966.1  00000004 3A68                  LDR     w, [p]
  966.2  00000006 3F1D                  ADDS    p, p, #4
  966.3                                 ENDM
  967                                   PUSHw2r
  967.1  00000008 361F                  SUBS    r, r, #4        //  push w to r, pre decrement r
  967.2  0000000A 3260                  STR     w, [r]
  967.3                                 ENDM
  968                                   PUSHt2r                 // i expects index TOP of RSTACK
  968.1  0000000C 361F                  SUBS    r, r, #4        //  push t to r, pre decrement r
  968.2  0000000E 3060                  STR     t, [r]
  968.3                                 ENDM
  969                           #ifdef TOSCT
  971                           #endif
  972                                   NEXT
  972.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  972                                   NEXT1
  972.1  00000012 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  972.2  00000014 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  972.3                                 ENDM
  972.4                                 ENDM
  973                           
  974                           //:NONAME CATLT7F  ( addr -- c ) Get char at addr then AND it with 7Fh
  975                            SECTION .text : CONST (2)
  976                            ALIGNROM 2,0xFFFFFFFF
  977                           CATLT7F:
  978    00000000 ........              DC32    .+5
  979                            SECTION .text : CODE (2)
  980                                   POP2t
  980.1                         #ifndef TOSCT
  980.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  980.3                         #endif
  980.4  00000002 3F1D                  ADDS    p, p, #4
  980.5                                 ENDM
  981    00000004 0078                  LDRB    t, [t]
  982    00000006 7F21                  LDR     n, =7Fh
  983    00000008 0840                  ANDS    t, t, n
  984                                   TPUSH
  984                                   PUSHt   // push t to p, pre decrement p
  984.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  984.2  0000000C 3860                  STR     t, [p]
  984.3                                 ENDM
  984                                   NEXT
  984.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  984                                   NEXT1
  984.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  984.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  984.3                                 ENDM
  984.4                                 ENDM
  984.5                                 ENDM
  985                           
  986                           //:NONAME TIB_CHAR_SCAN   ( c -- f ) Scan TIB for c or until null found.
  987                           // Scan TIB, a null terminated string at TIB+IN for 'c' or null termination.
  988                           // Uses and adjusts IN to reflect offset to c or null in TIB.
  989                           // Return false flag if null found first, indicating end of input in TIB,
  990                           // ( usually from QUERY ) else return true flag, either with IN adjusted.
  991                            SECTION .text : CONST (2)
  992                            ALIGNROM 2,0xFFFFFFFF
  993                           TIB_CHAR_SCAN:
  994    00000000 ........              DC32    .+5
  995                            SECTION .text : CODE (2)
  996                           // t is char matched from TIB as flag to return
  997                                   POP2n                   // Char were lookin for
  997.1  00000000 3968                  LDR     n, [p]
  997.2  00000002 3F1D                  ADDS    p, p, #4
  997.3                                 ENDM
  998    00000004 094A                  LDR     w, = TIB
  999    00000006 9246                  MOV     ra, w           // Save for IN calculation.
 1000    00000008 094B                  LDR     x, = IN
 1001    0000000A 1C68                  LDR     y, [x]          // Get offset in to TIB
 1002    0000000C 1219                  ADDS    w, w, y         // Create TIB+IN
 1003                           TCS_LOOP:
 1004    0000000E 1078                  LDRB    t, [w]          // Strting at TIB+IN ( ex space after ( .
 1005    00000010 0132                  ADDS    w, #1           // When matched
 1006    00000012 8842                  CMP     t, n            // Character passed to test
 1007    00000014 01D0                  BEQ     TCS_FOUND
 1008                                   
 1009    00000016 0028                  CMP     t, #0           // Null at end of TIB?
 1010    00000018 F9D1                  BNE     TCS_LOOP        // no keep looking
 1011                           
 1012                           TCS_FOUND:
 1013    0000001A 5446                  MOV     y, ra           // TIB
 1014    0000001C 121B                  SUBS    w, w, y         // TIB+Char offset
 1015    0000001E 1A70                  STRB    w, [x]          // Set IN
 1016                                   TPUSH                   // t is null or char
 1016                                   PUSHt   // push t to p, pre decrement p
 1016.1  00000020 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1016.2  00000022 3860                  STR     t, [p]
 1016.3                                 ENDM
 1016                                   NEXT
 1016.1  00000024 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1016                                   NEXT1
 1016.1  00000026 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1016.2  00000028 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1016.3                                 ENDM
 1016.4                                 ENDM
 1016.5                                 ENDM
 1017                           
 1018                           //:NONAME TOGGLE:       ( addr b -- ) Complement BYTE at addr by the bit pattern b.
 1019                           //      Byte operator for NFA count byte
 1020                           //      Complement (FLIP) the BYTE contents of addr by the bit pattern b.
 1021                           //      SEE SETBITS and CLRBITS
 1021.1                                  TABLE
 1021.2  0000002C ........              Reference on line 998
 1021.3  00000030 ........              Reference on line 1000
 1022                            SECTION .text : CONST (2)
 1023                            ALIGNROM 2,0xFFFFFFFF
 1024                           TOGGLE:
 1025    00000000 ........              DC32    .+5
 1026                            SECTION .text : CODE (2)
 1027                                   POP2n           // Bit PATTERN
 1027.1  00000000 3968                  LDR     n, [p]
 1027.2  00000002 3F1D                  ADDS    p, p, #4
 1027.3                                 ENDM
 1028                                   POP2w           // ADDR
 1028.1  00000004 3A68                  LDR     w, [p]
 1028.2  00000006 3F1D                  ADDS    p, p, #4
 1028.3                                 ENDM
 1029    00000008 1078                  LDRB    t, [w]
 1030    0000000A 4840                  EORS    t, t, n
 1031    0000000C 1070                  STRB    t, [w]
 1032                                   NEXT
 1032.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1032                                   NEXT1
 1032.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1032.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1032.3                                 ENDM
 1032.4                                 ENDM
 1033                           
 1034                           #ifdef XON_XOFF
 1035                           //:NONAME IF_EOL_SEND_XOFF: Get xoff out ASAP in EXPECT!
 1036                           //      Must leave char in t!!!!!!!!!
 1037                            SECTION .text : CONST (2)
 1038                            ALIGNROM 2,0xFFFFFFFF
 1039                           IF_EOL_SEND_XOFF:
 1040    00000000 ........              DC32    .+5
 1041                            SECTION .text : CODE (2)
 1042                           //------------------------------------------------------------------------------
 1043                           #ifdef  IO2TP
 1045                           #else
 1046                           //------------------------------------------------------------------------------
 1047    00000000 0A21                  LDR     n, = 0Ah        // ^J
 1048    00000002 8842                  CMP     t, n
 1049    00000004 05D1                  BNE     CR_CHECK
 1050                           
 1051                           SUB_CR_4_NL:
 1052                                   POP2t
 1052.1                         #ifndef TOSCT
 1052.2  00000006 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1052.3                         #endif
 1052.4  00000008 3F1D                  ADDS    p, p, #4
 1052.5                                 ENDM
 1053    0000000A 0D20                  LDR     t, = 0Dh        // ^M
 1054                                   PUSHt
 1054.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1054.2  0000000E 3860                  STR     t, [p]
 1054.3                                 ENDM
 1055    00000010 02E0                  B       EOL_SEND_XOFF
 1056                           
 1057                           CR_CHECK:
 1058    00000012 0D21                  LDR     n, = 0Dh
 1059    00000014 8842                  CMP     t, n    // LEAVE CHAR in T!!!!
 1060    00000016 03D1                  BNE     NOT_CR
 1061                           
 1062                           EOL_SEND_XOFF:
 1063                           // IO2TP DOES NOT GET HERE
 1064    00000018 ........              BL      TXRDY_SUBR
 1065    0000001C ........              BL      XOFF_SUBR
 1066                           //------------------------------------------------------------------------------
 1067                           NOT_CR:
 1068                                   NEXT
 1068.1  00000020 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1068                                   NEXT1
 1068.1  00000022 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1068.2  00000024 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1068.3                                 ENDM
 1068.4                                 ENDM
 1069                           #endif  // else IO2TP
 1070                           #endif // XON_XOFF
 1071                           
 1072                           
 1073                           //:NONAME NUMBERSUFFIX:      ( addr -- addr ) Number BASE suffix eval primitive.
 1074                           //      In NUMBER temporarily change base if number has valid suffix.
 1075                           //      IF LEN =1 LEAVE IT!
 1076                           //      IF LEN =2 CHECK FOR .suffix!
 1077                           //      addr is counted number striong. The count is ignored by NUMBER
 1078                           //      If valid Base suffix replace suffix with null for NUMBER.
 1079                           //      NUMBER must save and restore base outside of this call.
 1080                            SECTION .text : CONST (2)
 1081                            ALIGNROM 2,0xFFFFFFFF
 1082                           NUMBERSUFFIX:
 1083    00000000 ........              DC32    .+5
 1084                            SECTION .text : CODE (2)
 1085                                   NDPOP2t         // macro = copy tos to t, leave it on the stack
 1085.1  00000000 3868                  LDR     t, [p]
 1085.2                                 ENDM
 1086    00000002 0178                  LDRB    n, [t]  // get string lentgth
 1087    00000004 0129                  CMP     n, #1
 1088    00000006 0FD0                  BEQ     NSEXIT1
 1089                                   
 1090    00000008 0229                  CMP     n, #2
 1091    0000000A 10D0                  BEQ     NSTWO
 1092                           
 1093                           NSNOTTWO:
 1094    0000000C 0144                  ADD     n, n, t // point to end of string
 1095    0000000E 0A78                  LDRB    w, [n]  // get possible suffix
 1096    00000010 622A                  CMP     w, #'b' // 62h
 1097    00000012 12D0                  BEQ     USEBIN
 1098    00000014 252A                  CMP     w, #'%'
 1099    00000016 10D0                  BEQ     USEBIN
 1100                                   
 1101    00000018 642A                  CMP     w, #'d' // 64h
 1102    0000001A 10D0                  BEQ     USEDEC
 1103    0000001C 232A                  CMP     w, #'#'
 1104    0000001E 0ED0                  BEQ     USEDEC
 1105                                   
 1106    00000020 682A                  CMP     w, #'h' // 68h
 1107    00000022 0ED0                  BEQ     USEHEX
 1108    00000024 242A                  CMP     w, #'$'
 1109    00000026 0CD0                  BEQ     USEHEX
 1110                           
 1111                           NSEXIT1:
 1112                                   NEXT
 1112.1  00000028 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1112                                   NEXT1
 1112.1  0000002A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1112.2  0000002C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1112.3                                 ENDM
 1112.4                                 ENDM
 1113                           
 1114                           NSTWO:  // HERE BECAUSE INPUT LEN IS 2 SO IF . IS FIRST
 1115    0000002E 4278                  LDRB    w, [t, #1]      // GET 1RST CHAR
 1116    00000030 2E2A                  CMP     w, #'.'         // IF IT'S A DOT
 1117    00000032 EBD1                  BNE     NSNOTTWO
 1118                                   NEXT
 1118.1  00000034 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1118                                   NEXT1
 1118.1  00000036 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1118.2  00000038 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1118.3                                 ENDM
 1118.4                                 ENDM
 1119                           
 1120                           USEBIN:
 1121    0000003A 0224                  LDR     y, =2
 1122    0000003C 02E0                  B       CLRSUFFIX
 1123                           USEDEC:
 1124    0000003E 0A24                  LDR     y, =10
 1125    00000040 00E0                  B       CLRSUFFIX
 1126                           USEHEX:
 1127    00000042 1024                  LDR     y, =16
 1128                           
 1129                           CLRSUFFIX:
 1130    00000044 0022                  LDR     w, =0X00        // =0x20
 1131    00000046 0A70                  STRB    w, [n]
 1132    00000048 024A                  LDR     w, =NBASE       // BASE_SV in FISH
 1133    0000004A 1460                  STR     y, [w]
 1134                                   NEXT
 1134.1  0000004C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1134                                   NEXT1
 1134.1  0000004E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1134.2  00000050 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1134.3                                 ENDM
 1134.4                                 ENDM
 1135    00000052 0000           LTORG
 1135.1                                  TABLE
 1135.2  00000054 ........              Reference on line 1132
 1136                           
 1137                           //:NONAME USTAR:        (u1 u2 --  ud=<LSW MSW> ) USED INTERNALLY - NOT UNSIGNED
 1138                           //      Leave the unsigned double number product of two unsigned numbers.
 1139                            SECTION .text : CONST (2)
 1140                            ALIGNROM 2,0xFFFFFFFF
 1141                           USTAR:
 1142    00000000 ........              DC32    .+5
 1143                            SECTION .text : CODE (2)
 1144                                   POP2t
 1144.1                         #ifndef TOSCT
 1144.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1144.3                         #endif
 1144.4  00000002 3F1D                  ADDS    p, p, #4
 1144.5                                 ENDM
 1145                                   POP2n
 1145.1  00000004 3968                  LDR     n, [p]
 1145.2  00000006 3F1D                  ADDS    p, p, #4
 1145.3                                 ENDM
 1146                            IMPORT c_32by32to64mul // LSW in t (r0), MSW in n (r1)
 1147    00000008 ........              BL      c_32by32to64mul
 1148    0000000C 0246                  MOV     w, t    // LSW
 1149    0000000E 0846                  MOV     t, n    // MSW
 1150                                   DPUSH           //  --  LSW MSW )
 1150                                   PUSHw   // push w to p, pre decrement p
 1150.1  00000010 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1150.2  00000012 3A60                  STR     w, [p]
 1150.3                                 ENDM
 1150                                   TPUSH
 1150                                   PUSHt   // push t to p, pre decrement p
 1150.1  00000014 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1150.2  00000016 3860                  STR     t, [p]
 1150.3                                 ENDM
 1150                                   NEXT
 1150.1  00000018 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1150                                   NEXT1
 1150.1  0000001A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1150.2  0000001C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1150.3                                 ENDM
 1150.4                                 ENDM
 1150.5                                 ENDM
 1150.6                                 ENDM
 1151                           
 1152                           //:NONAME       USLASH: ( d n --- u32REM u32QUO ) USED INTERNALLY - NOT UNSIGNED
 1153                           //      Leave the unsigned remainder u2 and unsigned quotient u3 from the
 1154                           //      unsigned double dividend ud and unsigned divisor u1.
 1155                           //      RESULTS ARE NOT A TRADITOIONAL DOUBLE NUMBER ONE WOULD PRINT USING D.
 1156                           //      Quotient = int ( Dividend / Divisor )
 1157                           //      Remainder = Dividend - Quotient * Divisor
 1158                            SECTION .text : CONST (2)
 1159                            ALIGNROM 2,0xFFFFFFFF
 1160                           USLASH:
 1161    00000000 ........              DC32    .+5
 1162                            SECTION .text : CODE (2)
 1163                           //      U/  USLASH: ( uLSW uMSW u32 --- u32REMAINDER u32QUOTIENT )
 1164                                   POP2t                   // U32  divisor
 1164.1                         #ifndef TOSCT
 1164.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1164.3                         #endif
 1164.4  00000002 3F1D                  ADDS    p, p, #4
 1164.5                                 ENDM
 1165                                   POP2x                   // UMSW  dividendHI
 1165.1  00000004 3B68                  LDR     x, [p]
 1165.2  00000006 3F1D                  ADDS    p, p, #4
 1165.3                                 ENDM
 1166                                   POP2w                   // ULSW dividendLO
 1166.1  00000008 3A68                  LDR     w, [p]
 1166.2  0000000A 3F1D                  ADDS    p, p, #4
 1166.3                                 ENDM
 1167    0000000C 0028                  CMP     t, #0           // divide by zero is divisor = 0
 1168    0000000E 08D0                  BEQ     DZERO           // J Not Below
 1169                           
 1170                            IMPORT c_64by32div             // LSW of quo in t (r0), rem in w (r2)
 1171    00000010 ........              BL      c_64by32div
 1172                                   DPUSH                   //  --  LSW MSW )
 1172                                   PUSHw   // push w to p, pre decrement p
 1172.1  00000014 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1172.2  00000016 3A60                  STR     w, [p]
 1172.3                                 ENDM
 1172                                   TPUSH
 1172                                   PUSHt   // push t to p, pre decrement p
 1172.1  00000018 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1172.2  0000001A 3860                  STR     t, [p]
 1172.3                                 ENDM
 1172                                   NEXT
 1172.1  0000001C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1172                                   NEXT1
 1172.1  0000001E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1172.2  00000020 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1172.3                                 ENDM
 1172.4                                 ENDM
 1172.5                                 ENDM
 1172.6                                 ENDM
 1173                           
 1174                           DZERO:
 1175    00000022 4040                  EORS    t, t            // zero
 1176    00000024 401E                  SUBS    t, t, #1        // 
 1177    00000026 0246                  MOV     w, t            // 
 1178                                   DPUSH                   //  --  LSW MSW )
 1178                                   PUSHw   // push w to p, pre decrement p
 1178.1  00000028 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1178.2  0000002A 3A60                  STR     w, [p]
 1178.3                                 ENDM
 1178                                   TPUSH
 1178                                   PUSHt   // push t to p, pre decrement p
 1178.1  0000002C 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1178.2  0000002E 3860                  STR     t, [p]
 1178.3                                 ENDM
 1178                                   NEXT
 1178.1  00000030 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1178                                   NEXT1
 1178.1  00000032 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1178.2  00000034 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1178.3                                 ENDM
 1178.4                                 ENDM
 1178.5                                 ENDM
 1178.6                                 ENDM
 1179                           
 1180                           //:NONAME SPSTO:        ( -- ) Initialize the stack pointer from INITSO.
 1181                            SECTION .text : CONST (2)
 1182                            ALIGNROM 2,0xFFFFFFFF
 1183                           SPSTO:
 1184    00000000 ........              DC32    .+5
 1185                            SECTION .text : CODE (2)
 1186    00000000 024A                  LDR     w, = INITSO     // SYSTEM VAR BASE ADDR, Initially set to PINIT
 1187    00000002 1768                  LDR     p, [w]          // RESET PARAMETER STACK PTR
 1188                                   NEXT
 1188.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1188                                   NEXT1
 1188.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1188.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1188.3                                 ENDM
 1188.4                                 ENDM
 1189                           // LTORG
 1190                           
 1191                           //:NONAME RPSTO:        ( -- ) Initialize the return stack pointer from INITR0.
 1191.1                                  TABLE
 1191.2  0000000C ........              Reference on line 1186
 1192                            SECTION .text : CONST (2)
 1193                            ALIGNROM 2,0xFFFFFFFF
 1194                           RPSTO:
 1195    00000000 ........              DC32    .+5
 1196                            SECTION .text : CODE (2)
 1197    00000000 024A                  LDR     w, = INITRO     // SYSTEM VAR BASE ADDR, Initially set to RINIT
 1198    00000002 1668                  LDR     r, [w]          // SET RETURN STACK PTR
 1199                                   NEXT
 1199.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1199                                   NEXT1
 1199.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1199.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1199.3                                 ENDM
 1199.4                                 ENDM
 1200    0000000A 0000           LTORG
 1200.1                                  TABLE
 1200.2  0000000C ........              Reference on line 1197
 1201                           
 1202                           //:NONAME BASE_TO_R12:    ( -- ) Copy BASE to r12
 1203                            SECTION .text : CONST (2)
 1204                            ALIGNROM 2,0xFFFFFFFF
 1205                           BASE_TO_R12:
 1206    00000000 ........              DC32    .+5
 1207                            SECTION .text : CODE (2)
 1208    00000000 024A                  LDR     w, =NBASE
 1209    00000002 1168                  LDR     n, [w]
 1210    00000004 8C46                  MOV     k, n
 1211                                   NEXT
 1211.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1211                                   NEXT1
 1211.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1211.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1211.3                                 ENDM
 1211.4                                 ENDM
 1212                            LTORG
 1212.1                                  TABLE
 1212.2  0000000C ........              Reference on line 1208
 1213                            
 1214                           //:NONAME BASE_FROM_R12:    ( -- ) Set BASE from r12
 1215                            SECTION .text : CONST (2)
 1216                            ALIGNROM 2,0xFFFFFFFF
 1217                           BASE_FROM_R12:
 1218    00000000 ........              DC32    .+5
 1219                            SECTION .text : CODE (2)
 1220    00000000 024A                  LDR     w, =NBASE
 1221    00000002 6146                  MOV     n, k
 1222    00000004 1160                  STR     n, [w]
 1223                                   NEXT
 1223.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1223                                   NEXT1
 1223.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1223.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1223.3                                 ENDM
 1223.4                                 ENDM
 1224                            LTORG
 1224.1                                  TABLE
 1224.2  0000000C ........              Reference on line 1220
 1225                            
 1226                           //:NONAME STRVA:    ( -- ) GET VALUE THEN ADDR FROM NEXT 2 CELLS AND WRITE TO ADDR
 1227                           //      Use proper LABEL for values/addresses!!! EX: FPA vs FPADDR
 1228                            SECTION .text : CONST (2)
 1229                            ALIGNROM 2,0xFFFFFFFF
 1230                           STRVA:
 1231    00000000 ........              DC32    .+5
 1232                            SECTION .text : CODE (2)
 1233    00000000 02CD                  LDM     i!, {n} // GET FROM [w] TO n
 1234    00000002 04CD                  LDM     i!, {w}
 1235    00000004 1160                  STR     n, [w]
 1236                                   NEXT
 1236.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1236                                   NEXT1
 1236.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1236.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1236.3                                 ENDM
 1236.4                                 ENDM
 1237                           
 1238                           //------------------------------------------------------------------------------
 1239                           // SECTION HEADER TO RE ALIGN ALL CODE AFTER THIS INCLUDE
 1240                            SECTION .text : CONST (2)
 1241                            ALIGNROM 2,0xFFFFFFFF
 1242                           //------------------------------------------------------------------------------
   25                           // Main Include
   26                           $FISH_NXP_M0_COLD.s     // NVIC startup, PreRun Test, FISH BOOT and ISR code.
    1                           //-----------------------------------FM0_COLD-----------------------------------
    2                           
    3                            SECTION .text : CODE (2)
    4                            PUBLIC FM0_COLD
    5                           #ifdef USE_CMAIN
    8                           #endif
    9                           // No MAIN() entry point!
   10                           // :NONAME FM0_COLD ( -- ) Reset Vector entry point. Setup FISH Virtual Machine.
   11                           FM0_COLD:
   12                           
   13                           //      Set BOD (Power-up Threshold) register to max values.
   14                           //      UM 10398 3.5.26 BOD control register
   15                           
   16                           //      ldr     t, = BODCTRL            // Set power-up threshold to 2.63v
   17                           //      ldr     n, = 13h                // 10h = enable reset 3 = 2.63v
   18                           //      str     n, [t]
   19                           
   20                           // Initialize RAM
   21                           
   22    00000000 0A49                  ldr     n, = 0x11111111         // fill pattern
   23    00000002 0B48                  ldr     t, = RAM_START
   24    00000004 0B4C                  ldr     y, = DBAUD              // START OF UNINT RAM, @ END OF  CSTACK
   25                           _fillRAM:
   26    00000006 0160                  str     n, [t]
   27    00000008 001D                  adds    t, t, #4
   28    0000000A A042                  cmp     t, y
   29    0000000C FBD3                  blo     _fillRAM
   30                           
   31                           // Preserve some uninitialized RAM for system use such as MYBAUD
   32                           
   33    0000000E 0A48                  ldr     t, = ALL_UNINITRAM_END
   34    00000010 0A4C                  ldr     y, = RAM_END
   35                           _fillSTACKS:
   36    00000012 0160                  str     n, [t]
   37    00000014 001D                  adds    t, t, #4
   38    00000016 A042                  cmp     t, y
   39    00000018 FBD3                  blo     _fillSTACKS
   40                           
   41                           #ifdef USE_CMAIN
   46                           #endif
   47                           
   48    0000001A 094F                  LDR     p, =PINIT
   49    0000001C 094E                  LDR     r, =RINIT
   50    0000001E ....                  ADR     i, FM0_WARM
   51                                   PUSHi2r
   51.1  00000020 361F                  SUBS    r, r, #4        //  push i to r, pre decrement r
   51.2  00000022 3560                  STR     i, [r]
   51.3                                 ENDM
   52                                   NEXT
   52.1  00000024 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
   52                                   NEXT1
   52.1  00000026 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   52.2  00000028 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
   52.3                                 ENDM
   52.4                                 ENDM
   53                           
   54    0000002A 0000           LTORG
   54.1                                  TABLE
   54.2  0000002C 11111111              Reference on line 22
   54.3  00000030 00000010              Reference on line 23
   54.4  00000034 400D0010              Reference on line 24
   54.5  00000038 EC0E0010              Reference on line 33
   54.6  0000003C 00100010              Reference on line 34
   54.7  00000040 F00F0010              Reference on line 48
   54.8  00000044 700F0010              Reference on line 49
   55                           
   56                           //---------------------------------FM0_WARM-------------------------------------
   57                           // :NONAME FM0_WARM ( -- ) Start up FISH interpretation, then outer interpreter.
   58                            SECTION .text : CONST (2)
   59                           FM0_WARM:
   60                           #ifdef TESTRAM
   62                           #endif
   63    00000000 ........              DC32    FWARM                   // FISH Init
   64    00000004 ........              DC32    SoCinit                 // SYSCLK, systick, MS
   65    00000008 ........              DC32    UART0_INIT    // TEMP TEST FISH_NXP_M0_81x_IRC12_9600BAUDONLY.s
   66    0000000C ........              DC32    CR
   67                           WTEST:  // TEST CODE GOES HERE
   68                           //        DC32    ILA
   69                           //        DC32    DOTS            // SHOW ANY STACK ARTIFACTS HERE
   70                                   // TEST CODE END
   71    00000010 ........FB000         DC32    LIT, 0xFB, EMIT // ANSI ASCII CheckMark
                  000........  
   72    0000001C ........F7000         DC32    LIT, 0xF7, EMIT // ANSI ASCII 2 wavy's
                  000........  
   73    00000028 ........              DC32    COLD    // WARM ABORT THEN QUIT
   74                           #ifdef USE_CMAIN
   76                           #endif
   77                           //------------------------ for meta-single-stepping ----------------------------
   78                           //:NONAME ssNEXT ( -- ) System Internal hi level breakpoint.
   79                            SECTION .text : CODE (2)
   80                            ALIGNROM 2,0xFFFFFFFF
   81                           ssNEXT1:
   82    00000000 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
   83    00000002 9F46                  MOV     pc, x           // w preserves cfa+4 (pfa) for DOCOL's benefit
   84                           
   85                           // STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h !
   86                           
   87                           // If BX not ued here and in SUBR's OR LDR t, 7 vs LDR t, =7 CAUSES:
   88                           // Error[Lp002]: relocation failed: value out of range or illegal: 0xfffff457 
   89                           
   90                            PUBLIC FM0_SYSTICK_ISR
   91                            SECTION .text : CODE (2)
   92                            ALIGNROM 2,0xFFFFFFFF
   93                           FM0_SYSTICK_ISR:
   94                           // save what you use
   95    00000000 03B5                  PUSH    { t, n, lr }
   96    00000002 0249                  LDR     n, = STICKER
   97    00000004 0868                  LDR     t, [n]
   98    00000006 0130                  ADDS    t, #1
   99    00000008 0860                  STR     t, [n]
  100                           // restore what was being used
  101    0000000A 03BD                  POP     { t, n, pc }
  102                           //        BX      lr
  103                            LTORG
  103.1                                  TABLE
  103.2  0000000C ........              Reference on line 96
  104                           
  105                           /*
  106                           //:NONAME ILA
  107                            SECTION .text : CONST (2)
  108                            ALIGNROM 2,0xFFFFFFFF
  109                           ILA:
  110                                   DC32    DOCOL
  111                                   DC32    NOOP
  112                           //      DC32    ASM_START       // HW ISSUE
  113                           //      NOP
  114                           //      DC32    ASM_END
  115                                   DC32    SEMIS
  116                           */
   27                           $FISH_NXP_M0_MEMMAP.s   // The FISH System Ram Definitions
    1                           // FISH_NXP_M0_SYSTEM.s
    2                           //------------------------------------------------------------------------------
    3                           // FISH FORTH for the NXP ARM Cortex M0 series SystemsOnaChip (SoC).
    4                           // Tested: NXP UM11049 board and NXP LPC1114FD/102 chip with 32kFlash and 4kRam.
    5                           //      RESERVE SPACE FOR FISH SYSTEM VARS AND BUFFERS IN .bss
    6                           
    7                              SECTION FISH_Ram_MemMap : DATA (2)
    8                           // RAM_START and RAM_END defined in FISH_M0_EQUATES.H
    9                           SYSCLOCK        DS32    1               // MUST BE SET AT STARTUP = FULL MHZ #
   10                           FPA:            DS32    1               // FPADDR 0 = NO FLASH AVAILABLE
   11                           FPC:            DS32    1               // FPCURR
   12                           FPSV:           DS32    1               // FP System VAR
   13                           // The above 4 words are the SIGNATURE for saved code in a flash pages.
   14                           // The FISH Dictionary starts 0x10 bytes after RBASE (RAMstart)
   15                           
   16                           DICTSPACE_START:
   17                           #ifdef NXP_M0_004kRam
   18                           ORIG:           DS8     2600            // Dictionary at beginning of RAM
   19                           DICTSPACE_END:                          // For DICTSPACE calculation
   20                           #endif
   21                           #ifdef NXP_M0_008kRam
   24                           #endif
   25                           
   26                           PAD:            DS8     IOBUFSIZE       // +4 to protect following VAR's
   27                           TIB:            DS8     IOBUFSIZE       // +4 to protect following VAR's
   28                           STICKER:        DS32    1               // SYSTICK INTERRUPT ACCUMULATOR
   29                           
   30                           RAMVARSPACE_START:
   31                           RAMVARSPACE:    DS8     24*4            // VAR's are in RAM
   32                                                   // For VARSPACE calculation
   33                            ALIGNRAM 2
   34                           // REARRANGE LATER FOR TASKING AND SIZE BASED OFFSETS!!
   35                           // ZERO
   36                           END_RAMVARSPACE_SV_START:
   37                           // BYTE VALUES
   38                           NBASE:          DS32    1       // BASE_SV for number conversion
   39                           IN:             DS32    1       // IN_SV Offset into tib
   40                           OUT:            DS32    1       // OUT_SV Offset into pad
   41                           CSTATE:         DS32    1       // STATE_SV Compile STATE
   42                           // ADDRESS VALUES
   43                           INITSO:         DS32    1       // INITS0_SV Parameter Stack Addr
   44                           INITRO:         DS32    1       // INITR0_SV Return Stack Addr
   45                           INITTIB:        DS32    1       // TIB_SV TIB Addr
   46                           UP:             DS32    1       // UP_SV See VARALLOT
   47                           DP:             DS32    1       // DP_SV IS See LATEST, COMMA, ALLOT AND CALLOT
   48                           CSDP            DS32    1       // Create saves DP here to restore if errors 
   49                           FENCE:          DS32    1       // FENCE_SV See FORGET
   50                           CURRENT:        DS32    1       // CURRENT_SV See LATEST
   51                           PROMPT:         DS32    1       // Init in FWARM TO msg_MY_OK, $ OR 0 (QUIT)!
   52                           ERROR_HALT:     DS32    1       // Init in FWARM - ERROR, ABORT and COLD
   53                           // THESE ARE INITIALIZED WHEN USED AT RUN-TIME
   54                           CSP:            DS32    1       // CSP_SV SCSP saves stack pos here
   55                           NDPL:           DS32    1       // DPL_SV for number conversion
   56                           NHLD:           DS32    1       // HLD_SV for number conversion
   57                           // BUFFERS
   58                           // 0x1FFF1FF1      // Call Address of IAP routine
   59                           FLASHCMD:       DS32    4*5     // IAP Command Slot + 4 words of arguments
   60                           FLASHRET:       DS32    4*4     // IAP Results Slot + 3 words of arguments
   61                           I2CCMD:         DS32    1       // 
   62                           I2CROLE:        DS32    1       // 
   63                           I2CSTATE:       DS32    1       // 
   64                           I2CBUFFER:      DS8     12      //
   65                           SV_END:
   66                           // BE CAREFUL: Uninitialized RAM is between CSTACK$$Limit and END_RAMVARSPACE-4
   67                           
    3                           //------------------------------------------------------------------------------
    4                           
    5                           // 2DO: Add VIO_UARTX, VIO_KEY, VIO_?KEY and VIO_EMIT
    6                           // (EMIT), (KEY?), and (KEY).
    7                           
    8                           // v1.7:
    9                           
   10                           // #define EOL_DLE // DLE 0x10/16d in QUIT>CR after last word interpreted.
   11                           // #define EOL_NAK // NAK 0x15/21d in error messages for STDLED editor highlight
   12                           // The EOL_NAK makes SPACE NAK end of string in FISH_RM_MSGS.h
   13                           
   14                           // Signon updated. (FOR TEST - FIX B4 SHIP)
   15                           // 2DO: Updated .hex .out and sym.bat
   16                           
   17                           // Split out files to FISH_RM_COMMON and FISH_RM_COMMON_CODE_CORTEX_M
   18                           
   19                           // ADDED EHON and EHOFF to FISH RM
   20                           // Changes iar.s COLD, ERROR and ABORT
   21                           // Changes FISH_STM32F4_SLIB.s SV_INIT_VALUES: & FWARM:
   22                           // Adds 1 word to FISH_STM32F4_MEMMAP.s - ERROR_HALT: SV 
   23                           
   24                           // ADDED P(PROMPT), PON(PROMPTON) and POFF(PROMPTOFF) to FISH RM
   25                           // Changes FISH_NXP_M0_SLIB.s SV_INIT_VALUES: & FWARM: & QUIT:
   26                           // Adds 1 word to FISH_NXP_M0_SYSTEM.s - PROMPT: SV 
   27                           
   28                           // Added #define TRUE_EQU_NEG_ONE
   29                           // Changed all user visible true flags to -1
   30                           
   31                           // Added SXTB Rd, Rm  and SXTH Rd, Rm
   32                           
   33                           // Number Stuff Wordcat reorganized (search NOEXEC or WC_NUMBERS_NFA)
   34                           // EXPECT does counted null strings:
   35                           // NUMBER to look for null terminatiion instead of BLANK.
   36                           // WORD changed to expect null string and elimated BLANKS fill of HERE.
   37                           //      SPEEDS UP TOKENIZATION OF TIB INPUT!
   38                           // ALL IN AND IN_SV INIT SET TO 1 in QUERY SV_INIT_VALUES CLRTIB
   39                           // NUMBERSUFFIX changed to replace suffix with null
   40                           // PAREN ( changed to use TIB+1
   41                           // DPL restored to dictionairy.
   42                           // FISH DATE AND TIMESTAMP removed from SRM to allow for DPL
   43                           
   44                           // FISH ARM V1.6:
   45                           // Added LPC1115 64X8 Configuration.
   46                           // Added any key escape from DUMP
   47                           
   48                           // FISH ARM DebugSrc V1.5.4:
   49                           // CONTSANT, VARIABLE and EXECUTE fit in SRM.
   50                           
   51                           // FISH ARM DebugSrc V1.5.3:
   52                           // CREATE for DOES>
   53                           // IRQS_SUSPEND/RESUME for FLASH_SAVE and FLASH_FORGET
   54                           // BASE in prompt restored.
   55                           
   56                           // FISH ARM DebugSrc V1.5.2:
   57                           // FIXED FLASH_SAVE/SCAN STACK LEAVINGS
   58                           //
   59                           // 
   60                           //------------------------------------------------------------------------------
   61                           // START OF SIGNON MESSAGE
   62                            SECTION .text : CONST (2)
   63                           msg_FISH:
   64                           // DC8 "?" IS A NULL TERMINATED STRING
   65                           // DC8 '?' IS NOT
   66    00000000 4649534820415         DC8     'FISH ARM'
                  24D          
   67                           //      DC8     'FISH ARM TRUE = -1 TEST!!!'
   68                           //------------------------------------------------------------------------------
   69                           // CHIP FLASH and RAM DESIGNATION
   70                           #ifdef  NXP_M0_812
   71    00000008 204C504338313         DC8     ' LPC812 16x4'
                  22031367834  
   72                           #endif
   73                           #if     NXP_M0_11xx & NXP_M0_004kRam
   75                           #endif
   76                           #if     NXP_M0_11xx & NXP_M0_008kRam
   78                           #endif
   79                           #if     NXP_M0_1115 & NXP_M0_008kRam & NXP_M0_064kFlash_4KWrite
   81                           #endif
   82                           //------------------------------------------------------------------------------
   83                           // FISH MODEL
   84                           //      DC8     'RM DebugSrc V1.6.1 : '
   85                           #if     FISH_PubRel_WORDSET 
   86    00000014 524D20                DC8     'RM '
   87                           #endif  // FISH_PubRel_WORDSET
   88                           #if     FISH_NXP_M0_PRO_WORDCAT
   90                           #endif
   91                           #if     SRM
   93                           #endif
   94                           #if     FISH_Debug_WORDSET
   96                           #endif
   97                           //------------------------------------------------------------------------------
   98                           // FISH Version
   99    00000017 56312E37              DC8     'V1.7'
  100                           //------------------------------------------------------------------------------
  101                           // FISH COPYRIGHT AND TEAM
  102    0000001B 2028432932303         DC8     ' (C)2014-2015 A-TEAM FORTH : '
                  1342D32303135
                  20412D5445414
                  D20464F525448
                  203A20       
  103                           //------------------------------------------------------------------------------
  104                           #ifndef SRM
  105                           // FISH DATE AND TIMESTAMP
  106    00000038 4175672032382         DC8     __DATE__        // Null terminated string
                  03230313500  
  107                           msg_FISH_TIMESTAMP:
  108    00000044 20617420              DC8     ' at '
  109    00000048 31313A30343A3         DC8     __TIME__        // Null terminated string
                  43300        
  110                           #endif
  111                           // END OF SIGNON MESSAGE
  112                           //------------------------------------------------------------------------------
  113                           
  114                           //------------------------------------------------------------------------------
  115                           // FISH PROMPT
  116                           msg_MY_OK:
  117    00000051 206F6B2C20676         DC8     " ok, go fish in BASE "
                  F206669736820
                  696E204241534
                  52000        
  118                           //------------------------------------------------------------------------------
  119                           
  120                           
  121                           //-----------------START OF DICTIONARY = Last word in search--------------------
  122                           //      NOOP NOOP:      ( -- )
  123                            SECTION .text : CONST (2)
  124                           NOOP_NFA:
  125    00000000 84                    DC8     0x84
  126    00000001 4E4F4F                DC8     'NOO'
  127    00000004 D0                    DC8     'P'+0x80
  128    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  129    00000008 00000000              DC32    0       // 0 START OF DICTIONARY = Last word in search
  130                           NOOP:
  131    0000000C ........              DC32    .+5
  132                            SECTION .text : CODE (2)
  133                                   NEXT
  133.1  00000000 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  133                                   NEXT1
  133.1  00000002 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  133.2  00000004 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  133.3                                 ENDM
  133.4                                 ENDM
  134                           
  135                           
  136                           //      EXECUTE EXEC:   ( cfa -- ) RENAMED: EXECUTE to EXEC
  137                           //      Execute a single word whose cfa is on the stack
  138                           
  139                            SECTION .text : CONST (2)
  140                           EXEC_NFA:
  141    00000000 87                    DC8     0x87
  142    00000001 455845435554          DC8     'EXECUT'
  143    00000007 C5                    DC8     'E'+0x80
  144                            ALIGNROM 2,0xFFFFFFFF
  145    00000008 ........              DC32    NOOP_NFA
  146                           EXEC:
  147    0000000C ........              DC32    .+5
  148                            SECTION .text : CODE (2)
  149                           #ifdef XON_XOFF
  150    00000000 ........              BL      TXRDY_SUBR
  151    00000004 ........              BL      XOFF_SUBR
  152                           #endif  // XON_XOFF
  153                                   POPp2w // as in xeq token at ToS setup for exec LDM     p!, {w}
  153.1                                 // as in xeq token at ToS setup for exec
  153.2  00000008 04CF                  LDM     p!, {w} // fetch memory p points to into {w}, inc p
  153.3                                 ENDM
  154                                   NEXT1
  154.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  154.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  154.3                                 ENDM
  155                           
  156                           
  157                           // TXRDY_SUBR:
  158                            SECTION .text : CODE (2)
  159                           TXRDY_SUBR:
  160    00000000 7246                  MOV     w, lr           // Allow for interrupts to use LR
  161                           
  162                           #if     NXP_M0_11xx | NXP_M0_1115
  164                           #endif  // NXP_M0_11xx
  165                           
  166                           #ifdef NXP_M0_812
  167    00000002 024C                  LDR     y, = UART0_STAT // 40064008h UART0 STAT Line Status Register 
  168                           #endif  // NXP_M0_812
  169                           
  170                           txRDY?:
  171    00000004 2168                  LDR     n, [y]          // Get Line Status
  172                           //------------------------------------------------------------------------------
  173                           #if     NXP_M0_11xx | NXP_M0_1115
  175                           #endif  // NXP_M0_11xx
  176                           #ifdef NXP_M0_812
  177    00000006 C908                  LSRS    n, n, #3        // 3 = TX BUF RDY
  178                           #endif  // NXP_M0_812
  179                           //------------------------------------------------------------------------------
  180    00000008 FCD3                  BCC     txRDY?          // Ready
  181    0000000A 1047                  BX      w       //lr              // SUBR RETURN
  182                           
  183                           // XOFF_SUBR:
  184                           #ifdef XON_XOFF
  184.1                                  TABLE
  184.2  0000000C 08400640              Reference on line 167
  185                            SECTION .text : CODE (2)
  186                           XOFF_SUBR:
  187    00000000 7246                  MOV     w, lr           // Allow for interrupts to use LR
  188                           //------------------------------------------------------------------------------
  189                           #if     NXP_M0_11xx | NXP_M0_1115
  191                           #endif  // NXP_M0_11xx
  192                           #ifdef NXP_M0_812
  193    00000002 0249                  LDR     n,= USART0_TXDAT // 4006401Ch TXDAT USART0
  194                           #endif  // NXP_M0_812
  195                           //------------------------------------------------------------------------------
  196    00000004 1324                  LDR     y,  = XOFF_CHAR
  197    00000006 0C70                  STRB    y, [n]
  198    00000008 1047                  BX      w       //lr              // SUBR RETURN
  199                           #endif // XON_XOFF
  200                           
  201                           // XON_SUBR:
  202                           #ifdef XON_XOFF
  202.1                                  TABLE
  202.2  0000000C 1C400640              Reference on line 193
  203                            SECTION .text : CODE (2)
  204                           XON_SUBR:
  205    00000000 7246                  MOV     w, lr           // Allow for interrupts to use LR
  206                           //------------------------------------------------------------------------------
  207                           #if     NXP_M0_11xx | NXP_M0_1115
  209                           #endif  // NXP_M0_11xx
  210                           #ifdef NXP_M0_812
  211    00000002 0249                  LDR     n,= USART0_TXDAT // 4006401Ch TXDAT USART0
  212                           #endif  // NXP_M0_812
  213                           //------------------------------------------------------------------------------
  214                           // XON:
  215    00000004 1124                  LDR     y, = XON_CHAR   // preserve TOS 11 24 01 49
  216    00000006 0C70                  STRB    y, [n]
  217    00000008 1047                  BX      w       //lr              // SUBR RETURN
  218                           #endif // XON_XOFF
  219    0000000A 0000           LTORG
  219.1                                  TABLE
  219.2  0000000C 1C400640              Reference on line 211
  220                           
  221                           //      BL BLANK:       ( -- n )
  222                           //      Push ascii space character as n to TOS.
  223                           
  224                            SECTION .text : CONST (2)
  225                           BLANK_NFA:
  226    00000000 82                    DC8     0x82
  227    00000001 42                    DC8     'B'
  228    00000002 CC                    DC8     'L'+0x80
  229    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  230    00000004 ........              DC32    EXEC_NFA
  231                           BLANK:
  232    00000008 ........20000         DC32    DOCON, 0x20
                  000          
  233                           
  234                           
  235                           //========================= START SYSTEM VARIABLES ===========================//
  236                           // _SV IS cfa label of WORD's that return their address.
  237                           // MODIFIED ALL to be label based vs. offset based.
  238                           
  239                           
  240                           //      UP UP_SV:       ( -- addr of UP ) Value stored here is ALIGNED
  241                           //      A system variable, the RAM VAR pointer, which contains
  242                           //      the address of the next free memory above in the USERRAMSPACE.
  243                           //      The value may be read by .UV and altered by VAR.
  244                           
  245                            SECTION .text : CONST (2)
  246                           UP_NFA:
  247    00000000 82                    DC8     0x82
  248    00000001 55                    DC8     'U'
  249    00000002 D0                    DC8     'P'+0x80
  250    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  251    00000004 ........              DC32    BLANK_NFA
  252                           UP_SV:
  253    00000008 .............         DC32    DOCON, UP
                  ...          
  254                           
  255                           
  256                           //      FENCE FENCE_SV: ( -- addr of FENCE )
  257                           //      A system variable containing an address below which FORGET ting is
  258                           //      trapped. To forget below this point the system must alter the contents
  259                           //      of FENCE.
  260                           
  261                            SECTION .text : CONST (2)
  262                           FENCE_NFA:
  263    00000000 85                    DC8     0x85
  264    00000001 46454E43              DC8     'FENC'
  265    00000005 C5                    DC8     'E'+0x80
  266    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  267    00000008 ........              DC32    UP_NFA
  268                           FENCE_SV:
  269    0000000C .............         DC32    DOCON, FENCE
                  ...          
  270                           
  271                           
  272                           //      DP DP_SV:       ( -- addr of DP ) Value stored here is ALIGNED
  273                           //      A system variable, the dictionary pointer, which contains the address
  274                           //      of the next free memory above the dictionary. The value may be read
  275                           //      by HERE and altered by COMMA (ALIGNED) , ALLOT and CALLOT (UNALIGNED) .
  276                           
  277                            SECTION .text : CONST (2)
  278                           DP_NFA:
  279    00000000 82                    DC8     0x82
  280    00000001 44                    DC8     'D'
  281    00000002 D0                    DC8     'P'+0x80
  282    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  283    00000004 ........              DC32    FENCE_NFA
  284                           DP_SV:
  285    00000008 .............         DC32    DOCON, DP
                  ...          
  286                           
  287                           
  288                           //      BASE BASE_SV:   ( -- addr of NBASE )
  289                           //      A system variable containing the current number base used for input
  290                           //      and output conversion.
  291                           
  292                            SECTION .text : CONST (2)
  293                           BASE_NFA:
  294    00000000 84                    DC8     0x84
  295    00000001 424153                DC8     'BAS'
  296    00000004 C5                    DC8     'E'+0x80
  297    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  298    00000008 ........              DC32    DP_NFA
  299                           BASE_SV:
  300    0000000C .............         DC32    DOCON, NBASE
                  ...          
  301                           
  302                           
  303                           //      CURRENT CURRENT_SV:     ( -- addr of CURRENT )
  304                           //      CURRENT searched everytime. CONTEXT is not used
  305                           //      Used by Create, Definitions, etc and by Latest
  306                           //      to leave the nfa of the topmost word in the CURRENT
  307                           //      vocabulary.  See LATEST NOTE:(FIG) CURR @ @ this CURR @
  308                           
  309                            SECTION .text : CONST (2)
  310                           CURRENT_NFA:
  311    00000000 87                    DC8     0x87
  312    00000001 43555252454E          DC8     'CURREN'
  313    00000007 D4                    DC8     'T'+0x80
  314                            ALIGNROM 2,0xFFFFFFFF
  315    00000008 ........              DC32    BASE_NFA
  316                           CURRENT_SV:
  317    0000000C .............         DC32    DOCON, CURRENT  // LATEST = CURRENT_SV -> MOST RECENT DEF NFA
                  ...          
  318                           
  319                           
  320                           //      STATE STATE_SV: ( -- addr of CSTATE )
  321                           //      A system variable containing the compilation state. A non-zero value
  322                           //      indicates compilation. The value itself may be implementation
  323                           //      dependent. 0xC0 must be used for INTERPRET to execute IMMEDIATE words.
  324                           
  325                            SECTION .text : CONST (2)
  326                           STATE_NFA:
  327    00000000 85                    DC8     0x85
  328    00000001 53544154              DC8     'STAT'
  329    00000005 C5                    DC8     'E'+0x80
  330    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  331    00000008 ........              DC32    CURRENT_NFA
  332                           STATE_SV:
  333    0000000C .............         DC32    DOCON, CSTATE       //Compile STATE
                  ...          
  334                           
  335                           
  336                           //      OUT OUT_SV:     ( --  addr of OUT )
  337                           //      A system variable that contains a value incremented by EMIT. The system
  338                           //      may alter and examine OUT to control display formating.
  339                           
  340                            SECTION .text : CONST (2)
  341                           OUT_NFA:
  342    00000000 83                    DC8     0x83
  343    00000001 4F55                  DC8     'OU'
  344    00000003 D4                    DC8     'T'+0x80
  345                            ALIGNROM 2,0xFFFFFFFF
  346    00000004 ........              DC32    STATE_NFA
  347                           OUT_SV:
  348    00000008 .............         DC32    DOCON, OUT
                  ...          
  349                           
  350                           
  351                           //      IN IN_SV:       ( -- addr of IN )
  352                           //      A system variable containing the byte offset within (TIB),
  353                           //      from which the tokens are parsed by WORD and moved to HERE,
  354                           //      as a counted null terminated string (created by EXPECT).
  355                           //      Initialized to 1 to skip count byte produced by EXPECT.
  356                           
  357                            SECTION .text : CONST (2)
  358                           IN_NFA:
  359    00000000 82                    DC8     0x82
  360    00000001 49                    DC8     'I'
  361    00000002 CE                    DC8     'N'+0x80
  362    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  363    00000004 ........              DC32    OUT_NFA
  364                           IN_SV:
  365    00000008 .............          DC32   DOCON, IN
                  ...          
  366                           
  367                           
  368                           //      PAD PAD_SV:     ( -- addr of PAD )
  369                           //      Leave the address of the text output buffer PAD on the stack.
  370                           //      Typically at least 82 bytes long.
  371                           
  372                            SECTION .text : CONST (2)
  373                           PAD_NFA:
  374    00000000 83                    DC8     0x83
  375    00000001 5041                  DC8     'PA'
  376    00000003 C4                    DC8     'D'+0x80
  377                            ALIGNROM 2,0xFFFFFFFF
  378    00000004 ........              DC32    IN_NFA
  379                           PAD_SV:
  380    00000008 .............         DC32    DOCON, PAD
                  ...          
  381                           
  382                           
  383                           //      TIB TIB_SV:     ( -- addr of INITTIB )
  384                           //      Leave the address of the text input buffer TIB on the stack.
  385                           //      Typically at least 82 bytes long.
  386                           
  387                            SECTION .text : CONST (2)
  388                           TIB_NFA:
  389    00000000 83                    DC8     0x83
  390    00000001 5449                  DC8     'TI'
  391    00000003 C2                    DC8     'B'+0x80
  392                            ALIGNROM 2,0xFFFFFFFF
  393    00000004 ........              DC32    PAD_NFA
  394                           TIB_SV:
  395    00000008 .............         DC32    DOCON, TIB
                  ...          
  396                           
  397                           
  398                           //======================== END SYSTEM VARIABLES ==============================//
  399                           
  400                           
  401                           //      HERE HERE:      ( -- addr ) Value stored here is ALIGNED
  402                           //      Leave the address of the next available dictionary location.
  403                           
  404                            SECTION .text : CONST (2)
  405                           HERE_NFA:
  406    00000000 84                    DC8     0x84
  407    00000001 484552                DC8     'HER'
  408    00000004 C5                    DC8     'E'+0x80
  409    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  410    00000008 ........              DC32    TIB_NFA
  411                           HERE:
  412    0000000C ........              DC32    DOCOL
  413    00000010 ........              DC32    DP_SV
  414    00000014 ........              DC32    AT
  415    00000018 ........              DC32    SEMIS
  416                           
  417                           
  418                           //      ALLOT ALLOT:    ( sn -- ) Warning: UNALIGNED:
  419                           //      IF DICTIONAIRY FULL PRINT error MESSAGE AND abort.
  420                           //      Add the signed number to the dictionary pointer DP. May be used to
  421                           //      reserve dictionary space or re-origin memory.
  422                           //      CAUTION!
  423                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY WORDS THAT CAN ALLOT UNEVEN AMOUNTS
  424                           //      NOTE: USE ALIGN32_FF_PAD after ALLOT or C, (CCOMMA) .
  425                           
  426                            SECTION .text : CONST (2)
  427                           ALLOT_NFA:
  428    00000000 85                    DC8     0x85
  429    00000001 414C4C4F              DC8     'ALLO'
  430    00000005 D4                    DC8     'T'+0x80
  431    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  432    00000008 ........              DC32    HERE_NFA
  433                           ALLOT:
  434    0000000C ........              DC32    DOCOL
  435    00000010 ........              DC32    DICTSPACE       // ( -- n )
  436    00000014 .............         DC32    OVER, SUBB
                  ...          
  437    0000001C ........              DC32    ZLESS
  438    00000020 ........              DC32    ZBRAN
  439    00000024 08000000              DC32    ALLOTOK-.
  440                           
  441    00000028 ........              DC32    DICTFULL_ABORT
  442                           
  443                           ALLOTOK:
  444    0000002C ........              DC32    DP_SV
  445    00000030 ........              DC32    PSTORE
  446    00000034 ........              DC32    SEMIS
  447                           
  448                           
  449                           //      ALIGNED ALIGNED:        ( addr -- a-addr ) DPANS94
  450                           
  451                            SECTION .text : CONST (2)
  452                           ALIGNED_NFA:
  453    00000000 87                    DC8     0x87
  454    00000001 414C49474E45          DC8     'ALIGNE'
  455    00000007 C4                    DC8     'D'+0x80
  456                            ALIGNROM 2,0xFFFFFFFF
  457    00000008 ........              DC32    ALLOT_NFA
  458                           ALIGNED:
  459    0000000C ........              DC32    .+5
  460                            SECTION .text : CODE (2)
  461                                   POP2t
  461.1                         #ifndef TOSCT
  461.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  461.3                         #endif
  461.4  00000002 3F1D                  ADDS    p, p, #4
  461.5                                 ENDM
  462    00000004 C01C                  ADDS    t, t, #3
  463    00000006 0349                  LDR     n, =-4
  464    00000008 0840                  ANDS    t, t, n
  465                                   TPUSH
  465                                   PUSHt   // push t to p, pre decrement p
  465.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  465.2  0000000C 3860                  STR     t, [p]
  465.3                                 ENDM
  465                                   NEXT
  465.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  465                                   NEXT1
  465.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  465.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  465.3                                 ENDM
  465.4                                 ENDM
  465.5                                 ENDM
  466                            LTORG
  466.1                                  TABLE
  466.2  00000014 FCFFFFFF              Reference on line 463
  467                           
  468                           
  469                           //      ALIGN32_FF_PAD ALIGN:   ( -- ) DPANS94
  470                           //      Align DP_SV primitive. Pads current DP with 0xFF until aligned.
  471                           //      USED in , (COMMA:) .  Reflected by HERE .
  472                           //      CAUTION! USE AFTER ALLOT or C, (CCOMMA:) .
  473                           //      See , (COMMA:) which is ALIGNED.
  474                           
  475                            SECTION .text : CONST (2)
  476                           ALIGN_NFA:
  477    00000000 85                    DC8     0x85
  478    00000001 414C4947              DC8     'ALIG'
  479    00000005 CE                    DC8     'N'+0x80
  480    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  481    00000008 ........              DC32    ALIGNED_NFA
  482                           ALIGN32_FF_PAD:
  483    0000000C ........              DC32    DOCOL
  484    00000010 ........              DC32    HERE
  485                                   // COULD ADD CODE TO SEE IF ALIGNED ALREADY
  486    00000014 .............         DC32    THREE, PLUS             // 3PLUS
                  ...          
  487    0000001C .............         DC32    DUP, TOR
                  ...          
  488    00000024 ........              DC32    HERE
  489    00000028 ........              DC32    XDO
  490                           ALIGN_PAD_DO:
  491    0000002C ........FF000         DC32    LIT, 0xFF, I, CSTORE
                  000..........
                  ......       
  492    0000003C ........              DC32    XLOOP
  493    00000040 ECFFFFFF              DC32    ALIGN_PAD_DO-.
  494                           
  495    00000044 ........              DC32    RFROM
  496    00000048 ........FCFFF         DC32    LIT, 0xFFFFFFFC // -4
                  FFF          
  497    00000050 ........              DC32    ANDD
  498    00000054 .............         DC32    DP_SV, STORE
                  ...          
  499    0000005C ........              DC32    SEMIS
  500                           
  501                           
  502                           //      , COMMA:        ( n -- ) ALIGNED
  503                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
  504                           //      Write n into next ALIGNED dictionary memory cell, DP reflected by HERE
  505                           
  506                            SECTION .text : CONST (2)
  507                           COMMA_NFA:
  508    00000000 81                    DC8     0x81
  509    00000001 AC                    DC8     ','+0x80
  510    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
  511    00000004 ........              DC32    ALIGN_NFA
  512                           COMMA:
  513    00000008 ........              DC32    DOCOL
  514    0000000C ........              DC32    DICTSPACE       //      ( -- n )
  515    00000010 ........              DC32    ZLESS
  516    00000014 ........              DC32    ZBRAN
  517    00000018 08000000              DC32    COMMA_OK-.
  518                           
  519    0000001C ........              DC32    DICTFULL_ABORT
  520                           
  521                           COMMA_OK:
  522    00000020 ........              DC32    COMMA_PRIM
  523    00000024 ........              DC32    SEMIS
  524                           
  525                           
  526                           //      C, CCOMMA:      ( n -- ) Warning: UNALIGNED:
  527                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
  528                           //      Store LS 8 bits of n into the next available dictionary byte, advancing
  529                           //      the dictionary pointer.
  530                           //      CAUTION!
  531                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY WORDS THAT CAN ALLOT UNEVEN AMOUNTS
  532                           //      NOTE: USE ALIGN32_FF_PAD after ALLOT or C, (CCOMMA) .
  533                           //      See , (COMMA:) which is ALIGNED.
  534                           
  535                            SECTION .text : CONST (2)
  536                           CCOMMA_NFA:
  537    00000000 82                    DC8     0x82
  538    00000001 43                    DC8     'C'
  539    00000002 AC                    DC8     ','+0x80
  540    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  541    00000004 ........              DC32    COMMA_NFA
  542                           CCOMMA:
  543    00000008 ........              DC32    DOCOL
  544    0000000C ........              DC32    DICTSPACE       //      ( -- n )
  545    00000010 ........              DC32    ZLESS
  546    00000014 ........              DC32    ZBRAN
  547    00000018 08000000              DC32    CCOMMA_OK-.
  548                           
  549    0000001C ........              DC32    DICTFULL_ABORT
  550                           
  551                           CCOMMA_OK:
  552    00000020 ........              DC32    HERE
  553    00000024 ........              DC32    CSTORE
  554    00000028 ........              DC32    ONE
  555    0000002C ........              DC32    ALLOT_PRIM
  556    00000030 ........              DC32    SEMIS
  557                           
  558                           
  559                           //      VARALLOT VARALLOT:      ( n -- addr ) Value stored here is ALIGNED
  560                           //      IF USERVAR SPACE FULL PRINT Error MESSAGE AND Abort.
  561                           //      Add n * 32 bits to the RAMVARSPACE pointer UP.
  562                           //      Used to allocate space in Ram for VAR's and other system data structures
  563                           
  564                            SECTION .text : CONST (2)
  565                           VARALLOT_NFA:
  566    00000000 88                    DC8     0x88
  567    00000001 564152414C4C4         DC8     'VARALLO'
                  F            
  568    00000008 D4                    DC8     'T'+0x80
  569    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  570    0000000C ........              DC32    CCOMMA_NFA
  571                           VARALLOT:
  572    00000010 ........              DC32    DOCOL
  573    00000014 ........              DC32    VARSPACE                //      ( -- n )
  574    00000018 .............         DC32    FOUR, SLASH, OVER, SUBB
                  .............
                  ......       
  575    00000028 ........              DC32    ZLESS
  576    0000002C ........              DC32    ZBRAN
  577    00000030 18000000              DC32    VALLOT_OK-.
  578                           
  579    00000034 .............         DC32    LIT, msg_uvfull
                  ...          
  580    0000003C .............         DC32    NULLSTRLEN, TYPE
                  ...          
  581                           #ifdef IO2TP
  584                           #endif
  585    00000044 ........              DC32    ABORT
  586                           
  587                           VALLOT_OK:
  588    00000048 .............         DC32    UP_SV, AT       // Address of this allotment
                  ...          
  589    00000050 ........              DC32    SWAP            // n
  590    00000054 .............         DC32    FOUR, STAR      // n = 4 bytes
                  ...          
  591    0000005C ........              DC32    UP_SV
  592    00000060 ........              DC32    PSTORE          // Address of next var available
  593    00000064 ........              DC32    SEMIS
  594                           
  595                           
  596                           //      LATEST LATEST: ( -- nfa )
  597                           //      Initially ADDR OF LAST WORD in THE DICTIONARY
  598                           //      Leave the nfa of the topmost word in the dictionary.
  599                           
  600                            SECTION .text : CONST (2)
  601                           LATEST_NFA:
  602    00000000 86                    DC8     0x86
  603    00000001 4C41544553            DC8     'LATES'
  604    00000006 D4                    DC8     'T'+0x80
  605    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  606    00000008 ........              DC32    VARALLOT_NFA
  607                           LATEST:
  608    0000000C ........              DC32    DOCOL
  609    00000010 ........              DC32    CURRENT_SV      // LATEST = CURRENT_SV
  610    00000014 ........              DC32    AT
  611    00000018 ........              DC32    SEMIS
  612                           
  613                           
  614                           //      LFA LFA:        ( pfa -- lfa )
  615                           //      Convert the parameter field address of a dictionary definition to
  616                           //      its link field address.
  617                           
  618                            SECTION .text : CONST (2)
  619                           LFA_NFA:
  620    00000000 83                    DC8     0x83
  621    00000001 4C46                  DC8     'LF'
  622    00000003 C1                    DC8     'A'+0x80
  623                            ALIGNROM 2,0xFFFFFFFF
  624    00000004 ........              DC32    LATEST_NFA
  625                           LFA:
  626    00000008 ........              DC32    .+5
  627                            SECTION .text : CODE (2)
  628                                   POP2t
  628.1                         #ifndef TOSCT
  628.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  628.3                         #endif
  628.4  00000002 3F1D                  ADDS    p, p, #4
  628.5                                 ENDM
  629    00000004 0838                  SUBS     t, t, #8
  630                                   TPUSH
  630                                   PUSHt   // push t to p, pre decrement p
  630.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  630.2  00000008 3860                  STR     t, [p]
  630.3                                 ENDM
  630                                   NEXT
  630.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  630                                   NEXT1
  630.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  630.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  630.3                                 ENDM
  630.4                                 ENDM
  630.5                                 ENDM
  631                           
  632                           
  633                           //      CFA CFA:        ( pfa -- cfa )
  634                           //      Convert the parameter field address of a dictionary definition to
  635                           //      its code field address. <if thumb2 execution addr smudged>
  636                           
  637                            SECTION .text : CONST (2)
  638                           CFA_NFA:
  639    00000000 83                    DC8     0x83
  640    00000001 4346                  DC8     'CF'
  641    00000003 C1                    DC8     'A'+0x80
  642                            ALIGNROM 2,0xFFFFFFFF
  643    00000004 ........              DC32    LFA_NFA
  644                           CFA:
  645    00000008 ........              DC32    .+5
  646                            SECTION .text : CODE (2)
  647                                   POP2t
  647.1                         #ifndef TOSCT
  647.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  647.3                         #endif
  647.4  00000002 3F1D                  ADDS    p, p, #4
  647.5                                 ENDM
  648    00000004 001F                  SUBS     t, t, #4
  649                                   TPUSH
  649                                   PUSHt   // push t to p, pre decrement p
  649.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  649.2  00000008 3860                  STR     t, [p]
  649.3                                 ENDM
  649                                   NEXT
  649.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  649                                   NEXT1
  649.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  649.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  649.3                                 ENDM
  649.4                                 ENDM
  649.5                                 ENDM
  650                           
  651                           
  652                           //      NFA NFA:        ( pfa -- nfa )
  653                           //      Convert the parameter field address of a definition to its name
  654                           //      field. Modified for nfa alighnment padding
  655                           
  656                            SECTION .text : CONST (2)
  657                           NFA_NFA:
  658    00000000 83                    DC8     0x83
  659    00000001 4E46                  DC8     'NF'
  660    00000003 C1                    DC8     'A'+0x80
  661                            ALIGNROM 2,0xFFFFFFFF
  662    00000004 ........              DC32    CFA_NFA
  663                           NFA:
  664    00000008 ........              DC32    DOCOL
  665    0000000C .............         DC32    EIGHT, SUBB     // Addr OF lfa, DUPED TO TRAVERSE Padding
                  ...          
  666                           
  667                           NFA_ALIGN_BEGIN:
  668    00000014 ........              DC32    ONEM            // ADDR 1 BEFORE lfa, eliminate padding
  669    00000018 .............         DC32    DUP, CAT        // ALIGNROM FF padded?
                  ...          
  670    00000020 ........FF000         DC32    LIT, 0xFF, SUBB
                  000........  
  671    0000002C ........              DC32    ZBRAN           // UNTIL
  672    00000030 E4FFFFFF              DC32    NFA_ALIGN_BEGIN-.
  673                                       
  674    00000034 ........FFFFF         DC32    LIT,-1          // DIRECTION FOR TRAVERSE = Toward nfa
                  FFF          
  675    0000003C ........              DC32    TRAVERSE                // ( -- addr2 )
  676    00000040 ........              DC32    SEMIS
  677                           
  678                           
  679                           //      PFA PFA:        ( nfa -- pfa )
  680                           //      Convert the name field address of a compiled definition to its
  681                           //      parameter field address.
  682                           
  683                            SECTION .text : CONST (2)
  684                           PFA_NFA:
  685    00000000 83                    DC8     0x83
  686    00000001 5046                  DC8     'PF'
  687    00000003 C1                    DC8     'A'+0x80
  688                            ALIGNROM 2,0xFFFFFFFF
  689    00000004 ........              DC32    NFA_NFA
  690                           PFA:
  691    00000008 ........              DC32    DOCOL           // ( NFA -- )
  692    0000000C ........              DC32    ONE             // DIRECTION FOR TRAVERSE = Toward CFA
  693    00000010 ........              DC32    TRAVERSE        // ( NFA 1 -- addr2 )
  694                           
  695                           PFA_ALIGN_BEGIN:
  696    00000014 ........              DC32    ONEP            // ADDR 1 BEFORE lfa, eliminate padding
  697    00000018 .............         DC32    DUP, CAT        // ALIGNROM FF padded?
                  ...          
  698    00000020 ........FF000         DC32    LIT, 0xFF, SUBB
                  000........  
  699    0000002C ........              DC32    ZBRAN           // UNTIL
  700    00000030 E4FFFFFF              DC32    PFA_ALIGN_BEGIN-.
  701                           
  702    00000034 ........              DC32    EIGHT
  703    00000038 ........              DC32    PLUS
  704    0000003C ........              DC32    SEMIS
  705                           
  706                           
  707                           //      ?ALIGNED QALIGNED: ( value -- )
  708                           //      If value not aligned by 4 issue message and ABORT.
  709                           
  710                            SECTION .text : CONST (2)
  711                           QALIGNED_NFA:
  712    00000000 88                    DC8     0x88
  713    00000001 3F414C49474E4         DC8     '?ALIGNE'
                  5            
  714    00000008 C4                    DC8     'D'+0x80
  715    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  716    0000000C ........              DC32    PFA_NFA
  717                           QALIGNED:
  718    00000010 ........              DC32    DOCOL
  719    00000014 ........03000         DC32    LIT, 3, ANDD
                  000........  
  720    00000020 ........              DC32    ZBRAN           //IF no err leave
  721    00000024 3C000000              DC32     QALIGN_OK-.
  722                           
  723    00000028 ........              DC32    PDOTQ
  724    0000002C 2E                    DC8     46
  725    0000002D 56414C5545204         DC8     'VALUE MUST BE EVEN NOT ODD AND MULTIPLE OF 4! '
                  D555354204245
                  204556454E204
                  E4F54204F4444
                  20414E44204D5
                  54C5449504C45
                  204F462034212
                  0            
  726    0000005B FF             ALIGNROM 2,0xFFFFFFFF
  727    0000005C ........              DC32    ABORT
  728                           
  729                           QALIGN_OK:
  730    00000060 ........              DC32    SEMIS
  731                           
  732                           
  733                           //      ?ERROR QERROR: ( f nullstr -- )
  734                           //      If f NON ZERO type error message (nullstr) and ABORT.
  735                           
  736                            SECTION .text : CONST (2)
  737                           QERROR_NFA:
  738    00000000 86                    DC8     0x86
  739    00000001 3F4552524F            DC8     '?ERRO'
  740    00000006 D2                    DC8     'R'+0x80
  741    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  742    00000008 ........              DC32    QALIGNED_NFA
  743                           QERROR:
  744    0000000C ........              DC32    DOCOL
  745    00000010 ........              DC32    SWAP
  746    00000014 ........              DC32    ZBRAN   //IF no err leave
  747    00000018 10000000              DC32     QERROR_FINISH-.
  748                           
  749    0000001C ........              DC32    ERROR // ( nullstr-addr --- ) ABORT's
  750    00000020 ........              DC32    BRAN    //ELSE
  751    00000024 08000000              DC32     QERROR_DONE-.
  752                           
  753                           QERROR_FINISH:
  754    00000028 ........              DC32    DROP    //endif
  755                           
  756                           QERROR_DONE:
  757    0000002C ........              DC32    SEMIS
  758                           
  759                           
  760                           //      DIGIT DIGIT:    ( c base -- digit 1 ) (ok)
  761                           //                      ( c base -- 0 (bad)
  762                           //      Converts the ascii character c using base to its binary
  763                           //      equivalent digit, accompanied by a true flag. If the conversion is
  764                           //      invalid, leaves only a false flag.
  765                           
  766                            SECTION .text : CONST (2)
  767                           DIGIT_NFA:
  768    00000000 85                    DC8     0x85
  769    00000001 44494749              DC8     'DIGI'
  770    00000005 D4                    DC8     'T'+0x80
  771    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  772    00000008 ........              DC32    QERROR_NFA
  773                           DIGIT:
  774    0000000C ........              DC32    .+5
  775                            SECTION .text : CODE (2)
  776                                   POP2w                   // Number base
  776.1  00000000 3A68                  LDR     w, [p]
  776.2  00000002 3F1D                  ADDS    p, p, #4
  776.3                                 ENDM
  777                                   POP2t                   // ASCII DIGIT
  777.1                         #ifndef TOSCT
  777.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
  777.3                         #endif
  777.4  00000006 3F1D                  ADDS    p, p, #4
  777.5                                 ENDM
  778    00000008 3038                  SUBS   t, t, #'0'
  779    0000000A 0FD4                  BMI   DIGI2             // Number error
  780                           
  781    0000000C 0928                  CMP   t, #9
  782    0000000E 02DD                  BLE   DIGI1             // Number = 0 THRU 9
  783                           
  784                                   // Combine?
  785    00000010 C01F                  SUBS   t, t, #7
  786    00000012 0A28                  CMP   t, #10            // Number 'A' THRU 'Z'?
  787    00000014 0ADB                  BLT   DIGI2             // NO
  788                           
  789                           DIGI1:
  790    00000016 9042                  CMP     t, w            // COMPARE Number TO base
  791    00000018 08DA                  BGE     DIGI2
  792                           
  793    0000001A 0246                  MOV     w, t            // NEW BINARY Number
  794    0000001C 0120                  MOVS    t, #1           // TRUE FLAG
  795                                   DPUSH
  795                                   PUSHw   // push w to p, pre decrement p
  795.1  0000001E 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
  795.2  00000020 3A60                  STR     w, [p]
  795.3                                 ENDM
  795                                   TPUSH
  795                                   PUSHt   // push t to p, pre decrement p
  795.1  00000022 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  795.2  00000024 3860                  STR     t, [p]
  795.3                                 ENDM
  795                                   NEXT
  795.1  00000026 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  795                                   NEXT1
  795.1  00000028 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  795.2  0000002A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  795.3                                 ENDM
  795.4                                 ENDM
  795.5                                 ENDM
  795.6                                 ENDM
  796                           
  797                                   // Number error
  798                           DIGI2:
  799    0000002C 0020                  MOVS   t, #0            // FALSE FLAG
  800                                   TPUSH
  800                                   PUSHt   // push t to p, pre decrement p
  800.1  0000002E 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  800.2  00000030 3860                  STR     t, [p]
  800.3                                 ENDM
  800                                   NEXT
  800.1  00000032 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  800                                   NEXT1
  800.1  00000034 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  800.2  00000036 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  800.3                                 ENDM
  800.4                                 ENDM
  800.5                                 ENDM
  801                           
  802                           
  803                           //      ENCLOSE ENCL:   ( addr1 c -- addr1 n1 n2 n3 )
  804                           //      A text scanning iterative primitive used only in WORD.
  805                           //      IN is used before and after callS for the iteration
  806                           //      Typically TIB + IN = addr1
  807                           //      noop EX//( TIB   32 -- TIB   0 4 5 )
  808                           //      NULL EX//( TIB   32 -- ADDR-B4-NULL 0 1 1 ) So DFIND CAN FIND IT!
  809                           //      NULL EX//  WORD/ENCL -> TIB 1, 0, 20'S
  810                           //      From the text address addr1 and an ascii delimiting character c,
  811                           //      is determined the byte offset to the first non-delimiter character n1,
  812                           //      the offset to the first delimiter after the text n2,
  813                           //      and the offset to the first character not included.
  814                           //      This procedure will not process past an ASCII 'null', treating it
  815                           //      as an unconditional delimiter. NULL termination by EXPECT in QUERY.
  816                           
  817                            SECTION .text : CONST (2)
  818                           ENCL_NFA:
  819    00000000 87                    DC8     0x87
  820    00000001 454E434C4F53          DC8     'ENCLOS'
  821    00000007 C5                    DC8     'E'+0x80
  822                            ALIGNROM 2,0xFFFFFFFF
  823    00000008 ........              DC32    DIGIT_NFA
  824                           ENCL:
  825    0000000C ........              DC32    .+5
  826                            SECTION .text : CODE (2)
  827                                   POP2t                   // TERMINATOR CHAR
  827.1                         #ifndef TOSCT
  827.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  827.3                         #endif
  827.4  00000002 3F1D                  ADDS    p, p, #4
  827.5                                 ENDM
  828    00000004 3968                  LDR     n, [p]          // get text address but leave on stack
  829    00000006 0022                  MOVS    w, #0
  830    00000008 521E                  SUBS    w, w, #1        // CHAR  COUNTER
  831    0000000A 491E                  SUBS    n, n, #1        // ADDR -1
  832                           
  833                           //  SCAN TO FIRST NON-TERMINATOR CHARACTER
  834                           //      and PUSH count to stack leaving last 2 params to compute
  835                           ENCL1:
  836    0000000C 491C                  ADDS    n, n, #1        // ADDR+1
  837    0000000E 521C                  ADDS    w, w, #1        // COUNT+1
  838    00000010 0B78                  LDRB    x, [n]
  839    00000012 9842                  CMP     t, x            //CMP   AL,[BX]
  840    00000014 FAD0                  BEQ     ENCL1           //JZ    ENCL1   // WAIT FOR NON-TERMINATOR
  841                                   PUSHw                   //offset to the first non-delimiter character
  841.1  00000016 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
  841.2  00000018 3A60                  STR     w, [p]
  841.3                                 ENDM
  842                                                           //EXiT is now only DPUSH
  843    0000001A 002B                  CMP     x, #0           //CMP   AH,[BX] // null CHAR?
  844    0000001C 08D1                  BNE     ENCL2           //JNZ   ENCL2   // NO
  845                           
  846                           // FOUND null BEFORE 1ST NON-TERM CHAR
  847                           // RETURN ok args = NULL EX//
  848                           // ( TIB   32 -- ADDR-B4-NULL 0 1 1 ) So DFIND CAN FIND IT!
  849                           //
  850    0000001E 1846                  MOV     t, x
  851    00000020 521C                  ADDS    w, w, #1        // w = offset to the delimiter after the text
  852                                   DPUSH
  852                                   PUSHw   // push w to p, pre decrement p
  852.1  00000022 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
  852.2  00000024 3A60                  STR     w, [p]
  852.3                                 ENDM
  852                                   TPUSH
  852                                   PUSHt   // push t to p, pre decrement p
  852.1  00000026 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  852.2  00000028 3860                  STR     t, [p]
  852.3                                 ENDM
  852                                   NEXT
  852.1  0000002A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  852                                   NEXT1
  852.1  0000002C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  852.2  0000002E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  852.3                                 ENDM
  852.4                                 ENDM
  852.5                                 ENDM
  852.6                                 ENDM
  853                           
  854                           //   FOUND FIRST TEXT CHAR - COUNT THE CHARS
  855                           ENCL2:
  856    00000030 491C                  ADDS    n, n, #1        // ADDR+1
  857    00000032 521C                  ADDS    w, w, #1        //COUNT+1
  858    00000034 0B78                  LDRB    x, [n]
  859    00000036 9842                  CMP     t, x            //TERMINATOR CHAR?
  860    00000038 01D0                  BEQ     ENCL4           //YES
  861                           
  862    0000003A 002B                  CMP     x, #0           //null CHAR?
  863    0000003C F8D1                  BNE     ENCL2           //NO, LOOP AGAIN
  864                           
  865                           ENCL3:  //   FOUND null AT END OF TEXT
  866                           ENCL4:  //   FOUND TERMINATOR CHARACTER
  867    0000003E 1046                  MOV     t, w            // COUNT+1 =
  868    00000040 401C                  ADDS    t, t, #1        // offset to the first character not included
  869                                   DPUSH
  869                                   PUSHw   // push w to p, pre decrement p
  869.1  00000042 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
  869.2  00000044 3A60                  STR     w, [p]
  869.3                                 ENDM
  869                                   TPUSH
  869                                   PUSHt   // push t to p, pre decrement p
  869.1  00000046 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  869.2  00000048 3860                  STR     t, [p]
  869.3                                 ENDM
  869                                   NEXT
  869.1  0000004A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  869                                   NEXT1
  869.1  0000004C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  869.2  0000004E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  869.3                                 ENDM
  869.4                                 ENDM
  869.5                                 ENDM
  869.6                                 ENDM
  870                           
  871                           
  872                           //      0 NULL: ( -- ) IMMEDIATE
  873                           //      Don't return to Interpret, return to Quit at end of a line of input.
  874                           //      Executed at end of TIB when QUERY lenght or CR entered.
  875                           
  876                            SECTION .text : CONST (2)
  877                           NULL_NFA:
  878    00000000 C1                    DC8     0x0C1                   // A BINARY ZER
  879    00000001 80                    DC8     0x80
  880    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
  881    00000004 ........              DC32    ENCL_NFA
  882                           NULL:
  883                           //      DC32    SEMIS                   // Actual Semis code below
  884    00000008 ........              DC32    .+5
  885                            SECTION .text : CODE (2)
  886                                   POPr2i  // pop docol saved IP from Rstack
  886.1  00000000 3568                  LDR i, [r]              //  pop r to i, post increment r
  886.2  00000002 361D                  ADDS    r, r, #4
  886.3                                 ENDM
  887                                   NEXT
  887.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  887                                   NEXT1
  887.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  887.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  887.3                                 ENDM
  887.4                                 ENDM
  888                           
  889                           
  890                           //      WORD WORD:      ( c -- )
  891                           //      Parse the text in TIB , until a delimiter c is found, tokenizing input.
  892                           //      Move the token to HERE, with a count byte and 2 nulls at the end.
  893                           //      Leading occurrences of c are ignored. IN is incremented.
  894                           //      IN is initialized by FISH to 1 to account for the count byte in EXPECT.
  895                           //      See IN. Usually used inside a definition.
  896                           
  897                            SECTION .text : CONST (2)
  898                           WORD_NFA:
  899    00000000 84                    DC8     0x84
  900    00000001 574F52                DC8     'WOR'
  901    00000004 C4                    DC8     'D'+0x80
  902    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  903    00000008 ........              DC32    NULL_NFA
  904                           WORD:
  905    0000000C ........              DC32    DOCOL
  906                           WORD1:
  907                           //      This is required for number suffix's at least ???
  908                           //      DC32    HERE, LIT, MAXWORDLEN+2, BLANKS
  909    00000010 ........              DC32    TIB_SV
  910                           WORD2:
  911    00000014 ........              DC32    IN_SV
  912    00000018 ........              DC32    AT
  913    0000001C ........              DC32    PLUS
  914    00000020 ........              DC32    SWAP    // ( TIB+IN CH-DELIM -- )
  915    00000024 ........              DC32    ENCL    // ( TIB+IN 32 -- TIB+IN   0 4 5 )
  916                           WENCL:
  917    00000028 ........              DC32    IN_SV   // encl TOS = end of word offset to be added to IN
  918    0000002C ........              DC32    PSTORE  // TIB+IN   0 4
  919    00000030 ........              DC32    OVER    // 
  920    00000034 ........              DC32    SUBB    // Char cnt going to R and HERE
  921    00000038 ........              DC32    TOR
  922    0000003C ........              DC32    R
  923    00000040 ........              DC32    HERE
  924    00000044 ........              DC32    CSTORE   // CHAR CNT OF word
  925    00000048 ........              DC32    PLUS
  926    0000004C ........              DC32    HERE
  927    00000050 ........              DC32    ONEP
  928                           //      DC32    RFROM
  929                           // MOVE word TO DICT FOR finding ENDING WITH NULLS
  930    00000054 ........              DC32    R
  931    00000058 ........              DC32    CMOVE   // ( from to count -- )
  932                           // add null to end of token - NUMBER adjusted        
  933    0000005C .............         DC32    ZERO, HERE, ONEP, RFROM, PLUS, CSTORE
                  .............
                  .............
                  .........    
  934                           #ifdef  IOBUFS_DEBUG
  936                           #endif        
  937    00000074 ........              DC32    SEMIS
  938                           
  939                           
  940                           //      NUMBER NUMBER:  ( addr -- sd )
  941                           //      If error print message and ABORT.
  942                           //      Convert a character string left at addr with a preceeding count,
  943                           //      and a terminating null, to a signed number, in the current numeric base.
  944                           //      If a decimal point is encountered in the text, its position will be
  945                           //      given in DPL, but no other effect occurs. If numeric conversion is
  946                           //      not possible, an error message will be given.
  947                           
  948                           //      Added support for , as a single number formatter.
  949                           
  950                           #define comma_test
  951                           
  952                            SECTION .text : CONST (2)
  953                           NUMBER_NFA:
  954    00000000 86                    DC8     0x86
  955    00000001 4E554D4245            DC8     'NUMBE'
  956    00000006 D2                    DC8     'R'+0x80
  957    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  958    00000008 ........              DC32    WORD_NFA
  959                           NUMBER:
  960    0000000C ........              DC32    DOCOL
  961    00000010 ........              DC32    BASE_TO_R12     // Save current BASE.
  962    00000014 ........              DC32    NUMBERSUFFIX    // (addr -- sddr) Change BASE if suffix used.
  963                           
  964                           // SETUP: stack arguments for PNUMBER.
  965    00000018 .............         DC32    ZERO, ZERO
                  ...          
  966    00000020 ........              DC32    ROT             // ( 0 0 addr -- )
  967                           
  968                           // SETUP: reeturn stack with sign flag
  969                           // NONAME CANDIDATE!
  970                           // START: Handle minus sign by saving status on Return Stack.
  971                           // and incrementing to addr after it.
  972    00000024 .............         DC32    DUP, ONEP       // ( 0 0 addr addr+1 -- )
                  ...          
  973    0000002C ........              DC32    CAT             // ( 0 0 addr 1rstchar -- )
  974    00000030 ........2D000         DC32    LIT, '-'        // ( 0 0 addr 1rstchar 0x2D --- )
                  000          
  975    00000038 ........              DC32    EQUAL           // ( 0 0 addr f -- )
  976                           #ifdef TRUE_EQU_NEG_ONE         // EQUAL returns -1 NEED 0 or 1 here!
  977    0000003C .............         DC32    ONE, ANDD       // ( 0 0 addr f -- ) MAKE FLAG ONE OR ZERO!
                  ...          
  978                           #endif
  979    00000044 .............         DC32    DUP, TOR        // ( 0 0 addr f -- ) copy of f >R
                  ...          
  980                           // END: Handle - by saving status on Return Stack.
  981                           
  982                           // SETUP: addr pointing to 1rst digit.
  983                           // If minus sign, flag from above will increment to next char.
  984    0000004C ........              DC32    PLUS            // Increment (OR NOT) addr to next char
  985                           
  986                           // So could be at 1rst OR 2nd character in string here!
  987                           
  988                           // ENTER LOOP WITH -1 DPL = single number and sign flag on return stack.
  989    00000050 ........FFFFF         DC32    LIT, -1
                  FFF          
  990                           // PNUMBER is used in loop to convert string segment until non-mumeric chracter.
  991                           // A period in the string manipulates DPL to create a double number.
  992                           // A comma in the string resets DPL to create a single number.
  993                           // A null indicates the end of the string.
  994                           NUMB1:                          // Begin
  995    00000058 .............         DC32    DPL_SV, STORE   // PNUMBER creates whole, dot or comma number segment
                  ...          
  996                           
  997                           // PNUMBER converts one or more characters until first unconvertable digit.
  998                           // ud and addr in string is maintained while in loop.
  999    00000060 ........              DC32    PNUMBER         // ( 0 0 addr -- ud=(LSW MSW) ADDR=PAST#)
 1000                           // Perform check for period, comma and null.
 1001                           // Any other character here invalidates this number conversion.
 1002                           
 1003                           // Null Test: = end of string.
 1004    00000064 .............         DC32    DUP, CAT
                  ...          
 1005    0000006C ........              DC32    ZERO            // End of string used to be BLANK, is now Null.
 1006    00000070 ........              DC32    SUBB
 1007    00000074 ........              DC32    ZBRAN           // IF emd of number string conversion is
 1008    00000078 6C000000              DC32      NUMB2-.       // DONE UNLESS IT NEEDS TO BE NEGATED.
 1009                           
 1010                           // Period Test: = increment DPL.
 1011    0000007C .............         DC32    DUP, CAT
                  ...          
 1012    00000084 ........2E000         DC32    LIT, '.'        // 2Eh = period.
                  000          
 1013    0000008C ........              DC32    SUBB
 1014    00000090 ........              DC32    ZBRAN
 1015    00000094 44000000              DC32      DPL_ZERO_INCR-.
 1016                           
 1017                           #ifdef  comma_test
 1018                           // Comma Test: = reset DPL.
 1019    00000098 .............         DC32    DUP, CAT
                  ...          
 1020    000000A0 ........2C000         DC32    LIT, ','        // 2CH comma
                  000          
 1021    000000A8 ........              DC32    EQUAL
 1022    000000AC ........              DC32    ZBRAN
 1023    000000B0 14000000              DC32      BASE_RESET_THEN_ERROR-.
 1024                           
 1025                           // Fall thru if comma so reset DPL to create a single number.
 1026                           DPL_RESET:        
 1027    000000B4 ........FFFFF         DC32    LIT, -1
                  FFF          
 1028    000000BC ........              DC32    BRAN
 1029    000000C0 98FFFFFF              DC32      NUMB1-.
 1030                           #endif
 1031                           
 1032                           BASE_RESET_THEN_ERROR:
 1033                           // GOING TO ERROR SO RESTORE BASE!
 1034    000000C4 ........              DC32    BASE_FROM_R12   // Restore BASE
 1035                           //NO_BASE_RESTORE:
 1036    000000C8 ........              DC32    ONE     // provide non zero flag for error
 1037    000000CC .............         DC32    LIT, msg_number_error
                  ...          
 1038    000000D4 ........              DC32    QERROR // ( f nullstr-addr -- ) IF f TRUE EXECUTE ERROR!
 1039                           
 1040                           DPL_ZERO_INCR:      // set DPL to zero
 1041    000000D8 ........              DC32    ZERO
 1042    000000DC ........              DC32    BRAN
 1043    000000E0 78FFFFFF              DC32      NUMB1-.
 1044                           
 1045                           NUMB2:
 1046    000000E4 ........              DC32    DROP
 1047    000000E8 ........              DC32    RFROM           // FLAG OF "-" TEST
 1048                                                           // IF
 1049    000000EC ........              DC32    ZBRAN
 1050    000000F0 08000000              DC32      NUMB3-.
 1051                           
 1052    000000F4 ........              DC32    DNEGATE
 1053                           
 1054                           NUMB3:                          // endif
 1055    000000F8 ........              DC32    BASE_FROM_R12   // Restore BASE
 1056    000000FC ........              DC32    SEMIS
 1057                           
 1058                           
 1059                           //      ERROR ERROR:    ( nullstr --- )
 1060                           //      Execute error notification and restart of system.
 1061                           
 1062                            SECTION .text : CONST (2)
 1063                           ERROR_NFA:
 1064    00000000 85                    DC8     0x85
 1065    00000001 4552524F              DC8     'ERRO'
 1066    00000005 D2                    DC8     'R'+0x80
 1067    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1068                           //      DC32    DFIND_NFA
 1069    00000008 ........              DC32    NUMBER_NFA
 1070                           ERROR:
 1071    0000000C ........              DC32    DOCOL
 1072    00000010 .............         DC32    HERE, COUNT, TYPE       // Offending item
                  ...........  
 1073    0000001C .............         DC32    NULLSTRLEN, TYPE        // Passed in null string
                  ...          
 1074                           #ifdef IO2TP
 1077                           #endif
 1078                           #ifdef XON_XOFF
 1079    00000024 ........              DC32    XOFF    // TEMP TEST THRE
 1080                           #endif
 1081                                   
 1082                           //      DO THIS WHERE STATE IS SET BACK TO ZERO
 1083    00000028 .............         DC32    STATE_SV, AT
                  ...          
 1084    00000030 ........              DC32    ZBRAN
 1085    00000034 40000000              DC32     CREATED_OK-.
 1086                           
 1087                           //      NON-ZERO CSDP = RESTORE DP TO forget DAMAGED WORDS
 1088    00000038 .............         DC32    CSDP_SV, AT   // Create saves dp here for if word exists err
                  ...          
 1089    00000040 ........              DC32    ZBRAN
 1090    00000044 30000000              DC32     CREATED_OK-.
 1091                           
 1092                           // assume ITS A CREATE'd WORD!!!!
 1093                           ERROR_FIXUP:     // CSDP_SV contains NFA of definition that has error.
 1094    00000048 .............         DC32    CSDP_SV, AT     // SHOULD BE AT NFA!!
                  ...          
 1095    00000050 ........              DC32    PFA     // ( nfa -- pfa )
 1096    00000054 .............         DC32    LFA, AT // ( pfa --- lfa )
                  ...          
 1097    0000005C .............         DC32    CURRENT_SV, STORE       // Has to be NFA of last good word
                  ...          
 1098                           // RESET DP!
 1099    00000064 .............         DC32    CSDP_SV, AT
                  ...          
 1100    0000006C .............         DC32    DP_SV, STORE
                  ...          
 1101                           
 1102                           CREATED_OK:
 1103    00000074 ........              DC32    SEMIC_CREATE            // RESET CSDP FOR AUTO FORGET
 1104                           
 1105                           BP1_ERROR:
 1106                           #ifdef IO2TP
 1108                           #endif
 1109                           //      DC32    SPSTO   // DONE in QUIT
 1110                           #ifdef ABORT_STOP_TILL_CO
 1111    00000078 ........              DC32    ABORT
 1112                           #else
 1114                           #endif
 1115                           
 1116                           
 1117                           //      ' TICK: ( -- pfa ) IMMEDIATE
 1118                           //      Used in the form: .
 1119                           //      ' CCcc
 1120                           //      Leaves the parameter field address of dictionary word CCcc.
 1121                           //      If the word is not found after a search of CURRENT,
 1122                           //      an appropriate error message is given.
 1123                           //      As a compiler directive, executed in a colon-definition to compile
 1124                           //      the address as a literal.
 1125                           //      Pronounced "TICK".
 1126                           
 1127                            SECTION .text : CONST (2)
 1128                           TICK_NFA:
 1129    00000000 C1                    DC8     0x0C1
 1130    00000001 A7                    DC8     ''''+0x80
 1131    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1132    00000004 ........              DC32    ERROR_NFA
 1133                           TICK:
 1134    00000008 ........              DC32    DOCOL
 1135    0000000C ........              DC32    DFIND   // noop there for TIB entry
 1136    00000010 ........              DC32    ZEQU
 1137    00000014 .............         DC32    LIT, msg_word_error
                  ...          
 1138    0000001C ........              DC32    QERROR    // ( f nullstr-addr -- )
 1139    00000020 ........              DC32    DROP
 1140    00000024 ........              DC32    LITERAL
 1141    00000028 ........              DC32    SEMIS
 1142                           
 1143                           
 1144                           //      EXPECT EXPECT:  ( addr count -- )
 1145                           //      Transfer characters from the terminal to the buffer starting at addr+1,
 1146                           //      until a "return" or the count of characters have been received.
 1147                           //      One or two nulls are added at the end creating a null-terminated string.
 1148                           //      A count byte is placed at addr, the count being derived by $LEN
 1149                           //      Use COUNT with TYPE for strings saved this way.
 1150                           //      Strings longer that 255 will have an invalid count byte. Use $LEN:
 1151                           //      $LEN and TYPE can be used when the argument to $LEN is addr+1.
 1152                           
 1153                           //      Comments below use TIB input (QUERY in INTERPRET) as an example.
 1154                           
 1155                            SECTION .text : CONST (2)
 1156                           EXPECT_NFA:
 1157    00000000 86                    DC8     0x86
 1158    00000001 4558504543            DC8     'EXPEC'
 1159    00000006 D4                    DC8     'T'+0x80
 1160    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1161    00000008 ........              DC32    TICK_NFA
 1162                           EXPECT:                 // ( NOS TOS -- NOS TOS )
 1163    0000000C ........              DC32    DOCOL   // ( TIB LEN -- )
 1164    00000010 ........              DC32    ONEP    // ( TIB LEN+1 -- ) (Index and Limit)+1 for count byte
 1165    00000014 ........              DC32    OVER    // ( TIB LEN+1 TIB -- )
 1166    00000018 ........              DC32    PLUS    // ( TIB TIB+LEN+1 -- )
 1167    0000001C ........              DC32    OVER    // ( TIB TIB+LEN+1 TIB -- )
 1168    00000020 ........              DC32    ONEP    // ( TIB TIB+LEN+1 TIB+1 -- ) SKIP COUNT BYTE
 1169                           
 1170                           ///* FISH System compiled KEY does not issue XON - user version does!
 1171                           #ifdef XON_XOFF
 1172    00000024 ........              DC32    XON
 1173                           #endif
 1174                           //*/
 1175                           
 1176                           // ( ORGIGINAL-TIB TIB+LEN+1 TIB+1 -- ORGIGINAL-TIB ) 
 1177                           //                (Index & Limit)+1 for count byte
 1178    00000028 ........              DC32    XDO     // DO   Index = addr, Limit = addr+cnt
 1179                           EXPE1:
 1180    0000002C ........              DC32    KEY     // CAN BREAKPOINT OR SET TO 0x0D - XON done there.
 1181                           #ifdef XON_XOFF
 1182    00000030 ........              DC32    IF_EOL_SEND_XOFF        // IF CR QUICK XOFF!
 1183                           #endif
 1184                           // goto main branch (EL1:)if not tab
 1185    00000034 .............         DC32    DUP, LIT, 9, EQUAL      // ? TAB
                  ...09000000..
                  ......       
 1186    00000044 ........              DC32    ZBRAN                   // Not tab
 1187    00000048 0C000000              DC32     EL1-.                  // Goto MAIN LOOP
 1188                                   
 1189                           // REPLACE TAB WITH SPACE               // -- ch f
 1190    0000004C .............         DC32    DROP, BLANK             // Convert tab to space
                  ...          
 1191                           EL1:
 1192                           // MAIN LOOP ENTERED WITH CHAR ON TOS
 1193    00000054 ........              DC32    DUP             // ( TIB key key -- )
 1194                           // FALL THRU IF BACKSPACE OR DELETE KEY
 1195    00000058 ........              DC32    BACKSPACE_CHAR
 1196    0000005C ........              DC32    EQUAL
 1197    00000060 ........              DC32    OVER
 1198    00000064 ........7F000         DC32    LIT, 07Fh       // DEL KEY
                  000          
 1199    0000006C ........              DC32    EQUAL
 1200    00000070 ........              DC32    OR
 1201                           // BRANCH IF NOT BACKSPACE OR DELETE KEY
 1202    00000074 ........              DC32    ZBRAN           // If not backspace
 1203    00000078 50000000              DC32     EXPE2-.        // go here
 1204                           
 1205                           // CASE OF BACKSPACE/DELETE KEY
 1206    0000007C ........              DC32    DROP            // ( TOS> 8 TIB -- TIB ) Drop Backspace on stack
 1207    00000080 ........              DC32    DUP             // ( TOS> TIB -- TOS> TIB TIB )  Current TIB addr
 1208    00000084 ........              DC32    I               // ( TOS> TIB TIB -- I=TIB+? TIB TIB )
 1209                           // COMPENSATE FOR COUNT BYTE - BUMP ADDR+1 (NEXT CHAR LOCATION) BACK TO CURRENT
 1210    00000088 ........              DC32    ONEM
 1211    0000008C ........              DC32    EQUAL           // ( TOS> I=TIB+? TIB TIB -- f TIB )
 1212    00000090 ........              DC32    DUP             // ( TOS> f TIB -- f f TIB )
 1213                           // I AND RFROM STARTS AT TIB+1 
 1214                           // REMOVE INDEX FROM LOOP TO REPLACE IT WITH BACKSPACE CORRECTED ADDRESS
 1215    00000094 ........              DC32    RFROM           // ( TOS> f f TIB -- TIB+1 f f TIB )
 1216                           // ADDING 2 BECAUSE TIB+1 IS FROM I AND FLAG MAKES IT = TO 1
 1217                           // WHEN AT THE BEGIINING (ADDR+1) OF THE ADDR BUFFER
 1218    00000098 ........              DC32    TWO
 1219    0000009C ........              DC32    SUBB
 1220                           // ADD FLAG 
 1221    000000A0 ........              DC32    PLUS
 1222    000000A4 ........              DC32    TOR
 1223    000000A8 ........              DC32    ZBRAN           // If not at beginning of line
 1224    000000AC 10000000              DC32     EXPE6-.        // Goto bsout
 1225                           
 1226    000000B0 ........              DC32    BELL            // At beginning of TIB issue bell
 1227    000000B4 ........              DC32    BRAN            // Goto end of loop
 1228    000000B8 60000000              DC32     EXPE33-.
 1229                           
 1230                           EXPE6:
 1231    000000BC ........              DC32    BSOUT           // endif
 1232                           EXPE7:  // LABEL NOT USED BECAUSE BELL AND BSOUT Emit THEMSELVES
 1233    000000C0 ........              DC32    BRAN            // Goto end of loop
 1234    000000C4 54000000              DC32     EXPE33-.
 1235                           
 1236                           EXPE2:
 1237    000000C8 ........              DC32    DUP
 1238    000000CC ........0D000         DC32    LIT, 0x0D       // cr
                  000          
 1239    000000D4 ........              DC32    EQUAL
 1240    000000D8 ........              DC32    ZBRAN           // If not cr
 1241    000000DC 1C000000              DC32     EXPE4-.        // Goto save this char and loop again
 1242                                   
 1243    000000E0 ........              DC32    LEAVE           // ( TOS> ODh TIB --  )
 1244                           #ifdef  IOBUFS_DEBUG        
 1246                           #endif
 1247                                   // CR DROPPED HERE I USED AT END FOR CASE OF EXPECT COUNT REACHED
 1248    000000E4 ........              DC32    DROP            // ( TOS> TIB -- )
 1249    000000E8 ........              DC32    BLANK           // ( TOS> 20h TIB -- ) space IS FOR EMIT!
 1250    000000EC ........              DC32    ZERO            // ( TOS> 0 20h TIB -- ) null
 1251    000000F0 ........              DC32    BRAN            // Goto store these at end of loop
 1252    000000F4 08000000              DC32     EXPE5-.
 1253                           
 1254                           EXPE4:
 1255    000000F8 ........              DC32    DUP             // Regular char 
 1256                           
 1257                           EXPE5:
 1258    000000FC ........              DC32    I               // I=TIB Store char
 1259    00000100 ........              DC32    CSTORE          // or 1rst null in CASE OF CR
 1260    00000104 ........              DC32    ZERO            // 1rst or second null if cr
 1261                                   // CASE OF CR ( TOS> 0 20h TIB -- )
 1262    00000108 ........              DC32    I
 1263    0000010C ........              DC32    ONEP
 1264    00000110 ........              DC32    CSTORE
 1265                           EXPE3:
 1266                                   // CASE OF CR ( TOS> 20H TIB -- )
 1267    00000114 ........              DC32    EMIT
 1268                           EXPE33:
 1269    00000118 ........              DC32    XLOOP
 1270    0000011C 10FFFFFF              DC32     EXPE1-.        // Loop is LEAVE'd
 1271                           
 1272                           #ifdef XON_XOFF
 1273    00000120 ........              DC32    XOFF            // Count reached or cr = 2nd XOFF
 1274                           #endif
 1275                           // Creat count byte        
 1276                                   // ( ORIGINAL ADDR -- )
 1277                                   // ORIGINAL ADDR (TIB) ON STACK HERE SO CORRECT FOR $LEN
 1278    00000124 ........              DC32    ONEP            // PAST COUNT BYTE FOR CORRECT COUNT
 1279                                   // NULLSTRLEN:          // ( addr -- addr len )
 1280    00000128 ........              DC32    NULLSTRLEN      // ( TOS> LEN TIB+1 -- )
 1281    0000012C .............         DC32    SWAP, ONEM      // BACK UP TO COUNT BYTE
                  ...          
 1282    00000134 ........              DC32    CSTORE
 1283    00000138 ........              DC32    SEMIS
 1284                           
 1285                           
 1286                           //      COUNT COUNT:    ( addr1 --- addr2 n )
 1287                           //      Leave the byte address addr2 and byte count n of a count byte string,
 1288                           //      beginning at address addr1. It is presumed that the first byte at
 1289                           //      addr1 contains the text byte count and the actual text starts with
 1290                           //      the second byte. NFA's may report SMUDGE'd byte counts, handled only
 1291                           //      by ID. User Strings may be up to 255 characters.
 1292                           //      Typically COUNT is followed by TYPE.
 1293                           //      See TYPE $LEN and EXPECT
 1294                           
 1295                            SECTION .text : CONST (2)
 1296                           COUNT_NFA:
 1297    00000000 85                    DC8     0x85
 1298    00000001 434F554E              DC8     'COUN'
 1299    00000005 D4                    DC8     'T'+0x80
 1300    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1301    00000008 ........              DC32    EXPECT_NFA
 1302                           COUNT:
 1303    0000000C ........              DC32    DOCOL
 1304    00000010 ........              DC32    DUP
 1305    00000014 ........              DC32    ONEP
 1306    00000018 ........              DC32    SWAP
 1307                           //        DC32    CATLT7F
 1308    0000001C ........              DC32    CAT     // n could be SMUDGE'd count from NFA's
 1309    00000020 ........              DC32    SEMIS   // Only internal usage of smudged count is ID.
 1310                           
 1311                           
 1312                           //      $LEN NULLSTRLEN:        ( addr - addr len )
 1313                           //      Count length of null terminated string.
 1314                           //      TYPE can be used after this word.
 1315                           
 1316                            SECTION .text : CONST (2)
 1317                           NULLSTRLEN_NFA:
 1318    00000000 84                    DC8     0x84
 1319    00000001 244C45                DC8     '$LE'
 1320    00000004 CE                    DC8     'N'+0x80
 1321    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1322    00000008 ........              DC32    COUNT_NFA
 1323                           NULLSTRLEN:
 1324    0000000C ........              DC32    .+5
 1325                            SECTION .text : CODE (2)
 1326                                   NDPOP2w                         // Get but leave addr on stack
 1326.1  00000000 3A68                  LDR     w, [p]
 1326.2                                 ENDM
 1327    00000002 4040                  EORS            t, t            // zero count
 1328                           
 1329                           NSLEN_LOOP:
 1330    00000004 115C                  LDRB            n, [w,t]
 1331    00000006 0943                  ORRS            n, n
 1332    00000008 01D0                  BEQ             NSLEN_DONE
 1333    0000000A 401C                  ADDS            t, t, #1
 1334    0000000C FAE7                  B               NSLEN_LOOP
 1335                           
 1336                           NSLEN_DONE:
 1337                                   TPUSH
 1337                                   PUSHt   // push t to p, pre decrement p
 1337.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1337.2  00000010 3860                  STR     t, [p]
 1337.3                                 ENDM
 1337                                   NEXT
 1337.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1337                                   NEXT1
 1337.1  00000014 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1337.2  00000016 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1337.3                                 ENDM
 1337.4                                 ENDM
 1337.5                                 ENDM
 1338                           
 1339                           
 1340                           //      FORGET FORGET:  ( -- )
 1341                           //      PRINTS NEW HERE IF SUCCESSFUL. FIXED FIG VERSION MEMORY LEAK.
 1342                           //      Executed in the form:
 1343                           //      FORGET CCcc
 1344                           //      Deletes definition named CCcc from the dictionary with all entries
 1345                           //      physically following it. In fig-FORTH, an error message will occur
 1346                           //      if the CURRENT and CONTEXT vocabularies are not currently the same.
 1347                           //      MODIFIED: To update Current along with context and reset DP,
 1348                           //      and execute .DS and .VS
 1349                           
 1350                            SECTION .text : CONST (2)
 1351                           FORGET_NFA:
 1352    00000000 86                    DC8     0x86
 1353    00000001 464F524745            DC8     'FORGE'
 1354    00000006 D4                    DC8     'T'+0x80
 1355    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1356    00000008 ........              DC32    NULLSTRLEN_NFA
 1357                           FORGET:
 1358    0000000C ........              DC32    DOCOL
 1359    00000010 ........              DC32    TICK                    // ( -- pfa ) ELSE error message
 1360    00000014 ........              DC32    DUP
 1361    00000018 ........003C0         DC32    LIT, FLASH_SPAGE       // DONT FORGET FISH WORDS SAVED in FLASH
                  000          
 1362    00000020 ........              DC32    LESSTHAN
 1363    00000024 .............         DC32    LIT, msg_forget_fish
                  ...          
 1364    0000002C ........              DC32    QERROR                  // ( f nullstr-addr -- )
 1365    00000030 ........              DC32    DUP
 1366    00000034 ........00400         DC32    LIT, FLASH_PPAGE        // DONT FORGET USER WORDS in FLASH
                  000          
 1367    0000003C ........              DC32    LESSTHAN
 1368    00000040 .............         DC32    LIT, msg_forget_saved
                  ...          
 1369    00000048 ........              DC32    QERROR                  // ( f nullstr-addr -- )
 1370                           //      MOVE NFA update of the DP to after Currrent and Context
 1371    0000004C ........              DC32    DUP                     // PFA PFA --
 1372    00000050 ........              DC32    LFA                     // PFA LFA --
 1373                           
 1374                           // VAR space reclamation starts here:
 1375                           // PFA LFA --
 1376    00000054 ........              DC32    TOR                     // LFA_BOT
 1377                           
 1378                           VS_RECVR_LOOP:
 1379    00000058 .............         DC32    LATEST, PFA, LFA        // LFA_TOP
                  ...........  
 1380    00000064 .............         DC32    DUP, AT                 // LFA NEXT_LFA
                  ...          
 1381    0000006C .............         DC32    CURRENT_SV, STORE       // SET NEXT WORD TO CHECK
                  ...          
 1382    00000074 .............         DC32    DUP, FOURP, AT          // GET CFA
                  ...........  
 1383    00000080 .............         DC32    LIT, DOVAR, EQUAL       // IS IT A DOVAR
                  ...........  
 1384    0000008C ........              DC32    ZBRAN
 1385    00000090 14000000              DC32     VS_RECVR_NEXT-.
 1386                                   
 1387    00000094 ........FCFFF         DC32    LIT, -4, UP_SV, PSTORE  // DECREMENT UP
                  FFF..........
                  ......       
 1388                           
 1389                           VS_RECVR_NEXT:
 1390    000000A4 .............         DC32    R, EQUAL
                  ...          
 1391    000000AC ........              DC32    ZBRAN
 1392    000000B0 A8FFFFFF              DC32     VS_RECVR_LOOP-.
 1393                           
 1394    000000B4 ........              DC32    RFROM
 1395                           // VAR SPACE RECLAMATION DONE
 1396                           
 1397                           // PFA LFA --
 1398    000000B8 ........              DC32    AT              // LFA
 1399    000000BC ........              DC32    CURRENT_SV
 1400    000000C0 ........              DC32    STORE
 1401    000000C4 ........              DC32    NFA             // FROM PFA
 1402    000000C8 ........              DC32    DP_SV
 1403    000000CC ........              DC32    STORE
 1404    000000D0 .............         DC32    DOTVARSPACE, DOTDICTSPACE
                  ...          
 1405    000000D8 ........              DC32    SEMIS
 1406                           
 1407                           
 1408                           //      BYE BYE: ( -- ) COLD RESTART WITH SERIAL INITIALIZATION
 1409                           
 1410                            SECTION .text : CONST (2)
 1411                           BYE_NFA:
 1412    00000000 83                    DC8     0x83
 1413    00000001 4259                  DC8     'BY'
 1414    00000003 C5                    DC8     'E'+0x80
 1415                            ALIGNROM 2,0xFFFFFFFF
 1416    00000004 ........              DC32    FORGET_NFA
 1417                           BYE:
 1418    00000008 ........              DC32    .+5
 1419                            SECTION .text : CODE (2)
 1420    00000000 ........              BLX     FM0_COLD      // __iar_program_start
 1421                            LTORG
 1422                           
 1423                           
 1424                           //      ABORT ABORT:    ( -- )
 1425                           //      Clear the stacks, zero out and execute RUN or QUIT
 1426                           //      DOES NOT RESET DICTIONAIRY. SEE COLD.
 1427                           
 1428                            SECTION .text : CONST (2)
 1429                           ABORT_NFA:
 1430    00000000 85                    DC8     0x85
 1431    00000001 41424F52              DC8     'ABOR'
 1432    00000005 D4                    DC8     'T'+0x80
 1433    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1434    00000008 ........              DC32    BYE_NFA
 1435                           ABORT:
 1436    0000000C ........              DC32    DOCOL
 1437    00000010 ........              DC32    SPSTO
 1438    00000014 ........              DC32    RPSTO
 1439                           #ifdef IO2TP
 1443                           #endif
 1444    00000018 ........00000         DC32    STRVA, 0, OUT
                  000........  
 1445                           //      DC32    QSTACK  // IF STACK error abort using QERROR->ERROR
 1446                           
 1447                           // LOOK UP RUN AND EXEC IT
 1448    00000024 .............         DC32    LIT, msg_RUN, LATEST
                  ...........  
 1449    00000030 ........              DC32    PFIND   // 0 OR pfa len 1
 1450    00000034 ........              DC32    ZBRAN
 1451    00000038 10000000              DC32      ABORT_QUIT-.
 1452                           
 1453    0000003C ........              DC32    DROP    // LEN
 1454    00000040 .............         DC32    CFA, EXEC
                  ...          
 1455                           
 1456                           ABORT_QUIT:
 1457                           //      DC32    SEMIC_CREATE // Use ERROR if need to recover from bad definition
 1458                           #ifdef ABORT_STOP_TILL_CO
 1459    00000048 .............         DC32    LIT, ERROR_HALT, AT
                  ...........  
 1460    00000054 ........              DC32    ZBRAN
 1461    00000058 6C000000              DC32      CO_END-.
 1462                           // halt on all errors until "CO" entered
 1463                           // BEGIN
 1464    0000005C .............         DC32    LIT, msg_CO, NULLSTRLEN, TYPE
                  .............
                  ......       
 1465                           NOT_CO:
 1466    0000006C ........              DC32    QKEY
 1467    00000070 ........              DC32    ZBRAN
 1468    00000074 F8FFFFFF              DC32      NOT_CO-.
 1469                           // IF KEY = "C'
 1470    00000078 .............         DC32    KEY, LIT, 43h, EQUAL
                  ...43000000..
                  ......       
 1471    00000088 ........              DC32    ZBRAN
 1472    0000008C E0FFFFFF              DC32      NOT_CO-.
 1473                           // NEXT KEY "0"
 1474    00000090 .............         DC32    KEY, LIT, 4Fh, EQUAL
                  ...4F000000..
                  ......       
 1475    000000A0 ........              DC32    ZBRAN
 1476    000000A4 C8FFFFFF              DC32      NOT_CO-.
 1477                           // NEXT KEY "Enter"
 1478    000000A8 .............         DC32    KEY, LIT, 0Dh, EQUAL
                  ...0D000000..
                  ......       
 1479    000000B8 ........              DC32    ZBRAN
 1480    000000BC B0FFFFFF              DC32      NOT_CO-.
 1481                           // UNTIL
 1482    000000C0 ........              DC32    CR
 1483                           CO_END:
 1484                           #endif
 1485    000000C4 ........              DC32    QUIT    // OI
 1486                           #ifdef ABORT_STOP_TILL_CO
 1487                           $FISH_CO_MSGS.h
    1                           //------------------------------------------------------------------------------
    2                           
    3                            SECTION .text : CONST (2)
    4                           
    5                           // DC8 "?" IS A NULL TERMINATED STRING
    6                           // DC8 '?' IS NOT
    7                           
    8                            ALIGNROM 2,0xFFFFFFFF
    9                           
   10                           // IF this fits in 1114 move to FISH_RM_MSGS.h 
   11                           
   12                           msg_CO:
   13    00000000 204572726F722         DC8     " Error Halt (EHON/EHOFF) - To COntinue Type CO then Enter: "
                  048616C742028
                  45484F4E2F454
                  84F464629202D
                  20546F20434F6
                  E74696E756520
                  5479706520434
                  F207468656E20
                  456E7465723A2
                  000          
   14                           
 1488                           #endif
 1489    0000003C ........              DC32    QUIT    // OI
 1490                           
 1491                           
 1492                           //      COLD COLD:      ( -- )  MODIFIED:
 1493                           //      FIGISH SYSTEM COLD = WARM (INIT RAMVARSPACE) -> type signon MSG ->ABORT
 1494                           //      CLEARS DICTIONAIRY. SEE ABORT.
 1495                           
 1496                            SECTION .text : CONST (2)
 1497                           COLD_NFA:
 1498    00000000 84                    DC8     0x84
 1499    00000001 434F4C                DC8     'COL'
 1500    00000004 C4                    DC8     'D'+0x80
 1501    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1502    00000008 ........              DC32    ABORT_NFA
 1503                           COLD:
 1504    0000000C ........              DC32    DOCOL
 1505    00000010 ........              DC32    WARM            // RAMVARSPACE Init
 1506    00000014 ........              DC32    SIGNON
 1507                           #ifdef ABORT_STOP_TILL_CO
 1508    00000018 ........              DC32    QUIT
 1509                           #else
 1511                           #endif
 1512                           
 1513                           
 1514                           //=============================== WORDCAT ====================================//
 1515                           //NOEXEC HEADERFORWORDCATEGORIES
 1516                           //      WC_FISH_SYS: = FISH System: CATEGORY
 1517                           
 1518                            SECTION .text : CONST (2)
 1519                           WC_FISH_SYS_NFA:
 1520    00000000 90                    DC8     0x80+4+12
 1521    00000001 0D0A                  DC8     0x0D, 0x0A
 1522    00000003 4649534820537         DC8     'FISH System:'
                  97374656D3A  
 1523    0000000F 0D8A                  DC8     0x0D, 0x0A+0x80
 1524    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1525    00000014 ........              DC32    COLD_NFA
 1526                           
 1527                           
 1528                           //----------------------------- DOTSTACK SECTION -------------------------------
 1529                           //      .SH DOTSHEX:    ( -- )
 1530                           //      Nondestructively print items on stack in HEX, preserving base.
 1531                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1532                           
 1533                            SECTION .text : CONST (2)
 1534                           DOTSHEX_NFA:
 1535    00000000 83                    DC8     0x83
 1536    00000001 2E53                  DC8     '.S'
 1537    00000003 C8                    DC8     'H'+0x80
 1538                            ALIGNROM 2,0xFFFFFFFF
 1539    00000004 ........              DC32    WC_FISH_SYS_NFA
 1540                           DOTSHEX:
 1541    00000008 ........              DC32    DOCOL
 1542                           #ifdef SRM
 1544                           #else
 1545    0000000C ........10000         DC32    LIT, 16, DOTSBASE
                  000........  
 1546                           #endif
 1547    00000018 ........              DC32    SEMIS
 1548                           
 1549                           #ifndef SRM
 1550                           //      .SD DOTSDEC:    ( -- )
 1551                           //      Nondestructively print items on stack in DECIMAL, preserving base.
 1552                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1553                           
 1554                            SECTION .text : CONST (2)
 1555                           DOTSDEC_NFA:
 1556    00000000 83                    DC8     0x83
 1557    00000001 2E53                  DC8     '.S'
 1558    00000003 C4                    DC8     'D'+0x80
 1559                            ALIGNROM 2,0xFFFFFFFF
 1560    00000004 ........              DC32    DOTSHEX_NFA
 1561                           DOTSDEC:
 1562    00000008 ........              DC32    DOCOL
 1563    0000000C ........0A000         DC32    LIT, 10, DOTSBASE
                  000........  
 1564    00000018 ........              DC32    SEMIS
 1565                           
 1566                           
 1567                           //      .SB DOTSBIN:    ( -- )
 1568                           //      Nondestructively print items on stack in BINARY, preserving base.
 1569                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1570                           
 1571                            SECTION .text : CONST (2)
 1572                           DOTSBIN_NFA:
 1573    00000000 83                    DC8     0x83
 1574    00000001 2E53                  DC8     '.S'
 1575    00000003 C2                    DC8     'B'+0x80
 1576                            ALIGNROM 2,0xFFFFFFFF
 1577    00000004 ........              DC32    DOTSDEC_NFA
 1578                           DOTSBIN:
 1579    00000008 ........              DC32    DOCOL
 1580    0000000C .............         DC32    TWO, DOTSBASE
                  ...          
 1581    00000014 ........              DC32    SEMIS
 1582                           #endif // not SRM
 1583                           
 1584                           //      .S DOTS:        ( -- )
 1585                           //      Nondestructively print items on stack in current base.
 1586                           //      Prints TOS 1rst, i.e. TOS, NOS, etc.
 1587                           
 1588                            SECTION .text : CONST (2)
 1589                           DOTS_NFA:
 1590    00000000 82                    DC8     0x82
 1591    00000001 2E                    DC8     '.'
 1592    00000002 D3                    DC8     'S'+0x80
 1593    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1594                           #ifdef SRM
 1596                           #else
 1597    00000004 ........              DC32    DOTSBIN_NFA
 1598                           #endif  // SRM
 1599                           DOTS:
 1600    00000008 ........              DC32    DOCOL
 1601    0000000C .............         DC32    INITSO_SV, AT, SPAT, FOURP
                  .............
                  ......       
 1602    0000001C .............         DC32    EQUAL, ZEQU, ZBRAN
                  ...........  
 1603    00000028 68000000              DC32    DOTSEND-.                       // IF NOTHING ON STACK
 1604                           
 1605    0000002C ........              DC32    PDOTQ
 1606    00000030 05                    DC8     5
 1607    00000031 544F533E20            DC8     'TOS> '
 1608    00000036 FFFF           ALIGNROM 2,0xFFFFFFFF
 1609                                 
 1610    00000038 .............         DC32    INITSO_SV, AT, SPAT, FOURP
                  .............
                  ......       
 1611    00000048 ........              DC32    XDO
 1612                           
 1613                           DOTSLOOP:
 1614    0000004C .............         DC32    I, AT
                  ...          
 1615    00000054 .............         DC32    BASE_SV, AT
                  ...          
 1616    0000005C ........0A000         DC32    LIT, 10, EQUAL                  // 
                  000........  
 1617    00000068 ........              DC32    ZBRAN                           // NOT = DECIMAL
 1618    0000006C 10000000              DC32    DBSUSEDUDOT-.
 1619                           #ifdef SRM
 1621                           #else
 1622    00000070 ........              DC32    DOT_BASE_SUFFIX
 1623                           #endif  // SRM
 1624    00000074 ........              DC32    BRAN
 1625    00000078 08000000              DC32    DBSUSEDOT-.
 1626                           
 1627                           DBSUSEDUDOT:
 1628                           #ifdef SRM
 1630                           #else
 1631    0000007C ........              DC32    UDOT_BASE_SUFFIX
 1632                           #endif  // SRM
 1633                           DBSUSEDOT:
 1634    00000080 ........              DC32    SPACE
 1635    00000084 .............         DC32    FOUR, XPLOOP
                  ...          
 1636    0000008C C0FFFFFF              DC32    DOTSLOOP-.
 1637                           
 1638                           DOTSEND:
 1639    00000090 ........              DC32    SEMIS
 1640                           
 1641                           
 1642                           //      2DUP TDUP:      ( n2 n1 -- n2 n1 n2 n1 )
 1643                           //      Duplicate top two stack items. The prefix 2 convention means
 1644                           //      an operation on the top two stack items.
 1645                           
 1646                            SECTION .text : CONST (2)
 1647                           TDUP_NFA:
 1648    00000000 84                    DC8     0x84
 1649    00000001 324455                DC8     '2DU'
 1650    00000004 D0                    DC8     'P'+0x80
 1651    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1652    00000008 ........              DC32    DOTS_NFA
 1653                           TDUP:
 1654    0000000C ........              DC32    .+5
 1655                            SECTION .text : CODE (2)
 1656                           // TDUP: OPT by picking pops
 1657    00000000 3868                  LDR     t, [p]          //
 1658    00000002 7A68                  LDR     w, [p, #4]      //
 1659                                   DPUSH                   // 
 1659                                   PUSHw   // push w to p, pre decrement p
 1659.1  00000004 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1659.2  00000006 3A60                  STR     w, [p]
 1659.3                                 ENDM
 1659                                   TPUSH
 1659                                   PUSHt   // push t to p, pre decrement p
 1659.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1659.2  0000000A 3860                  STR     t, [p]
 1659.3                                 ENDM
 1659                                   NEXT
 1659.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1659                                   NEXT1
 1659.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1659.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1659.3                                 ENDM
 1659.4                                 ENDM
 1659.5                                 ENDM
 1659.6                                 ENDM
 1660                           
 1661                           
 1662                           //      -DUP ZNDUP:     ( n1 -- n1 (if zero)
 1663                           //                      ( n1 -- n1 n1 (non-zero)
 1664                           //      Reproduce n1 only if it is non-zero. Used in type andSPACES.
 1665                           //      This is usually used to copy a value just before IF, to eliminate
 1666                           //      the need for an ELSE part to drop it. 
 1667                           
 1668                            SECTION .text : CONST (2)
 1669                           DDUP_NFA:
 1670    00000000 84                    DC8     0x84
 1671    00000001 2D4455                DC8     '-DU'
 1672    00000004 D0                    DC8     'P'+0x80
 1673    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1674    00000008 ........              DC32    TDUP_NFA
 1675                           ZNDUP:
 1676    0000000C ........              DC32    DOCOL
 1677    00000010 ........              DC32    DUP
 1678    00000014 ........              DC32    ZBRAN   // IF
 1679    00000018 08000000              DC32    DDUP1-.
 1680                           
 1681    0000001C ........              DC32    DUP     //endif
 1682                           DDUP1:
 1683    00000020 ........              DC32    SEMIS
 1684                           
 1685                           
 1686                           //      ROT ROT: ( nl n2 n3 --- n2 n3 nl )
 1687                           //      Rotate the top three values on the stack, bringing the third to the top.
 1688                           
 1689                            SECTION .text : CONST (2)
 1690                           ROT_NFA:
 1691    00000000 83                    DC8     0x83
 1692    00000001 524F                  DC8     'RO'
 1693    00000003 D4                    DC8     'T'+0x80
 1694                            ALIGNROM 2,0xFFFFFFFF
 1695    00000004 ........              DC32    DDUP_NFA
 1696                           ROT:
 1697    00000008 ........              DC32    .+5
 1698                            SECTION .text : CODE (2)
 1699                                   POP2w
 1699.1  00000000 3A68                  LDR     w, [p]
 1699.2  00000002 3F1D                  ADDS    p, p, #4
 1699.3                                 ENDM
 1700                                   POP2n
 1700.1  00000004 3968                  LDR     n, [p]
 1700.2  00000006 3F1D                  ADDS    p, p, #4
 1700.3                                 ENDM
 1701                           #ifdef TOSCT
 1703                           #endif
 1704                                   POP2t
 1704.1                         #ifndef TOSCT
 1704.2  00000008 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1704.3                         #endif
 1704.4  0000000A 3F1D                  ADDS    p, p, #4
 1704.5                                 ENDM
 1705                                   PUSHn
 1705.1  0000000C 3F1F                  SUBS    p, p, #4        // push n to p, pre decrement p
 1705.2  0000000E 3960                  STR     n, [p]
 1705.3                                 ENDM
 1706                                   DPUSH                   //  --  LSW MSW )
 1706                                   PUSHw   // push w to p, pre decrement p
 1706.1  00000010 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1706.2  00000012 3A60                  STR     w, [p]
 1706.3                                 ENDM
 1706                                   TPUSH
 1706                                   PUSHt   // push t to p, pre decrement p
 1706.1  00000014 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1706.2  00000016 3860                  STR     t, [p]
 1706.3                                 ENDM
 1706                                   NEXT
 1706.1  00000018 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1706                                   NEXT1
 1706.1  0000001A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1706.2  0000001C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1706.3                                 ENDM
 1706.4                                 ENDM
 1706.5                                 ENDM
 1706.6                                 ENDM
 1707                           
 1708                           
 1709                           //      I I:    ( -- n )
 1710                           //      Used within a DO-LOOP to copy the loop index to the stack. Other use
 1711                           //      is implementation dependent.
 1712                           //      See R.
 1713                           
 1714                            SECTION .text : CONST (2)
 1715                           I_NFA:
 1716    00000000 81                    DC8     0x81
 1717    00000001 C9                    DC8     'I'+0x80
 1718    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1719    00000004 ........              DC32    ROT_NFA
 1720                           I:
 1721    00000008 ........              DC32    .+5
 1722                            SECTION .text : CODE (2)
 1723    00000000 3068                  LDR     t, [r]  // GET INDEX VALUE
 1724                                   TPUSH
 1724                                   PUSHt   // push t to p, pre decrement p
 1724.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1724.2  00000004 3860                  STR     t, [p]
 1724.3                                 ENDM
 1724                                   NEXT
 1724.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1724                                   NEXT1
 1724.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1724.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1724.3                                 ENDM
 1724.4                                 ENDM
 1724.5                                 ENDM
 1725                           
 1726                           
 1727                           //      SP@ SPAT:       ( -- addr )
 1728                           //      ( -- addr = Current TOP of the parameter stack (p) )
 1729                           //      Place the address of the TOP of the parameter stack (p)
 1730                           //      on the parameter stack (p) as it was before RP@ was executed.
 1731                           //      e.g.  1  2  SP@  @  .   .   .     would type 2  2  1
 1732                           
 1733                            SECTION .text : CONST (2)
 1734                           SPAT_NFA:
 1735    00000000 83                    DC8     0x83
 1736    00000001 5350                  DC8     'SP'
 1737    00000003 C0                    DC8     '@'+0x80
 1738                            ALIGNROM 2,0xFFFFFFFF
 1739    00000004 ........              DC32    I_NFA
 1740                           SPAT:
 1741    00000008 ........              DC32    .+5
 1742                            SECTION .text : CODE (2)
 1743    00000000 3846                  MOV     t, p
 1744                                   TPUSH
 1744                                   PUSHt   // push t to p, pre decrement p
 1744.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1744.2  00000004 3860                  STR     t, [p]
 1744.3                                 ENDM
 1744                                   NEXT
 1744.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1744                                   NEXT1
 1744.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1744.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1744.3                                 ENDM
 1744.4                                 ENDM
 1744.5                                 ENDM
 1745                           
 1746                           
 1747                           //      RP@ RPAT:       ( -- addr )
 1748                           //      ( -- addr = Current TOP of the Return Stack (r) )
 1749                           //      Place the address of the TOP of the return stack (r)
 1750                           //      on the parameter stack (p) as it was before RP@ was executed.
 1751                           //      e.g.  1 >R  2 >R  RP@  @  .   .   . would type 2  2  1
 1752                           
 1753                            SECTION .text : CONST (2)
 1754                           RPAT_NFA:
 1755    00000000 83                    DC8     0x83
 1756    00000001 5250                  DC8     'RP'
 1757    00000003 C0                    DC8     '@'+0x80
 1758                            ALIGNROM 2,0xFFFFFFFF
 1759    00000004 ........              DC32    SPAT_NFA
 1760                           RPAT:
 1761    00000008 ........              DC32    .+5
 1762                            SECTION .text : CODE (2)
 1763    00000000 3046                  MOV     t, r
 1764                                   TPUSH
 1764                                   PUSHt   // push t to p, pre decrement p
 1764.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1764.2  00000004 3860                  STR     t, [p]
 1764.3                                 ENDM
 1764                                   NEXT
 1764.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1764                                   NEXT1
 1764.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1764.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1764.3                                 ENDM
 1764.4                                 ENDM
 1764.5                                 ENDM
 1765                           
 1766                           
 1767                           //      LEAVE LEAVE:    ( -- )
 1768                           //      Force termination of a DO-LOOP at the next opportunity by setting
 1769                           //      the loop limit equal to the current value of the index. The index
 1770                           //      itself remains unchanged, and execution proceeds until LOOP
 1771                           //      or +LOOP is encountered.
 1772                           
 1773                            SECTION .text : CONST (2)
 1774                           LEAVE_NFA:
 1775    00000000 85                    DC8     0x85
 1776    00000001 4C454156              DC8     'LEAV'
 1777    00000005 C5                    DC8     'E'+0x80
 1778    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1779                           //      DC32    RPSTO_NFA
 1780    00000008 ........              DC32    RPAT_NFA
 1781                           LEAVE:
 1782    0000000C ........              DC32    .+5
 1783                            SECTION .text : CODE (2)
 1784    00000000 3268                  LDR     w, [r]          // GET Index
 1785    00000002 7260                  STR     w, [r, #4]  // Store it at Limit
 1786                                   NEXT
 1786.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1786                                   NEXT1
 1786.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1786.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1786.3                                 ENDM
 1786.4                                 ENDM
 1787                           
 1788                           
 1789                           //      R> RFROM:       ( -- n )                           L0
 1790                           //      Remove the top value from the return stack and leave it on the
 1791                           //      computation stack. See >R and R.
 1792                           
 1793                            SECTION .text : CONST (2)
 1794                           RFROM_NFA:
 1795    00000000 82                    DC8     0x82
 1796    00000001 52                    DC8     'R'
 1797    00000002 BE                    DC8     '>'+0x80
 1798    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1799    00000004 ........              DC32    LEAVE_NFA
 1800                           RFROM:
 1801    00000008 ........              DC32    .+5
 1802                            SECTION .text : CODE (2)
 1803                                   POPr2t
 1803.1  00000000 3068                  LDR     t, [r]
 1803.2  00000002 361D                  ADDS    r, r, #4
 1803.3                                 ENDM
 1804                                   TPUSH
 1804                                   PUSHt   // push t to p, pre decrement p
 1804.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1804.2  00000006 3860                  STR     t, [p]
 1804.3                                 ENDM
 1804                                   NEXT
 1804.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1804                                   NEXT1
 1804.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1804.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1804.3                                 ENDM
 1804.4                                 ENDM
 1804.5                                 ENDM
 1805                           
 1806                           
 1807                           //      R R:    ( -- n )
 1808                           //      Copy the top of the return stack to the computation stack.
 1809                           
 1810                            SECTION .text : CONST (2)
 1811                           R_NFA:
 1812    00000000 81                    DC8     0x81
 1813    00000001 D2                    DC8     'R'+0x80
 1814    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1815    00000004 ........              DC32    RFROM_NFA
 1816                           R:
 1817    00000008 ........              DC32    .+5
 1818                            SECTION .text : CODE (2)
 1819    00000000 3068                  LDR     t, [r]  // Get Index
 1820                                   TPUSH
 1820                                   PUSHt   // push t to p, pre decrement p
 1820.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1820.2  00000004 3860                  STR     t, [p]
 1820.3                                 ENDM
 1820                                   NEXT
 1820.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1820                                   NEXT1
 1820.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1820.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1820.3                                 ENDM
 1820.4                                 ENDM
 1820.5                                 ENDM
 1821                           
 1822                           //      >R TOR: ( n -- )
 1823                           //      Remove a number from the computation stack and place as the most
 1824                           //      accessable on the return stack. Use should be balanced with R> in
 1825                           //      the same definition.
 1826                           
 1827                            SECTION .text : CONST (2)
 1828                           TOR_NFA:
 1829    00000000 82                    DC8     0x82
 1830    00000001 3E                    DC8     '>'
 1831    00000002 D2                    DC8     'R'+0x80
 1832    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1833    00000004 ........              DC32    R_NFA
 1834                           TOR:
 1835    00000008 ........              DC32    .+5
 1836                            SECTION .text : CODE (2)
 1837                                   POP2n   // preserve TOS
 1837.1  00000000 3968                  LDR     n, [p]
 1837.2  00000002 3F1D                  ADDS    p, p, #4
 1837.3                                 ENDM
 1838                                   PUSHn2r
 1838.1  00000004 361F                  SUBS    r, r, #4        //  push t to r, pre decrement r
 1838.2  00000006 3160                  STR     n, [r]
 1838.3                                 ENDM
 1839                           #ifdef TOSCT
 1841                           #endif
 1842                                   NEXT
 1842.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1842                                   NEXT1
 1842.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1842.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1842.3                                 ENDM
 1842.4                                 ENDM
 1843                           
 1844                           
 1845                           //      OVER OVER:      ( nl n2 -- nl n2 n1 )
 1846                           //      Copy the second stack value, placing it as the new top.
 1847                           
 1848                            SECTION .text : CONST (2)
 1849                           OVER_NFA:
 1850    00000000 84                    DC8     0x84
 1851    00000001 4F5645                DC8     'OVE'
 1852    00000004 D2                    DC8     'R'+0x80
 1853    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1854    00000008 ........              DC32    TOR_NFA
 1855                           OVER:
 1856    0000000C ........              DC32    .+5
 1857                            SECTION .text : CODE (2)
 1858                                   POP2w           // n2
 1858.1  00000000 3A68                  LDR     w, [p]
 1858.2  00000002 3F1D                  ADDS    p, p, #4
 1858.3                                 ENDM
 1859                           #ifdef TOSCT
 1863                           #else
 1864                                   POP2t           // n1
 1864.1                         #ifndef TOSCT
 1864.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1864.3                         #endif
 1864.4  00000006 3F1D                  ADDS    p, p, #4
 1864.5                                 ENDM
 1865                           #endif
 1866                                   PUSHt           // -- n1 )
 1866.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1866.2  0000000A 3860                  STR     t, [p]
 1866.3                                 ENDM
 1867                                   DPUSH           //  --  LSW MSW )
 1867                                   PUSHw   // push w to p, pre decrement p
 1867.1  0000000C 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1867.2  0000000E 3A60                  STR     w, [p]
 1867.3                                 ENDM
 1867                                   TPUSH
 1867                                   PUSHt   // push t to p, pre decrement p
 1867.1  00000010 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1867.2  00000012 3860                  STR     t, [p]
 1867.3                                 ENDM
 1867                                   NEXT
 1867.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1867                                   NEXT1
 1867.1  00000016 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1867.2  00000018 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1867.3                                 ENDM
 1867.4                                 ENDM
 1867.5                                 ENDM
 1867.6                                 ENDM
 1868                           
 1869                           
 1870                           //      DROP DROP:      ( n1 -- )
 1871                           //      Drop n1 from the stack.
 1872                           
 1873                            SECTION .text : CONST (2)
 1874                           DROP_NFA:
 1875    00000000 84                    DC8     0x84
 1876    00000001 44524F                DC8     'DRO'
 1877    00000004 D0                    DC8     'P'+0x80
 1878    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1879    00000008 ........              DC32    OVER_NFA
 1880                           DROP:
 1881    0000000C ........              DC32    .+5
 1882                            SECTION .text : CODE (2)
 1883                           #ifdef TOSCT
 1887                           #else // DROP:
 1888                           //        POP2t         // Opt to just do p
 1889    00000000 3F1D                  ADDS    p, p, #4
 1890                           
 1891                           #endif
 1892                                   NEXT
 1892.1  00000002 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1892                                   NEXT1
 1892.1  00000004 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1892.2  00000006 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1892.3                                 ENDM
 1892.4                                 ENDM
 1893                           
 1894                           
 1895                           //      SWAP SWAP:      ( nl n2 -- n2 n1 )
 1896                           //      Exchange the top two values On the stack.
 1897                           
 1898                            SECTION .text : CONST (2)
 1899                           SWAP_NFA:
 1900    00000000 84                    DC8     0x84
 1901    00000001 535741                DC8     'SWA'
 1902    00000004 D0                    DC8     'P'+0x80
 1903    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1904    00000008 ........              DC32    DROP_NFA
 1905                           SWAP:
 1906    0000000C ........              DC32    .+5
 1907                            SECTION .text : CODE (2)
 1908                           #ifdef TOSCT
 1912                           #else // SWAP:
 1913                                   POP2w           // n2
 1913.1  00000000 3A68                  LDR     w, [p]
 1913.2  00000002 3F1D                  ADDS    p, p, #4
 1913.3                                 ENDM
 1914                                   POP2t           // n1
 1914.1                         #ifndef TOSCT
 1914.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 1914.3                         #endif
 1914.4  00000006 3F1D                  ADDS    p, p, #4
 1914.5                                 ENDM
 1915                           #endif
 1916                                   DPUSH           //  --  LSW MSW )
 1916                                   PUSHw   // push w to p, pre decrement p
 1916.1  00000008 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 1916.2  0000000A 3A60                  STR     w, [p]
 1916.3                                 ENDM
 1916                                   TPUSH
 1916                                   PUSHt   // push t to p, pre decrement p
 1916.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1916.2  0000000E 3860                  STR     t, [p]
 1916.3                                 ENDM
 1916                                   NEXT
 1916.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1916                                   NEXT1
 1916.1  00000012 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1916.2  00000014 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1916.3                                 ENDM
 1916.4                                 ENDM
 1916.5                                 ENDM
 1916.6                                 ENDM
 1917                           
 1918                           
 1919                           //      DUP DUP:        ( n1 -- n1 n1 )
 1920                           //      Duplicate the value n1 on the stack.
 1921                           
 1922                            SECTION .text : CONST (2)
 1923                           DUP_NFA:
 1924    00000000 83                    DC8     0x83
 1925    00000001 4455                  DC8     'DU'
 1926    00000003 D0                    DC8     'P'+0x80
 1927                            ALIGNROM 2,0xFFFFFFFF
 1928    00000004 ........              DC32    SWAP_NFA
 1929                           DUP:
 1930    00000008 ........              DC32    .+5
 1931                            SECTION .text : CODE (2)
 1932                           //#ifdef TOSCT
 1933                           // NO NEED TO REFRESH t ?
 1934                           //#else DUP:
 1935                           // OPT by picking pops
 1936    00000000 3868                  LDR     t, [p]
 1937                           //#endif
 1938                                   TPUSH
 1938                                   PUSHt   // push t to p, pre decrement p
 1938.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 1938.2  00000004 3860                  STR     t, [p]
 1938.3                                 ENDM
 1938                                   NEXT
 1938.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1938                                   NEXT1
 1938.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1938.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1938.3                                 ENDM
 1938.4                                 ENDM
 1938.5                                 ENDM
 1939                           
 1940                           //=============================== WORDCAT ====================================//
 1941                           //NOEXEC HEADERFORWORDCATEGORIES
 1942                           //      WC_STACK_NFA = Stack Stuff: CATEGORY
 1943                           
 1944                            SECTION .text : CONST (2)
 1945                           WC_STACK_NFA:
 1946    00000000 90                    DC8     0x80+4+12
 1947    00000001 0D0A                  DC8     0x0D, 0x0A
 1948    00000003 537461636B205         DC8     'Stack Stuff:'
                  3747566663A  
 1949    0000000F 0D8A                  DC8     0x0D, 0x0A+0x80
 1950    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1951    00000014 ........              DC32    DUP_NFA
 1952                           
 1953                           
 1954                           //      ANDBITS ANDBITS:        ( addr val -- )
 1955                           
 1956                            SECTION .text : CONST (2)
 1957                           ANDBITS_NFA:
 1958    00000000 87                    DC8     0x87
 1959    00000001 414E44424954          DC8     'ANDBIT'
 1960    00000007 D3                    DC8     'S'+0x80
 1961                            ALIGNROM 2,0xFFFFFFFF
 1962    00000008 ........              DC32    WC_STACK_NFA
 1963                           ANDBITS:
 1964    0000000C ........              DC32    .+5
 1965                            SECTION .text : CODE (2)
 1966                                   POPp2w          // val
 1966.1                                 // as in xeq token at ToS setup for exec
 1966.2  00000000 04CF                  LDM     p!, {w} // fetch memory p points to into {w}, inc p
 1966.3                                 ENDM
 1967                                   POP2n           // addr
 1967.1  00000002 3968                  LDR     n, [p]
 1967.2  00000004 3F1D                  ADDS    p, p, #4
 1967.3                                 ENDM
 1968    00000006 0868                  LDR     t, [n]  // read [val]
 1969    00000008 1040                  ANDS    t, t, w // modify val
 1970    0000000A 0860                  STR     t, [n]  // Write val
 1971                                   NEXT
 1971.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1971                                   NEXT1
 1971.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1971.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1971.3                                 ENDM
 1971.4                                 ENDM
 1972                           
 1973                           
 1974                           //      SETBITS SETBITS:        ( addr val -- )
 1975                           //      OR val bits into addr. See also CLRBITS.
 1976                           //      Preserves bits at addr - useful for ARM SoC initialization.
 1977                           
 1978                            SECTION .text : CONST (2)
 1979                           SETBITS_NFA:
 1980    00000000 87                    DC8     0x87
 1981    00000001 534554424954          DC8     'SETBIT'
 1982    00000007 D3                    DC8     'S'+0x80
 1983                            ALIGNROM 2,0xFFFFFFFF
 1984    00000008 ........              DC32    ANDBITS_NFA
 1985                           SETBITS:
 1986    0000000C ........              DC32    .+5
 1987                            SECTION .text : CODE (2)
 1988                                   POPp2w          // val
 1988.1                                 // as in xeq token at ToS setup for exec
 1988.2  00000000 04CF                  LDM     p!, {w} // fetch memory p points to into {w}, inc p
 1988.3                                 ENDM
 1989                                   POP2n           // addr
 1989.1  00000002 3968                  LDR     n, [p]
 1989.2  00000004 3F1D                  ADDS    p, p, #4
 1989.3                                 ENDM
 1990    00000006 0868                  LDR     t, [n]  // read[val]
 1991    00000008 1043                  ORRS    t, t, w // modify val
 1992    0000000A 0860                  STR     t, [n]  // Write val
 1993                                   NEXT
 1993.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 1993                                   NEXT1
 1993.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 1993.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 1993.3                                 ENDM
 1993.4                                 ENDM
 1994                           
 1995                           
 1996                           //      CLRBITS CLRBITS:        ( addr val -- )
 1997                           //      XOR val bits into addr. See also SETBITS.
 1998                           //      Preserves bits at addr - useful for ARM SoC initialization.
 1999                           
 2000                            SECTION .text : CONST (2)
 2001                           CLRBITS_NFA:
 2002    00000000 87                    DC8     0x87
 2003    00000001 434C52424954          DC8     'CLRBIT'
 2004    00000007 D3                    DC8     'S'+0x80
 2005                            ALIGNROM 2,0xFFFFFFFF
 2006    00000008 ........              DC32    SETBITS_NFA
 2007                           CLRBITS:
 2008    0000000C ........              DC32    .+5
 2009                            SECTION .text : CODE (2)
 2010                                   POPp2w                  // val
 2010.1                                 // as in xeq token at ToS setup for exec
 2010.2  00000000 04CF                  LDM     p!, {w} // fetch memory p points to into {w}, inc p
 2010.3                                 ENDM
 2011                                   POP2n                   // addr
 2011.1  00000002 3968                  LDR     n, [p]
 2011.2  00000004 3F1D                  ADDS    p, p, #4
 2011.3                                 ENDM
 2012    00000006 0868                  LDR     t, [n]          // read [val]
 2013    00000008 9043                  BICS    t, t, w         // modify val  - AND-NOT
 2014    0000000A 0860                  STR     t, [n]          // write val
 2015                                   NEXT
 2015.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2015                                   NEXT1
 2015.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2015.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2015.3                                 ENDM
 2015.4                                 ENDM
 2016                           
 2017                           
 2018                           //      CMOVE CMOVE:    ( from to count -- )
 2019                           //      Move the specified quantity of bytes beginning at address from to
 2020                           //      address to. The contents of address from is moved first proceeding
 2021                           //      toward high memory. Further specification is necessary on word
 2022                           //      addressing computers.
 2023                           
 2024                            SECTION .text : CONST (2)
 2025                           CMOVE_NFA:
 2026    00000000 85                    DC8     0x85
 2027    00000001 434D4F56              DC8     'CMOV'
 2028    00000005 C5                    DC8     'E'+0x80
 2029    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2030    00000008 ........              DC32    CLRBITS_NFA
 2031                           CMOVE:
 2032    0000000C ........              DC32    .+5
 2033                            SECTION .text : CODE (2)
 2034                                   POP2n //    ldr n, [p],#4      //COUNT
 2034.1  00000000 3968                  LDR     n, [p]
 2034.2  00000002 3F1D                  ADDS    p, p, #4
 2034.3                                 ENDM
 2035                                   POP2w //    ldr w, [p],#4      //DEST
 2035.1  00000004 3A68                  LDR     w, [p]
 2035.2  00000006 3F1D                  ADDS    p, p, #4
 2035.3                                 ENDM
 2036                                   POP2x //    ldr x, [p],#4      //SOURCE
 2036.1  00000008 3B68                  LDR     x, [p]
 2036.2  0000000A 3F1D                  ADDS    p, p, #4
 2036.3                                 ENDM
 2037    0000000C 0029                  CMP     n, #0
 2038    0000000E 07D0                  BEQ     CM2
 2039                           CM1:
 2040                           //not for THUMB
 2041                           //strcpy  LDRB R2, [R1], #1
 2042                           //        STRB R2, [R0], #1
 2043                           //        TST R2, R2      // repeat if R2 is nonzero
 2044                           //        BNE strcpy
 2045    00000010 1878                  LDRB    t, [x]
 2046    00000012 1070                  STRB    t, [w]
 2047    00000014 491E                  SUBS    n, n, #1
 2048    00000016 0029                  CMP     n, #0
 2049    00000018 02D0                  BEQ     CM2
 2050                           
 2051    0000001A 521C                  ADDS    w, w, #1
 2052    0000001C 5B1C                  ADDS    x, x, #1
 2053    0000001E F7D1                  BNE     CM1
 2054                           CM2:
 2055                           #ifdef TOSCT
 2057                           #endif
 2058                                   NEXT
 2058.1  00000020 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2058                                   NEXT1
 2058.1  00000022 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2058.2  00000024 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2058.3                                 ENDM
 2058.4                                 ENDM
 2059                           
 2060                           
 2061                           //      FILL FILL:      ( addr quan b -- )
 2062                           //      Fill memory at the address with the specified quantity of bytes b.
 2063                           
 2064                            SECTION .text : CONST (2)
 2065                           FILL_NFA:
 2066    00000000 84                    DC8     0x84
 2067    00000001 46494C                DC8     'FIL'
 2068    00000004 CC                    DC8     'L'+0x80
 2069    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2070    00000008 ........              DC32    CMOVE_NFA
 2071                           FILL:
 2072    0000000C ........              DC32    .+5
 2073                            SECTION .text : CODE (2)
 2074                                   POP2t                   // Fill CHAR
 2074.1                         #ifndef TOSCT
 2074.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 2074.3                         #endif
 2074.4  00000002 3F1D                  ADDS    p, p, #4
 2074.5                                 ENDM
 2075                                   POP2n                   // Fill COUNT
 2075.1  00000004 3968                  LDR     n, [p]
 2075.2  00000006 3F1D                  ADDS    p, p, #4
 2075.3                                 ENDM
 2076                                   POP2w                   // Beginning ADDR
 2076.1  00000008 3A68                  LDR     w, [p]
 2076.2  0000000A 3F1D                  ADDS    p, p, #4
 2076.3                                 ENDM
 2077    0000000C 0029                  CMP     n, #0
 2078    0000000E 04D0                  BEQ     FEND            // Count is zero
 2079    00000010 8B18                  ADDS    x, n, w
 2080                           FLOOP:
 2081    00000012 1070                  STRB    t, [w]
 2082    00000014 521C                  ADDS    w, w, #1
 2083    00000016 9A42                  CMP     w, x
 2084    00000018 FBD1                  BNE     FLOOP
 2085                           FEND:
 2086                           #ifdef TOSCT
 2088                           #endif
 2089                                   NEXT
 2089.1  0000001A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2089                                   NEXT1
 2089.1  0000001C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2089.2  0000001E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2089.3                                 ENDM
 2089.4                                 ENDM
 2090                           
 2091                           
 2092                           //      ERASE ERASE:    ( addr n -- )
 2093                           //      Clear a region of memory to zero from addr over n addresses.
 2094                           
 2095                            SECTION .text : CONST (2)
 2096                           ERASE_NFA:
 2097    00000000 85                    DC8     0x85
 2098    00000001 45524153              DC8     'ERAS'
 2099    00000005 C5                    DC8     'E'+0x80
 2100    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2101    00000008 ........              DC32    FILL_NFA
 2102                           ERASE:
 2103    0000000C ........              DC32    DOCOL
 2104    00000010 ........              DC32    ZERO
 2105    00000014 ........              DC32    FILL
 2106    00000018 ........              DC32    SEMIS
 2107                           
 2108                           
 2109                           //      BLANKS BLANKS:  ( addr count -- )
 2110                           //      Fill an area of memory beginning at addr with blanks (0x20).
 2111                           
 2112                            SECTION .text : CONST (2)
 2113                           BLANKS_NFA:
 2114    00000000 86                    DC8     0x86
 2115    00000001 424C414E4B            DC8     'BLANK'
 2116    00000006 D3                    DC8     'S'+0x80
 2117    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2118    00000008 ........              DC32    ERASE_NFA
 2119                           BLANKS:
 2120    0000000C ........              DC32    DOCOL
 2121    00000010 ........              DC32    BLANK
 2122    00000014 ........              DC32    FILL
 2123    00000018 ........              DC32    SEMIS
 2124                           
 2125                           
 2126                           //      +! PSTORE:      ( n addr -- )
 2127                           //      Add n to the value at the address.
 2128                           //      Pronounced Plus Store
 2129                           
 2130                            SECTION .text : CONST (2)
 2131                           PSTORE_NFA:
 2132    00000000 82                    DC8     0x82
 2133    00000001 2B                    DC8     '+'
 2134    00000002 A1                    DC8     '!'+0x80
 2135    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2136    00000004 ........              DC32    BLANKS_NFA
 2137                           PSTORE:
 2138    00000008 ........              DC32    .+5
 2139                            SECTION .text : CODE (2)
 2140                                   POP2n                   // ADDRESS
 2140.1  00000000 3968                  LDR     n, [p]
 2140.2  00000002 3F1D                  ADDS    p, p, #4
 2140.3                                 ENDM
 2141                           #ifdef TOSCT
 2143                           #endif
 2144                                   POP2t                   // INCREMENT
 2144.1                         #ifndef TOSCT
 2144.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 2144.3                         #endif
 2144.4  00000006 3F1D                  ADDS    p, p, #4
 2144.5                                 ENDM
 2145    00000008 0A68                  LDR     w, [n]
 2146    0000000A 8018                  ADDS    t, t, w
 2147    0000000C 0860                  STR     t, [n]
 2148                                   NEXT
 2148.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2148                                   NEXT1
 2148.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2148.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2148.3                                 ENDM
 2148.4                                 ENDM
 2149                           
 2150                           
 2151                           //      @ AT:   ( addr -- n )
 2152                           //      Read 32 bit contents of address to TOS.
 2153                           //      Pronounced Fetch, as in Fetch word at addr.
 2154                           
 2155                            SECTION .text : CONST (2)
 2156                           AT_NFA:
 2157    00000000 81                    DC8     0x81
 2158    00000001 C0                    DC8     '@'+0x80 //C0H
 2159    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2160                           //      DC32    TOGGLE_NFA
 2161    00000004 ........              DC32    PSTORE_NFA
 2162                           AT:
 2163    00000008 ........              DC32    .+5
 2164                            SECTION .text : CODE (2)
 2165                           //#ifdef TOSCT
 2166                           //        LDR     t, [t]
 2167                           //        STR     t, [p]
 2168                           //        NEXT
 2169                           //#else AT:
 2170                                   POP2n
 2170.1  00000000 3968                  LDR     n, [p]
 2170.2  00000002 3F1D                  ADDS    p, p, #4
 2170.3                                 ENDM
 2171    00000004 0868                  LDR     t, [n]
 2172                                   TPUSH
 2172                                   PUSHt   // push t to p, pre decrement p
 2172.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 2172.2  00000008 3860                  STR     t, [p]
 2172.3                                 ENDM
 2172                                   NEXT
 2172.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2172                                   NEXT1
 2172.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2172.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2172.3                                 ENDM
 2172.4                                 ENDM
 2172.5                                 ENDM
 2173                           //#endif
 2174                                   
 2175                           //      C@ CAT: ( addr -- b )
 2176                           //      Leave the 8 bit contents of addr on the stack.
 2177                           //      Pronounced "Char Fetch", as in Fetch byte at addr.
 2178                           
 2179                            SECTION .text : CONST (2)
 2180                           CAT_NFA:
 2181    00000000 82                    DC8     0x82
 2182    00000001 43                    DC8     'C'
 2183    00000002 C0                    DC8     '@'+0x80 //C0H
 2184    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2185    00000004 ........              DC32    AT_NFA
 2186                           CAT:
 2187    00000008 ........              DC32    .+5
 2188                            SECTION .text : CODE (2)
 2189                                   POP2n
 2189.1  00000000 3968                  LDR     n, [p]
 2189.2  00000002 3F1D                  ADDS    p, p, #4
 2189.3                                 ENDM
 2190    00000004 0878                  LDRB    t, [n]
 2191                                   TPUSH
 2191                                   PUSHt   // push t to p, pre decrement p
 2191.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 2191.2  00000008 3860                  STR     t, [p]
 2191.3                                 ENDM
 2191                                   NEXT
 2191.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2191                                   NEXT1
 2191.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2191.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2191.3                                 ENDM
 2191.4                                 ENDM
 2191.5                                 ENDM
 2192                           
 2193                           
 2194                           //      ! STORE:        ( n addr -- )
 2195                           //      Store n at address. Pronounced "Store".
 2196                           
 2197                            SECTION .text : CONST (2)
 2198                           STORE_NFA:
 2199    00000000 81                    DC8     0x81
 2200    00000001 A1                    DC8     '!'+0x80
 2201    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2202    00000004 ........              DC32    CAT_NFA
 2203                           STORE:
 2204    00000008 ........              DC32    .+5
 2205                            SECTION .text : CODE (2)
 2206                                   POP2t           // ADDR
 2206.1                         #ifndef TOSCT
 2206.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 2206.3                         #endif
 2206.4  00000002 3F1D                  ADDS    p, p, #4
 2206.5                                 ENDM
 2207                                   POP2n           // DATA
 2207.1  00000004 3968                  LDR     n, [p]
 2207.2  00000006 3F1D                  ADDS    p, p, #4
 2207.3                                 ENDM
 2208    00000008 0160                  STR     n, [t]
 2209                                   NEXT
 2209.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2209                                   NEXT1
 2209.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2209.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2209.3                                 ENDM
 2209.4                                 ENDM
 2210                           
 2211                           
 2212                           //      C! CSTORE:      ( n addr -- )
 2213                           //      Store LS 8 bits of n at address. Pronounced "Char Store".
 2214                           
 2215                            SECTION .text : CONST (2)
 2216                           CSTORE_NFA:
 2217    00000000 82                    DC8     0x82
 2218    00000001 43                    DC8     'C'
 2219    00000002 A1                    DC8     '!'+0x80
 2220    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2221    00000004 ........              DC32    STORE_NFA
 2222                           CSTORE:
 2223    00000008 ........              DC32    .+5
 2224                            SECTION .text : CODE (2)
 2225                                   POP2t
 2225.1                         #ifndef TOSCT
 2225.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 2225.3                         #endif
 2225.4  00000002 3F1D                  ADDS    p, p, #4
 2225.5                                 ENDM
 2226                                   POP2n
 2226.1  00000004 3968                  LDR     n, [p]
 2226.2  00000006 3F1D                  ADDS    p, p, #4
 2226.3                                 ENDM
 2227    00000008 0170                  STRB    n, [t]
 2228                                   NEXT
 2228.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 2228                                   NEXT1
 2228.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 2228.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 2228.3                                 ENDM
 2228.4                                 ENDM
 2229                           
 2230                           
 2231                           //=============================== WORDCAT ====================================//
 2232                           //NOEXEC HEADERFORWORDCATEGORIES
 2233                           //      WC_RWMEMORY_NFA = Read and Write Memory With: CATEGORY
 2234                           
 2235                            SECTION .text : CONST (2)
 2236                           WC_RWMEMORY_NFA:
 2237    00000000 9F                    DC8     0x80+31
 2238    00000001 0D0A                  DC8     0x0D, 0x0A
 2239    00000003 5265616420616         DC8     'Read and Write Memory With:'
                  E642057726974
                  65204D656D6F7
                  2792057697468
                  3A           
 2240    0000001E 0D8A                  DC8     0x0D, 0x0A+0x80
 2241                            ALIGNROM 2,0xFFFFFFFF
 2242    00000020 ........              DC32    CSTORE_NFA
 2243                           
 2244                           
 2245                           //      ] RBRAC:        ( -- )
 2246                           //      Resume compilation, by STATE back to 0xC0 (zero is interpreting)
 2247                           //      0xC0 STATE  used in INTERPRET to execute Immediate words while compiling
 2248                           //      See [.
 2249                           
 2250                            SECTION .text : CONST (2)
 2251                           RBRAC_NFA:
 2252    00000000 81                    DC8     0x81
 2253    00000001 DD                    DC8     ']'+0x80
 2254    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2255                           //      DC32    SMUDGE_NFA
 2256    00000004 ........              DC32    WC_RWMEMORY_NFA
 2257                           RBRAC:
 2258    00000008 ........              DC32    DOCOL
 2259    0000000C ........C0000         DC32    STRVA, 0xC0, CSTATE
                  000........  
 2260    00000018 ........              DC32    SEMIS
 2261                           
 2262                           
 2263                           //      [ LBRAC:        ( -- ) IMMEDIATE
 2264                           //      Used in a colon-definition in form
 2265                           //              xxx    [  words   ]    more
 2266                           //      Suspend compilation by setting STATE to zero (0xC0 is compiling).
 2267                           //      The words after [ are executed, not compiled. This allows calculation
 2268                           //      or compilation exceptions before resuming compilation with ] .
 2269                           //      See LITERAL and ]
 2270                           
 2271                            SECTION .text : CONST (2)
 2272                           LBRAC_NFA:
 2273    00000000 C1                    DC8     0x0C1
 2274    00000001 DB                    DC8     '['+0x80
 2275    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2276    00000004 ........              DC32    RBRAC_NFA
 2277                           LBRAC:
 2278    00000008 ........              DC32    DOCOL
 2279    0000000C ........00000         DC32    STRVA, 0, CSTATE
                  000........  
 2280    00000018 ........              DC32    SEMIS
 2281                           
 2282                           
 2283                           //      [COMPILE] BCOMP:        ( -- ) IMMEDIATE
 2284                           //      Used in a colon-definition in form:
 2285                           //              :  xxx    [COMPILE]   immediate_word   ;
 2286                           //      [COMPILE] will force the compilation of an IMMEDIATE WORD
 2287                           //      that would otherwise execute during compilation. The above example
 2288                           //      will select the FORTH vocabulary then xxx executes, rather than at
 2289                           //      compile time.
 2290                           
 2291                            SECTION .text : CONST (2)
 2292                           BCOMP_NFA:
 2293    00000000 C9                    DC8     0x0C9
 2294    00000001 5B434F4D50494         DC8     '[COMPILE'
                  C45          
 2295    00000009 DD                    DC8     ']'+0x80
 2296    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 2297    0000000C ........              DC32    LBRAC_NFA
 2298                           BCOMP:
 2299    00000010 ........              DC32    DOCOL
 2300    00000014 ........              DC32    DFIND   // noop there for TIB entry
 2301                           //      -FIND ( --- pfa len tf )(found) ( --- ff ) (not found)
 2302    00000018 ........              DC32    ZEQU
 2303    0000001C .............         DC32    LIT, msg_qstack
                  ...          
 2304    00000024 ........              DC32    QERROR    // ( f nullstr-addr -- )
 2305    00000028 ........              DC32    DROP
 2306    0000002C ........              DC32    CFA
 2307    00000030 ........              DC32    COMMA   // alighned, INCREMENTS DP REFLECTED by HERE
 2308    00000034 ........              DC32    SEMIS
 2309                           
 2310                           
 2311                           //      DLITERAL DLITERAL:      ( d -- d ) IMMEDIATE
 2312                           //                              ( d -- )   (compiling)
 2313                           //      If compiling, compile a stack double number into a literal. Later
 2314                           //      execution of the definition containing the literal will push it to
 2315                           //      the stack. If executing, the number will remain on the stack.
 2316                           //      : xxx    [ calculate ]  DLITERAL  ; //
 2317                           
 2318                            SECTION .text : CONST (2)
 2319                           DLITERAL_NFA:
 2320    00000000 C8                    DC8     0x0C8
 2321    00000001 444C495445524         DC8     'DLITERA'
                  1            
 2322    00000008 CC                    DC8     'L'+0x80
 2323    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2324    0000000C ........              DC32    BCOMP_NFA
 2325                           DLITERAL:
 2326    00000010 ........              DC32    DOCOL
 2327    00000014 ........              DC32    STATE_SV
 2328    00000018 ........              DC32    AT
 2329    0000001C ........              DC32    ZBRAN   // IF
 2330    00000020 10000000              DC32     DLIT1-.
 2331                           
 2332    00000024 ........              DC32    SWAP
 2333    00000028 ........              DC32    LITERAL
 2334    0000002C ........              DC32    LITERAL // endif
 2335                           DLIT1:
 2336    00000030 ........              DC32    SEMIS
 2337                           
 2338                           
 2339                           //      LITERAL LITERAL:        ( n -- ) IMMEDIATE
 2340                           //      If compiling, then compile the stack value n as a 32 bit literal.
 2341                           //      This definition is immediate so that it will execute during a colon
 2342                           //      definition. The intended use is:
 2343                           //      : xxx    [ calculate ]  LITERAL  ; //
 2344                           //      Compilation is suspended for the compile time calculation of value.
 2345                           //      Compilation is resumed and LITERAL compiles this value.
 2346                           
 2347                            SECTION .text : CONST (2)
 2348                           LITERAL_NFA:
 2349    00000000 C7                    DC8     0x0C7
 2350    00000001 4C4954455241          DC8     'LITERA'
 2351    00000007 CC                    DC8     'L'+0x80
 2352                            ALIGNROM 2,0xFFFFFFFF
 2353    00000008 ........              DC32    DLITERAL_NFA
 2354                           LITERAL:
 2355    0000000C ........              DC32    DOCOL
 2356    00000010 ........              DC32    STATE_SV
 2357    00000014 ........              DC32    AT
 2358    00000018 ........              DC32    ZBRAN           // If not compiling
 2359    0000001C 10000000              DC32     LITE1-.        // go here
 2360                           
 2361    00000020 ........              DC32    COMP            // Compile
 2362    00000024 ........              DC32    LIT             // Literal
 2363    00000028 ........              DC32    COMMA           // Then COMPILE THE LITERAL VALUE
 2364                           LITE1:
 2365    0000002C ........              DC32    SEMIS
 2366                           
 2367                           
 2368                           //      #> EDIGS:       ( d=(LSW MSW) -- addr count )
 2369                           //      Terminates numeric output conversion by dropping dnum,
 2370                           //      leaving the text address and character count suitable for type.
 2371                           
 2372                            SECTION .text : CONST (2)
 2373                           EDIGS_NFA:
 2374    00000000 82                    DC8     0x82
 2375    00000001 23                    DC8     '#'
 2376    00000002 BE                    DC8     '>'+0x80
 2377    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2378    00000004 ........              DC32    LITERAL_NFA
 2379                           EDIGS:
 2380    00000008 ........              DC32    DOCOL
 2381    0000000C ........              DC32    DROP
 2382    00000010 ........              DC32    DROP
 2383    00000014 ........              DC32    HLD_SV
 2384    00000018 ........              DC32    AT
 2385    0000001C ........              DC32    PAD_SV
 2386    00000020 ........              DC32    OVER
 2387    00000024 ........              DC32    SUBB
 2388    00000028 ........              DC32    SEMIS
 2389                           
 2390                           
 2391                           //      HOLD HOLD:      ( c -- )
 2392                           //      Used between <# and #> to insert an ascii character into a pictured
 2393                           //      numeric output string.
 2394                           //      e.g. 0x2E HOLD will place a decimal point.
 2395                           
 2396                            SECTION .text : CONST (2)
 2397                           HOLD_NFA:
 2398    00000000 84                    DC8     0x84
 2399    00000001 484F4C                DC8     'HOL'
 2400    00000004 C4                    DC8     'D'+0x80
 2401    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2402    00000008 ........              DC32    EDIGS_NFA
 2403                           HOLD:
 2404    0000000C ........              DC32    DOCOL
 2405    00000010 ........FFFFF         DC32    LIT,-1
                  FFF          
 2406    00000018 ........              DC32    HLD_SV
 2407    0000001C ........              DC32    PSTORE
 2408    00000020 ........              DC32    HLD_SV
 2409    00000024 ........              DC32    AT
 2410    00000028 ........              DC32    CSTORE
 2411    0000002C ........              DC32    SEMIS
 2412                           
 2413                           
 2414                           //      SIGN SIGN:      ( n d=<LSW MSW> -- d=<LSW MSW> )
 2415                           //      Place an ascii "-" sign just before a converted numeric output
 2416                           //      string in the text output buffer when n is negative. n is discarded
 2417                           //      but double number dnum is maintained. Must be used between <# and #>.
 2418                           
 2419                            SECTION .text : CONST (2)
 2420                           SIGN_NFA:
 2421    00000000 84                    DC8     0x84
 2422    00000001 534947                DC8     'SIG'
 2423    00000004 CE                    DC8     'N'+0x80
 2424    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2425    00000008 ........              DC32    HOLD_NFA
 2426                           SIGN:
 2427    0000000C ........              DC32    DOCOL
 2428    00000010 ........              DC32    ROT
 2429    00000014 ........              DC32    ZLESS
 2430    00000018 ........              DC32    ZBRAN           // If
 2431    0000001C 10000000              DC32     SIGN1-.
 2432                           
 2433    00000020 ........2D000         DC32    LIT, '-'        // 0x2D
                  000          
 2434    00000028 ........              DC32    HOLD            // Endif
 2435                           SIGN1:
 2436    0000002C ........              DC32    SEMIS
 2437                           
 2438                           
 2439                           //      #S DIGS:        ( d1=<LSW MSW> -- d2=<LSW MSW> )
 2440                           //      Generates ascii text in the text output buffer, by the use of #,
 2441                           //      until a zero double number d2 results.
 2442                           //      Used between <# and #>.
 2443                           //      EACH NUMBER = BASE*number+(character-'0')
 2444                           
 2445                            SECTION .text : CONST (2)
 2446                           DIGS_NFA:
 2447    00000000 82                    DC8     0x82
 2448    00000001 23                    DC8     '#'
 2449    00000002 D3                    DC8     'S'+0x80
 2450    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2451    00000004 ........              DC32    SIGN_NFA
 2452                           DIGS:
 2453    00000008 ........              DC32    DOCOL
 2454                           DIGS1:                          // Begin generating ascii chars by DIG
 2455    0000000C ........              DC32    DIG             //( d1=<LSW MSW> -- d2=QUO=<LSW MSW> )
 2456    00000010 ........              DC32    OVER
 2457    00000014 ........              DC32    OVER
 2458    00000018 ........              DC32    OR
 2459    0000001C ........              DC32    ZEQU
 2460    00000020 ........              DC32    ZBRAN           //UNTIL
 2461    00000024 E8FFFFFF              DC32     DIGS1-.
 2462    00000028 ........              DC32    SEMIS
 2463                           
 2464                           
 2465                           //      # DIG:  ( d1=<LSW MSW> -- d2=QUO=<LSW MSW> ) BASE MUST BE SET!
 2466                           //      Generate from a double number d1, the next ascii character which is
 2467                           //      placed in an output string. Result d2 is the quotient after division
 2468                           //      by base, and is maintained for further processing.
 2469                           //      Used between <# and #>.
 2470                           //      See #S.
 2471                           //      EACH NUMBER = BASE*number+(character-'0')
 2472                           
 2473                            SECTION .text : CONST (2)
 2474                           DIG_NFA:
 2475    00000000 81                    DC8     0x81
 2476    00000001 A3                    DC8     '#'+0x80
 2477    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2478    00000004 ........              DC32    DIGS_NFA
 2479                           DIG:
 2480    00000008 ........              DC32    DOCOL
 2481    0000000C ........              DC32    BASE_SV         // EX 0 1 0
 2482    00000010 ........              DC32    AT              // -- 0 1 0 A
 2483    00000014 ........              DC32    MSMOD           // -- 0 1 0 0
 2484    00000018 ........              DC32    ROT             // -- 0 0 0 1
 2485    0000001C ........09000         DC32    LIT,9
                  000          
 2486    00000024 ........              DC32    OVER
 2487    00000028 ........              DC32    LESSTHAN
 2488    0000002C ........              DC32    ZBRAN           // If
 2489    00000030 10000000              DC32     DIG1-.
 2490                           
 2491    00000034 ........07000         DC32    LIT,7
                  000          
 2492    0000003C ........              DC32    PLUS            // Endif
 2493                           DIG1:
 2494    00000040 ........30000         DC32    LIT, 0x30
                  000          
 2495    00000048 ........              DC32    PLUS
 2496    0000004C ........              DC32    HOLD
 2497    00000050 ........              DC32    SEMIS
 2498                           
 2499                           
 2500                           //      <# BDIGS:       ( -- )
 2501                           //      Setup for pictured numeric output formatting using the words:
 2502                           //              <# # #S SIGN HOLD #>
 2503                           //      The conversion is done on a double number producing text at Pad
 2504                           
 2505                            SECTION .text : CONST (2)
 2506                           BDIGS_NFA:
 2507    00000000 82                    DC8     0x82
 2508    00000001 3C                    DC8     '<'
 2509    00000002 A3                    DC8     '#'+0x80
 2510    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2511    00000004 ........              DC32    DIG_NFA
 2512                           BDIGS:
 2513    00000008 ........              DC32    DOCOL
 2514    0000000C .............         DC32    STRVA, PAD, NHLD
                  ...........  
 2515    00000018 ........              DC32    SEMIS
 2516                           
 2517                           
 2518                           //      DOES> DOES:     ( pfa -- ) MODIFIED:
 2519                           //      A word which defines the run-time action within a high-level
 2520                           //      defining word. DOES> alters the code field and first parameter of
 2521                           //      the new word to execute the sequence of compiled word addresses
 2522                           //      following DOES>. Used in combination with <BUILDS. When the DOES>
 2523                           //      part executes it begins with the address of the first parameter of
 2524                           //      the new word on the stack. This allows interpretation using this
 2525                           //      area or its contents. Typical uses include the Forth assembler,
 2526                           //      multidimensional arrays, and compiler generation.
 2527                           
 2528                            SECTION .text : CONST (2)
 2529                           DOES_NFA:
 2530    00000000 85                    DC8     0x85
 2531    00000001 444F4553              DC8     'DOES'
 2532    00000005 BE                    DC8     '>'+0x80
 2533    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2534    00000008 ........              DC32    BDIGS_NFA
 2535                           DOES:
 2536    0000000C ........              DC32    DOCOL
 2537    00000010 ........              DC32    RFROM   // Get the addr of the first word after DOES>
 2538    00000014 ........              DC32    LATEST  // ( -- addr ) nfa OF the current <creator> word
 2539    00000018 ........              DC32    PFA     // Use the pfa to store a run-time cfa
 2540    0000001C .............         DC32    DUP, CFA
                  ...          
 2541    00000024 .............         DC32    LIT, CREATE_DOES_GOTO
                  ...          
 2542    0000002C .............         DC32    SWAP, STORE     // STORE GOTO
                  ...          
 2543    00000034 ........              DC32    STORE   // Store the run-time cfa as 1rst pfa Parameter.
 2544    00000038 ........              DC32    SEMIS
 2545                           
 2546                           
 2547                           //      <BUILDS BUILDS: ( -- )  MODIFIED: See CREATE and DOES>
 2548                           //      Used within a colon-definition
 2549                           //              CCcc  <BUILDS  ...  DOES>     ...
 2550                           //      Each time CCcc is executed, <BUILDS defines a new word with a
 2551                           //      high-level execution proceedure. Executing CCcc in the form
 2552                           //              CCcc nnnn
 2553                           //      uses <BUILDS to create a dictionary entry for nnnn with a call to
 2554                           //      the DOES> part for nnnn. When nnnn is later executed, it has the
 2555                           //      address of its parameter area on the stack and executes the words
 2556                           //      after DOES> in CCcc. <BUILDS and DOES> allow runtime proceedures to
 2557                           //      written in high-level code.
 2558                           
 2559                            SECTION .text : CONST (2)
 2560                           BUILDS_NFA:
 2561    00000000 87                    DC8     0x87
 2562    00000001 3C4255494C44          DC8     '<BUILD'
 2563    00000007 D3                    DC8     'S'+0x80
 2564                            ALIGNROM 2,0xFFFFFFFF
 2565    00000008 ........              DC32    DOES_NFA
 2566                           BUILDS:
 2567    0000000C ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 2568    00000010 ........              DC32    CREATE                  // CREATE's A CON POINTING TO IT'S PFA
 2569    00000014 ........              DC32    SEMIS
 2570                           
 2571                           
 2572                           //      +LOOP PLOOP:    ( n1 -- ) IMMEDIATE
 2573                           //                      ( addr n2 -- ) COMPILE
 2574                           //      At run time, DO begins a sequence with repetitive execution
 2575                           //      controlled by a loop limit n1 and an index with initial value n2. DO
 2576                           //      removes these from the stack. Upon reaching LOOP the index is
 2577                           //      incremented by one.
 2578                           //      Until the new index equals or exceeds the limit, execution loops
 2579                           //      back to just after DO// otherwise the loop parameters are discarded
 2580                           //      and execution continues ahead. Both n1 and n2 are determined at
 2581                           //      run-time and may be the result of other operations.
 2582                           //      Within a loop 'I' will copy the current value of the index to the
 2583                           //      stack. See I, LOOP, +LOOP, LEAVE.
 2584                           //
 2585                           //      When compiling within the colon definition, DO compiles (DO), leaves
 2586                           //      the following address addr and n for later error checking.
 2587                           
 2588                            SECTION .text : CONST (2)
 2589                           PLOOP_NFA:
 2590    00000000 C5                    DC8     0x0C5
 2591    00000001 2B4C4F4F              DC8     '+LOO'
 2592    00000005 D0                    DC8     'P'+0x80
 2593    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2594    00000008 ........              DC32    BUILDS_NFA
 2595                           PLOOP:
 2596    0000000C ........              DC32    DOCOL
 2597    00000010 ........              DC32    THREE
 2598    00000014 ........              DC32    QPAIR
 2599    00000018 ........              DC32    COMP
 2600    0000001C ........              DC32    XPLOOP
 2601    00000020 ........              DC32    BACK
 2602    00000024 ........              DC32    SEMIS
 2603                           
 2604                           
 2605                           //      LOOP LOOP:      ( addr n -- ) IMMEDIATE
 2606                           //      Occurs in a colon-definition in form:
 2607                           //              DO ... LOOP
 2608                           //      At run-time, LOOP selectively controls branching back to the
 2609                           //      corresponding DO based on the loop index and limit. The loop index
 2610                           //      is incremented by one and compared to the limit. The branch back to
 2611                           //      DO occurs until the index equals or exceeds the limit, then
 2612                           //      the parameters are discarded and execution continues ahead.
 2613                           //
 2614                           //      At compile-time. LOOP compiles (LOOP) and uses addr to calculate an
 2615                           //      offset to DO. n is used for error testing.
 2616                           
 2617                            SECTION .text : CONST (2)
 2618                           LOOP_NFA:
 2619    00000000 C4                    DC8     0x0C4
 2620    00000001 4C4F4F                DC8     'LOO'
 2621    00000004 D0                    DC8     'P'+0x80
 2622    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2623    00000008 ........              DC32    PLOOP_NFA
 2624                           LOOP:
 2625    0000000C ........              DC32    DOCOL
 2626    00000010 ........              DC32    THREE
 2627    00000014 ........              DC32    QPAIR
 2628    00000018 ........              DC32    COMP
 2629    0000001C ........              DC32    XLOOP
 2630    00000020 ........              DC32    BACK
 2631    00000024 ........              DC32    SEMIS
 2632                           
 2633                           
 2634                           //      DO DO:  ( n1 n2 -- ) IMMEDIATE
 2635                           //              (addr n -- ) COMPILE
 2636                           //      Occurs in a colon-definition in form:
 2637                           //      DO ... LOOP
 2638                           
 2639                            SECTION .text : CONST (2)
 2640                           DO_NFA:
 2641    00000000 C2                    DC8     0x0C2
 2642    00000001 44                    DC8     'D'
 2643    00000002 CF                    DC8     'O'+0x80
 2644    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2645    00000004 ........              DC32    LOOP_NFA
 2646                           DO:
 2647    00000008 ........              DC32    DOCOL
 2648    0000000C ........              DC32    COMP
 2649    00000010 ........              DC32    XDO
 2650    00000014 ........              DC32    HERE
 2651    00000018 ........              DC32    THREE
 2652    0000001C ........              DC32    SEMIS
 2653                           
 2654                           
 2655                           //      ENDIF ENDIF:    ( addr n -- ) IMMEDIATE
 2656                           //      Occurs in a colon-definition in form:
 2657                           //              IF ... ENDIF
 2658                           //              IF ... ELSE ... ENDIF
 2659                           //      At run-time, ENDIF serves only as the destination of a forward
 2660                           //      branch from IF or ELSE. It marks the conclusion of the conditional
 2661                           //      structure. THEN is another name for ENDIF. Both names are supported
 2662                           //      in fig-FORTH. See also IF and ELSE.
 2663                           //
 2664                           //      At compile-time, ENDIF computes the forward branch offset from addr
 2665                           //      to HERE and stores it at addr. n is used for error tests.
 2666                           
 2667                            SECTION .text : CONST (2)
 2668                           ENDIF_NFA:
 2669    00000000 C5                    DC8     0x0C5
 2670    00000001 454E4449              DC8     'ENDI'
 2671    00000005 C6                    DC8     'F'+0x80
 2672    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2673    00000008 ........              DC32    DO_NFA
 2674                           ENDIF:
 2675    0000000C ........              DC32    DOCOL
 2676    00000010 ........              DC32    QCOMP
 2677    00000014 ........              DC32    TWO     // 2 is the Error checking number for if.
 2678    00000018 ........              DC32    QPAIR
 2679    0000001C ........              DC32    HERE
 2680    00000020 ........              DC32    OVER
 2681    00000024 ........              DC32    SUBB
 2682    00000028 ........              DC32    SWAP
 2683    0000002C ........              DC32    STORE
 2684    00000030 ........              DC32    SEMIS
 2685                           
 2686                           
 2687                           //      THEN THEN:      ( -- ) IMMEDIATE
 2688                           //      An alias for ENDIF.
 2689                           
 2690                            SECTION .text : CONST (2)
 2691                           THEN_NFA:
 2692    00000000 C4                    DC8     0x0C4
 2693    00000001 544845                DC8     'THE'
 2694    00000004 CE                    DC8     'N'+0x80
 2695    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2696    00000008 ........              DC32    ENDIF_NFA
 2697                           THEN:
 2698    0000000C ........              DC32    DOCOL
 2699    00000010 ........              DC32    ENDIF
 2700    00000014 ........              DC32    SEMIS
 2701                           
 2702                           
 2703                           //      ELSE ELSE:      ( addr1 n1 -- ) IMMEDIATE
 2704                           //                      ( addr2 n2 -- ) COMPILING
 2705                           //      Occurs within a colon-definition in the form:
 2706                           //              IF ... ELSE ... ENDIF
 2707                           //      At run-time, ELSE executes after the true part following IF. ELSE
 2708                           //      forces execution to skip over the following false part and resumes
 2709                           //      execution after the ENDIF. It has no stack effect.
 2710                           //
 2711                           //      At compile-time ELSE emplaces BRANCH reserving a branch offset,
 2712                           //      leaves the address addr2 and n2 for error testing. ELSE also
 2713                           //      resolves the pending forward branch from IF by calculating the
 2714                           //      offset from addr1 to HERE and storing at addr1.
 2715                           
 2716                            SECTION .text : CONST (2)
 2717                           ELSE_NFA:
 2718    00000000 C4                    DC8     0x0C4
 2719    00000001 454C53                DC8     'ELS'
 2720    00000004 C5                    DC8     'E'+0x80
 2721    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2722    00000008 ........              DC32    THEN_NFA
 2723                           ELSE:
 2724    0000000C ........              DC32    DOCOL
 2725    00000010 ........              DC32    TWO
 2726    00000014 ........              DC32    QPAIR
 2727    00000018 ........              DC32    COMP
 2728    0000001C ........              DC32    BRAN
 2729    00000020 ........              DC32    HERE
 2730    00000024 ........              DC32    ZERO
 2731    00000028 ........              DC32    COMMA   // aligned, INCREMENTS DP REFLECTED by HERE
 2732    0000002C ........              DC32    SWAP
 2733    00000030 ........              DC32    TWO
 2734    00000034 ........              DC32    ENDIF
 2735    00000038 ........              DC32    TWO
 2736    0000003C ........              DC32    SEMIS
 2737                           
 2738                           
 2739                           //      IF IF:  ( f -- ) IMMEDIATE
 2740                           //              ( -- addr n ) COMPILE
 2741                           //      Occurs is a colon-definition in form:
 2742                           //              IF (tp) ...  ENDIF      .
 2743                           //              IF (tp) ... ELSE (fp) ... ENDIF
 2744                           //      At run-time, IF selects execution based on a boolean flag. If f is
 2745                           //      true (non-zero), execution continues ahead thru the true part. If f
 2746                           //      is false (zero), execution skips till just after ELSE to execute
 2747                           //      the false part. After either part, execution resumes after ENDIF.
 2748                           //      ELSE and its false part are optional.; if missing, false execution
 2749                           //      skips to just after ENDIF..
 2750                           //
 2751                           //      At compile-time IF compiles 0BRANCH and reserves space for an offset
 2752                           //      at addr. addr and n are used later for resolution of the offset and
 2753                           //      error testing.
 2754                           
 2755                            SECTION .text : CONST (2)
 2756                           IF_NFA:
 2757    00000000 C2                    DC8     0x0C2
 2758    00000001 49                    DC8     'I'
 2759    00000002 C6                    DC8     'F'+0x80
 2760    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2761    00000004 ........              DC32    ELSE_NFA
 2762                           IF:
 2763    00000008 ........              DC32    DOCOL
 2764    0000000C ........              DC32    COMP
 2765    00000010 ........              DC32    ZBRAN
 2766    00000014 ........              DC32    HERE
 2767    00000018 ........              DC32    ZERO
 2768    0000001C ........              DC32    COMMA
 2769    00000020 ........              DC32    TWO     // 2 is the Error checking number for if.
 2770    00000024 ........              DC32    SEMIS
 2771                           
 2772                           
 2773                           //      UNTIL UNTIL:    ( f -- ) IMMEDIATE
 2774                           //                      ( addr n -- ) COMPILE:
 2775                           //      Occurs within a colon-definition in the form:
 2776                           //              BEGIN ... UNTIL
 2777                           //      At run-time, UNTIL controls the conditional branch back to the
 2778                           //      corresponding BEGIN. If f is false, execution returns to just after.
 2779                           //      BEGIN:  if true, execution continues ahead.
 2780                           //      At compile-time, UNTIL compiles (0BRANCH) and an offset from HERE to
 2781                           //      addr. n is used for error tests.
 2782                           
 2783                            SECTION .text : CONST (2)
 2784                           UNTIL_NFA:
 2785    00000000 C5                    DC8     0x0C5
 2786    00000001 554E5449              DC8     'UNTI'
 2787    00000005 CC                    DC8     'L'+0x80
 2788    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2789    00000008 ........              DC32    IF_NFA
 2790                           UNTIL:
 2791    0000000C ........              DC32    DOCOL
 2792    00000010 ........              DC32    ONE
 2793    00000014 ........              DC32    QPAIR
 2794    00000018 ........              DC32    COMP
 2795    0000001C ........              DC32    ZBRAN
 2796    00000020 ........              DC32    BACK
 2797    00000024 ........              DC32    SEMIS
 2798                           
 2799                           
 2800                           //      AGAIN AGAIN:    ( addr n -- ) IMMEDIATE
 2801                           //      Used in a colon-definition in the form:
 2802                           //                      BEGIN ... AGAIN
 2803                           //      At run-time, AGAIN forces execution to return to corresponding BEGIN.
 2804                           //      There is no effect on the stack. Execution cannot leave this loop
 2805                           //      (unless R> DROP is executed one level below).
 2806                           //
 2807                           //      At compile time, AGAIN compiles BRANCH with an offset from HERE to
 2808                           //      addr. n is used for compile-time error checking.
 2809                           
 2810                            SECTION .text : CONST (2)
 2811                           AGAIN_NFA:
 2812    00000000 C5                    DC8     0x0C5
 2813    00000001 41474149              DC8     'AGAI'
 2814    00000005 CE                    DC8     'N'+0x80
 2815    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2816    00000008 ........              DC32    UNTIL_NFA
 2817                           AGAIN:
 2818    0000000C ........              DC32    DOCOL
 2819    00000010 ........              DC32    ONE
 2820    00000014 ........              DC32    QPAIR
 2821    00000018 ........              DC32    COMP
 2822    0000001C ........              DC32    BRAN
 2823    00000020 ........              DC32    BACK
 2824    00000024 ........              DC32    SEMIS
 2825                           
 2826                           
 2827                           //      REPEAT REPEAT:  ( addr n -- ) IMMEDIATE
 2828                           //      Used within a colon-definition in the form:
 2829                           //              BEGIN ... WHILE ... REPEAT
 2830                           //      At run-time, REPEAT forces an unconditional branch back to just
 2831                           //      after the corresponding BEGIN.
 2832                           //
 2833                           //      At compile-time, REPEAT compiles BRANCH and the offset from HERE to
 2834                           //      addr. n is used for error testing.
 2835                           
 2836                            SECTION .text : CONST (2)
 2837                           REPEAT_NFA:
 2838    00000000 C6                    DC8     0x0C6
 2839    00000001 5245504541            DC8     'REPEA'
 2840    00000006 D4                    DC8     'T'+0x80
 2841    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2842    00000008 ........              DC32    AGAIN_NFA
 2843                           REPEAT:
 2844    0000000C ........              DC32    DOCOL
 2845    00000010 ........              DC32    TOR
 2846    00000014 ........              DC32    TOR
 2847    00000018 ........              DC32    AGAIN
 2848    0000001C ........              DC32    RFROM
 2849    00000020 ........              DC32    RFROM
 2850    00000024 ........              DC32    TWO
 2851    00000028 ........              DC32    SUBB
 2852    0000002C ........              DC32    ENDIF
 2853    00000030 ........              DC32    SEMIS
 2854                           
 2855                           
 2856                           //      WHILE WHILE:    ( f -- ) IMMEDIATE
 2857                           //                      (ad1 nl -- ad1 n1 ad2 n2 ) COMPILE
 2858                           //      Occurs in a colon-definition in the form:
 2859                           //              BEGIN ... WHILE (tp) ... REPEAT
 2860                           //      At run-time, WHILE selects conditional execution based on boolean
 2861                           //      flag f. If f is true (non-zero), WHILE continues execution of the
 2862                           //      true part thru to REPEAT, which then branches back to BEGIN. If f is
 2863                           //      false (zero), execution skips to just after REPEAT, exiting the
 2864                           //      structure.
 2865                           //
 2866                           //      At compile time, WHILE emplaces (0BRANCH) and leaves ad2 of the
 2867                           //      reserved offset. The stack values will be resolved by REPEAT.
 2868                           
 2869                            SECTION .text : CONST (2)
 2870                           WHILE_NFA:
 2871    00000000 C5                    DC8     0x0C5
 2872    00000001 5748494C              DC8     'WHIL'
 2873    00000005 C5                    DC8     'E'+0x80
 2874    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2875    00000008 ........              DC32    REPEAT_NFA
 2876                           WHILE:
 2877    0000000C ........              DC32    DOCOL
 2878    00000010 ........              DC32    IF
 2879    00000014 ........              DC32    TWOP
 2880    00000018 ........              DC32    SEMIS
 2881                           
 2882                           
 2883                           //      BEGIN BEGIN:    ( -- addr n ) IMMEDIATE
 2884                           //      Occurs in a colon-definition in form:
 2885                           //      BEGIN ... UNTIL
 2886                           //      BEGIN ... AGAIN
 2887                           //      BEGIN ... WHILE ... REPEAT
 2888                           //      At run-time, BEGIN marks the start of a sequence that may be
 2889                           //      repetitively executed. It serves as a return point from the
 2890                           //      corresponding UNTIL, AGAIN or REPEAT. When executing UNTIL, a return
 2891                           //      to BEGIN will occur if the top of the stack is false//
 2892                           //      for AGAIN and REPEAT a return to BEGIN always occurs.
 2893                           //
 2894                           //      At compile time BEGIN leaves its return address and n for compiler
 2895                           //      error checking.
 2896                           
 2897                            SECTION .text : CONST (2)
 2898                           BEGIN_NFA:
 2899    00000000 C5                    DC8     0x0C5
 2900    00000001 42454749              DC8     'BEGI'
 2901    00000005 CE                    DC8     'N'+0x80
 2902    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2903    00000008 ........              DC32    WHILE_NFA
 2904                           BEGIN:
 2905    0000000C ........              DC32    DOCOL
 2906    00000010 ........              DC32    QCOMP
 2907    00000014 ........              DC32    HERE
 2908    00000018 ........              DC32    ONE
 2909    0000001C ........              DC32    SEMIS
 2910                           
 2911                           
 2912                           //=============================== WORDCAT ====================================//
 2913                           //NOEXEC HEADERFORWORDCATEGORIES
 2914                           //      WC_COMPILE_NFA = Inside Colon WORDS: CATEGORY
 2915                           
 2916                            SECTION .text : CONST (2)
 2917                           WC_COMPILE_NFA:
 2918    00000000 97                    DC8     0x80+4+19
 2919    00000001 0D0A                  DC8     0x0D, 0x0A
 2920    00000003 496E736964652         DC8     'Inside Colon WORDS:'
                  0436F6C6F6E20
                  574F5244533A 
 2921    00000016 0D8A                  DC8     0x0D, 0x0A+0x80
 2922                            ALIGNROM 2,0xFFFFFFFF
 2923    00000018 ........              DC32    BEGIN_NFA
 2924                           
 2925                           
 2926                           //      IMMEDIATE IMMED:        ( -- )
 2927                           //      Mark the most recently made definition so that when encountered at
 2928                           //      compile time, it will be executed rather than being compiled. i.e.
 2929                           //      the precedence bit in its header is set.
 2930                           //      This method allows definitions to handle unusual compiling
 2931                           //      situations, rather. than build them into the fundamental compiler.
 2932                           //      The system may force compilation of an immediate definition by
 2933                           //      preceeding it with [COMPILE].
 2934                           
 2935                            SECTION .text : CONST (2)
 2936                           IMMED_NFA:
 2937    00000000 89                    DC8     0x89
 2938    00000001 494D4D4544494         DC8     'IMMEDIAT'
                  154          
 2939    00000009 C5                    DC8     'E'+0x80
 2940    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 2941    0000000C ........              DC32    WC_COMPILE_NFA
 2942                           IMMED:
 2943    00000010 ........              DC32    DOCOL
 2944    00000014 ........              DC32    LATEST
 2945    00000018 ........40000         DC32    LIT, 0x40
                  000          
 2946    00000020 ........              DC32    TOGGLE
 2947    00000024 ........              DC32    SEMIS
 2948                           
 2949                           
 2950                           //      CREATE CREATE:  ( -- )
 2951                           //      Create a word in The Dictionary.
 2952                           //      Make searchable and forgetable NFA/LFA, DOCON, ADDR->PFA
 2953                           //      USE <BUILDS with DOES> instead of CREATE.
 2954                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 2955                           //
 2956                           //      Saves HERE in CSDP in case there's an error creating a word.
 2957                           //      CSDP is reset when a word is completed, by ; <BUILDS (?) CON and VAR.
 2958                           //
 2959                           //      A defining word used in the form:
 2960                           //              CREATE CCcc
 2961                           //      by such words as VAR, CON AND <BUILDS to create a dictionary header for
 2962                           //      a new word. The code field contains the address of the words
 2963                           //      parameter field.
 2964                           
 2965                            SECTION .text : CONST (2)
 2966                           CREATE_NFA:
 2967    00000000 86                    DC8     0x86
 2968    00000001 4352454154            DC8     'CREAT'
 2969    00000006 C5                    DC8     'E'+0x80
 2970    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2971    00000008 ........              DC32    IMMED_NFA
 2972                           CREATE:
 2973    0000000C ........              DC32    DOCOL
 2974    00000010 ........              DC32    DICTSPACE       //      ( -- n )
 2975    00000014 ........0F000         DC32    LIT, 15, SUBB   // One less than smallest definition
                  000........  
 2976    00000020 ........              DC32    ZLESS
 2977    00000024 ........              DC32    ZBRAN
 2978    00000028 08000000              DC32    CREATEOK-.
 2979                           
 2980    0000002C ........              DC32    DICTFULL_ABORT
 2981                           
 2982                           CREATEOK:
 2983    00000030 ........              DC32    DFIND                   // Parse nfa
 2984                           //      -FIND DFIND ( --- pfa len tf )(found) ( --- ff ) (not found)
 2985    00000034 ........              DC32    ZBRAN
 2986    00000038 24000000              DC32     CREA1-.
 2987                           
 2988                           #ifdef IO2TP
 2991                           #endif
 2992    0000003C ........              DC32    DROP
 2993    00000040 ........              DC32    NFA
 2994    00000044 ........              DC32    IDDOT
 2995    00000048 .............         DC32    LIT, msg_wordexists
                  ...          
 2996                           // Nothing created yet so ABORT is correct.
 2997                           //        DC32    ERROR
 2998    00000050 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 2999    00000058 ........              DC32    ABORT
 3000                           
 3001                           CREA1:
 3002                           // Save HERE in CSDP so ERROR can reset DP if this definition fails.
 3003                           // CSDP is reset by SEMIC_CREATE when this definition is completed.
 3004                           // SEMIC_CREATE used in ; CON and VAR to reset CSDP.
 3005                           
 3006                           // This new definitions cstring name has been moved to HERE 
 3007    0000005C .............         DC32    HERE, DUP       // This will become the new CURRENT (this NFA).
                  ...          
 3008    00000064 .............         DC32    CSDP_SV, STORE  // HERE to CSDP to restore in case of error.
                  ...          
 3009                           // Dup HERE-NFA to allot NFAx
 3010    0000006C ........              DC32    DUP
 3011                           // Limit NFA allot to maxwordlen. DOES NOT CHANGE actual count!
 3012                           // If count is larger than MAXWORDLEN behaviour of this def is unpredictable!
 3013    00000070 ........              DC32    CAT
 3014    00000074 ........1F000         DC32    LIT, MAXWORDLEN // ELIMINATED WIDTH AND WIDTH_SV 
                  000          
 3015    0000007C ........              DC32    MIN
 3016    00000080 ........              DC32    ALLOT_PRIM      // HERE (DP) at end of NFA with padding.
 3017                           // Dup HERE-NFA to set count byte, and to be consumed later
 3018                           // for setting CURRENT after previous CURRENT compiled into LFA.
 3019    00000084 ........              DC32    DUP
 3020                           // Make regular (not immediate) NFA count byte
 3021    00000088 ........80000         DC32    LIT, 0x80
                  000          
 3022    00000090 ........              DC32    TOGGLE          // Count Byte = 80+count
 3023                           // HERE is new now. Mark end of NFA for PFIND search
 3024    00000094 ........              DC32    HERE            // DP after allot of NFA
 3025    00000098 ........80000         DC32    LIT,0x80        // Set last character in NFA
                  000          
 3026    000000A0 ........              DC32    TOGGLE          // smudge bit
 3027                           // Bump DP to LFA
 3028    000000A4 .............         DC32    ONE, DP_SV      // MOVE HERE (DP)
                  ...          
 3029    000000AC ........              DC32    PSTORE          // TO LFA
 3030                           // Set LFA
 3031    000000B0 ........              DC32    LATEST          // LATEST = CURRENT_SV -> MOST RECENT DEF NFA
 3032    000000B4 ........              DC32    COMMA           // Compile last words NFA into this link field.
 3033                                                           // DUP'd HERE should be on stack
 3034                           // Have to set CURRENT with last dup's HERE-NFA after LATEST is compiled
 3035    000000B8 ........              DC32    CURRENT_SV      // LATEST = CURRENT_SV
 3036    000000BC ........              DC32    STORE           // so storing NEWWORD_NFA into CURRENT.
 3037    000000C0 .............         DC32    COMP, DOCON     // Compile DOCON as CFA
                  ...          
 3038    000000C8 .............         DC32    HERE, FOURP     // Compute and
                  ...          
 3039    000000D0 ........              DC32    COMMA           // COMPILE Addr of PFA
 3040                           //      DC32    SMUDGE          // ELIMINATED
 3041                           //      DC32    SEMIC_CREATE    // USED in CALLERS OF CREATE, NOT HERE!
 3042    000000D4 ........              DC32    SEMIS
 3043                           
 3044                           
 3045                           //      CON CON:        ( n -- )  MODIFIED: and CONSTANT renamed CON
 3046                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 3047                           //      A defining word used in the form:
 3048                           //              n CONSTANT CCcc
 3049                           //      to create word CCcc, with its parameter field containing n. When
 3050                           //      CCcc is later executed, it will push the value of n to the stack.
 3051                            SECTION .text : CONST (2)
 3052                           CONSTANT_NFA:
 3053    00000000 88                    DC8     0x88
 3054    00000001 434F4E5354414         DC8     'CONSTAN'
                  E            
 3055    00000008 D4                    DC8     'T'+0x80
 3056    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3057    0000000C ........              DC32    CREATE_NFA
 3058                           CONSTANT:
 3059    00000010 .............         DC32    DOCOL, CON, SEMIS   // CREATE DOES DICTSPACE CHECK
                  ...........  
 3060                           
 3061                            SECTION .text : CONST (2)
 3062                           CON_NFA:
 3063    00000000 83                    DC8     0x83
 3064    00000001 434F                  DC8     'CO'
 3065    00000003 CE                    DC8     'N'+0x80
 3066                            ALIGNROM 2,0xFFFFFFFF
 3067                           //      DC32    CREATE_NFA
 3068    00000004 ........              DC32    CONSTANT_NFA
 3069                           CON:
 3070    00000008 ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 3071    0000000C ........              DC32    CREATE  // Make Header NFA/LFA, DOCON, ADDR->PFA
 3072    00000010 ........FCFFF         DC32    LIT, -4, DP_SV, PSTORE  // back up to ADDR->PFA
                  FFF..........
                  ......       
 3073    00000020 ........              DC32    COMMA                   // Replace with Con value
 3074    00000024 ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 3075                           //        DC32    DOTDICTSPACE
 3076    00000028 ........              DC32    SEMIS
 3077                           
 3078                           
 3079                           //      VAR VAR:        ( -- ) RENAMED: VARIABLE to VAR
 3080                           //      IF RAMVARSPACE FULL PRINT Error MESSAGE AND Abort.
 3081                           //      A defining word used in the form:
 3082                           //              VARIABLE CCcc
 3083                           //      When VARIABLE is executed, it creates the definition CCcc with its
 3084                           //      with its cell space uninitialized. When CCcc is executed,
 3085                           //      its cell space address is put on the stack. Use with @ or !
 3086                           //      NOTE: VAR's cell space is allocated in ram. See UP and VARALLOT.
 3087                           
 3088                            SECTION .text : CONST (2)
 3089                           VARIABLE_NFA:
 3090    00000000 88                    DC8     0x88
 3091    00000001 5641524941424         DC8     'VARIABL'
                  C            
 3092    00000008 C5                    DC8     'E'+0x80
 3093    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3094    0000000C ........              DC32    CON_NFA
 3095                           VARIABLE:
 3096    00000010 .............         DC32    DOCOL, VAR_, SEMIS   // CREATE DOES DICTSPACE CHECK
                  ...........  
 3097                           
 3098                            SECTION .text : CONST (2)
 3099                           VAR_NFA:
 3100    00000000 83                    DC8     0x83
 3101    00000001 5641                  DC8     'VA'
 3102    00000003 D2                    DC8     'R'+0x80
 3103                            ALIGNROM 2,0xFFFFFFFF
 3104                           //      DC32    CON_NFA
 3105    00000004 ........              DC32    VARIABLE_NFA
 3106                           VAR_:
 3107    00000008 ........              DC32    DOCOL   // CREATE DOES DICTSPACE CHECK
 3108    0000000C ........              DC32    CREATE  // Make Header NFA and LFA, update CURRENT
 3109    00000010 ........F8FFF         DC32    LIT, -8, DP_SV, PSTORE
                  FFF..........
                  ......       
 3110    00000020 .............         DC32    COMP, DOVAR     // CFA of VAR's
                  ...          
 3111                           //        DC32    COMP, DOCON     // CFA of VAR's
 3112                           // aligned, INCREMENTS DP REFLECTED by HERE
 3113                           // compile the value ( v -- )
 3114    00000028 ........              DC32    ONE
 3115    0000002C ........              DC32    VARALLOT        // Do .VS check and return VAR addr.
 3116    00000030 ........              DC32    COMMA           // Compile address of the ram allotment.
 3117    00000034 ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 3118                           //        DC32    DOTDICTSPACE
 3119                           //        DC32    DOTVARSPACE
 3120    00000038 ........              DC32    SEMIS
 3121                           
 3122                           
 3123                           //      ; SEMI: ( -- ) IMMEDIATE
 3124                           //      Terminate a colon-definition and stop further compilation.
 3125                           //      Compiles the run-time ;S.
 3126                           
 3127                            SECTION .text : CONST (2)
 3128                           SEMI_NFA:
 3129    00000000 C1                    DC8     0x0C1
 3130    00000001 BB                    DC8     ';'+0x80
 3131    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3132    00000004 ........              DC32    VAR_NFA
 3133                           SEMI:
 3134    00000008 ........              DC32    DOCOL
 3135    0000000C ........              DC32    QCSP
 3136    00000010 ........              DC32    COMP
 3137    00000014 ........              DC32    SEMIS
 3138    00000018 ........              DC32    LBRAC
 3139    0000001C ........              DC32    SEMIC_CREATE            // RESET AUTO FORGET
 3140                           //        DC32    DOTDICTSPACE
 3141    00000020 ........              DC32    SEMIS
 3142                           
 3143                           
 3144                           //      : COLON:        ( -- ) IMMEDIATE
 3145                           //      IF DICTIONAIRY FULL PRINT Error MESSAGE AND Abort.
 3146                           //      Used in the form called a colon-definition:
 3147                           //              : CCcc     ...     //
 3148                           //      Creates a dictionary entry defining CCcc as equivalent to the
 3149                           //      following sequence of Forth word definitions '...' until the next
 3150                           //      ';' or ';CODE'.
 3151                           //      The compiling process is done by the text interpreter as long as
 3152                           //      STATE is non-zero. Other details are that the CONTEXT vocabulary is
 3153                           //      set to the CURRENT vocabulary and that words with the precedence bit
 3154                           //      set (P) are executed rather than being compiled.
 3155                           
 3156                            SECTION .text : CONST (2)
 3157                           COLON_NFA:
 3158    00000000 C1                    DC8     0x0C1
 3159    00000001 BA                    DC8     ':'+0x80
 3160    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3161    00000004 ........              DC32    SEMI_NFA
 3162                           COLON:
 3163    00000008 ........              DC32    DOCOL
 3164                           //      DICTSPACE TEST DONE in CREATE
 3165    0000000C ........              DC32    QEXEC
 3166    00000010 ........              DC32    SCSP    // Save the stack position in CSP. Compiler security.
 3167    00000014 ........              DC32    CREATE  // Make Header NFA and LFA, update CURRENT
 3168    00000018 ........              DC32    RBRAC   // Resume compiliting by setting STATE_SV to 0xC0
 3169    0000001C ........F8FFF         DC32    LIT, -8, DP_SV, PSTORE
                  FFF..........
                  ......       
 3170    0000002C .............         DC32    COMP, DOCOL     // aligned, INCREMENTS DP REFLECTED by HERE
                  ...          
 3171    00000034 ........              DC32    SEMIS
 3172                           
 3173                           
 3174                           //=============================== WORDCAT ====================================//
 3175                           //NOEXEC HEADERFORWORDCATEGORIES
 3176                           //      WC_CREATE_NFA = CREATE WORDS With: CATEGORY
 3177                           
 3178                            SECTION .text : CONST (2)
 3179                           WC_CREATE_NFA:
 3180    00000000 96                    DC8     0x80+22
 3181    00000001 0D0A                  DC8     0x0D, 0x0A
 3182    00000003 4352454154452         DC8     'CREATE WORDS With:'
                  0574F52445320
                  576974683A   
 3183    00000015 0D8A                  DC8     0x0D, 0x0A+0x80
 3184    00000017 FF             ALIGNROM 2,0xFFFFFFFF
 3185    00000018 ........              DC32    COLON_NFA
 3186                           
 3187                           //      DABS DABS: ( sd=(LSW MSW) -- ud=(LSW MSW) )
 3188                           //      Leave the absolute value ud of a signed double number.
 3189                           
 3190                            SECTION .text : CONST (2)
 3191                           DABS_NFA:
 3192    00000000 84                    DC8     0x84
 3193    00000001 444142                DC8     'DAB'
 3194    00000004 D3                    DC8     'S'+0x80
 3195    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3196    00000008 ........              DC32    WC_CREATE_NFA
 3197                           DABSF:
 3198                           DABS:
 3199    0000000C ........              DC32    DOCOL
 3200    00000010 ........              DC32    DUP
 3201    00000014 ........              DC32    DPM
 3202    00000018 ........              DC32    SEMIS
 3203                           
 3204                           
 3205                           //      DNEGATE DNEGATE: ( d1 -- d<2>=(LSW MSW) ) RENAMED: DMINUS to DNEGATE
 3206                           //      Convert d1 to its double number two's complement d2.
 3207                           
 3208                            SECTION .text : CONST (2)
 3209                           DNEGATE_NFA:
 3210    00000000 87                    DC8     0x87
 3211    00000001 444E45474154          DC8     'DNEGAT'
 3212    00000007 C5                    DC8     'E'+0x80
 3213                            ALIGNROM 2,0xFFFFFFFF
 3214    00000008 ........              DC32    DABS_NFA
 3215                           DNEGATE:
 3216    0000000C ........              DC32    .+5
 3217                            SECTION .text : CODE (2)
 3218                                   POP2t                   // MSW   //POP  BX
 3218.1                         #ifndef TOSCT
 3218.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3218.3                         #endif
 3218.4  00000002 3F1D                  ADDS    p, p, #4
 3218.5                                 ENDM
 3219                                   POP2w                   // LSW   //POP  CX
 3219.1  00000004 3A68                  LDR     w, [p]
 3219.2  00000006 3F1D                  ADDS    p, p, #4
 3219.3                                 ENDM
 3220    00000008 C043                  MVNS    t, t            // negate MSW
 3221    0000000A D243                  MVNS    w, w            // negate LSW
 3222    0000000C 521C                  ADDS    w, w, #1        // add 1 to LSW
 3223                                   DPUSH                   //  --  LSW MSW )
 3223                                   PUSHw   // push w to p, pre decrement p
 3223.1  0000000E 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 3223.2  00000010 3A60                  STR     w, [p]
 3223.3                                 ENDM
 3223                                   TPUSH
 3223                                   PUSHt   // push t to p, pre decrement p
 3223.1  00000012 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3223.2  00000014 3860                  STR     t, [p]
 3223.3                                 ENDM
 3223                                   NEXT
 3223.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3223                                   NEXT1
 3223.1  00000018 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3223.2  0000001A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3223.3                                 ENDM
 3223.4                                 ENDM
 3223.5                                 ENDM
 3223.6                                 ENDM
 3224                           
 3225                           
 3226                           //      DPL_SV: ( -- addr of NDPL ) Contains # of digits after . in double number
 3227                           //      A system variable containing the number of digits to the right of the
 3228                           //      decimal on double integer input. It may also be used to hold output
 3229                           //      column location of a decimal point, in system generated formating. The
 3230                           //      default value on single number input is -1.
 3231                            SECTION .text : CONST (2)
 3232                           DPL_NFA:
 3233    00000000 83                    DC8     0x83
 3234    00000001 4450                  DC8     'DP'
 3235    00000003 CC                    DC8     'L'+0x80
 3236                            ALIGNROM 2,0xFFFFFFFF
 3237    00000004 ........              DC32    DNEGATE_NFA
 3238                           DPL_SV:
 3239    00000008 .............         DC32    DOCON, NDPL
                  ...          
 3240                           
 3241                           
 3242                           //      D.R DDOTR:      ( sd=<LSW MSW> n -- ) SIGNED:
 3243                           //      Print a signed double number sd right aligned
 3244                           //      in a field n characters wide.
 3245                           
 3246                            SECTION .text : CONST (2)
 3247                           DDOTR_NFA:
 3248    00000000 83                    DC8     0x83
 3249    00000001 442E                  DC8     'D.'
 3250    00000003 D2                    DC8     'R'+0x80
 3251                            ALIGNROM 2,0xFFFFFFFF
 3252    00000004 ........              DC32    DPL_NFA
 3253                           DDOTR:
 3254    00000008 ........              DC32    DOCOL
 3255    0000000C ........              DC32    TOR     // N CHAR FIELD LEN to r
 3256    00000010 ........              DC32    SWAP    // ( LSW MSW -- MSW LSW )
 3257    00000014 ........              DC32    OVER    // ( MSW LSW -- MSW LSW MSW )
 3258    00000018 ........              DC32    DABS    // ( MSW LSW MSW -- MSW uLSW uMSW )
 3259    0000001C ........              DC32    BDIGS   // <# SET HLD to Pad
 3260    00000020 ........              DC32    DIGS    // ( d=<LSW MSW> -- d=<LSW MSW> )
 3261    00000024 ........              DC32    SIGN    // ( d=<LSW MSW> -- d=<LSW MSW> )
 3262    00000028 ........              DC32    EDIGS   //      #>  ( d=<LSW MSW>  ---  addr  count )
 3263    0000002C ........              DC32    RFROM   // GET THE N CHAR FIELD LEN
 3264    00000030 ........              DC32    OVER    // ( addr count n -- addr count n count )
 3265    00000034 ........              DC32    SUBB    // ( n addr count addr -- n addr count-n )
 3266    00000038 ........              DC32    SPACES  // SPACES  ( n -- )
 3267    0000003C ........              DC32    TYPE    // ( n addr -- )
 3268    00000040 ........              DC32    SEMIS
 3269                           
 3270                           
 3271                           //      D. DDOT:        ( S32-2'S COMPLEMET = (d=<LSW MSW> -- )
 3272                           //      Print a signed double number from a 32 bit two's complement value.
 3273                           //      The high-order 32 bits are most accessable on the stack. Conversion
 3274                           //      is performed according to the current base. A blank follows.
 3275                           
 3276                            SECTION .text : CONST (2)
 3277                           DDOT_NFA:
 3278    00000000 82                    DC8     0x82
 3279    00000001 44                    DC8     'D'
 3280    00000002 AE                    DC8     '.'+0x80
 3281    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3282    00000004 ........              DC32    DDOTR_NFA
 3283                           DDOT:
 3284    00000008 ........              DC32    DOCOL
 3285    0000000C ........              DC32    ZERO
 3286    00000010 ........              DC32    DDOTR
 3287    00000014 ........              DC32    SPACE
 3288    00000018 ........              DC32    SEMIS
 3289                           
 3290                           
 3291                           //      D+ DPLUS:       ( LSW1 MSW1 LSW2 MSW2 --- LSW MSW )  SIGNED:
 3292                           //      Leave the signed double number sum of two signed double numbers.
 3293                           
 3294                            SECTION .text : CONST (2)
 3295                           DPLUS_NFA:
 3296    00000000 82                    DC8     0x82
 3297    00000001 44                    DC8     'D'
 3298    00000002 AB                    DC8     '+'+0x80
 3299    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3300    00000004 ........              DC32    DDOT_NFA
 3301                           DPLUS:
 3302    00000008 ........              DC32    .+5
 3303                            SECTION .text : CODE (2)
 3304                                   POP2t   //    ldr     t, [p],#4       // MS
 3304.1                         #ifndef TOSCT
 3304.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3304.3                         #endif
 3304.4  00000002 3F1D                  ADDS    p, p, #4
 3304.5                                 ENDM
 3305                                   POP2n   //    ldr     n, [p],#4       // LS
 3305.1  00000004 3968                  LDR     n, [p]
 3305.2  00000006 3F1D                  ADDS    p, p, #4
 3305.3                                 ENDM
 3306                                   POP2x   //    ldr     x, [p],#4       // MS
 3306.1  00000008 3B68                  LDR     x, [p]
 3306.2  0000000A 3F1D                  ADDS    p, p, #4
 3306.3                                 ENDM
 3307                                   POP2w   //    ldr     w, [p],#4       // LS
 3307.1  0000000C 3A68                  LDR     w, [p]
 3307.2  0000000E 3F1D                  ADDS    p, p, #4
 3307.3                                 ENDM
 3308    00000010 5218                  ADDS    w, w, n         // LS sum, set status flags
 3309    00000012 5841                  ADCS    t, t, x         // MS sum + carry
 3310                                   DPUSH                   //  --  LSW MSW )
 3310                                   PUSHw   // push w to p, pre decrement p
 3310.1  00000014 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 3310.2  00000016 3A60                  STR     w, [p]
 3310.3                                 ENDM
 3310                                   TPUSH
 3310                                   PUSHt   // push t to p, pre decrement p
 3310.1  00000018 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3310.2  0000001A 3860                  STR     t, [p]
 3310.3                                 ENDM
 3310                                   NEXT
 3310.1  0000001C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3310                                   NEXT1
 3310.1  0000001E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3310.2  00000020 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3310.3                                 ENDM
 3310.4                                 ENDM
 3310.5                                 ENDM
 3310.6                                 ENDM
 3311                           
 3312                           
 3313                           //      S->D STOD:      ( n -- d=<LSW MSW> ) SIGNED:
 3314                           //      Sign extend a single number to form a double number.
 3315                           //      : S->D DUP 0< NEGATE // hi level equivalent
 3316                           
 3317                            SECTION .text : CONST (2)
 3318                           STOD_NFA:
 3319    00000000 84                    DC8     0x84
 3320    00000001 532D3E                DC8     'S->'
 3321    00000004 C4                    DC8     'D'+0x80
 3322    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3323    00000008 ........              DC32    DPLUS_NFA
 3324                           STOD:
 3325    0000000C ........              DC32    .+5
 3326                            SECTION .text : CODE (2)
 3327                                   POP2w                   // POP LSW
 3327.1  00000000 3A68                  LDR     w, [p]
 3327.2  00000002 3F1D                  ADDS    p, p, #4
 3327.3                                 ENDM
 3328    00000004 4040                  EORS    t, t            // Zero MSW
 3329    00000006 1243                  ORRS    w, w, w         // OR LSW
 3330    00000008 00D5                  BPL     STOD1           // LSW is POS
 3331                           
 3332    0000000A 401E                  SUBS     t, t, #1       // LSW is NEG
 3333                           STOD1:
 3334                                   DPUSH                   //  --  LSW MSW )
 3334                                   PUSHw   // push w to p, pre decrement p
 3334.1  0000000C 3F1F                  SUBS    p, p, #4        //  push w to p, pre decrement p
 3334.2  0000000E 3A60                  STR     w, [p]
 3334.3                                 ENDM
 3334                                   TPUSH
 3334                                   PUSHt   // push t to p, pre decrement p
 3334.1  00000010 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3334.2  00000012 3860                  STR     t, [p]
 3334.3                                 ENDM
 3334                                   NEXT
 3334.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3334                                   NEXT1
 3334.1  00000016 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3334.2  00000018 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3334.3                                 ENDM
 3334.4                                 ENDM
 3334.5                                 ENDM
 3334.6                                 ENDM
 3335                           
 3336                           
 3337                           //      2* TWOSTAR:     ( n -- n*2 ) LSL 1
 3338                           
 3339                            SECTION .text : CONST (2)
 3340                           TWOSTAR_NFA:
 3341    00000000 82                    DC8     0x82
 3342    00000001 32                    DC8     '2'
 3343    00000002 AA                    DC8     '*'+0x80
 3344    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3345    00000004 ........              DC32    STOD_NFA
 3346                           TWOSTAR:
 3347    00000008 ........              DC32    .+5
 3348                            SECTION .text : CODE (2)
 3349                                   POP2t
 3349.1                         #ifndef TOSCT
 3349.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3349.3                         #endif
 3349.4  00000002 3F1D                  ADDS    p, p, #4
 3349.5                                 ENDM
 3350    00000004 4000                  LSLS    t, t, #1        //
 3351                                   TPUSH
 3351                                   PUSHt   // push t to p, pre decrement p
 3351.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3351.2  00000008 3860                  STR     t, [p]
 3351.3                                 ENDM
 3351                                   NEXT
 3351.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3351                                   NEXT1
 3351.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3351.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3351.3                                 ENDM
 3351.4                                 ENDM
 3351.5                                 ENDM
 3352                           
 3353                           
 3354                           //      2/ TWOSLASH:    ( n -- n/1 ) ASR 1 (FLOORED)
 3355                           
 3356                            SECTION .text : CONST (2)
 3357                           TWOSLASH_NFA:
 3358    00000000 82                    DC8     0x82
 3359    00000001 32                    DC8     '2'
 3360    00000002 AF                    DC8     '/'+0x80
 3361    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3362    00000004 ........              DC32    TWOSTAR_NFA
 3363                           TWOSLASH:
 3364    00000008 ........              DC32    .+5
 3365                            SECTION .text : CODE (2)
 3366                                   POP2t
 3366.1                         #ifndef TOSCT
 3366.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3366.3                         #endif
 3366.4  00000002 3F1D                  ADDS    p, p, #4
 3366.5                                 ENDM
 3367    00000004 4010                  ASRS    t, t, #1        //
 3368                                   TPUSH
 3368                                   PUSHt   // push t to p, pre decrement p
 3368.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3368.2  00000008 3860                  STR     t, [p]
 3368.3                                 ENDM
 3368                                   NEXT
 3368.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3368                                   NEXT1
 3368.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3368.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3368.3                                 ENDM
 3368.4                                 ENDM
 3368.5                                 ENDM
 3369                                   
 3370                           
 3371                           //      1- ONEM:        ( n -- n-1 )
 3372                           
 3373                            SECTION .text : CONST (2)
 3374                           ONEM_NFA:
 3375    00000000 82                    DC8     0x82
 3376    00000001 31                    DC8     '1'
 3377    00000002 AD                    DC8     '-'+0x80
 3378    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3379    00000004 ........              DC32    TWOSLASH_NFA
 3380                           ONEM:
 3381    00000008 ........              DC32    .+5
 3382                            SECTION .text : CODE (2)
 3383                                   POP2t
 3383.1                         #ifndef TOSCT
 3383.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3383.3                         #endif
 3383.4  00000002 3F1D                  ADDS    p, p, #4
 3383.5                                 ENDM
 3384    00000004 401E                  SUBS    t, t, #1        //
 3385                                   TPUSH
 3385                                   PUSHt   // push t to p, pre decrement p
 3385.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3385.2  00000008 3860                  STR     t, [p]
 3385.3                                 ENDM
 3385                                   NEXT
 3385.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3385                                   NEXT1
 3385.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3385.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3385.3                                 ENDM
 3385.4                                 ENDM
 3385.5                                 ENDM
 3386                           
 3387                           
 3388                           //      1+ ONEP:        ( n -- n+1 )
 3389                           
 3390                            SECTION .text : CONST (2)
 3391                           ONEP_NFA:
 3392    00000000 82                    DC8     0x82
 3393    00000001 31                    DC8     '1'
 3394    00000002 AB                    DC8     '+'+0x80
 3395    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3396    00000004 ........              DC32    ONEM_NFA
 3397                           ONEP:
 3398    00000008 ........              DC32    .+5
 3399                            SECTION .text : CODE (2)
 3400                                   POP2t
 3400.1                         #ifndef TOSCT
 3400.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3400.3                         #endif
 3400.4  00000002 3F1D                  ADDS    p, p, #4
 3400.5                                 ENDM
 3401    00000004 401C                  ADDS    t, t, #1        //
 3402                                   TPUSH
 3402                                   PUSHt   // push t to p, pre decrement p
 3402.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3402.2  00000008 3860                  STR     t, [p]
 3402.3                                 ENDM
 3402                                   NEXT
 3402.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3402                                   NEXT1
 3402.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3402.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3402.3                                 ENDM
 3402.4                                 ENDM
 3402.5                                 ENDM
 3403                           
 3404                           
 3405                           //      2+ TWOP:        ( n -- n+2 )
 3406                           
 3407                            SECTION .text : CONST (2)
 3408                           TWOP_NFA:
 3409    00000000 82                    DC8     0x82
 3410    00000001 32                    DC8     '2'
 3411    00000002 AB                    DC8     '+'+0x80
 3412    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3413    00000004 ........              DC32    ONEP_NFA
 3414                           TWOP:
 3415    00000008 ........              DC32    .+5
 3416                            SECTION .text : CODE (2)
 3417                                   POP2t
 3417.1                         #ifndef TOSCT
 3417.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3417.3                         #endif
 3417.4  00000002 3F1D                  ADDS    p, p, #4
 3417.5                                 ENDM
 3418    00000004 801C                  ADDS    t, t, #2
 3419                                   TPUSH
 3419                                   PUSHt   // push t to p, pre decrement p
 3419.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3419.2  00000008 3860                  STR     t, [p]
 3419.3                                 ENDM
 3419                                   NEXT
 3419.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3419                                   NEXT1
 3419.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3419.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3419.3                                 ENDM
 3419.4                                 ENDM
 3419.5                                 ENDM
 3420                           
 3421                           
 3422                           //      4+ FOURP:       ( n -- n+4 )
 3423                           
 3424                            SECTION .text : CONST (2)
 3425                           FOURP_NFA:
 3426    00000000 82                    DC8     0x82
 3427    00000001 34                    DC8     '4'
 3428    00000002 AB                    DC8     '+'+0x80
 3429    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3430    00000004 ........              DC32    TWOP_NFA
 3431                           FOURP:
 3432    00000008 ........              DC32    .+5
 3433                            SECTION .text : CODE (2)
 3434                                   POP2t
 3434.1                         #ifndef TOSCT
 3434.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3434.3                         #endif
 3434.4  00000002 3F1D                  ADDS    p, p, #4
 3434.5                                 ENDM
 3435    00000004 001D                  ADDS    t, t, #4
 3436                                   TPUSH
 3436                                   PUSHt   // push t to p, pre decrement p
 3436.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3436.2  00000008 3860                  STR     t, [p]
 3436.3                                 ENDM
 3436                                   NEXT
 3436.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3436                                   NEXT1
 3436.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3436.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3436.3                                 ENDM
 3436.4                                 ENDM
 3436.5                                 ENDM
 3437                           
 3438                           
 3439                           //      4- FOURM:       ( n -- n-4 )
 3440                           
 3441                            SECTION .text : CONST (2)
 3442                           FOURM_NFA:
 3443    00000000 82                    DC8     0x82
 3444    00000001 34                    DC8     '4'
 3445    00000002 AD                    DC8     '-'+0x80
 3446    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3447    00000004 ........              DC32    FOURP_NFA
 3448                           FOURM:
 3449    00000008 ........              DC32    .+5
 3450                            SECTION .text : CODE (2)
 3451                                   POP2t
 3451.1                         #ifndef TOSCT
 3451.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3451.3                         #endif
 3451.4  00000002 3F1D                  ADDS    p, p, #4
 3451.5                                 ENDM
 3452    00000004 001F                  SUBS    t, t, #4
 3453                                   TPUSH
 3453                                   PUSHt   // push t to p, pre decrement p
 3453.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3453.2  00000008 3860                  STR     t, [p]
 3453.3                                 ENDM
 3453                                   NEXT
 3453.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3453                                   NEXT1
 3453.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3453.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3453.3                                 ENDM
 3453.4                                 ENDM
 3453.5                                 ENDM
 3454                           
 3455                           
 3456                           //      0 ZERO: ( -- 0 )
 3457                           
 3458                            SECTION .text : CONST (2)
 3459                           ZERO_NFA:
 3460    00000000 81                    DC8     0x81
 3461    00000001 B0                    DC8     '0'+0x80
 3462    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3463    00000004 ........              DC32    FOURM_NFA
 3464                           ZERO:
 3465    00000008 ........00000         DC32    DOCON, 0
                  000          
 3466                           
 3467                           
 3468                           //      1 ONE: ( -- 1 )
 3469                           
 3470                            SECTION .text : CONST (2)
 3471                           ONE_NFA:
 3472    00000000 81                    DC8     0x81
 3473    00000001 B1                    DC8     '1'+0x80
 3474    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3475    00000004 ........              DC32    ZERO_NFA
 3476                           ONE:
 3477    00000008 ........01000         DC32    DOCON, 1
                  000          
 3478                           
 3479                           
 3480                           //      2 TWO: ( -- 2 )
 3481                           
 3482                            SECTION .text : CONST (2)
 3483                           TWO_NFA:
 3484    00000000 81                    DC8     0x81
 3485    00000001 B2                    DC8     '2'+0x80
 3486    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3487    00000004 ........              DC32    ONE_NFA
 3488                           TWO:
 3489    00000008 ........02000         DC32    DOCON, 2
                  000          
 3490                           
 3491                           
 3492                           //      3 THREE: ( -- 3 )
 3493                           
 3494                            SECTION .text : CONST (2)
 3495                           THREE_NFA:
 3496    00000000 81                    DC8     0x81
 3497    00000001 B3                    DC8     '3'+0x80
 3498    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3499    00000004 ........              DC32    TWO_NFA
 3500                           THREE:
 3501    00000008 ........03000         DC32    DOCON, 3
                  000          
 3502                           
 3503                           
 3504                           //      4 FOUR: ( -- 4 )
 3505                           
 3506                            SECTION .text : CONST (2)
 3507                           FOUR_NFA:
 3508    00000000 81                    DC8     0x81
 3509    00000001 B4                    DC8     '4'+0x80
 3510    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3511    00000004 ........              DC32    THREE_NFA
 3512                           FOUR:
 3513    00000008 ........04000         DC32    DOCON, 4
                  000          
 3514                           
 3515                           
 3516                           //      M* MSTAR:       ( n1 n2 -- d=<S32LSW S32MSW> )  SIGNED:
 3517                           //      A mixed magnitude math operation which leaves the double number
 3518                           //      signed product of two signed number.
 3519                           
 3520                            SECTION .text : CONST (2)
 3521                           MSTAR_NFA:
 3522    00000000 82                    DC8     0x82
 3523    00000001 4D                    DC8     'M'
 3524    00000002 AA                    DC8     '*'+0x80
 3525    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3526    00000004 ........              DC32    FOUR_NFA
 3527                           MSTAR:
 3528    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3529    00000010 ........              DC32    XORR
 3530    00000014 ........              DC32    TOR
 3531    00000018 ........              DC32    ABS
 3532    0000001C ........              DC32    SWAP
 3533    00000020 ........              DC32    ABS
 3534    00000024 ........              DC32    USTAR
 3535    00000028 ........              DC32    RFROM
 3536    0000002C ........              DC32    DPM
 3537    00000030 ........              DC32    SEMIS
 3538                           
 3539                           
 3540                           //      M/ MSLASH:      ( sd  n1  ---  d=<s32REM  S32QUO> )
 3541                           //      A mixed magnitude math operator which leaves the signed remainder
 3542                           //      and signed quotient from sd, a double number dividend and divisor n1.
 3543                           //      The remainder takes its sign from the dividend.
 3544                           
 3545                            SECTION .text : CONST (2)
 3546                           MSLASH_NFA:
 3547    00000000 82                    DC8     0x82
 3548    00000001 4D                    DC8     'M'
 3549    00000002 AF                    DC8     '/'+0x80
 3550    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3551    00000004 ........              DC32    MSTAR_NFA
 3552                           MSLASH:
 3553    00000008 ........              DC32    DOCOL
 3554    0000000C ........              DC32    OVER
 3555    00000010 ........              DC32    TOR
 3556    00000014 ........              DC32    TOR
 3557    00000018 ........              DC32    DABS    // ( LSW MSW -- uLSW uMSW )
 3558    0000001C ........              DC32    R
 3559    00000020 ........              DC32    ABS
 3560    00000024 ........              DC32    USLASH
 3561    00000028 ........              DC32    RFROM
 3562    0000002C ........              DC32    R
 3563    00000030 ........              DC32    XORR
 3564    00000034 ........              DC32    PM
 3565    00000038 ........              DC32    SWAP
 3566    0000003C ........              DC32    RFROM
 3567    00000040 ........              DC32    PM
 3568    00000044 ........              DC32    SWAP
 3569    00000048 ........              DC32    SEMIS
 3570                           
 3571                           
 3572                           //      * STAR: ( n1 n2 -- prod=n3 )
 3573                           //      Leave the signed product n3 of two (32bit) signed numbers n1 and n2.
 3574                           
 3575                            SECTION .text : CONST (2)
 3576                           STAR_NFA:
 3577    00000000 81                    DC8     0x81
 3578    00000001 AA                    DC8     '*'+0x80
 3579    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3580    00000004 ........              DC32    MSLASH_NFA
 3581                           STAR:
 3582    00000008 ........              DC32    DOCOL
 3583    0000000C ........              DC32    MSTAR
 3584    00000010 ........              DC32    DROP
 3585    00000014 ........              DC32    SEMIS
 3586                           
 3587                           
 3588                           //      /MOD SLMOD:     ( n1 n2 -- rem quot )   SIGNED:
 3589                           //      Leave the remainder and signed quotient of n1/n2. The remainder has
 3590                           //      the sign of the dividend.
 3591                           
 3592                            SECTION .text : CONST (2)
 3593                           SLMOD_NFA:
 3594    00000000 84                    DC8     0x84
 3595    00000001 2F4D4F                DC8     '/MO'
 3596    00000004 C4                    DC8     'D'+0x80
 3597    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3598    00000008 ........              DC32    STAR_NFA
 3599                           SLMOD:
 3600    0000000C ........              DC32    DOCOL
 3601    00000010 ........              DC32    TOR
 3602    00000014 ........              DC32    STOD
 3603    00000018 ........              DC32    RFROM
 3604    0000001C ........              DC32    MSLASH
 3605    00000020 ........              DC32    SEMIS
 3606                           
 3607                           
 3608                           //      / SLASH:        ( sn1 sn2 -- sn ) SIGNED:
 3609                           //      Leave the signed quotient sn of sn1/sn2.
 3610                           
 3611                            SECTION .text : CONST (2)
 3612                           SLASH_NFA:
 3613    00000000 81                    DC8     0x81
 3614    00000001 AF                    DC8     '/'+0x80
 3615    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3616    00000004 ........              DC32    SLMOD_NFA
 3617                           SLASH:
 3618    00000008 ........              DC32    DOCOL
 3619    0000000C ........              DC32    SLMOD
 3620    00000010 ........              DC32    SWAP
 3621    00000014 ........              DC32    DROP
 3622    00000018 ........              DC32    SEMIS
 3623                           
 3624                           
 3625                           //      MOD MOD:        ( sn1 n2 -- modulo )
 3626                           //      Leave the remainder of sn1/n2, with the same sign as sn1.
 3627                           
 3628                            SECTION .text : CONST (2)
 3629                           MODD_NFA:
 3630    00000000 83                    DC8     0x83
 3631    00000001 4D4F                  DC8     'MO'
 3632    00000003 C4                    DC8     'D'+0x80
 3633                            ALIGNROM 2,0xFFFFFFFF
 3634    00000004 ........              DC32    SLASH_NFA
 3635                           MOD:
 3636    00000008 ........              DC32    DOCOL
 3637    0000000C ........              DC32    SLMOD
 3638    00000010 ........              DC32    DROP
 3639    00000014 ........              DC32    SEMIS
 3640                           
 3641                           
 3642                           //      */MOD SSMOD:    ( n1 n2 n3 -- n4 n5 )
 3643                           //      Leave the quotient n5 and remainder n4 of the operation n1*n2/n3 A
 3644                           //      31 bit intermediate product is used as for */.
 3645                           
 3646                            SECTION .text : CONST (2)
 3647                           SSMOD_NFA:
 3648    00000000 85                    DC8     0x85
 3649    00000001 2A2F4D4F              DC8     '*/MO'
 3650    00000005 C4                    DC8     'D'+0x80
 3651    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3652    00000008 ........              DC32    MODD_NFA
 3653                           SSMOD:
 3654    0000000C ........              DC32    DOCOL
 3655    00000010 ........              DC32    TOR
 3656    00000014 ........              DC32    MSTAR
 3657    00000018 ........              DC32    RFROM
 3658    0000001C ........              DC32    MSLASH
 3659    00000020 ........              DC32    SEMIS
 3660                           
 3661                           
 3662                           //      */ SSLASH:      ( n1 n2 n3 -- n4 )
 3663                           //      Leave the ratio n4 = n1*n2/n3 where all are signed numbers.
 3664                           //      Retention of an intermediate 31 bit product permits greater accuracy
 3665                           //      than would. be available with the sequence:
 3666                           //              n1  n2  *  n3  /
 3667                           
 3668                            SECTION .text : CONST (2)
 3669                           SSLASH_NFA:
 3670    00000000 82                    DC8     0x82
 3671    00000001 2A                    DC8     '*'
 3672    00000002 AF                    DC8     '/'+0x80
 3673    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3674    00000004 ........              DC32    SSMOD_NFA
 3675                           SSLASH:
 3676    00000008 ........              DC32    DOCOL
 3677    0000000C ........              DC32    SSMOD
 3678    00000010 ........              DC32    SWAP
 3679    00000014 ........              DC32    DROP
 3680    00000018 ........              DC32    SEMIS
 3681                           
 3682                           
 3683                           //      + PLUS: ( n1 n2 -- n3 )
 3684                           //      Add n1 and n2, leaving sum n3
 3685                           
 3686                            SECTION .text : CONST (2)
 3687                           PLUS_NFA:
 3688    00000000 81                    DC8     0x81
 3689    00000001 AB                    DC8     0xAB    // '+' + 0x80
 3690    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3691    00000004 ........              DC32    SSLASH_NFA
 3692                           PLUS:
 3693    00000008 ........              DC32    .+5
 3694                            SECTION .text : CODE (2)
 3695                                   POP2t
 3695.1                         #ifndef TOSCT
 3695.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3695.3                         #endif
 3695.4  00000002 3F1D                  ADDS    p, p, #4
 3695.5                                 ENDM
 3696                                   POP2n
 3696.1  00000004 3968                  LDR     n, [p]
 3696.2  00000006 3F1D                  ADDS    p, p, #4
 3696.3                                 ENDM
 3697    00000008 4018                  ADDS    t, t, n
 3698                                   TPUSH
 3698                                   PUSHt   // push t to p, pre decrement p
 3698.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3698.2  0000000C 3860                  STR     t, [p]
 3698.3                                 ENDM
 3698                                   NEXT
 3698.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3698                                   NEXT1
 3698.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3698.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3698.3                                 ENDM
 3698.4                                 ENDM
 3698.5                                 ENDM
 3699                           
 3700                           
 3701                           //      - SUBB: ( n1 n2 -- n3 )
 3702                           //      Leave the difference of n1-n2 as n3.
 3703                           //      1 2 - . -1
 3704                           //      2 1 - .  1
 3705                           
 3706                            SECTION .text : CONST (2)
 3707                           SUB_NFA:
 3708    00000000 81                    DC8     0x81
 3709    00000001 AD                    DC8     '-'+0x80
 3710    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3711    00000004 ........              DC32    PLUS_NFA
 3712                           SUBB:
 3713    00000008 ........              DC32    .+5
 3714                            SECTION .text : CODE (2)
 3715                                   POP2t
 3715.1                         #ifndef TOSCT
 3715.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3715.3                         #endif
 3715.4  00000002 3F1D                  ADDS    p, p, #4
 3715.5                                 ENDM
 3716                                   POP2n
 3716.1  00000004 3968                  LDR     n, [p]
 3716.2  00000006 3F1D                  ADDS    p, p, #4
 3716.3                                 ENDM
 3717    00000008 081A                  SUBS    t, n, t
 3718                                   TPUSH
 3718                                   PUSHt   // push t to p, pre decrement p
 3718.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3718.2  0000000C 3860                  STR     t, [p]
 3718.3                                 ENDM
 3718                                   NEXT
 3718.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3718                                   NEXT1
 3718.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3718.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3718.3                                 ENDM
 3718.4                                 ENDM
 3718.5                                 ENDM
 3719                           
 3720                           
 3721                           //      = EQUAL:        (n1 n2 -- f )
 3722                           //      Leave a non-zero true flag if n1=n2// otherwise leave a false flag.
 3723                           
 3724                            SECTION .text : CONST (2)
 3725                           EQUAL_NFA:
 3726    00000000 81                    DC8     0x81
 3727    00000001 BD                    DC8     '='+0x80
 3728    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3729    00000004 ........              DC32    SUB_NFA
 3730                           EQUAL:
 3731    00000008 ........              DC32    .+5
 3732                            SECTION .text : CODE (2)
 3733                           #ifdef TRUE_EQU_NEG_ONE
 3734    00000000 4040                  EORS    t, t
 3735                           #endif
 3736                                   POP2n
 3736.1  00000002 3968                  LDR     n, [p]
 3736.2  00000004 3F1D                  ADDS    p, p, #4
 3736.3                                 ENDM
 3737                                   POP2w
 3737.1  00000006 3A68                  LDR     w, [p]
 3737.2  00000008 3F1D                  ADDS    p, p, #4
 3737.3                                 ENDM
 3738    0000000A 891A                  SUBS    n, n, w
 3739    0000000C 04D0                  BEQ     EQUAL_TRUE
 3740                                   TPUSH   // zero
 3740                                   PUSHt   // push t to p, pre decrement p
 3740.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3740.2  00000010 3860                  STR     t, [p]
 3740.3                                 ENDM
 3740                                   NEXT
 3740.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3740                                   NEXT1
 3740.1  00000014 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3740.2  00000016 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3740.3                                 ENDM
 3740.4                                 ENDM
 3740.5                                 ENDM
 3741                           
 3742                           EQUAL_TRUE:
 3743                           #ifdef TRUE_EQU_NEG_ONE
 3744    00000018 0138                  SUBS    t, #1 // -1
 3745                           #else
 3747                           #endif
 3748                                   TPUSH
 3748                                   PUSHt   // push t to p, pre decrement p
 3748.1  0000001A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3748.2  0000001C 3860                  STR     t, [p]
 3748.3                                 ENDM
 3748                                   NEXT
 3748.1  0000001E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3748                                   NEXT1
 3748.1  00000020 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3748.2  00000022 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3748.3                                 ENDM
 3748.4                                 ENDM
 3748.5                                 ENDM
 3749                           /*
 3750                                   DC32    DOCOL
 3751                                   DC32    SUBB
 3752                                   DC32    ZEQU
 3753                                   DC32    SEMIS
 3754                           */
 3755                           
 3756                           
 3757                           //      < LESSTHAN:     ( n1 n2 -- f ) SIGNED:
 3758                           //      Leave a true flag if n1 is less than n2 otherwise leave a false flag.
 3759                           //      C0 1 < . 0  -1 C0 < . 1
 3760                           
 3761                            SECTION .text : CONST (2)
 3762                           LESSTHAN_NFA:
 3763    00000000 81                    DC8     0x81
 3764    00000001 BC                    DC8     '<'+0x80
 3765    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3766    00000004 ........              DC32    EQUAL_NFA
 3767                           LESSTHAN:
 3768    00000008 ........              DC32    .+5
 3769                            SECTION .text : CODE (2)
 3770                           #ifdef TRUE_EQU_NEG_ONE
 3771    00000000 4040                  EORS    t, t    // zero t
 3772    00000002 0138                  SUBS    t, #1   // -1
 3773                           #else
 3775                           #endif
 3776                                   POP2n           // n2
 3776.1  00000004 3968                  LDR     n, [p]
 3776.2  00000006 3F1D                  ADDS    p, p, #4
 3776.3                                 ENDM
 3777                                   POP2w           // n1
 3777.1  00000008 3A68                  LDR     w, [p]
 3777.2  0000000A 3F1D                  ADDS    p, p, #4
 3777.3                                 ENDM
 3778    0000000C 9142                  CMP     n, w    // n1 < n2
 3779    0000000E 00DC                  BGT     LESS1
 3780                           
 3781    00000010 4040                  EORS    t, t    // zero t =< n
 3782                           LESS1:
 3783                                   TPUSH
 3783                                   PUSHt   // push t to p, pre decrement p
 3783.1  00000012 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3783.2  00000014 3860                  STR     t, [p]
 3783.3                                 ENDM
 3783                                   NEXT
 3783.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3783                                   NEXT1
 3783.1  00000018 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3783.2  0000001A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3783.3                                 ENDM
 3783.4                                 ENDM
 3783.5                                 ENDM
 3784                           
 3785                           
 3786                           //      U< ULESSTHAN:   ( n1 n2 -- f )  UNSIGNED:
 3787                           //      Leave a true flag if n1 is less than n2 otherwise leave a false flag.
 3788                           //      -1 -2 U< . 0  -1 2 U< . 0  1 2 U< . 1
 3789                           
 3790                            SECTION .text : CONST (2)
 3791                           ULESSTHAN_NFA:
 3792    00000000 82                    DC8     0x82
 3793    00000001 55                    DC8     'U'
 3794    00000002 BC                    DC8     '<'+0x80
 3795    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3796    00000004 ........              DC32    LESSTHAN_NFA
 3797                           ULESSTHAN:
 3798    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3799    00000010 .............         DC32    XORR, ZLESS
                  ...          
 3800    00000018 ........              DC32    ZBRAN
 3801    0000001C 18000000              DC32    ULES1-. //IF
 3802                           
 3803    00000020 .............         DC32    DROP, ZLESS
                  ...          
 3804    00000028 ........              DC32    ZEQU
 3805    0000002C ........              DC32    BRAN
 3806    00000030 0C000000              DC32    ULES2-.
 3807                           
 3808                           ULES1:
 3809    00000034 .............         DC32    SUBB,ZLESS      //ELSE
                  ...          
 3810                           
 3811                           ULES2:
 3812    0000003C ........              DC32    SEMIS           //endif
 3813                           
 3814                           
 3815                           //      > GREATERTHAN:  ( n1 n2 -- f )  SIGNED: L0
 3816                           //      Leave a true flag if n1 is greater than n2 otherwise a false flag.
 3817                           //      -1 1 > . 0  1 -1 > . 1
 3818                           
 3819                            SECTION .text : CONST (2)
 3820                           GREATERTHAN_NFA:
 3821    00000000 81                    DC8     0x81
 3822    00000001 BE                    DC8     '>'+0x80
 3823    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3824    00000004 ........              DC32    ULESSTHAN_NFA
 3825                           GREATERTHAN:
 3826    00000008 ........              DC32    DOCOL
 3827    0000000C ........              DC32    SWAP
 3828    00000010 ........              DC32    LESSTHAN
 3829    00000014 ........              DC32    SEMIS
 3830                           
 3831                           
 3832                           //      0= ZEQU:        ( n -- f )
 3833                           //      Leave a true flag is the number is equal to zero, otherwise leave a
 3834                           //      false flag. CHANGED Code dependent on true flag being 1 FOR -1 TRUE
 3835                           
 3836                            SECTION .text : CONST (2)
 3837                           ZEQU_NFA:
 3838    00000000 82                    DC8     0x82
 3839    00000001 30                    DC8     '0'
 3840    00000002 BD                    DC8     '='+0x80
 3841    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3842    00000004 ........              DC32    GREATERTHAN_NFA
 3843                           ZEQU:
 3844    00000008 ........              DC32    .+5
 3845                            SECTION .text : CODE (2)
 3846    00000000 4040                  EORS    t, t
 3847                                   POP2n
 3847.1  00000002 3968                  LDR     n, [p]
 3847.2  00000004 3F1D                  ADDS    p, p, #4
 3847.3                                 ENDM
 3848    00000006 0029                  CMP     n, #0
 3849    00000008 00D1                  BNE     ZEQU1
 3850                           
 3851                           #ifdef TRUE_EQU_NEG_ONE
 3852    0000000A 401E                  SUBS    t, t, #1
 3853                           #else
 3855                           #endif
 3856                           
 3857                           ZEQU1:
 3858                                   TPUSH
 3858                                   PUSHt   // push t to p, pre decrement p
 3858.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3858.2  0000000E 3860                  STR     t, [p]
 3858.3                                 ENDM
 3858                                   NEXT
 3858.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3858                                   NEXT1
 3858.1  00000012 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3858.2  00000014 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3858.3                                 ENDM
 3858.4                                 ENDM
 3858.5                                 ENDM
 3859                           
 3860                           
 3861                           //      0< ZLESS:       ( n -- f )
 3862                           //      Leave a true flag if the number is less than zero (negative),
 3863                           //      otherwise leave a false flag.
 3864                           
 3865                            SECTION .text : CONST (2)
 3866                           ZLESS_NFA:
 3867    00000000 82                    DC8     0x82
 3868    00000001 30                    DC8     '0'
 3869    00000002 BC                    DC8     '<'+0x80
 3870    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3871    00000004 ........              DC32    ZEQU_NFA
 3872                           ZLESS:
 3873    00000008 ........              DC32    .+5
 3874                            SECTION .text : CODE (2)
 3875                           #ifdef TOSCT    // REPLACING t SO THIS IS FASTER THAN POP2n
 3878                           #else
 3879                                   POP2n
 3879.1  00000000 3968                  LDR     n, [p]
 3879.2  00000002 3F1D                  ADDS    p, p, #4
 3879.3                                 ENDM
 3880                           #endif
 3881                           #ifdef TRUE_EQU_NEG_ONE
 3882    00000004 4040                  EORS    t, t
 3883    00000006 0138                  SUBS    t, #1   // TRUE -1
 3884                           #else
 3886                           #endif
 3887    00000008 0943                  ORRS    n, n, n // SET FLAGS
 3888    0000000A 00D4                  BMI     ZLESS1  // JS   ZLESS1
 3889                           
 3890    0000000C 4040                  EORS    t, t    // FALSE
 3891                           ZLESS1:
 3892                                   TPUSH
 3892                                   PUSHt   // push t to p, pre decrement p
 3892.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3892.2  00000010 3860                  STR     t, [p]
 3892.3                                 ENDM
 3892                                   NEXT
 3892.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3892                                   NEXT1
 3892.1  00000014 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3892.2  00000016 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3892.3                                 ENDM
 3892.4                                 ENDM
 3892.5                                 ENDM
 3893                           
 3894                           
 3895                           //      BIN BIN:        ( -- )
 3896                           //      Set the numeric conversion base to TWO (bianry).
 3897                           
 3898                            SECTION .text : CONST (2)
 3899                           BIN_NFA:
 3900    00000000 83                    DC8     0x83
 3901    00000001 4249                  DC8     'BI'
 3902    00000003 CE                    DC8     'N'+0x80
 3903                            ALIGNROM 2,0xFFFFFFFF
 3904    00000004 ........              DC32    ZLESS_NFA
 3905                           BIN:
 3906    00000008 ........              DC32    DOCOL
 3907    0000000C ........02000         DC32    STRVA, 2, NBASE
                  000........  
 3908    00000018 ........              DC32    SEMIS
 3909                           
 3910                           
 3911                           //      HEX HEX:        ( -- )
 3912                           //      Set the numeric conversion base to sixteen (hexadecimal).
 3913                           
 3914                            SECTION .text : CONST (2)
 3915                           HEX_NFA:
 3916    00000000 83                    DC8     0x83
 3917    00000001 4845                  DC8     'HE'
 3918    00000003 D8                    DC8     'X'+0x80
 3919                            ALIGNROM 2,0xFFFFFFFF
 3920    00000004 ........              DC32    BIN_NFA
 3921                           HEX:
 3922    00000008 ........              DC32    DOCOL
 3923    0000000C ........10000         DC32    STRVA, 16, NBASE
                  000........  
 3924    00000018 ........              DC32    SEMIS
 3925                           
 3926                           
 3927                           //      DECIMAL DECIMAL:        ( -- )
 3928                           //      Set the numeric conversion base to TEN (decimal).
 3929                           //      DEC IS A NUMBER!
 3930                           
 3931                            SECTION .text : CONST (2)
 3932                           DECIMAL_NFA:
 3933    00000000 87                    DC8     0x87
 3934    00000001 444543494D41          DC8     'DECIMA'
 3935    00000007 CC                    DC8     'L'+0x80
 3936                            ALIGNROM 2,0xFFFFFFFF
 3937    00000008 ........              DC32    HEX_NFA
 3938                           DECIMAL:
 3939    0000000C ........              DC32    DOCOL
 3940    00000010 ........0A000         DC32    STRVA, 10, NBASE
                  000........  
 3941    0000001C ........              DC32    SEMIS
 3942                           
 3943                           
 3944                           //      NEGATE NEGATE: ( n1 -- n2 ) RENAMED: MINUS to NEGATE
 3945                           //      Leave the two's complement of a number.
 3946                           
 3947                            SECTION .text : CONST (2)
 3948                           NEGATE_NFA:
 3949    00000000 86                    DC8     0x86
 3950    00000001 4E45474154            DC8     'NEGAT'
 3951    00000006 C5                    DC8     'E'+0x80
 3952    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 3953    00000008 ........              DC32    DECIMAL_NFA
 3954                           NEGATE:
 3955    0000000C ........              DC32    .+5
 3956                            SECTION .text : CODE (2)
 3957                                   POP2t                   // MVN YES
 3957.1                         #ifndef TOSCT
 3957.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 3957.3                         #endif
 3957.4  00000002 3F1D                  ADDS    p, p, #4
 3957.5                                 ENDM
 3958    00000004 C043                  MVNS     t, t           // 1's compliment
 3959    00000006 401C                  ADDS     t, t, #1       // 2's compliment
 3960                                   TPUSH
 3960                                   PUSHt   // push t to p, pre decrement p
 3960.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 3960.2  0000000A 3860                  STR     t, [p]
 3960.3                                 ENDM
 3960                                   NEXT
 3960.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 3960                                   NEXT1
 3960.1  0000000E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 3960.2  00000010 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 3960.3                                 ENDM
 3960.4                                 ENDM
 3960.5                                 ENDM
 3961                           
 3962                           
 3963                           //      ABS ABS:        ( n -- ub )
 3964                           //      Leave the absolute value of n as un.
 3965                           
 3966                            SECTION .text : CONST (2)
 3967                           ABS1_NFA:
 3968    00000000 83                    DC8     0x83
 3969    00000001 4142                  DC8     'AB'
 3970    00000003 D3                    DC8     'S'+0x80
 3971                            ALIGNROM 2,0xFFFFFFFF
 3972    00000004 ........              DC32    NEGATE_NFA
 3973                           ABS:
 3974    00000008 ........              DC32    DOCOL
 3975    0000000C ........              DC32    DUP
 3976    00000010 ........              DC32    PM
 3977    00000014 ........              DC32    SEMIS
 3978                           
 3979                           
 3980                           //      MIN MIN:        ( n1 n2 -- min )
 3981                           //      Leave the smaller of two numbers.
 3982                           
 3983                            SECTION .text : CONST (2)
 3984                           MIN_NFA:
 3985    00000000 83                    DC8     0x83
 3986    00000001 4D49                  DC8     'MI'
 3987    00000003 CE                    DC8     'N'+0x80
 3988                            ALIGNROM 2,0xFFFFFFFF
 3989    00000004 ........              DC32    ABS1_NFA
 3990                           MIN:
 3991    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 3992    00000010 ........              DC32    GREATERTHAN
 3993    00000014 ........              DC32    ZBRAN   //IF
 3994    00000018 08000000              DC32     MIN1-.
 3995                           
 3996    0000001C ........              DC32    SWAP    //endif
 3997                           MIN1:
 3998    00000020 ........              DC32    DROP
 3999    00000024 ........              DC32    SEMIS
 4000                           
 4001                           
 4002                           //      MAX MAX:        ( n1 n2 -- max )
 4003                           //      Leave the greater of two numbers.
 4004                           
 4005                            SECTION .text : CONST (2)
 4006                           MAX_NFA:
 4007    00000000 83                    DC8     0x83
 4008    00000001 4D41                  DC8     'MA'
 4009    00000003 D8                    DC8     'X'+0x80
 4010                            ALIGNROM 2,0xFFFFFFFF
 4011    00000004 ........              DC32    MIN_NFA
 4012                           MAX:
 4013    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 4014    00000010 ........              DC32    LESSTHAN
 4015    00000014 ........              DC32    ZBRAN   //IF
 4016    00000018 08000000              DC32     MAX1-.
 4017                           
 4018    0000001C ........              DC32    SWAP    //endif
 4019                           MAX1:
 4020    00000020 ........              DC32    DROP
 4021    00000024 ........              DC32    SEMIS
 4022                           
 4023                           
 4024                           //      AND ANDD:       ( n1 n2 -- n2 )
 4025                           //      Leave the bitwise logical and of n1 and n2 as n3.
 4026                           
 4027                            SECTION .text : CONST (2)
 4028                           ANDD_NFA:
 4029    00000000 83                    DC8     0x83
 4030    00000001 414E                  DC8     'AN'
 4031    00000003 C4                    DC8     'D'+0x80
 4032                            ALIGNROM 2,0xFFFFFFFF
 4033    00000004 ........              DC32    MAX_NFA
 4034                           ANDD:
 4035    00000008 ........              DC32    .+5
 4036                            SECTION .text : CODE (2)
 4037                                   POP2t
 4037.1                         #ifndef TOSCT
 4037.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4037.3                         #endif
 4037.4  00000002 3F1D                  ADDS    p, p, #4
 4037.5                                 ENDM
 4038                                   POP2n
 4038.1  00000004 3968                  LDR     n, [p]
 4038.2  00000006 3F1D                  ADDS    p, p, #4
 4038.3                                 ENDM
 4039    00000008 0840                  ANDS     t, t, n
 4040                                   TPUSH
 4040                                   PUSHt   // push t to p, pre decrement p
 4040.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4040.2  0000000C 3860                  STR     t, [p]
 4040.3                                 ENDM
 4040                                   NEXT
 4040.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4040                                   NEXT1
 4040.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4040.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4040.3                                 ENDM
 4040.4                                 ENDM
 4040.5                                 ENDM
 4041                           
 4042                           
 4043                           //      OR OR:  ( n1 n2 -- n3 )
 4044                           //      Leave the bit-wise logical or of n1 and n2 as n3.
 4045                           
 4046                            SECTION .text : CONST (2)
 4047                           OR_NFA:
 4048    00000000 82                    DC8     0x82
 4049    00000001 4F                    DC8     'O'
 4050    00000002 D2                    DC8     'R'+0x80
 4051    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4052    00000004 ........              DC32    ANDD_NFA
 4053                           OR:
 4054    00000008 ........              DC32    .+5
 4055                            SECTION .text : CODE (2)
 4056                                   POP2t
 4056.1                         #ifndef TOSCT
 4056.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4056.3                         #endif
 4056.4  00000002 3F1D                  ADDS    p, p, #4
 4056.5                                 ENDM
 4057                                   POP2n
 4057.1  00000004 3968                  LDR     n, [p]
 4057.2  00000006 3F1D                  ADDS    p, p, #4
 4057.3                                 ENDM
 4058    00000008 0843                  ORRS     t, t, n
 4059                                   TPUSH
 4059                                   PUSHt   // push t to p, pre decrement p
 4059.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4059.2  0000000C 3860                  STR     t, [p]
 4059.3                                 ENDM
 4059                                   NEXT
 4059.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4059                                   NEXT1
 4059.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4059.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4059.3                                 ENDM
 4059.4                                 ENDM
 4059.5                                 ENDM
 4060                           
 4061                           
 4062                           //      NOT NOT: ( nl -- n2 )
 4063                           //      Leave the bitwise logical not of n1 as n2
 4064                           
 4065                            SECTION .text : CONST (2)
 4066                           NOT_NFA:
 4067    00000000 83                    DC8     0x83
 4068    00000001 4E4F                  DC8     'NO'
 4069    00000003 D4                    DC8     'T'+0x80
 4070                            ALIGNROM 2,0xFFFFFFFF
 4071    00000004 ........              DC32    OR_NFA
 4072                           NOT:
 4073    00000008 ........              DC32    .+5
 4074                            SECTION .text : CODE (2)
 4075                                   POP2t
 4075.1                         #ifndef TOSCT
 4075.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4075.3                         #endif
 4075.4  00000002 3F1D                  ADDS    p, p, #4
 4075.5                                 ENDM
 4076    00000004 C043                  MVNS            t, t    // 1's compliment
 4077                                   TPUSH
 4077                                   PUSHt   // push t to p, pre decrement p
 4077.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4077.2  00000008 3860                  STR     t, [p]
 4077.3                                 ENDM
 4077                                   NEXT
 4077.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4077                                   NEXT1
 4077.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4077.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4077.3                                 ENDM
 4077.4                                 ENDM
 4077.5                                 ENDM
 4078                           
 4079                           
 4080                           //      XORR XOR:       ( nl n2 -- n3 )
 4081                           //      Leave the bitwise logical exclusive or n1 and n2 as n3
 4082                           
 4083                            SECTION .text : CONST (2)
 4084                           XORR_NFA:
 4085    00000000 83                    DC8     0x83
 4086    00000001 584F                  DC8     'XO'
 4087    00000003 D2                    DC8     'R'+0x80
 4088                            ALIGNROM 2,0xFFFFFFFF
 4089    00000004 ........              DC32    NOT_NFA
 4090                           XORR:
 4091    00000008 ........              DC32    .+5
 4092                            SECTION .text : CODE (2)
 4093                                   POP2t
 4093.1                         #ifndef TOSCT
 4093.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4093.3                         #endif
 4093.4  00000002 3F1D                  ADDS    p, p, #4
 4093.5                                 ENDM
 4094                                   POP2n
 4094.1  00000004 3968                  LDR     n, [p]
 4094.2  00000006 3F1D                  ADDS    p, p, #4
 4094.3                                 ENDM
 4095    00000008 4840                  EORS     t, t, n
 4096                                   TPUSH
 4096                                   PUSHt   // push t to p, pre decrement p
 4096.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4096.2  0000000C 3860                  STR     t, [p]
 4096.3                                 ENDM
 4096                                   NEXT
 4096.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4096                                   NEXT1
 4096.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4096.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4096.3                                 ENDM
 4096.4                                 ENDM
 4096.5                                 ENDM
 4097                           
 4098                           
 4099                           //      SXTH SXTH:      ( nl -- n3 )
 4100                           //      Sign extend HALFWORD on the stack
 4101                           
 4102                            SECTION .text : CONST (2)
 4103                           SXTH_NFA:
 4104    00000000 84                    DC8     0x84
 4105    00000001 535854                DC8     'SXT'
 4106    00000004 C8                    DC8     'H'+0x80
 4107    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4108    00000008 ........              DC32    XORR_NFA
 4109                           SXTH:
 4110    0000000C ........              DC32    .+5
 4111                            SECTION .text : CODE (2)
 4112                                   POP2t
 4112.1                         #ifndef TOSCT
 4112.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4112.3                         #endif
 4112.4  00000002 3F1D                  ADDS    p, p, #4
 4112.5                                 ENDM
 4113    00000004 00B2                  SXTH     t, t
 4114                                   TPUSH
 4114                                   PUSHt   // push t to p, pre decrement p
 4114.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4114.2  00000008 3860                  STR     t, [p]
 4114.3                                 ENDM
 4114                                   NEXT
 4114.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4114                                   NEXT1
 4114.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4114.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4114.3                                 ENDM
 4114.4                                 ENDM
 4114.5                                 ENDM
 4115                           
 4116                           
 4117                           //      SXTB SXTB:      ( nl -- n3 )
 4118                           //      Sign extend byte in the word on the stack
 4119                           
 4120                            SECTION .text : CONST (2)
 4121                           SXTB_NFA:
 4122    00000000 84                    DC8     0x84
 4123    00000001 535854                DC8     'SXT'
 4124    00000004 C2                    DC8     'B'+0x80
 4125    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4126    00000008 ........              DC32    SXTH_NFA
 4127                           SXTB:
 4128    0000000C ........              DC32    .+5
 4129                            SECTION .text : CODE (2)
 4130                                   POP2t
 4130.1                         #ifndef TOSCT
 4130.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4130.3                         #endif
 4130.4  00000002 3F1D                  ADDS    p, p, #4
 4130.5                                 ENDM
 4131    00000004 40B2                  SXTB     t, t
 4132                                   TPUSH
 4132                                   PUSHt   // push t to p, pre decrement p
 4132.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4132.2  00000008 3860                  STR     t, [p]
 4132.3                                 ENDM
 4132                                   NEXT
 4132.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4132                                   NEXT1
 4132.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4132.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4132.3                                 ENDM
 4132.4                                 ENDM
 4132.5                                 ENDM
 4133                           
 4134                           
 4135                           //      REVW REVW:      ( n -- n )
 4136                           //      Reverse bytes in n.
 4137                           
 4138                            SECTION .text : CONST (2)
 4139                           REVW_NFA:
 4140    00000000 84                    DC8     0x84
 4141    00000001 524556                DC8     'REV'
 4142    00000004 D7                    DC8     'W'+0x80
 4143    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4144    00000008 ........              DC32    SXTB_NFA
 4145                           REVW:
 4146    0000000C ........              DC32    .+5
 4147                            SECTION .text : CODE (2)
 4148                                   POP2t
 4148.1                         #ifndef TOSCT
 4148.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4148.3                         #endif
 4148.4  00000002 3F1D                  ADDS    p, p, #4
 4148.5                                 ENDM
 4149    00000004 00BA                  REV     t, t
 4150                                   TPUSH
 4150                                   PUSHt   // push t to p, pre decrement p
 4150.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4150.2  00000008 3860                  STR     t, [p]
 4150.3                                 ENDM
 4150                                   NEXT
 4150.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4150                                   NEXT1
 4150.1  0000000C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4150.2  0000000E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4150.3                                 ENDM
 4150.4                                 ENDM
 4150.5                                 ENDM
 4151                           
 4152                           
 4153                           //      ASR ASR:   ( sn count -- sn' )  
 4154                           //      Shift sn (sign-extended) right by count.
 4155                           //      Valid count values are 0 to 31.
 4156                           
 4157                            SECTION .text : CONST (2)
 4158                           ASR_NFA:
 4159    00000000 83                    DC8     0x83
 4160    00000001 4153                  DC8     'AS'
 4161    00000003 D2                    DC8     'R'+0x80
 4162                            ALIGNROM 2,0xFFFFFFFF
 4163    00000004 ........              DC32    REVW_NFA
 4164                           ASR:
 4165    00000008 ........              DC32    .+5
 4166                            SECTION .text : CODE (2)
 4167                                   POP2w           ; shift count
 4167.1  00000000 3A68                  LDR     w, [p]
 4167.2  00000002 3F1D                  ADDS    p, p, #4
 4167.3                                 ENDM
 4168                                   POP2t           ; original data
 4168.1                         #ifndef TOSCT
 4168.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4168.3                         #endif
 4168.4  00000006 3F1D                  ADDS    p, p, #4
 4168.5                                 ENDM
 4169    00000008 1041                  ASRS    t, t, w
 4170                                   TPUSH           ; shifted data
 4170                                   PUSHt   // push t to p, pre decrement p
 4170.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4170.2  0000000C 3860                  STR     t, [p]
 4170.3                                 ENDM
 4170                                   NEXT
 4170.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4170                                   NEXT1
 4170.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4170.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4170.3                                 ENDM
 4170.4                                 ENDM
 4170.5                                 ENDM
 4171                           
 4172                           
 4173                           //      LSR LSR:   ( n count -- n' )
 4174                           //      Logical (zero-extended) shift right by count.
 4175                           //      Valid count values are 0 to 31.
 4176                           
 4177                            SECTION .text : CONST (2)
 4178                           LSR_NFA:
 4179    00000000 83                    DC8     0x83
 4180    00000001 4C53                  DC8     'LS'
 4181    00000003 D2                    DC8     'R'+0x80
 4182                            ALIGNROM 2,0xFFFFFFFF
 4183    00000004 ........              DC32    ASR_NFA
 4184                           LSR:
 4185    00000008 ........              DC32    .+5
 4186                            SECTION .text : CODE (2)
 4187                                   POP2w           ; shift count
 4187.1  00000000 3A68                  LDR     w, [p]
 4187.2  00000002 3F1D                  ADDS    p, p, #4
 4187.3                                 ENDM
 4188                                   POP2t           ; original data
 4188.1                         #ifndef TOSCT
 4188.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4188.3                         #endif
 4188.4  00000006 3F1D                  ADDS    p, p, #4
 4188.5                                 ENDM
 4189    00000008 D040                  LSRS    t, t, w
 4190                                   TPUSH           ; shifted data
 4190                                   PUSHt   // push t to p, pre decrement p
 4190.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4190.2  0000000C 3860                  STR     t, [p]
 4190.3                                 ENDM
 4190                                   NEXT
 4190.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4190                                   NEXT1
 4190.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4190.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4190.3                                 ENDM
 4190.4                                 ENDM
 4190.5                                 ENDM
 4191                           
 4192                           
 4193                           //      LSL LSL:   ( n count -- n' )
 4194                           //      Logical (zero-extended) shift left by count.
 4195                           //      Valid count values are 0 to 31.
 4196                           
 4197                            SECTION .text : CONST (2)
 4198                           LSL_NFA:
 4199    00000000 83                    DC8     0x83
 4200    00000001 4C53                  DC8     'LS'
 4201    00000003 CC                    DC8     'L'+0x80
 4202                            ALIGNROM 2,0xFFFFFFFF
 4203    00000004 ........              DC32    LSR_NFA
 4204                           LSL:
 4205    00000008 ........              DC32    .+5
 4206                            SECTION .text : CODE (2)
 4207                                   POP2w           ; shift count
 4207.1  00000000 3A68                  LDR     w, [p]
 4207.2  00000002 3F1D                  ADDS    p, p, #4
 4207.3                                 ENDM
 4208                                   POP2t           ; original data
 4208.1                         #ifndef TOSCT
 4208.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4208.3                         #endif
 4208.4  00000006 3F1D                  ADDS    p, p, #4
 4208.5                                 ENDM
 4209    00000008 9040                  LSLS    t, t, w
 4210                                   TPUSH           ; shifted data---
 4210                                   PUSHt   // push t to p, pre decrement p
 4210.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4210.2  0000000C 3860                  STR     t, [p]
 4210.3                                 ENDM
 4210                                   NEXT
 4210.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4210                                   NEXT1
 4210.1  00000010 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4210.2  00000012 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4210.3                                 ENDM
 4210.4                                 ENDM
 4210.5                                 ENDM
 4211                           
 4212                           
 4213                           //      .R DOTR:        ( sn1 n2 -- ) SIGNED:
 4214                           //      Print the signed number sn1 right aligned in a field whose width is n2.
 4215                           //      No following blank is printed.
 4216                           
 4217                            SECTION .text : CONST (2)
 4218                           DOTR_NFA:
 4219    00000000 82                    DC8     0x82
 4220    00000001 2E                    DC8     '.'
 4221    00000002 D2                    DC8     'R'+0x80
 4222    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4223    00000004 ........              DC32    LSL_NFA
 4224                           DOTR:
 4225    00000008 ........              DC32    DOCOL
 4226    0000000C ........              DC32    TOR
 4227    00000010 ........              DC32    STOD
 4228    00000014 ........              DC32    RFROM
 4229    00000018 ........              DC32    DDOTR
 4230    0000001C ........              DC32    SEMIS
 4231                           
 4232                           
 4233                           //      .RU DOTRU:      ( n1 n2 -- ) UNSIGNED:
 4234                           //      Print the unsigned number n1 right aligned in a field whose width is n2.
 4235                           //      No following blank is printed.
 4236                           
 4237                            SECTION .text : CONST (2)
 4238                           DOTRU_NFA:
 4239    00000000 83                    DC8     0x83
 4240    00000001 2E52                  DC8     '.R'
 4241    00000003 D5                    DC8     'U'+0x80
 4242                            ALIGNROM 2,0xFFFFFFFF
 4243    00000004 ........              DC32    DOTR_NFA
 4244                           DOTRU:
 4245    00000008 ........              DC32    DOCOL
 4246    0000000C ........              DC32    TOR
 4247    00000010 ........              DC32    ZERO
 4248    00000014 .............         DC32    BDIGS, DIGS, EDIGS
                  ...........  
 4249    00000020 .............         DC32    DUP, RFROM
                  ...          
 4250    00000028 .............         DC32    SWAP, SUBB, SPACES, TYPE
                  .............
                  ......       
 4251                           #ifdef IO2TP
 4254                           #endif
 4255    00000038 ........              DC32    SEMIS
 4256                           
 4257                           
 4258                           //      U. UDOT:        ( n -- ) USIGNED DOT
 4259                           
 4260                            SECTION .text : CONST (2)
 4261                           UDOT_NFA:
 4262    00000000 82                    DC8     0x82
 4263    00000001 55                    DC8     'U'
 4264    00000002 AE                    DC8     '.'+0x80
 4265    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4266    00000004 ........              DC32    DOTRU_NFA
 4267                           UDOT:
 4268    00000008 ........              DC32    DOCOL
 4269    0000000C ........              DC32    ZERO
 4270    00000010 ........              DC32    DDOT    // SPACE DONE HERE
 4271    00000014 ........              DC32    SEMIS
 4272                           
 4273                           
 4274                           //      ? QUES: ( addr -- )
 4275                           //      Print the value contained at the address in free format according to
 4276                           //      the current base using DOT.
 4277                           
 4278                            SECTION .text : CONST (2)
 4279                           QUES_NFA:
 4280    00000000 81                    DC8     0x81
 4281    00000001 BF                    DC8     '?'+0x80
 4282    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4283    00000004 ........              DC32    UDOT_NFA
 4284                           QUES:
 4285    00000008 ........              DC32    DOCOL
 4286    0000000C ........              DC32    AT
 4287    00000010 ........              DC32    DOT
 4288    00000014 ........              DC32    SEMIS
 4289                           
 4290                           
 4291                           //      . DOT:  ( n -- ) SIGNED 2'S COMPLEMENT:
 4292                           //      Print a number from a signed 32 bit two's complement value,
 4293                           //      converted according to the numeric base.
 4294                           //      A trailing blanks follows.
 4295                           
 4296                            SECTION .text : CONST (2)
 4297                           DOT_NFA:
 4298    00000000 81                    DC8     0x81
 4299    00000001 AE                    DC8     '.'+0x80
 4300    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4301    00000004 ........              DC32    QUES_NFA
 4302                           DOT:
 4303    00000008 ........              DC32    DOCOL
 4304    0000000C ........              DC32    STOD
 4305    00000010 ........              DC32    DDOT    // SPACE DONE HERE
 4306    00000014 ........              DC32    SEMIS
 4307                           
 4308                           
 4309                           //------------------------------ DOTBASE SECTION -------------------------------
 4310                           
 4311                           #ifndef SRM
 4312                           //      .B DOTBIN:      ( n -- )
 4313                           //      Prints TOS in BINARY using DOT, not affecting Base in the system
 4314                           
 4315                            SECTION .text : CONST (2)
 4316                           DOTBIN_NFA:
 4317    00000000 82                    DC8     0x82
 4318    00000001 2E                    DC8     '.'
 4319    00000002 C2                    DC8     'B'+0x80
 4320    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4321    00000004 ........              DC32    DOT_NFA
 4322                           DOTBIN:
 4323    00000008 ........              DC32    DOCOL
 4324    0000000C .............         DC32    TWO, DOTBASE
                  ...          
 4325    00000014 ........              DC32    SEMIS
 4326                           #endif  // not SRM
 4327                           
 4328                           
 4329                           //      .H DOTHEX:      ( n -- )
 4330                           //      Prints TOS in Hex using DOT, not affecting Base in the system
 4331                            SECTION .text : CONST (2)
 4332                           DOTHEX_NFA:
 4333    00000000 82                    DC8     0x82
 4334    00000001 2E                    DC8     '.'
 4335    00000002 C8                    DC8     'H'+0x80
 4336    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4337                           #ifdef SRM
 4339                           #else
 4340    00000004 ........              DC32    DOTBIN_NFA
 4341                           #endif
 4342                           DOTHEX:
 4343    00000008 ........              DC32    DOCOL
 4344                           #ifdef SRM
 4346                           #else
 4347    0000000C ........10000         DC32    LIT, 16, DOTBASE        // this version appends BASE Suffix
                  000........  
 4348                           #endif
 4349    00000018 ........              DC32    SEMIS
 4350                           
 4351                           
 4352                           #ifndef SRM
 4353                           //      .D DOTDEC:      ( n -- )
 4354                           //      Prints TOS in DECIMAL using DOT, not affecting Base in the system
 4355                           
 4356                            SECTION .text : CONST (2)
 4357                           DOTDEC_NFA:
 4358    00000000 82                    DC8     0x82
 4359    00000001 2E                    DC8     '.'
 4360    00000002 C4                    DC8     'D'+0x80
 4361    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4362    00000004 ........              DC32    DOTHEX_NFA
 4363                           DOTDEC:
 4364    00000008 ........              DC32    DOCOL
 4365    0000000C ........0A000         DC32    LIT, 10, DOTBASE
                  000........  
 4366    00000018 ........              DC32    SEMIS
 4367                           #endif  // not SRM
 4368                           
 4369                           
 4370                           //=============================== WORDCAT ====================================//
 4371                           //NOEXEC HEADERFORWORDCATEGORIES
 4372                           //      WC_NUMBERS_NFA = NUMBER Stuff: CATEGORY
 4373                           
 4374                            SECTION .text : CONST (2)
 4375                           WC_NUMBERS_NFA:
 4376    00000000 91                    DC8     0x80+4+13
 4377    00000001 0D0A                  DC8     0x0D, 0x0A
 4378    00000003 4E554D4245522         DC8     'NUMBER Stuff:'
                  053747566663A
 4379    00000010 0D8A                  DC8     0x0D, 0x0A+0x80
 4380    00000012 FFFF           ALIGNROM 2,0xFFFFFFFF
 4381                           #ifdef SRM
 4383                           #else
 4384    00000014 ........              DC32    DOTDEC_NFA
 4385                           #endif
 4386                           //=============================== UART0_INIT =================================//
 4387                           
 4388                           // LFA ABOVE NEEDS TO BE WC_NUMBERS_NFA
 4389                           
 4390                           #if     NXP_M0_11xx | NXP_M0_1115
 4392                           #endif  // NXP_M0_11xx
 4393                           
 4394                           #ifdef NXP_M0_812
 4395                           $FISH_NXP_M0_812_UART0_INIT.s
    1                           //      FISH_NXP_M0_81x_UART0_INIT.s
    2                           
    3                           //      UART0_INIT UART0_INIT: ( -- )
    4                           //      If setting BAUD MYBAUD MUST BE USED FIRST
    5                           //      THIS IS TO PRESERVE YOUR BAUD DURING HARD FAULT RESET
    6                           //      UseDEFAULT_BAUD UNLESS DBAUD IS ZERO, THEN USE UBAUD VALUE
    7                           //      WHEN DBAUD IS NOT ZERO USE DEFAULT_BAUD         // PWRUP
    8                           //      WHEN DBAUD IS ZERO USE UBAUD                    // RESET
    9                           
   10                            SECTION .text : CONST (2)
   11                           UART0_INIT_NFA:
   12    00000000 8A                    DC8     0x8A
   13    00000001 55415254305F4         DC8     'UART0_INI'
                  94E49        
   14    0000000A D4                    DC8     'T'+0x80
   15    0000000B FF             ALIGNROM 2,0xFFFFFFFF
   16    0000000C ........              DC32    WC_NUMBERS_NFA
   17                           UART0_INIT:
   18    00000010 ........        DC32  DOCOL
   19                           
   20                           /* [LPC800] UM10601 4.6.18
   21                           USART fractional generator divider value register 
   22                           All USART peripherals share a common clock U_PCLK, which can be adjusted by a 
   23                           fractional divider: 
   24                           U_PCLK = UARTCLKDIV/(1 + MULT/DIV). 
   25                           UARTCLKDIV is the USART clock configured in the UARTCLKDIV register.
   26                           The fractional portion (1 + MULT/DIV) is determined by the
   27                           two USART fractional divider registers in the SYSCON block:
   28                           1. The DIV value programmed in this register is the denominator
   29                            of the divider used by the fractional rate generator
   30                            to create the fractional component of U_PCLK.
   31                           2. The MULT value of the fractional divider is programmed in the UARTFRGMULT 
   32                             register. See Table 24.
   33                           Remark: To use of the fractional baud rate generator, you must write 0xFF
   34                             to this register to yield a denominator value of 256.
   35                             All other values are not supported.
   36                           15.7.1.1 Fractional Rate Generator (FRG)
   37                           The Fractional Rate Generator can be used to obtain more precise baud rates when the 
   38                           peripheral clock is not a good multiple ofstandard (or otherwise desirable) baud rates.
   39                           The FRG is typically set up to produce an integer multiple of the highest required baud 
   40                           rate, or a very close approximation. The BRG is then used to obtain the actual baud rate 
   41                           needed.
   42                           The FRG register controls the USART Fractional Rate Generator, which provides the 
   43                           base clock for the USART. The Fractional Rate Generator creates a lower rate output 
   44                           clock by suppressing selected input clocks. When not needed, the value of 0 can be set 
   45                           for the FRG, which will then not divide the input clock.
   46                           The FRG output clock is defined as the inputs clock divided by 1 + (MULT / 256), where 
   47                           MULT is in the range of 1 to 255. This allows producing an output clock that ranges from 
   48                           the input clock divided by 1+1/256 to 1+255/256 (just more than 1 to just less than 2). Any
                                 
   49                           further division can be done specific to each USART block by the integer BRG divider 
   50                           contained in each USART. The base clock produced by the FRG cannotbe perfectly symmetrical, so the
                                 FRG 
   51                           distributes the output clocks asevenly as is practical. Since the USART normally uses 16x
                                 
   52                           overclocking, the jitter in the fractional rate clock in these cases tends to disappear in the
                                 
   53                           ultimate USART output.
   54                           */
   55                           
   56                           #ifndef DEFAULT_BAUD_TEST
   57    00000014 ........400D0   DC32  LIT, DBAUD, AT, ZEQU
                  010..........
                  ......       
   58    00000024 ........        DC32  ZBRAN
   59    00000028 1C000000        DC32    BAUDDEFAULT-.         // IF DBAUD not ZERO SET DEFAULT_BAUD
   60    0000002C ........440D0   DC32  LIT, UBAUD, AT          // IARBUG , TOR
                  010........  
   61    00000038 ........        DC32    TOR                   // ELSE USE UBAUD
   62    0000003C ........        DC32  BRAN
   63    00000040 10000000        DC32    BAUD1-.                       // SET UBAUD TO ZERO TO PRESERVE UBAUD
   64                           #endif
   65                           
   66                           BAUDDEFAULT:                            // ELSE
   67    00000044 ........80250   DC32  LIT, DEFAULT_BAUD       // IARBUG , TOR
                  000          
   68    0000004C ........        DC32    TOR                   // SET
   69                           
   70                           /* [LPC800] UM10601 15.5
   71                           The Baud Rate Generator block divides the incoming clock to create a
   72                           16x baud rate clock in the standard asynchronous operating mode.
   73                           The BRG clock input source is the shared Fractional Rate Generator
   74                           that runs from the common USART peripheral clock U_PCLK).
   75                           Typically, the baud rate clock is 16 times the actual baud rate.
   76                           Remark: The fractional value and the USART peripheral clock
   77                           are shared between all USARTs. UARTCLKDIV_81x set by value > 0 = U_PCLK
   78                           DC32    STRVA, 1, UARTCLKDIV_81x    // UARTCLKDIV DIVIDE BY 1
   79                           */
   80                           
   81                           BAUD1:
   82    00000050 ........01000   DC32  STRVA, 1, UARTCLKDIV_81x        // UARTCLKDIV set by value > 0 = U_PCLK
                  00094800440  
   83                           
   84    0000005C ........FF000   DC32  STRVA, 0FFh, UARTFRGDIV // UARTFRGDIV Value required for FR use
                  000F0800440  
   85                                   
   86    00000068 .............   DC32  RFROM, LIT, 16d, STAR   // Baud * 16
                  ...10000000..
                  ......       
   87    00000078 .............   DC32  SYSCLK, SWAP, SLASH     // B71B00 / 25800
                  ...........  
   88    00000084 .............   DC32  ONE, SUBB               // 12000000 / 153600
                  ...          
   89                           
   90                           /* [LPC800] UM10601 15.6.9
   91                           Remark: If software needs to change the baud rate,
   92                           the following sequence should be used:
   93                           
   94                           1) Make sure the USART is not currently sending or receiving data.
   95                           2) Disable the USART by writing a 0 to the BRG Enable bit
   96                             (0 may be written to the entire registers).
   97                           3) Write the new BRGVAL.
   98                           4) Write to the CFG register to set the Enable bit to 1.
   99                           CFG, address 0x40064000h (USART0
  100                           */
  101                           BRG81x:
  102    0000008C ........00000         DC32    STRVA, 0, USART0_BRG    // 40064020h BRG Reset Baud Rate
                  00020400640  
  103                           #ifdef SLOW_POWERUP
  105                           #endif
  106    00000098 ........20400         DC32    LIT, USART0_BRG         // 43h BRG VAL FOR IRC12 8600 BAUD
                  640          
  107    000000A0 ........              DC32    STORE                   // Set Baud Rate
  108                           
  109                           #ifdef CTS_RTS
  115                           #else
  116    000000A4 ........05000         DC32    STRVA, 0x05, USART0_CFG         // 40064000h USART0 CFG 8,N,1
                  00000400640  
  117                           #endif
  118                           #ifdef DEFAULT_BAUD_TEST
  120                           #endif
  121                           
  122    000000B0 ........              DC32    SEMIS
 4396                           #endif  // NXP_M0_812
 4397                           
 4398                           // LFA BELOW NEEDS TO BE UART0_INIT_NFA
 4399                           
 4400                           //      MYBAUD MYBAUD: ( n -- ) BAUD MUST BE in DECIMAL or EQUIVALENT!!!
 4401                           //      MUST BE USED BEFORE USING UART0_INIT!!!
 4402                           //      Because FISH does a reset if you invoke a HARD FAULT RESET
 4403                           //      THIS MECHANISM IS ESSENTIAL TO STAYING AT USER SET BAUDRATE THRU A RESET!
 4404                           //      SET NON-INIT RAM VARIABLES DBAUD TO ZERO AND UBAUD n.
 4405                           //      See UART0_INIT
 4406                           
 4407                            SECTION .text : CONST (2)
 4408                           MYBAUD_NFA:
 4409    00000000 86                    DC8     0x86
 4410    00000001 4D59424155            DC8     'MYBAU'
 4411    00000006 C4                    DC8     'D'+0x80
 4412    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 4413    00000008 ........              DC32    UART0_INIT_NFA
 4414                           MYBAUD:
 4415    0000000C ........              DC32    DOCOL
 4416    00000010 ........00000         DC32    STRVA, 0, DBAUD
                  000400D0010  
 4417    0000001C ........440D0         DC32    LIT, UBAUD, STORE       // SET UBAUD TO NEW BAUD FOR UART0_INIT
                  010........  
 4418    00000028 ........              DC32    SEMIS
 4419                           
 4420                           
 4421                           
 4422                           //=============================== UART0_INIT =================================//
 4423                           
 4424                           //      UART0_LSR UART0_LSR: ( -- value ) of NXP M0 UART 0 Line Status Register
 4425                           //      11xx:
 4426                           //      0x40008014 Reset value - 0x60 0b1100000
 4427                           //      After Init SEEING 0x96 FIRST
 4428                           //
 4429                           //      BIT 0 = Receiver Data Ready
 4430                           //      BIT 0 WHEN 0 = U0RBR is empty
 4431                           //      BIT 0 WHEN 1 = U0RBR contains valid data.
 4432                           //
 4433                           //      BIT 4 = Break Interrupt BI when 1
 4434                           //
 4435                           //      BIT 5 = Transmitter Holding Register Empty
 4436                           //      BIT 5 WHEN 0 = U0THR contains valid data
 4437                           //      BIT 5 WHEN 1 = U0THR is empty.
 4438                           //
 4439                           //      BIT 6 = Transmitter Empty
 4440                           //      BIT 6 WHEN 0 = U0THR and/or the U0TSR contains valid data.
 4441                           //      BIT 6 WHEN 1 = U0THR and the U0TSR are empty.
 4442                           
 4443                           //      81x:
 4444                           //      UART0_STAT // 40064008h UART0 STAT Line Status Register 
 4445                           
 4446                            SECTION .text : CONST (2)
 4447                           UART0_LSR_NFA:
 4448    00000000 89                    DC8     0x89
 4449    00000001 55415254305F4         DC8     'UART0_LS'
                  C53          
 4450    00000009 D2                    DC8     'R'+0x80
 4451    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 4452    0000000C ........              DC32    MYBAUD_NFA
 4453                           UART0_LSR:
 4454    00000010 ........              DC32    .+5
 4455                            SECTION .text : CODE (2)
 4456                           #if     NXP_M0_11xx | NXP_M0_1115
 4458                           #endif
 4459                           #ifdef NXP_M0_812
 4460    00000000 0349                  LDR     n, = UART0_STAT // 40064008h UART0 STAT Line Status Register 
 4461                           #endif
 4462    00000002 0878                  LDRB    t, [n]
 4463                                   TPUSH
 4463                                   PUSHt   // push t to p, pre decrement p
 4463.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4463.2  00000006 3860                  STR     t, [p]
 4463.3                                 ENDM
 4463                                   NEXT
 4463.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4463                                   NEXT1
 4463.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4463.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4463.3                                 ENDM
 4463.4                                 ENDM
 4463.5                                 ENDM
 4464    0000000E 0000           LTORG
 4464.1                                  TABLE
 4464.2  00000010 08400640              Reference on line 4460
 4465                           
 4466                           
 4467                           //      UART0_RX UART0_RX: ( -- addr ) of UART 0 RX Buffer
 4468                           //      This is the serial terminal.
 4469                           
 4470                            SECTION .text : CONST (2)
 4471                           UART0_RX_NFA:
 4472    00000000 88                    DC8     0x88
 4473    00000001 55415254305F5         DC8     'UART0_R'
                  2            
 4474    00000008 D8                    DC8     'X'+0x80
 4475    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4476    0000000C ........              DC32    UART0_LSR_NFA
 4477                           UART0_RX:
 4478                           #if     NXP_M0_11xx | NXP_M0_1115
 4480                           #endif
 4481                           #ifdef NXP_M0_812
 4482    00000010 ........14400         DC32    DOCON, USART0_RXDAT // 40064014h RXDAT USART0
                  640          
 4483                           #endif
 4484                           
 4485                           //      UART0_TX UART0_TX: ( -- addr ) of UART 0 TX Buffer
 4486                           //      This is the serial terminal.
 4487                           
 4488                            SECTION .text : CONST (2)
 4489                           UART0_TX_NFA:
 4490    00000000 88                    DC8     0x88
 4491    00000001 55415254305F5         DC8     'UART0_T'
                  4            
 4492    00000008 D8                    DC8     'X'+0x80
 4493    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4494    0000000C ........              DC32    UART0_RX_NFA
 4495                           UART0_TX:
 4496                           #if     NXP_M0_11xx | NXP_M0_1115
 4498                           #endif
 4499                           #ifdef NXP_M0_812
 4500    00000010 ........1C400         DC32    DOCON, USART0_TXDAT // 4006401Ch TXDAT USART0
                  640          
 4501                           #endif
 4502                           
 4503                           
 4504                           #ifdef XON_XOFF
 4505                           //      XOFF XOFF: ( -- ) Send XOFF
 4506                           
 4507                            SECTION .text : CONST (2)
 4508                           XOFF_NFA:
 4509    00000000 84                    DC8     0x84
 4510    00000001 584F46                DC8     'XOF'
 4511    00000004 C6                    DC8     'F'+0x80
 4512    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4513    00000008 ........              DC32    UART0_TX_NFA
 4514                           XOFF:
 4515    0000000C ........              DC32    .+5
 4516                            SECTION .text : CODE (2)       // Does not incr OUT and wait for line status
 4517                           #ifdef IO2TP
 4519                           #else
 4520    00000000 ........              BL      TXRDY_SUBR
 4521    00000004 ........              BL      XOFF_SUBR
 4522                                   NEXT
 4522.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4522                                   NEXT1
 4522.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4522.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4522.3                                 ENDM
 4522.4                                 ENDM
 4523                           #endif // #else IO2TP
 4524                           //#endif // XON_XOFF after XON:
 4525                           
 4526                           
 4527                           //      XON XON: ( -- ) Send XON
 4528                           
 4529                            SECTION .text : CONST (2)
 4530                           XON_NFA:
 4531    00000000 83                    DC8     0x83
 4532    00000001 584F                  DC8     'XO'
 4533    00000003 CE                    DC8     'N'+0x80
 4534                            ALIGNROM 2,0xFFFFFFFF
 4535    00000004 ........              DC32    XOFF_NFA
 4536                           XON:
 4537    00000008 ........              DC32    .+5
 4538                            SECTION .text : CODE (2)       // Does not incr OUT or wait for line status.
 4539                           #ifdef IO2TP
 4541                           #else
 4542                           // Required, no 'quick send'
 4543    00000000 ........              BL      TXRDY_SUBR
 4544    00000004 ........              BL      XON_SUBR
 4545                                   NEXT
 4545.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4545                                   NEXT1
 4545.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4545.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4545.3                                 ENDM
 4545.4                                 ENDM
 4546                           #endif // #else IO2TP
 4547                           #endif // XON_XOFF
 4548                           
 4549                           //---------------- EMIT KEY ?KEY CR SECTION ------------------------------
 4550                           
 4551                           //      SPACES SPACES:  ( n -- )
 4552                           //      Transmit n ascii blanks (0x20) to the output device.
 4553                           
 4554                            SECTION .text : CONST (2)
 4555                           SPACES_NFA:
 4556    00000000 86                    DC8     0x86
 4557    00000001 5350414345            DC8     'SPACE'
 4558    00000006 D3                    DC8     'S'+0x80
 4559    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 4560                           #ifdef XON_XOFF
 4561    00000008 ........              DC32    XON_NFA
 4562                           #else
 4564                           #endif
 4565                           SPACES:
 4566    0000000C ........              DC32    DOCOL
 4567    00000010 ........              DC32    ZERO
 4568    00000014 ........              DC32    MAX
 4569    00000018 ........              DC32    ZNDUP
 4570    0000001C ........              DC32    ZBRAN
 4571    00000020 18000000              DC32     SPACES_DONE-.
 4572                           
 4573    00000024 ........              DC32    ZERO
 4574    00000028 ........              DC32    XDO     //DO
 4575                           
 4576                           SPACES_DO:
 4577    0000002C ........              DC32    SPACE
 4578    00000030 ........              DC32    XLOOP   //LOOP
 4579    00000034 F8FFFFFF              DC32     SPACES_DO-.
 4580                           
 4581                           SPACES_DONE:
 4582    00000038 ........              DC32    SEMIS
 4583                           
 4584                           
 4585                           //      SPACE SPACE: ( -- )
 4586                           //      Emit a space character, 0x20.
 4587                           
 4588                            SECTION .text : CONST (2)
 4589                           SPACE_NFA:
 4590    00000000 85                    DC8     0x85
 4591    00000001 53504143              DC8     'SPAC'
 4592    00000005 C5                    DC8     'E'+0x80
 4593    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4594    00000008 ........              DC32    SPACES_NFA
 4595                           SPACE:
 4596    0000000C ........              DC32    DOCOL
 4597    00000010 ........              DC32    BLANK
 4598    00000014 ........              DC32    EMIT
 4599    00000018 ........              DC32    SEMIS
 4600                           
 4601                           
 4602                           //      ID. IDDOT:      ( NFA-addr -- ) ?RENAME .NFA
 4603                           //      Print a definition's name from its name field address.
 4604                           
 4605                            SECTION .text : CONST (2)
 4606                           IDDOT_NFA:
 4607    00000000 83                    DC8     0x83
 4608    00000001 4944                  DC8     'ID'
 4609    00000003 AE                    DC8     '.'+0x80
 4610                            ALIGNROM 2,0xFFFFFFFF
 4611    00000004 ........              DC32    SPACE_NFA
 4612                           IDDOT:
 4613    00000008 ........              DC32    DOCOL
 4614                           //      NOW COUNT is on NFA, fig code copied it out to pad
 4615    0000000C ........              DC32    COUNT   // Count could be SMUDGE'd.
 4616    00000010 ........1F000         DC32    LIT, MAXWORDLEN // Strip SMUDGEing from count
                  000          
 4617    00000018 ........              DC32    ANDD            // only time 
 4618    0000001C ........              DC32    TYPE    // TYPE needs actual count un SMUDGE'd
 4619    00000020 ........              DC32    SPACE
 4620    00000024 ........              DC32    SEMIS
 4621                           
 4622                           
 4623                           //      ." DOTQ:        ( -- ) IMMEDIATE
 4624                           //      Type quoted string out or compile inline string to be typed at runtime
 4625                           //      CHANGED COMPILE TIME ACTION TO WORK WITH 4 byte alighment REQUIREMENT.
 4626                           //      Used in the form:
 4627                           //              .' CCcc"
 4628                           //      Compiles an in-line string CCcc (delimited by the trailing ") with
 4629                           //      an execution proceedure to transmit the text to the output device.
 4630                           //      If executed outside a definition, ." will immediately print the text
 4631                           //      until the final ',. The maximum number of characters may be an
 4632                           //      installation dependent value. See (.").
 4633                           
 4634                            SECTION .text : CONST (2)
 4635                           DOTQ_NFA:
 4636    00000000 C2                    DC8     0x0C2
 4637    00000001 2E                    DC8     '.'
 4638    00000002 A2                    DC8     '"'+0x80
 4639    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4640    00000004 ........              DC32    IDDOT_NFA
 4641                           DOTQ:
 4642    00000008 ........              DC32    DOCOL
 4643    0000000C ........22000         DC32    LIT, '"'        // 0x22 ending qoute delimiter for WORD
                  000          
 4644    00000014 ........              DC32    STATE_SV
 4645    00000018 ........              DC32    AT
 4646    0000001C ........              DC32    ZBRAN   // IF Not COMPILING
 4647    00000020 2C000000              DC32     DOTQ1-.
 4648                           
 4649    00000024 ........              DC32    COMP    // COMPILING
 4650    00000028 ........              DC32    PDOTQ   // compile LIT, cnt-str-addr, count, type
 4651    0000002C ........              DC32    WORD   // ( cH-DELIM  --- )  CHCNT-STR OF TOKEN TO HERE
 4652    00000030 ........              DC32    HERE
 4653    00000034 ........              DC32    CAT
 4654    00000038 ........              DC32    ONEP
 4655    0000003C ........              DC32    ALIGNED
 4656    00000040 ........              DC32    ALLOT_PRIM
 4657    00000044 ........              DC32    BRAN    // ELSE
 4658    00000048 14000000              DC32     DOTQ2-.
 4659                           DOTQ1:
 4660    0000004C ........              DC32    WORD   // ( cH-DELIM  --- )  CHCNT-STR OF TOKEN TO HERE
 4661    00000050 ........              DC32    HERE
 4662    00000054 ........              DC32    COUNT
 4663    00000058 ........              DC32    TYPE    // TYPE needs actual count un SMUDGE'd
 4664                                                   // endif
 4665                           #ifdef IO2TP
 4668                           #endif
 4669                           DOTQ2:
 4670    0000005C ........              DC32    SEMIS
 4671                           
 4672                           
 4673                           //      TYPE TYPE:      ( addr count -- )
 4674                           //      ADDR must be ALIGNED!
 4675                           //      OUT MUST BE INITIALIZED!!
 4676                           //      EMIT COUNT OF 8-bits in a string, preferably ascii characters,
 4677                           //      (last nfa char (+80h)ok!) from addr thru count,
 4678                           
 4679                            SECTION .text : CONST (2)
 4680                           TYPE_NFA:
 4681    00000000 84                    DC8     0x84
 4682    00000001 545950                DC8     'TYP'
 4683    00000004 C5                    DC8     'E'+0x80
 4684    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4685    00000008 ........              DC32    DOTQ_NFA
 4686                           TYPE:
 4687    0000000C ........              DC32    DOCOL
 4688    00000010 ........              DC32    ZNDUP
 4689    00000014 ........              DC32    ZBRAN   // IF NOTHING TO TYPE
 4690    00000018 34000000              DC32     TYPE1-.
 4691                           
 4692                           #ifdef XON_XOFF
 4693    0000001C ........              DC32    XOFF    // TEMP TEST THRE
 4694                           #endif
 4695    00000020 ........              DC32    OVER
 4696    00000024 ........              DC32    PLUS
 4697    00000028 ........              DC32    SWAP
 4698    0000002C ........              DC32    XDO     // DO
 4699                           TYPE2:
 4700    00000030 ........              DC32    I
 4701    00000034 ........              DC32    CATLT7F // Limit output to ASCII characters under 80h
 4702    00000038 ........              DC32    EMIT
 4703                           tt1:
 4704    0000003C ........              DC32    XLOOP   // LOOP
 4705                           tt2:
 4706    00000040 F0FFFFFF              DC32     TYPE2-.
 4707                           
 4708    00000044 ........              DC32    BRAN    // ELSE
 4709    00000048 08000000              DC32     TYPE3-.
 4710                           TYPE1:
 4711    0000004C ........              DC32    DROP    // endif
 4712                           TYPE3:
 4713    00000050 ........              DC32    SEMIS
 4714                           
 4715                           
 4716                           //      EMIT EMIT:      ( c -- )
 4717                           //      Transmit ascii character c to the selected output device. OUT is
 4718                           //      incremented for each character output.
 4719                           
 4720                            SECTION .text : CONST (2)
 4721                           EMIT_NFA:
 4722    00000000 84                    DC8     0x84
 4723    00000001 454D49                DC8     'EMI'
 4724    00000004 D4                    DC8     'T'+0x80
 4725    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4726    00000008 ........              DC32    TYPE_NFA
 4727                           EMIT:
 4728                           //------------------------------------------------------------------------------
 4729                           #ifndef IO2TP
 4730                           // NOT IO2TP SECTION:
 4731    0000000C ........              DC32    .+5
 4732                            SECTION .text : CODE (2)
 4733                                   POP2t                   // GET CHAR
 4733.1                         #ifndef TOSCT
 4733.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
 4733.3                         #endif
 4733.4  00000002 3F1D                  ADDS    p, p, #4
 4733.5                                 ENDM
 4734    00000004 ........              BL      TXRDY_SUBR
 4735                           #if     NXP_M0_11xx | NXP_M0_1115
 4737                           #endif
 4738                           #ifdef NXP_M0_812
 4739    00000008 0449                  LDR     n, = USART0_TXDAT // EMIT 4006401Ch TXDAT USART0
 4740                           #endif
 4741                           // BSOUT handles negative OUT issue
 4742    0000000A 0870                  STRB    t, [n]          // EMIT (Send) Char
 4743    0000000C 0449                  LDR     n, = OUT        // Increment Out
 4744    0000000E 0868                  LDR     t, [n]
 4745    00000010 401C                  ADDS    t, t, #1
 4746    00000012 0860                  STR     t, [n]
 4747                                   NEXT
 4747.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4747                                   NEXT1
 4747.1  00000016 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4747.2  00000018 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4747.3                                 ENDM
 4747.4                                 ENDM
 4748                           #else // if IO2TP Transmit char to PAD, increment OUT
 4764                           #endif  // else IO2TP
 4765    0000001A 0000           LTORG
 4765.1                                  TABLE
 4765.2  0000001C 1C400640              Reference on line 4739
 4765.3  00000020 ........              Reference on line 4743
 4766                           
 4767                           
 4768                           //      KEY KEY:        (  -- ch )
 4769                           
 4770                            SECTION .text : CONST (2)
 4771                           KEY_NFA:
 4772    00000000 83                    DC8     0x83
 4773    00000001 4B45                  DC8     'KE'
 4774    00000003 D9                    DC8     'Y'+0x80
 4775                            ALIGNROM 2,0xFFFFFFFF
 4776    00000004 ........              DC32    EMIT_NFA
 4777                           KEY_INTERPRETED_ENTRY:
 4778                           #ifndef IO2TP
 4779    00000008 ........              DC32    DOCOL
 4780                           #ifdef XON_XOFF
 4781                           // EXEC SETS XOFF SO UNDO IT
 4782    0000000C ........              DC32    XON     // USER called or compiled only!
 4783                           // TEST XON_XOFF TEMINAL COMPLIANCE WITH KEY .S <CR> Send Break to bypass!
 4784                           //        DC32    XOFF
 4785                           #endif
 4786    00000010 ........              DC32    KEY
 4787    00000014 ........              DC32    SEMIS
 4788                           #else
 4790                           #endif
 4791                           
 4792                           //:NONAME KEY KEY:      ( -- CH ) 
 4793                           // This is the FISH System KEY compiled in the FISH RM
 4794                           // KEY_INTERPRETED_ENTRY is the user interpreted/compiled hi-level version
 4795                           // That issues XON  before calling this KEY
 4796                           KEY:
 4797                           #ifndef IO2TP
 4798    00000018 ........              DC32    .+5
 4799                            SECTION .text : CODE (2)
 4800                           #if     NXP_M0_11xx | NXP_M0_1115
 4803                           #endif
 4804                           #ifdef NXP_M0_812
 4805    00000000 054A                  LDR     w, = USART0_RXDAT // 40064014h RXDAT USART0
 4806    00000002 064B                  LDR     x, = UART0_STAT // 40064008h UART0 STAT Line Status Register 
 4807                           #endif
 4808                           // UART0_STAT / UART0_LSR : BIT 0 = RXRDY FLAG
 4809                           // A BREAK CONDITION (FROM SINGLE STEPPING) WILL SHOW AS 30h in THE LSR
 4810                           // WHEN A TERMINAL SENDS A BREAK THE CARRY IS MAGICALLY SET!
 4811                           // AND THE KEY RECIEVED IS NULL SO NULL IS EXECUTED WITHOUT A CR!
 4812                           rxRDY?:
 4813    00000004 1968                  LDR     n, [x]          // Get Line Status
 4814    00000006 4908                  LSRS    n, n, #1        // Char available
 4815    00000008 FCD3                  BCC     rxRDY?          // sets carry flag
 4816                           
 4817    0000000A 1068                  LDR     t, [w]
 4818                                   TPUSH
 4818                                   PUSHt   // push t to p, pre decrement p
 4818.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4818.2  0000000E 3860                  STR     t, [p]
 4818.3                                 ENDM
 4818                                   NEXT
 4818.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4818                                   NEXT1
 4818.1  00000012 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4818.2  00000014 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4818.3                                 ENDM
 4818.4                                 ENDM
 4818.5                                 ENDM
 4819                           #else
 4822                           #endif  // else IO2TP
 4823    00000016 0000           LTORG
 4823.1                                  TABLE
 4823.2  00000018 14400640              Reference on line 4805
 4823.3  0000001C 08400640              Reference on line 4806
 4824                           
 4825                           
 4826                           //      ?KEY QKEY: ( -- f )
 4827                           //      Return zero unless key in fifo - key is not consumed.
 4828                           //      : TB BEGIN ?BREAK UNTIL ; Will execute until any key is entered.
 4829                           
 4830                            SECTION .text : CONST (2)
 4831                           QKEY_NFA:
 4832    00000000 84                    DC8     0x84
 4833    00000001 3F4B45                DC8     '?KE'
 4834    00000004 D9                    DC8     'Y'+0x80
 4835    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4836    00000008 ........              DC32    KEY_NFA // -1
 4837                           QKEY:
 4838    0000000C ........              DC32    .+5
 4839                            SECTION .text : CODE (2)
 4840                           #ifndef IO2TP
 4841                           #ifdef XON_XOFF // XON in QKEY
 4842    00000000 ........              BL      TXRDY_SUBR
 4843    00000004 ........              BL      XON_SUBR
 4844                           #endif
 4845                           #if     NXP_M0_11xx | NXP_M0_1115
 4847                           #endif
 4848                           #ifdef NXP_M0_812
 4849    00000008 084B                  LDR     x, = UART0_STAT // 40064008h UART0 STAT Line Status Register 
 4850                           #endif
 4851    0000000A 1968                  LDR     n, [x]          // Get Line Status
 4852                           // UART0_STAT / UART0_LSR : BIT 0 = RXRDY FLAG
 4853    0000000C 4908                  LSRS    n, n, #1        // Char available
 4854    0000000E 06D3                  BCC     NO_KEY          // No char, not Ready
 4855                           
 4856                           // HAVE A KEY - DON'T CONSUME IT
 4857                           #ifdef TRUE_EQU_NEG_ONE
 4858    00000010 4040                  EORS    t, t    // zero t
 4859    00000012 0138                  SUBS    t, #1   // -1
 4860                           #else
 4862                           #endif
 4863                                   TPUSH
 4863                                   PUSHt   // push t to p, pre decrement p
 4863.1  00000014 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4863.2  00000016 3860                  STR     t, [p]
 4863.3                                 ENDM
 4863                                   NEXT
 4863.1  00000018 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4863                                   NEXT1
 4863.1  0000001A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4863.2  0000001C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4863.3                                 ENDM
 4863.4                                 ENDM
 4863.5                                 ENDM
 4864                           
 4865                           #endif  // DEFAULT TO NO KEY IF IO2TP
 4866                           NO_KEY:
 4867    0000001E 4040                  EORS    t, t    // zero t
 4868                                   TPUSH
 4868                                   PUSHt   // push t to p, pre decrement p
 4868.1  00000020 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 4868.2  00000022 3860                  STR     t, [p]
 4868.3                                 ENDM
 4868                                   NEXT
 4868.1  00000024 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4868                                   NEXT1
 4868.1  00000026 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4868.2  00000028 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4868.3                                 ENDM
 4868.4                                 ENDM
 4868.5                                 ENDM
 4869    0000002A 0000           LTORG
 4869.1                                  TABLE
 4869.2  0000002C 08400640              Reference on line 4849
 4870                           
 4871                           
 4872                           //      CRS CRS:        ( n -- )
 4873                           //      Emit n cr'S (0x0d) and lf (0x0A)
 4874                           
 4875                            SECTION .text : CONST (2)
 4876                           CRS_NFA:
 4877    00000000 83                    DC8     0x83
 4878    00000001 4352                  DC8     'CR'
 4879    00000003 D3                    DC8     'S'+0x80
 4880                            ALIGNROM 2,0xFFFFFFFF
 4881    00000004 ........              DC32    QKEY_NFA
 4882                           CRS:
 4883    00000008 ........              DC32    DOCOL
 4884    0000000C ........              DC32    ZERO
 4885    00000010 ........              DC32    XDO
 4886                           CRS_BEGIN:
 4887    00000014 ........              DC32    CR
 4888    00000018 ........              DC32    XLOOP
 4889    0000001C F8FFFFFF              DC32     CRS_BEGIN-.
 4890    00000020 ........              DC32    SEMIS
 4891                           
 4892                           
 4893                           //      CR CR:  ( -- )
 4894                           //      Emit cr (0x0d) and lf (0x0A)
 4895                           
 4896                            SECTION .text : CONST (2)
 4897                           CR_NFA:
 4898    00000000 82                    DC8     0x82
 4899    00000001 43                    DC8     'C'
 4900    00000002 D2                    DC8     'R'+0x80
 4901    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4902    00000004 ........              DC32    CRS_NFA
 4903                           CR:
 4904                           #ifdef IO2TP
 4907                           #else
 4908    00000008 ........              DC32    DOCOL
 4909    0000000C ........00000         DC32    STRVA, 0, OUT
                  000........  
 4910    00000018 ........              DC32    PDOTQ
 4911    0000001C 02                    DC8     2
 4912    0000001D 0D0A                  DC8     0x0D, 0x0A
 4913    0000001F FF             ALIGNROM 2,0xFFFFFFFF
 4914    00000020 ........              DC32    SEMIS
 4915                           #endif
 4916                           
 4917                           
 4918                           //=============================== WORDCAT ====================================//
 4919                           //NOEXEC HEADERFORWORDCATEGORIES
 4920                           //!!!!!fixx in nxp
 4921                           //      WC_FISH_IO_NFA = FISH IO: CATEGORY
 4922                           
 4923                            SECTION .text : CONST (2)
 4924                           WC_UARTx_NFA:
 4925    00000000 8D                    DC8     0x80+4+9
 4926    00000001 0D0A                  DC8     0x0D, 0x0A
 4927    00000003 4649534820494         DC8     'FISH IO:'
                  F3A          
 4928    0000000B 0D8A                  DC8     0x0D, 0x0A+0x80
 4929    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4930    00000010 ........              DC32    CR_NFA
 4931                           
 4932                           
 4933                           //      CMSIS_ENABLE_IRQS IRQS_RESUME:  ( -- )
 4934                            SECTION .text : CONST (2)
 4935                           IRQS_RESUME_NFA:
 4936    00000000 8B                    DC8     0x8B
 4937    00000001 495251535F524         DC8     'IRQS_RESUM'
                  553554D      
 4938    0000000B C5                    DC8     'E'+0x80
 4939                            ALIGNROM 2,0xFFFFFFFF
 4940    0000000C ........              DC32    WC_UARTx_NFA
 4941                           CMSIS_ENABLE_IRQS:
 4942    00000010 ........              DC32 .+5
 4943                            SECTION .text : CODE (2)
 4944                            ALIGNROM 2,0xFFFFFFFF
 4945                            IMPORT C_CMSIS_ENABLE_IRQS
 4946    00000000 ........              BL      C_CMSIS_ENABLE_IRQS
 4947                                   NEXT
 4947.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4947                                   NEXT1
 4947.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4947.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4947.3                                 ENDM
 4947.4                                 ENDM
 4948                           
 4949                           //      CMSIS_DISABLE_IRQS IRQS_SUSPEND:        ( -- )
 4950                            SECTION .text : CONST (2)
 4951                           IRQS_SUSPEND_NFA:
 4952    00000000 8C                    DC8     0x8C
 4953    00000001 495251535F535         DC8     'IRQS_SUSPEN'
                  55350454E    
 4954    0000000C C4                    DC8     'D'+0x80
 4955    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4956    00000010 ........              DC32    IRQS_RESUME_NFA
 4957                           CMSIS_DISABLE_IRQS:
 4958    00000014 ........              DC32 .+5
 4959                            SECTION .text : CODE (2)
 4960                            ALIGNROM 2,0xFFFFFFFF
 4961                            IMPORT C_CMSIS_DISABLE_IRQS
 4962    00000000 ........              BL      C_CMSIS_DISABLE_IRQS
 4963                                   NEXT
 4963.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4963                                   NEXT1
 4963.1  00000006 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4963.2  00000008 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4963.3                                 ENDM
 4963.4                                 ENDM
 4964                           
 4965                           
 4966                           //      SYSTICK_IRQ_OFF SYSTICK_IRQ_OFF:        ( -- )
 4967                           //      Turn SYSTICK interrupt off.
 4968                           //      STCTR only incremented when SYSTICK interrupt is on.
 4969                           //      STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 4970                            SECTION .text : CONST (2)
 4971                           SYSTICK_IRQ_OFF_NFA:
 4972    00000000 8F                    DC8     0x8F
 4973    00000001 5359535449434         DC8     'SYSTICK_IRQ_OF'
                  B5F4952515F4F
                  46           
 4974    0000000F C6                    DC8     'F'+0x80
 4975                            ALIGNROM 2,0xFFFFFFFF
 4976    00000010 ........              DC32    IRQS_SUSPEND_NFA
 4977                           //        DC32    WC_UARTx_NFA
 4978                           SYSTICK_IRQ_OFF:
 4979    00000014 ........              DC32    .+5
 4980                            SECTION .text : CODE (2)
 4981    00000000 0249                  LDR     n, = SYST_CSR   // SYSTICK Control and Status Register
 4982    00000002 0520                  MOVS    t, #5
 4983    00000004 0860                  STR     t, [n]
 4984                                   NEXT
 4984.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 4984                                   NEXT1
 4984.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 4984.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 4984.3                                 ENDM
 4984.4                                 ENDM
 4985                           // LTORG         //Always outside of code, else data in words
 4986                           
 4987                           
 4988                           //      SYSTICK_IRQ_ON SYSTICK_IRQ_ON:  ( -- )
 4989                           //      Turn SYSTICK interrupt on.
 4990                           //      STCTR only incremented when SYSTICK interrupt is on.
 4991                           //      STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 4991.1                                  TABLE
 4991.2  0000000C 10E000E0              Reference on line 4981
 4992                            SECTION .text : CONST (2)
 4993                           SYSTICK_IRQ_ON_NFA:
 4994    00000000 8E                    DC8     0x8E
 4995    00000001 5359535449434         DC8     'SYSTICK_IRQ_O'
                  B5F4952515F4F
 4996    0000000E CE                    DC8     'N'+0x80
 4997    0000000F FF             ALIGNROM 2,0xFFFFFFFF
 4998    00000010 ........              DC32    SYSTICK_IRQ_OFF_NFA
 4999                           SYSTICK_IRQ_ON:
 5000    00000014 ........              DC32    .+5
 5001                            SECTION .text : CODE (2)
 5002    00000000 0249                  LDR     n, = SYST_CSR   // SYSTICK Control and Status Register
 5003    00000002 0720                  MOVS    t, #7
 5004    00000004 0860                  STR     t, [n]
 5005                                   NEXT
 5005.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 5005                                   NEXT1
 5005.1  00000008 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5005.2  0000000A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5005.3                                 ENDM
 5005.4                                 ENDM
 5006                            LTORG   //Always outside of code, else data in words
 5006.1                                  TABLE
 5006.2  0000000C 10E000E0              Reference on line 5002
 5007                           
 5008                           //=============================== WORDCAT ====================================//
 5009                           //NOEXEC HEADERFORWORDCATEGORIES
 5010                           //      WC_IRQ_NFA = INTERRUPTS: CATEGORY
 5011                           
 5012                            SECTION .text : CONST (2)
 5013                           WC_IRQ_NFA:
 5014    00000000 8F                    DC8     0x80+4+11
 5015    00000001 0D0A                  DC8     0x0D, 0x0A
 5016    00000003 494E544552525         DC8     'INTERRUPTS:'
                  55054533A    
 5017    0000000E 0D8A                  DC8     0x0D, 0x0A+0x80
 5018                            ALIGNROM 2,0xFFFFFFFF
 5019    00000010 ........              DC32    SYSTICK_IRQ_ON_NFA
 5020                           //------------------------------------------------------------------------------
 5021                           $FISH_NXP_M0_FLASH.s       // FLASH_SAVE and FLASH_FORGET Words
    1                           // FISH_NXP_FLASH.s
    2                           // FLASH_SAVE, FLASH_FORGET, FLASH_SCAN and support :NONAME's 
    3                           
    4                           //      FLASH_SAVE FLASH_SAVE:  ( -- ) Save RAM to Flash
    5                           
    6                            SECTION .text : CONST (2)
    7                           FLASH_SAVE_NFA:
    8    00000000 8A                    DC8     0x80+10
    9    00000001 464C4153485F5         DC8     'FLASH_SAV'
                  34156        
   10    0000000A C5                    DC8     'E'+0x80
   11    0000000B FF             ALIGNROM 2,0xFFFFFFFF
   12                           //#ifdef SRM
   13                           //      DC32    WC_UARTx_NFA
   14                           //#else
   15    0000000C ........              DC32    WC_IRQ_NFA
   16                           //#endif
   17                           FLASH_SAVE:
   18    00000010 ........              DC32    DOCOL   // LAST FPA WILL BE LESS THAN FPC
   19                           // SOMETHING TO SAVE TEST - IF LATEST IS NOT IN ROM
   20    00000014 .............         DC32    LATEST, DBASE, LESSTHAN
                  ...........  
   21    00000020 ........              DC32    ZBRAN
   22    00000024 20000000              DC32     FLPT-.
   23                           
   24    00000028 ........              DC32    CR
   25    0000002C ........              DC32    PDOTQ
   26    00000030 0F                    DC8     15D
   27    00000031 4E4F5448494E4         DC8     'NOTHING TO SAVE'
                  720544F205341
                  5645         
   28                            ALIGNROM 2,0xFFFFFFFF
   29    00000040 ........              DC32    SEMIS
   30                           
   31                           // SAVE PAGE IF 
   32                           FLPT:
   33                           // LAST PAGE USED TEST - PPAGE = PAST PAGE
   34    00000044 .............         DC32    FPADDR, AT
                  ...          
   35    0000004C ........00400         DC32    LIT, FLASH_PPAGE
                  000          
   36    00000054 ........              DC32    EQUAL
   37                           // DC32 NOOP
   38    00000058 ........              DC32    ZBRAN           // then save it
   39    0000005C 28000000              DC32     FSAVE-.
   40                                   
   41                           FSLASTPAGE:
   42    00000060 ........              DC32    CR
   43    00000064 ........              DC32    PDOTQ
   44    00000068 14                    DC8     20D
   45    00000069 4C41535420464         DC8     'LAST FLASH PAGE USED'
                  C415348205041
                  4745205553454
                  4            
   46    0000007D FFFFFF         ALIGNROM 2,0xFFFFFFFF
   47    00000080 ........              DC32    SEMIS
   48                           
   49                           // Setup for saving - Assumes no error in relocation
   50                           // Based on relocating UP and Latest to FPVAR and FPCURR
   51                           FSAVE:
   52                           // FPA SHOULD BE SET BY FLASH_SCAN IN WARM OR BY FISH OR FISH_ONLY
   53                           // FPCURR AND FPVAR SAVE
   54    00000084 .............         DC32    UP_SV, AT, FPVAR, STORE
                  .............
                  ......       
   55    00000094 .............         DC32    LATEST, TOFA, FPCURR, STORE
                  .............
                  ......       
   56                           
   57                           // KEEP RELOCATING ONE WORD AT A TIME UNTIL RECHING FIRST WORD (DBASE)
   58                           FS_BEGIN:
   59    000000A4 .............         DC32    LATEST, DBASE, EQUAL
                  ...........  
   60    000000B0 ........              DC32    ZBRAN
   61    000000B4 58000000              DC32     FS_RWORD-.
   62                           
   63                           // AFTER LAST WORD RELOCATED
   64                           FS_WRITE:
   65    000000B8 ........              DC32    FLASHWRITE                      // Write page
   66    000000BC .............         DC32    DBASE, DP_SV, STORE             // Reset DP
                  ...........  
   67    000000C8 .............         DC32    FPVAR, AT, UP_SV, STORE         // and UP
                  .............
                  ......       
   68    000000D8 .............         DC32    FPCURR, AT, CURRENT_SV, STORE   // and CURRENT to nothing in RAM
                  .............
                  ......       
   69                           
   70                           // UPDATE FPADDR - WILL BE FLASH_PPAGE WHEN ALL PAGES USED
   71    000000E8 ........00040         DC32    LIT, FLASH_WR_SIZE, FPADDR, PSTORE
                  000..........
                  ......       
   72                           
   73                           // FLASH_SAVE Finish
   74                           FS_EXIT:
   75    000000F8 ........              DC32    FLASH_SCAN      // Show Save done via Flash Page status
   76                           #ifndef SRM
   77    000000FC .............         DC32    CR, DOTVARSPACE, DOTDICTSPACE
                  ...........  
   78                           #endif
   79    00000108 ........              DC32    SEMIS
   80                           
   81                           FS_RWORD:
   82    0000010C .............         DC32    LATEST, RWORD   // Relocate this word, unlink it
                  ...          
   83    00000114 ........              DC32    BRAN            // Repeat until LATEST = DBASE
   84    00000118 8CFFFFFF              DC32     FS_BEGIN-.
   85                           
   86                           
   87                           //:NONAME       FPADDR: ( -- addr ) Flash Page Addreess to operate on.
   88                            SECTION .text : CONST (2)
   89                           FPADDR:
   90    00000000 .............         DC32    DOCON, FPA
                  ...          
   91                           
   92                           
   93                           //:NONAME       FPCURR: ( -- addr ) Flash Page CURRENT is NFA of last word saved in Flash.
   94                            SECTION .text : CONST (2)
   95                           FPCURR:
   96    00000000 .............         DC32    DOCON, FPC
                  ...          
   97                           
   98                           
   99                           //:NONAME       FPVAR:  ( -- addr ) Flash Page VAR is UP value when Flash page saved.
  100                            SECTION .text : CONST (2)
  101                           FPVAR:
  102    00000000 .............         DC32    DOCON, FPSV
                  ...          
  103                           
  104                           //:NONAME >FA >FA:      ( addr -- raddr ) Relocate address relative to FPADDR.
  105                           //      Convert address to raddr using FPADDR, which must be initialized.
  106                            SECTION .text : CONST (2)
  107                           TOFA:
  108    00000000 ........              DC32    .+5
  109                            SECTION .text : CODE (2)
  110                                   POP2t
  110.1                         #ifndef TOSCT
  110.2  00000000 3868                  LDR     t, [p]          // pop tos to t, post increment p
  110.3                         #endif
  110.4  00000002 3F1D                  ADDS    p, p, #4
  110.5                                 ENDM
  111    00000004 044A                  LDR     w, = 0x0FFF
  112    00000006 1040                  ANDS    t, t, w
  113    00000008 044A                  LDR     w, = FPA
  114    0000000A 1268                  LDR     w, [w]
  115    0000000C 8018                  ADDS    t, t, w 
  116                                   TPUSH
  116                                   PUSHt   // push t to p, pre decrement p
  116.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
  116.2  00000010 3860                  STR     t, [p]
  116.3                                 ENDM
  116                                   NEXT
  116.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  116                                   NEXT1
  116.1  00000014 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  116.2  00000016 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  116.3                                 ENDM
  116.4                                 ENDM
  116.5                                 ENDM
  117                            LTORG   //Always outside of code, else data in words
  117.1                                  TABLE
  117.2  00000018 FF0F0000              Reference on line 111
  117.3  0000001C ........              Reference on line 113
  118                           
  119                           
  120                           //:NONAME RWORD:        ( nfa -- ) Relocate this word relative to FPADDR
  121                           //      Relocate word specified by it's NFA to FPADDR relative addresses
  122                           //      Handle case of CON/VAR, CREATE_DOES_GOTO, PDOTQ and LIT by not relocating them.
  123                           //      RLIT's WILL BE RELOCATED - LIT's WILL NOT.
  124                            SECTION .text : CONST (2)
  125                           RWORD:
  126    00000000 ........              DC32    DOCOL
  127    00000004 .............         DC32    PFA, DUP, TOR   // SAVE FOR RELOCATING LFA
                  ...........  
  128    00000010 ........              DC32    CFA             // REAL CFA OF THSI WORD
  129                           
  130                           CFA_CREATE_DOES_GOTO:
  131    00000014 .............         DC32    DUP, AT
                  ...          
  132    0000001C .............         DC32    LIT, CREATE_DOES_GOTO
                  ...          
  133    00000024 ........              DC32    EQUAL
  134    00000028 ........              DC32    ZBRAN           // IF NOT CREATE_DOES_GOTO
  135    0000002C 28000000              DC32     RW_DOCONVAR-.  // PROCESS WORD UNTIL SEMIS
  136                           
  137    00000030 .............         DC32    FOURP, DUP, DUP // INCR TO ADDR
                  ...........  
  138    0000003C .............         DC32    AT, TOFA        // TO RELOCATE
                  ...          
  139    00000044 .............         DC32    SWAP, STORE     // AND 
                  ...          
  140    0000004C ........              DC32    BRAN            // THEN
  141    00000050 00010000              DC32     RW_UNTIL-.     // DONE SO GO FIX LFA
  142                           
  143                           RW_DOCONVAR:
  144                           // CHECK FOR DOCON AND DOVAR
  145    00000054 .............         DC32    DUP, AT
                  ...          
  146    0000005C .............         DC32    LIT, DOCON
                  ...          
  147    00000064 ........              DC32    EQUAL
  148                           
  149    00000068 .............         DC32    OVER, AT        // COPY CFA AGAIN
                  ...          
  150    00000070 .............         DC32    LIT, DOVAR
                  ...          
  151    00000078 ........              DC32    EQUAL
  152                                   
  153    0000007C ........              DC32    OR              // DOCON OR DOVAR
  154    00000080 ........              DC32    ZBRAN           // IF NOT DOCON OR DOVAR
  155    00000084 10000000              DC32     RW_BEGIN-.     // PROCESS WORD UNTIL SEMIS
  156                           // IS DOCON OR DOVAR
  157    00000088 ........              DC32    DROP            // CFA
  158    0000008C ........              DC32    BRAN
  159    00000090 C4000000              DC32     RW_LFA-.       // THIS WORD DONE - FIX LFA
  160                           
  161                           // CFA -- BECOMES EACH WORD IN BODY OF THIS DEFINITION
  162                           RW_BEGIN:
  163    00000094 .............         DC32    FOURP, DUP, AT  // Next WORD in body to evaluate
                  ...........  
  164                           // RLIT's WILL BE RELOCATED - LIT's WILL NOT
  165                           CFA_LIT:
  166    000000A0 .............         DC32    LIT, LIT, EQUAL
                  ...........  
  167    000000AC ........              DC32    ZBRAN           // IF NOT LITERAL
  168    000000B0 10000000              DC32     CFA_PDOTQ-.    // CHECK FOR PDOTQ
  169                           // IS LITERAL SO SKIP TO NEXT WORD IN THIS DEFINITION
  170    000000B4 ........              DC32    FOURP           
  171    000000B8 ........              DC32    BRAN
  172    000000BC D8FFFFFF              DC32     RW_BEGIN-.
  173                           
  174                           CFA_PDOTQ:
  175    000000C0 .............         DC32    DUP, AT
                  ...          
  176    000000C8 .............         DC32    LIT, PDOTQ, EQUAL
                  ...........  
  177    000000D4 ........              DC32    ZBRAN           // IF NOT PDOTQ
  178    000000D8 20000000              DC32     CFA_SEMIS-.    // LOOK FOR SEMIS
  179                           // PDOTQ SO BYPASS TEXT AND LOOK FOR NEXT WORD IN THIS DEFINITION
  180    000000DC .............         DC32    DUP, FOURP, CAT
                  ...........  
  181    000000E8 ........              DC32    PLUS
  182    000000EC ........              DC32    ALIGNED
  183    000000F0 ........              DC32    BRAN
  184    000000F4 A0FFFFFF              DC32     RW_BEGIN-.
  185                           
  186                           CFA_SEMIS:
  187    000000F8 .............         DC32    DUP, AT         // USE THIS AS UNTIL FLAG TO FINISH
                  ...          
  188    00000100 .............         DC32    LIT, SEMIS, EQUAL
                  ...........  
  189    0000010C .............         DC32    ZEQU, ZBRAN     // IF AT SEMIS
                  ...          
  190    00000114 3C000000              DC32     RW_UNTIL-.     // DONE SO GO FIX LFA
  191                           
  192                           RELOC_THIS_WORD:
  193                           // NOT AT SEMIS - IS THIS A ADDRESS TO RELOCATE?
  194    00000118 .............         DC32    DUP, AT         // IF THIS IS NOT IN RAM
                  ...          
  195    00000120 .............         DC32    DBASE, GREATERTHAN
                  ...          
  196    00000128 ........              DC32    ZBRAN           // THEN CHECK NEXT WORD IN THIS DEFINITION
  197    0000012C 68FFFFFF              DC32     RW_BEGIN-.
  198                           // THIS IS A RAM ADDRESS THAT NEEDS TO BE RELOCATED TO A FLASH ADDRESS
  199    00000130 .............         DC32    DUP, DUP, AT    // PICKUP RAM ADDRESS
                  ...........  
  200    0000013C ........              DC32    TOFA            // RELOCATE THIS ADDRESS TO A FLASH ADDRESS
  201    00000140 .............         DC32    SWAP, STORE     // PUT IT BACK
                  ...          
  202    00000148 ........              DC32    BRAN
  203    0000014C 48FFFFFF              DC32     RW_BEGIN-.     // THEN CHECK NEXT WORD IN THIS DEFINITION
  204                           
  205                           RW_UNTIL:
  206                           // ADDRESS OF SEMI OR LAST WORD IN THIS DEFINITION
  207    00000150 ........              DC32    DROP            // COME FROM SEMIS MATCH
  208                           RW_LFA: // RELOCATE LFA AND SET CURRENT/LATEST TO Next WORD
  209    00000154 ........              DC32    RFROM           // PFA OF THIS DEFINITION
  210    00000158 .............         DC32    LFA, DUP, AT    // GET IT'S LFA
                  ...........  
  211    00000164 ........              DC32    DUP             // AND STORE TO CURRENT AND THIS DEF'S LFA
  212    00000168 .............         DC32    CURRENT_SV, STORE
                  ...          
  213    00000170 .............         DC32    TOFA, SWAP, STORE
                  ...........  
  214    0000017C ........              DC32    SEMIS
  215                           
  216                           
  217                           //:NONAME FLASHPREP:    ( -- ) Prepare FPADDR Flash page for writing
  218                           //      PREPARE SECTORS FOR WRITE OPERATION USING FPADDR
  219                            SECTION .text : CONST (2)
  220                           FLASHPREP:
  221    00000000 ........              DC32 .+5
  222                            SECTION .text : CODE (2)
  223                           #ifdef TOSCT
  225                           #endif
  226    00000000 0648                  LDR     t, = FLASHCMD           // t and n DO NOT SURVIVE FLASHCALL
  227    00000002 0749                  LDR     n, = FLASHRET
  228    00000004 3222                  LDR     w, = 50                 // Prepare sector to write
  229    00000006 0260                  STR     w, [t]
  230    00000008 064B                  LDR     x, = FPA                // DERIVE SECTOR
  231    0000000A 1A68                  LDR     w, [x]                  // FROM PAGE ADDR
  232                           #if NXP_M0_032kFlash_4KWrite | NXP_M0_064kFlash_4KWrite
  234                           #endif
  235                           #ifdef NXP_M0_016kFlash_1KWrite
  236    0000000C 920A                  LSRS    w, w, #10       // BY SHIFTING RIGHT BY 10
  237                           #endif
  238    0000000E 4260                  STR     w, [t,#4]
  239    00000010 8260                  STR     w, [t,#8]
  240    00000012 054B                  LDR     x, = IAPCALL
  241    00000014 9847                  BLX     x
  242                           #ifdef TOSCT
  244                           #endif
  245                                   NEXT    // FLASHPREP
  245.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  245                                   NEXT1
  245.1  00000018 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  245.2  0000001A 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  245.3                                 ENDM
  245.4                                 ENDM
  246                            LTORG   //Always outside of code, else data in words
  246.1                                  TABLE
  246.2  0000001C ........              Reference on line 226
  246.3  00000020 ........              Reference on line 227
  246.4  00000024 ........              Reference on line 230
  246.5  00000028 F11FFF1F              Reference on line 240
  247                           
  248                           
  249                           //:NONAME FLASHESEC:    ( -- ) Erase Flash sectors using FPADDR - flashprep 1rst!
  250                           //      MUST USE FLASHPREP FIRST.
  251                            SECTION .text : CONST (2)
  252                           FLASHESEC:
  253    00000000 ........              DC32 .+5
  254                            SECTION .text : CODE (2)
  255                           #ifdef TOSCT
  257                           #endif
  258    00000000 0748                  LDR     t, = FLASHCMD   // t and n DO NOT SURVIVE FLASHCALL
  259    00000002 0849                  LDR     n, = FLASHRET
  260    00000004 3422                  LDR     w, = 52         // Prepare sector to write
  261    00000006 0260                  STR     w, [t]
  262    00000008 074B                  LDR     x, = FPA        // DERIVE SECTOR
  263    0000000A 1A68                  LDR     w, [x]          // FROM PAGE ADDR
  264                           #if NXP_M0_032kFlash_4KWrite | NXP_M0_064kFlash_4KWrite
  266                           #endif
  267                           #ifdef NXP_M0_016kFlash_1KWrite
  268    0000000C 920A                  LSRS    w, w, #10       // BY SHIFTING RIGHT BY 10
  269                           #endif
  270    0000000E 4260                  STR     w, [t,#4]
  271    00000010 8260                  STR     w, [t,#8]
  272    00000012 064A                  LDR     w, = (SYSTEMCLOCK / 1000)       // in Khz
  273    00000014 C260                  STR     w, [t,#12]
  274    00000016 064B                  LDR     x, = IAPCALL
  275    00000018 9847                  BLX     x
  276                           #ifdef TOSCT
  278                           #endif
  279                                   NEXT    // FLASHESEC
  279.1  0000001A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  279                                   NEXT1
  279.1  0000001C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  279.2  0000001E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  279.3                                 ENDM
  279.4                                 ENDM
  280                            LTORG   //Always outside of code, else data in words
  280.1                                  TABLE
  280.2  00000020 ........              Reference on line 258
  280.3  00000024 ........              Reference on line 259
  280.4  00000028 ........              Reference on line 262
  280.5  0000002C C05D0000              Reference on line 272
  280.6  00000030 F11FFF1F              Reference on line 274
  281                           
  282                           
  283                           //:NONAME FLASHCRTF:    ( -- ) Copy Ram to Flash using FPADDR
  284                           //      FLASH COPY RAM TO FLASH COMMAND USING FPADDR and FLASH_WR_SIZE
  285                            SECTION .text : CONST (2)
  286                           FLASHCRTF:
  287    00000000 ........              DC32 .+5
  288                            SECTION .text : CODE (2)
  289                           #ifdef TOSCT
  291                           #endif
  292    00000000 0848                  LDR     t, = FLASHCMD
  293    00000002 0949                  LDR     n, = FLASHRET
  294    00000004 3322                  LDR     w, = 51         // Copy Ram to Flash
  295    00000006 0260                  STR     w, [t]
  296    00000008 084A                  LDR     w, = FPA
  297    0000000A 1268                  LDR     w, [w]
  298    0000000C 4260                  STR     w, [t,#4]
  299    0000000E 084A                  LDR     w, = RAM_START  // START OF RAM NOT ORIG (START OF DICTIONARY)
  300    00000010 8260                  STR     w, [t,#8]
  301    00000012 084A                  LDR     w, = FLASH_WR_SIZE      // Smallest writeable page size
  302    00000014 C260                  STR     w, [t,#0x0C]
  303    00000016 084A                  LDR     w, = (SYSTEMCLOCK / 1000)       // in Khz
  304    00000018 0261                  STR     w, [t,#0x10]
  305    0000001A 084B                  LDR     x, = IAPCALL
  306    0000001C 9847                  BLX     x
  307                           #ifdef TOSCT
  309                           #endif
  310                                   NEXT    // FLASHCRTF    // NO RETURN VALUE
  310.1  0000001E 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
  310                                   NEXT1
  310.1  00000020 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
  310.2  00000022 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
  310.3                                 ENDM
  310.4                                 ENDM
  311                           //      LDR     t, [n]          // RETURN STATUS CODE
  312                           //      APUSH
  313                            LTORG   //Always outside of code, else data in words
  313.1                                  TABLE
  313.2  00000024 ........              Reference on line 292
  313.3  00000028 ........              Reference on line 293
  313.4  0000002C ........              Reference on line 296
  313.5  00000030 00000010              Reference on line 299
  313.6  00000034 00040000              Reference on line 301
  313.7  00000038 C05D0000              Reference on line 303
  313.8  0000003C F11FFF1F              Reference on line 305
  314                           
  315                           //------------------------------------------------------------------------------
  316                           //      FLASH_FORGET FLASH_FORGET:      ( --  ) Erase Flash Pages
  317                           
  318                            SECTION .text : CONST (2)
  319                           FLASH_FORGET_NFA:
  320    00000000 8C                    DC8     0x80+12
  321    00000001 464C4153485F4         DC8     'FLASH_FORGE'
                  64F524745    
  322    0000000C D4                    DC8     'T'+0x80
  323    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
  324    00000010 ........              DC32    FLASH_SAVE_NFA
  325                           FLASH_FORGET:
  326    00000014 ........              DC32    DOCOL
  327                           // FF Setup starting page
  328    00000018 ........003C0         DC32    STRVA, FLASH_SPAGE, FPA 
                  000........  
  329                                   
  330                           FF_LOOP:
  331                           // IF at last page Branch to FF_FINISH
  332    00000024 .............         DC32    FPADDR, AT              // When FPADDR
                  ...          
  333    0000002C ........00400         DC32    LIT, FLASH_PPAGE        // and Last Flash Page
                  000          
  334    00000034 .............         DC32    EQUAL, ZEQU             // are Equal
                  ...          
  335    0000003C ........              DC32    ZBRAN                   // Branch to Finish
  336    00000040 2C000000              DC32      FF_FINISH-.             // Else fall thru and 
  337                           
  338                           // Erase a page at a time using current FPA value
  339    00000044 ........              DC32    CMSIS_DISABLE_IRQS
  340    00000048 .............         DC32    FLASHPREP, FLASHESEC
                  ...          
  341    00000050 ........              DC32    CMSIS_ENABLE_IRQS
  342                           //        DC32    FPADDR, AT, DOTHEX
  343    00000054 ........00040         DC32    LIT, FLASH_WR_SIZE
                  000          
  344    0000005C .............         DC32    FPADDR, PSTORE
                  ...          
  345    00000064 ........              DC32    BRAN
  346    00000068 BCFFFFFF              DC32      FF_LOOP-.
  347                           
  348                           //      RESET DICTIONARY POINTERS APPROPRIATELY 
  349                           FF_FINISH:
  350                           // IF NO WORDS IN RAM TEST
  351    0000006C .............         DC32    RBASE, LATEST   // If Latest is GT RBASE ( Latest is in ram )
                  ...          
  352    00000074 ........              DC32    GREATERTHAN     // This will be zero
  353    00000078 ........              DC32    ZBRAN           // Meaning there are
  354    0000007C 10000000              DC32     RAMWORDS-.     // words in Ram
  355                           // RESET ALL POINTERS
  356    00000080 ........              DC32    FISH_ONLY       // No words so clean up
  357                           // RESET FPA
  358    00000084 ........              DC32    BRAN
  359    00000088 1C000000              DC32      FFDONE-.
  360                           
  361                           // WORDS IN RAM NEED TO BE RELINKED TO FLASH
  362                           RAMWORDS:
  363                           //        DC32    LIT, TASK_NFA         // Fish WITH TASKER IN RAM starts here
  364                           #ifdef FISH_PubRel_WORDSET
  365    0000008C .............         DC32    LIT, WC_FISH_PubRel_NFA // FISH in flash starts here
                  ...          
  366                           #endif
  367                           #ifdef FISH_NXP_M0_PRO_WORDCAT
  369                           #endif
  370    00000094 .............         DC32    DBASE, PFA, LFA         // RELINK THIS lfa, i.e.
                  ...........  
  371    000000A0 ........              DC32    STORE                   // repatch to Fish in flash
  372                           
  373                           // FLASH_FORGET Finish
  374                           FFDONE:
  375    000000A4 ........003C0         DC32    STRVA, FLASH_SPAGE, FPA
                  000........  
  376    000000B0 ........11111         DC32    LIT, 11111111h, DUP, FPCURR, STORE, FPVAR, STORE
                  111..........
                  .............
                  .............
                  ....         
  377                           // Show results
  378    000000CC ........              DC32    FLASH_SCAN      // Show Erase done via Flash Page status
  379                           #ifndef SRM
  380    000000D0 .............         DC32    CR, DOTVARSPACE, DOTDICTSPACE
                  ...........  
  381                           #endif
  382    000000DC ........              DC32    SEMIS
  383                           
  384                           
  385                           //:NONAME FLASHWRITE:   ( --  ) Commands to save Ram to Flash using FPADDR.
  386                           //      FLASH SEQ OF CMDS TO COPY 4K RAM USING FPADDR
  387                            SECTION .text : CONST (2)
  388                           FLASHWRITE:
  389    00000000 ........              DC32    DOCOL
  390    00000004 ........              DC32    HERE                    // FILL
  391    00000008 .............         DC32    LIT, DICTSPACE_END-1    // REST OF DICTIONAIRY
                  ...          
  392    00000010 .............         DC32    HERE, SUBB
                  ...          
  393    00000018 ........FF000         DC32    LIT, 0xFF               // WITH FF SO
                  000          
  394    00000020 ........              DC32    FILL                    // End OF DICT VISIBLE IN FLASH
  395    00000024 ........              DC32    CMSIS_DISABLE_IRQS
  396    00000028 .............         DC32    FLASHPREP, FLASHESEC    // PREP AND ERSASE SECTOR
                  ...          
  397    00000030 .............         DC32    FLASHPREP, FLASHCRTF    // PREP AND COPY RAM TO SECTOR
                  ...          
  398    00000038 ........              DC32    CMSIS_ENABLE_IRQS
  399    0000003C ........              DC32    SEMIS
  400                           
  401                           //------------------------------------------------------------------------------
  402                           //:NONAME FLASH_SCAN:       ( -- ) SCAN FLASH PAGES FOR SAVED CODE
  403                           //      Patch in FLASH_SAVE'd Code.
  404                            SECTION .text : CONST (2)
  405                           FLASH_SCAN:
  406    00000000 ........              DC32    DOCOL
  407                           
  408                           // First page available must be at least equal to last page
  409                           // FLASH_PPAGE can be reserved and Hard_fault if accessed!
  410    00000004 ........003C0         DC32    LIT, FLASH_SPAGE        // Start at first page available
                  000          
  411    0000000C .............         DC32    DUP, FPADDR, STORE
                  ...........  
  412                           
  413                           FLSCLP:
  414    00000018 .............         DC32    DUP, TOR                // EACH PAGE
                  ...          
  415    00000020 ........              DC32    AT                      // Verify SYSCLK signature
  416    00000024 ........              DC32    SYSCLK
  417    00000028 ........              DC32    EQUAL                   // Or this with other checks
  418                           /*
  419                                   DC32    R, LIT, 8, PLUS         // Verify FPC is .lt. FPADDR??? END PAGE
  420                                   DC32    AT, FPADDR, AT  // LIT, FLASH_PPAGE    // PAST WRITE-ABLE PAGES
  421                                   DC32    GREATERTHAN
  422                                   DC32    OR                      // Signature not valid
  423                           */
  424    0000002C ........              DC32    ZBRAN                   // make sure
  425    00000030 7C000000              DC32     CHECKPAGE-.            // page is erased
  426                           
  427                           //      PAGE PASSES VERIFICATION, LINK IT
  428    00000034 .............         DC32    R, LIT, 8, PLUS         // fpa
                  ...08000000..
                  ......       
  429    00000044 .............         DC32    DUP, AT
                  ...          
  430    0000004C ........              DC32    CURRENT_SV              // TO DP
  431    00000050 ........              DC32    STORE
  432    00000054 .............         DC32    FOURP, AT               // fpu
                  ...          
  433    0000005C .............         DC32    UP_SV, STORE            // TO UP
                  ...          
  434    00000064 ........              DC32    CR
  435    00000068 ........              DC32    PDOTQ
  436    0000006C 17                    DC8     23D
  437    0000006D 4144444544205         DC8     'ADDED WORDS FROM PAGE '
                  74F5244532046
                  524F4D2050414
                  74520        
  438    00000083 FF             ALIGNROM 2,0xFFFFFFFF
  439    00000084 ........              DC32    R
  440    00000088 ........              DC32    DOTHEX
  441                           
  442    0000008C .............         DC32    R, LIT, FLASH_WR_SIZE   // PAGE SIZE WERE WRITING
                  ...00040000  
  443    00000098 .............         DC32    PLUS, FPADDR, STORE     // Set as next free page
                  ...........  
  444                           
  445    000000A4 ........              DC32    BRAN
  446    000000A8 0C000000              DC32     FSNEXT-.
  447                           
  448                           CHECKPAGE:
  449    000000AC .............         DC32    R, ASSUREPAGE   // VERIFY PAGE IS FULLY ERASE
                  ...          
  450                           
  451                           FSNEXT:
  452    000000B4 .............         DC32    R, LIT, FLASH_WR_SIZE   // PAGE SIZE WERE WRITING
                  ...00040000  
  453    000000C0 ........              DC32    PLUS
  454    000000C4 ........              DC32    DUP
  455    000000C8 ........00400         DC32    LIT, FLASH_PPAGE        // PAST WRITE-ABLE PAGES
                  000          
  456    000000D0 ........              DC32    SUBB
  457    000000D4 ........              DC32    ZBRAN
  458    000000D8 20000000              DC32     FSDONE-.
  459                           
  460    000000DC ........              DC32    DROP
  461    000000E0 .............         DC32    RFROM, LIT, FLASH_WR_SIZE   // PAGE SIZE WERE WRITING
                  ...00040000  
  462    000000EC ........              DC32    PLUS
  463    000000F0 ........              DC32    BRAN
  464    000000F4 24FFFFFF              DC32     FLSCLP-.
  465                           
  466                           FSDONE:
  467    000000F8 ........              DC32    DROP
  468    000000FC .............         DC32    RFROM, DROP
                  ...          
  469    00000104 ........              DC32    SEMIS
  470                           
  471                           
  472                           //:NONAME ASSUREPAGE: ( fpa -- next-fpa) Verify this Flash page has code or is empty.
  473                           //      Make sure PAGE IN fpa page is erased and let user know what you do.
  474                           //      Works in 812 SRM!!!
  475                           
  476                           // 2 STACK ITEMS LEFT ON EXIT, BOTH ARE fpa+1000H LIKE WHATS PUT ON r<<<<<<<<<<<
  477                           
  478                            SECTION .text : CONST (2)
  479                           ASSUREPAGE:
  480    00000000 ........              DC32    DOCOL                   // verified ONLY fpa ON STACK Here
  481    00000004 ........              DC32    DUP                     // fpa fpa
  482    00000008 ........00040         DC32    LIT, FLASH_WR_SIZE      // PAGE SIZE WERE WRITING
                  000          
  483    00000010 ........              DC32    PLUS                    // fpa fpa+frs
  484    00000014 ........              DC32    TOR                     // End of this page
  485    00000018 ........              DC32    DUP                     // Begin -- fpa fpa
  486                           
  487                           APNEXT:
  488    0000001C ........              DC32    AT                      // Should be fpa -1
  489    00000020 ........              DC32    ONEP                    // if so make zero
  490    00000024 ........              DC32    ZBRAN                   // zero is good
  491    00000028 48000000              DC32     APCONT-.               // keep going
  492                           
  493                           //      ERASE THIS PAGE                 // fpa
  494                           //        DC32    FPADDR, AT, DOTHEX
  495                                   
  496    0000002C ........              DC32    CMSIS_DISABLE_IRQS
  497    00000030 ........              DC32    FLASHPREP
  498    00000034 ........              DC32    FLASHESEC
  499    00000038 ........              DC32    CMSIS_ENABLE_IRQS
  500    0000003C ........              DC32    CR
  501    00000040 ........              DC32    PDOTQ
  502    00000044 17                    DC8     23D
  503    00000045 4552415345442         DC8     'ERASED BAD FLASH PAGE  '
                  042414420464C
                  4153482050414
                  7452020      
  504                            ALIGNROM 2,0xFFFFFFFF
  505    0000005C ........              DC32    DOTHEX                  // consumed fpa
  506                           
  507                           //        DC32    CR, DOTS // DEBUG
  508    00000060 ........              DC32    DROP                    // so why this drop here?
  509                           
  510    00000064 .............         DC32    RFROM, DROP
                  ...          
  511    0000006C ........              DC32    SEMIS
  512                           
  513                           //      SO FAR SO GOOD
  514                           APCONT:                                 // addr
  515    00000070 .............         DC32    FOURP, DUP              // addr addr
                  ...          
  516    00000078 .............         DC32    DUP, R, SWAP            // addr addr r addr
                  ...........  
  517    00000084 ........              DC32    SUBB                    // addr addr f - End of this Page?
  518    00000088 ........              DC32    ZBRAN                   // looped thru whole page?
  519    0000008C 0C000000              DC32     APGOOD-.
  520                           
  521    00000090 ........              DC32    BRAN
  522    00000094 88FFFFFF              DC32     APNEXT-.               // check every word for all f's
  523                           
  524                           APGOOD:                                 // addr addr
  525    00000098 ........              DC32    CR
  526    0000009C ........              DC32    PDOTQ
  527    000000A0 0E                    DC8     14D
  528    000000A1 464C415348205         DC8     'FLASH PAGE OK '
                  0414745204F4B
                  20           
  529    000000AF FF             ALIGNROM 2,0xFFFFFFFF
  530    000000B0 .............         DC32    DROP, LIT, FLASH_WR_SIZE      // PAGE SIZE WERE WRITING
                  ...00040000  
  531    000000BC ........              DC32    SUBB
  532    000000C0 ........              DC32    DOTHEX
  533                           
  534                           APDONE:
  535    000000C4 .............         DC32    RFROM, DROP
                  ...          
  536    000000CC ........              DC32    SEMIS
  537                           
 5022                           // LFA BELOW NEEDS TO BE FLASH_FORGET_NFA
 5023                           //------------------------------------------------------------------------------
 5024                           
 5025                           //-------------------------- PROMPT VECTOR SECTION -----------------------------
 5026                           
 5027                           //      POFF ( -- )   Set NULL$ address in PROMPT to zero so quit does CR only.
 5028                           
 5029                            SECTION .text : CONST (2)
 5030                           POFF_NFA:
 5031    00000000 84                    DC8     0x84
 5032    00000001 504F46                DC8     'POF'
 5033    00000004 C6                    DC8     'F'+0x80
 5034    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5035    00000008 ........              DC32    FLASH_FORGET_NFA
 5036                           POFF:
 5037    0000000C ........              DC32    DOCOL
 5038    00000010 ........00000         DC32    STRVA, 0, PROMPT
                  000........  
 5039    0000001C ........              DC32    SEMIS
 5040                           
 5041                           //      PON ( -- )   Set NULL$ address in PROMPT to msg_MY_OK
 5042                           
 5043                            SECTION .text : CONST (2)
 5044                           PON_NFA:
 5045    00000000 83                    DC8     0x83
 5046    00000001 504F                  DC8     'PO'
 5047    00000003 CE                    DC8     'N'+0x80
 5048                            ALIGNROM 2,0xFFFFFFFF
 5049    00000004 ........              DC32    POFF_NFA
 5050                           PON:
 5051    00000008 ........              DC32    DOCOL
 5052    0000000C .............         DC32    STRVA, msg_MY_OK, PROMPT
                  ...........  
 5053    00000018 ........              DC32    SEMIS
 5054                           
 5055                           //      P ( -- addr )   Address of PROMPT, contains 0 or NULL$ address.
 5056                           
 5057                            SECTION .text : CONST (2)
 5058                           P_NFA:
 5059    00000000 81                    DC8     0x81
 5060    00000001 D0                    DC8     'P'+0x80
 5061    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5062    00000004 ........              DC32    PON_NFA
 5063                           P:
 5064    00000008 .............         DC32    DOCON, PROMPT
                  ...          
 5065                           
 5066                           //-------------------------- ERROR_HALT SECTION -----------------------------
 5067                           
 5068                           //      EHOFF ( -- )   Set ERROR_HALT to 0
 5069                           
 5070                            SECTION .text : CONST (2)
 5071                           EHOFF_NFA:
 5072    00000000 85                    DC8     0x85
 5073    00000001 45484F46              DC8     'EHOF'
 5074    00000005 C6                    DC8     'F'+0x80
 5075    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5076    00000008 ........              DC32    P_NFA
 5077                           EHOFF:
 5078    0000000C .............         DC32    DOCOL, ZERO, LIT, ERROR_HALT, STORE, SEMIS
                  .............
                  .............
                  .........    
 5079                           
 5080                           //      EHON ( -- )   Set ERROR_HALT to 1
 5081                           
 5082                            SECTION .text : CONST (2)
 5083                           EHON_NFA:
 5084    00000000 84                    DC8     0x84
 5085    00000001 45484F                DC8     'EHO'
 5086    00000004 CE                    DC8     'N'+0x80
 5087    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5088    00000008 ........              DC32    EHOFF_NFA
 5089                           EHON:
 5090    0000000C .............         DC32    DOCOL, ONE, LIT, ERROR_HALT, STORE, SEMIS
                  .............
                  .............
                  .........    
 5091                           
 5092                           //-------------------------- DOTDICTSPACE SECTION ------------------------------
 5093                           
 5094                           //      .DS DOTDICTSPACE:       ( n -- )
 5095                           //      Prints number of bytes availble in dictionary in DECIMAL using DOT,
 5096                           //      not affecting Base in the system
 5097                           
 5098                            SECTION .text : CONST (2)
 5099                           DOTDICTSPACE_NFA:
 5100    00000000 83                    DC8     0x83
 5101    00000001 2E44                  DC8     '.D'
 5102    00000003 D3                    DC8     'S'+0x80
 5103                            ALIGNROM 2,0xFFFFFFFF
 5104                           //      DC32    FLASH_FORGET_NFA
 5105                           //        DC32    P_NFA
 5106    00000004 ........              DC32    EHON_NFA
 5107                           DOTDICTSPACE:
 5108    00000008 ........              DC32    DOCOL
 5109    0000000C ........              DC32    DICTSPACE
 5110                           #ifdef SRM
 5114                           #else
 5115    00000010 ........              DC32    DOTDEC          // SAVES BASE
 5116                           #endif  // SRM
 5117    00000014 .............         DC32    LIT, msg_dictspace
                  ...          
 5118    0000001C .............         DC32    NULLSTRLEN, TYPE
                  ...          
 5119                           #ifdef IO2TP
 5122                           #endif
 5123    00000024 ........              DC32    SEMIS
 5124                           
 5125                           
 5126                           //-------------------------- DOTVARSPACE SECTION -------------------------------
 5127                           
 5128                           //      .VS DOTVARSPACE:        ( n -- )
 5129                           //      Prints number of bytes availble in RAM VAR SPACE in DECIMAL using DOT,
 5130                           //      not affecting Base in the system.
 5131                           
 5132                            SECTION .text : CONST (2)
 5133                           DOTVARSPACE_NFA:
 5134    00000000 83                    DC8     0x83
 5135    00000001 2E56                  DC8     '.V'
 5136    00000003 D3                    DC8     'S'+0x80
 5137                            ALIGNROM 2,0xFFFFFFFF
 5138    00000004 ........              DC32    DOTDICTSPACE_NFA
 5139                           DOTVARSPACE:
 5140    00000008 ........              DC32    DOCOL
 5141    0000000C ........              DC32    VARSPACE
 5142    00000010 .............         DC32    FOUR, SLASH
                  ...          
 5143                           #ifdef SRM
 5147                           #else
 5148    00000018 ........              DC32    DOTDEC          // SAVES BASE
 5149                           #endif  // SRM
 5150    0000001C .............         DC32    LIT, msg_uvspace
                  ...          
 5151    00000024 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 5152                           #ifdef IO2TP
 5155                           #endif
 5156    0000002C ........              DC32    SEMIS
 5157                           
 5158                           
 5159                           //      DUMP DUMP:      ( addr n -- )
 5160                           //      Print adrr and n lines of 4 columns of memory values in hexadecimal.
 5161                           //      Address must be even and a multiple of 4 else error message issued.
 5162                           //      QKEY used to abort dump.
 5163                           
 5164                            SECTION .text : CONST (2)
 5165                           DUMP_NFA:
 5166    00000000 84                    DC8     0x84
 5167    00000001 44554D                DC8     'DUM'
 5168    00000004 D0                    DC8     'P'+0x80
 5169    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5170    00000008 ........              DC32    DOTVARSPACE_NFA
 5171                           DUMP:
 5172    0000000C ........              DC32    DOCOL
 5173                           
 5174    00000010 .............         DC32    OVER, QALIGNED  // ( -- addr n )
                  ...          
 5175                           // DON'T SAVE BASE UNTIL AFTER ALIGNED TEST
 5176    00000018 ........              DC32    BASE_TO_R12     // Save current BASE
 5177    0000001C ........              DC32    HEX
 5178    00000020 .............         DC32    ZERO, XDO
                  ...          
 5179                           DUMP_ADDR_LINE:
 5180    00000028 ........              DC32    CR
 5181    0000002C .............         DC32    DUP, LIT, 10, DOTRU     // Print addr in Field
                  ...0A000000..
                  ......       
 5182    0000003C .............         DC32    FOUR, ZERO, XDO         // Four colum loop
                  ...........  
 5183                           DUMP_EACH_LOC:
 5184    00000048 .............         DC32    DUP, AT
                  ...          
 5185                           // Little Endian means addresses will print correctly
 5186                           // but to see character strings REVW is needed
 5187                           // but the addresses are scrambled!
 5188                           //        DC32    REVW                    // Reverse bytes in word
 5189    00000050 ........0E000         DC32    LIT, 14, DOTRU          // Diplay in Field
                  000........  
 5190    0000005C ........              DC32    FOURP
 5191    00000060 ........              DC32    XLOOP
 5192    00000064 E4FFFFFF              DC32    DUMP_EACH_LOC-.
 5193                           
 5194                           #ifdef IO2TP
 5197                           #endif
 5198    00000068 ........              DC32    QKEY
 5199    0000006C ........              DC32    ZBRAN
 5200    00000070 08000000              DC32     DUMP_CONT-.
 5201    00000074 ........              DC32    LEAVE
 5202                           DUMP_CONT:
 5203    00000078 ........              DC32    XLOOP
 5204    0000007C ACFFFFFF              DC32    DUMP_ADDR_LINE-.
 5205                           
 5206    00000080 .............         DC32    DROP, CR
                  ...          
 5207    00000088 ........              DC32    BASE_FROM_R12   // Restore BASE
 5208    0000008C ........              DC32    SEMIS
 5209                           
 5210                           
 5211                           //      VBASE VBASE:    ( -- addr )
 5212                           //       Return base addr of VAR's .
 5213                           
 5214                            SECTION .text : CONST (2)
 5215                           VBASE_NFA:
 5216    00000000 85                    DC8     0x85
 5217    00000001 56424153              DC8     'VBAS'
 5218    00000005 C5                    DC8     'E'+0x80
 5219    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5220    00000008 ........              DC32    DUMP_NFA
 5221                           VBASE:
 5222    0000000C .............         DC32    DOCON,  RAMVARSPACE_START
                  ...          
 5223                           
 5224                           
 5225                           //      DBASE DBASE:    ( -- addr )
 5226                           //      Return base addr of the dictionary.
 5227                           
 5228                            SECTION .text : CONST (2)
 5229                           DBASE_NFA:
 5230    00000000 85                    DC8     0x85
 5231    00000001 44424153              DC8     'DBAS'
 5232    00000005 C5                    DC8     'E'+0x80
 5233    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5234    00000008 ........              DC32    VBASE_NFA
 5235                           DBASE:
 5236    0000000C .............         DC32    DOCON,  ORIG
                  ...          
 5237                           
 5238                           
 5239                           //      RBASE RBASE:    ( -- addr )
 5240                           //      Return base addr of RAM.
 5241                           
 5242                            SECTION .text : CONST (2)
 5243                           RBASE_NFA:
 5244    00000000 85                    DC8     0x85
 5245    00000001 52424153              DC8     'RBAS'
 5246    00000005 C5                    DC8     'E'+0x80
 5247    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5248    00000008 ........              DC32    DBASE_NFA
 5249                           RBASE:
 5250    0000000C ........00000         DC32    DOCON,  RAM_START
                  010          
 5251                           
 5252                           
 5253                           //      CLS CLS:        ( -- )
 5254                           //      Clear serial terminal screen using a formfeed character
 5255                           
 5256                            SECTION .text : CONST (2)
 5257                           CLS_NFA:
 5258    00000000 83                    DC8     0x83
 5259    00000001 434C                  DC8     'CL'
 5260    00000003 D3                    DC8     'S'+0x80
 5261                            ALIGNROM 2,0xFFFFFFFF
 5262    00000004 ........              DC32    RBASE_NFA
 5263                           CLS:
 5264    00000008 ........              DC32    DOCOL
 5265    0000000C ........              DC32    PDOTQ
 5266    00000010 04                    DC8     4
 5267    00000011 1B5B                  DC8     0x1B, '['       // ESC[ = ANSI VT100 ESC SETUP
 5268    00000013 324A                  DC8     '2J'            // Clearscreen
 5269    00000015 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5270    00000018 ........              DC32    PDOTQ
 5271    0000001C 04                    DC8     4
 5272    0000001D 1B5B                  DC8     0x1B, '['       // ESC[ = ANSI VT00 ESC SETUP
 5273    0000001F 3B48                  DC8     ';H'            // CURSORHOME ( upper left corner )
 5274    00000021 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5275    00000024 ........              DC32    CR              // Reset OUT
 5276    00000028 ........              DC32    SEMIS
 5277                           
 5278                           
 5279                           //      ( PAREN:        ( -- ) IMMEDIATE
 5280                           //      Used in the form:
 5281                           //              ( CCcc )
 5282                           //      Ignore comments within parenthesis. A right parenthesis ends comment.
 5283                           //      The comments may be multi-line but a space or tab is required
 5284                           //      for any line that is otherwise empty for formatting purposes,
 5285                           //      else a comment error will be printed. May occur during execution or in a
 5286                           //      colon-definition. A blank after the leading parenthesis is required.
 5287                           
 5288                            SECTION .text : CONST (2)
 5289                           PAREN_NFA:
 5290    00000000 C1                    DC8     0x0C1
 5291    00000001 A8                    DC8     '('+0x80
 5292    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5293    00000004 ........              DC32    CLS_NFA
 5294                           PAREN:
 5295                           // Slow Single line comment
 5296                           //      DC32    DOCOL, LIT, ')', WORD, SEMIS
 5297    00000008 ........              DC32    DOCOL
 5298                           PML_LOOP:
 5299    0000000C ........29000         DC32    LIT, ')'
                  000          
 5300    00000014 ........              DC32    TIB_CHAR_SCAN   // ( c -- f )
 5301                           //
 5302    00000018 ........              DC32    ZEQU            // If null
 5303    0000001C ........              DC32    ZBRAN           // found fall thru
 5304    00000020 28000000              DC32      PE_DONE-.     // else were done
 5305                           
 5306                           // GET ANOTHER LINE
 5307    00000024 ........              DC32    CR
 5308    00000028 ........              DC32    QUERY
 5309                           //  AND IF ONLY CR (null) ERR
 5310                           //        DC32    TIB_SV, CAT
 5311    0000002C .............         DC32    LIT, TIB+1, CAT // PAST COUNT BYTE
                  ...........  
 5312    00000038 ........              DC32    ZBRAN
 5313    0000003C 10000000              DC32      PAREN_ERR-.
 5314                           
 5315                           //  If closing paren not in this line LOOP
 5316    00000040 ........              DC32    BRAN
 5317    00000044 C8FFFFFF              DC32      PML_LOOP-.
 5318                           
 5319                           PE_DONE:
 5320    00000048 ........              DC32    SEMIS
 5321                           
 5322                           PAREN_ERR:
 5323    0000004C .............         DC32    LIT, msg_paren_err
                  ...          
 5324    00000054 .............         DC32    NULLSTRLEN, TYPE        // Passed in null string
                  ...          
 5325    0000005C ........              DC32    SEMIS
 5326                           
 5327                           
 5328                           //      BACKSLASH BACKSLASH:    ( --  )
 5329                           //      After a trailing space treat the rest of the line as a comment.
 5330                           //      By setting a null terminator in TIB
 5331                           
 5332                            SECTION .text : CONST (2)
 5333                           BACKSLASH_NFA:
 5334    00000000 C1                    DC8     0x0C1
 5335    00000001 DC                    DC8     '\\'+0x80
 5336    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5337    00000004 ........              DC32    PAREN_NFA
 5338                           BACKSLASH:
 5339    00000008 ........              DC32    DOCOL
 5340    0000000C .............         DC32    ZERO, TIB_SV, IN_SV, AT, PLUS, CSTORE
                  .............
                  .............
                  .........    
 5341    00000024 ........              DC32    SEMIS
 5342                           
 5343                           
 5344                           //      SYSCLK SYSCLK:  ( -- value )
 5345                           //      Returns system clock value in Hz, i.e. 48000000 = 48Mhz.
 5346                           
 5347                            SECTION .text : CONST (2)
 5348                           SYSCLK_NFA:
 5349    00000000 86                    DC8     0x86
 5350    00000001 535953434C            DC8     'SYSCL'
 5351    00000006 CB                    DC8     'K'+0x80
 5352    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5353    00000008 ........              DC32    BACKSLASH_NFA
 5354                           SYSCLK:
 5355    0000000C ........              DC32    .+5
 5356                            SECTION .text : CODE (2)
 5357    00000000 0349                  LDR     n, = SYSCLOCK   // SystemCoreClock
 5358    00000002 0868                  LDR     t, [n]
 5359                                   TPUSH   // Push -- t
 5359                                   PUSHt   // push t to p, pre decrement p
 5359.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p, pre decrement p
 5359.2  00000006 3860                  STR     t, [p]
 5359.3                                 ENDM
 5359                                   NEXT
 5359.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 5359                                   NEXT1
 5359.1  0000000A 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5359.2  0000000C 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5359.3                                 ENDM
 5359.4                                 ENDM
 5359.5                                 ENDM
 5360    0000000E 0000           LTORG   //Always outside of code, else data in words
 5360.1                                  TABLE
 5360.2  00000010 ........              Reference on line 5357
 5361                           
 5362                           
 5363                           //      STCTR   ( -- addr ) SYSTICK Interrupt increments this with 32but wrap.
 5364                           //      STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 5365                            SECTION .text : CONST (2)
 5366                           STCTR_NFA:
 5367    00000000 85                    DC8     0x85
 5368    00000001 53544354              DC8     'STCT'
 5369    00000005 D2                    DC8     'R'+0x80
 5370    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5371    00000008 ........              DC32    SYSCLK_NFA
 5372                           STCTR:
 5373    0000000C .............         DC32    DOCON, STICKER
                  ...          
 5374                           
 5375                           
 5376                           //      DELAY ( n value -- ) 7 E000E010h !   5 E000E010h !
 5377                            SECTION .text : CONST (2)
 5378                           DELAY_NFA:
 5379    00000000 85                    DC8     0x85
 5380    00000001 44454C41              DC8     'DELA'
 5381    00000005 D9                    DC8     'Y'+0x80
 5382    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5383    00000008 ........              DC32    STCTR_NFA
 5384                           DELAY:
 5385    0000000C ........              DC32    .+5
 5386                            SECTION .text : CODE (2)
 5387                                   POP2n   // Reload value in n
 5387.1  00000000 3968                  LDR     n, [p]
 5387.2  00000002 3F1D                  ADDS    p, p, #4
 5387.3                                 ENDM
 5388                                   POP2t   // loop count in t
 5388.1                         #ifndef TOSCT
 5388.2  00000004 3868                  LDR     t, [p]          // pop tos to t, post increment p
 5388.3                         #endif
 5388.4  00000006 3F1D                  ADDS    p, p, #4
 5388.5                                 ENDM
 5389                           // SET STCTR TO NEGATIVE LOOP COUNT TO END AT ZERO
 5390    00000008 0A4C                  LDR     y, = STICKER
 5391    0000000A C043                  MVNS    t, t            // 1's compliment
 5392    0000000C 401C                  ADDS    t, t, #1       // 2's compliment
 5393    0000000E 2060                  STR     t, [y]
 5394                           // Load SYST_RVR with countdown value
 5395    00000010 094A                  LDR     w, = SYST_RVR
 5396    00000012 1160                  STR     n, [w]
 5397                           // and reset SYST_CVR to start countdown.
 5398    00000014 094A                  LDR     w, = SYST_CVR
 5399                           // Writing it clears the System Tick counter and the COUNTFLAG bit in STCTRL.
 5400    00000016 1160                  STR     n, [w]
 5401                           // If n=0 ( in t ) user is just setting reload value
 5402    00000018 0028                  CMP     t, #0           // LOOP OF ZERO
 5403    0000001A 06D0                  BEQ     DELAY_DONE
 5404                           // INTERRUPT VERSION: negate n to STCTR and leave when STCTR = 0
 5405                           // STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 5406                           // Save and restore user interrupt setting
 5407                           // y = STICKER
 5408    0000001C 084A                  LDR     w, = SYST_CSR
 5409    0000001E 1068                  LDR     t, [w]          // Save user SYSTICK interrupt setting
 5410    00000020 0721                  MOVS    n, #7
 5411    00000022 1160                  STR     n, [w]          // Turn SYSTICK interrupt on in case it's off
 5412                           DELAY_LOOP:
 5413    00000024 2168                  LDR     n, [y]
 5414    00000026 0029                  CMP     n, #0
 5415    00000028 FCD1                  BNE     DELAY_LOOP
 5416                           DELAY_DONE:
 5417    0000002A 1060                  STR     t, [w]  // Restore user SYSTICK interrupt setting
 5418                                   NEXT
 5418.1  0000002C 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 5418                                   NEXT1
 5418.1  0000002E 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5418.2  00000030 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5418.3                                 ENDM
 5418.4                                 ENDM
 5419    00000032 0000           LTORG
 5419.1                                  TABLE
 5419.2  00000034 ........              Reference on line 5390
 5419.3  00000038 14E000E0              Reference on line 5395
 5419.4  0000003C 18E000E0              Reference on line 5398
 5419.5  00000040 10E000E0              Reference on line 5408
 5420                           
 5421                           
 5422                           //      MS MS: ( n -- ) n * 1 millisecond execution time
 5423                           //      STI_ON: 7 E000E010h !  STI_OFF: 5 E000E010h ! E000E010h @ .H
 5424                           
 5425                            SECTION .text : CONST (2)
 5426                           MS_NFA:
 5427    00000000 82                    DC8     0x82
 5428    00000001 4D                    DC8     'M'
 5429    00000002 D3                    DC8     'S'+0x80
 5430    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 5431    00000004 ........              DC32    DELAY_NFA
 5432                           MS:
 5433    00000008 ........              DC32    DOCOL
 5434                           #ifdef NXP_M0_11xx_IRC12_48MHZ
 5436                           #endif
 5437                           #ifdef NXP_M0_812_IRC12_24MHZ
 5439                           #endif
 5440    0000000C ........              DC32    DELAY
 5441    00000010 ........              DC32    SEMIS
 5442                           
 5443                           
 5444                           //      WORDCAT WORDCAT: ( -- )
 5445                           //      Creates a Word Category NFA and LFA that cannot be searched for,
 5446                           //      but is displayed by WORDS and MYWORDS to label a group of Words.
 5447                           //      Define a group of Words and then add a category name with WORDCAT.
 5448                           //      EX: WORDCAT MY APP WORDS:
 5449                           //      It must be on a line of it's own.
 5450                           //      The colon at the end is FISH convention.
 5451                            SECTION .text : CONST (2)
 5452                           WORDCAT_NFA:
 5453    00000000 87                    DC8     0x87
 5454    00000001 574F52444341          DC8     'WORDCA'
 5455    00000007 D4                    DC8     'T'+0x80
 5456                            ALIGNROM 2,0xFFFFFFFF
 5457    00000008 ........              DC32    MS_NFA
 5458                           WORDCAT:
 5459    0000000C ........              DC32    DOCOL
 5460    00000010 .............         DC32    HERE, TOR
                  ...          
 5461    00000018 .............         DC32    ZERO, CCOMMA    // Count byte place holder
                  ...          
 5462    00000020 ........0D000         DC32    LIT, 0Dh, CCOMMA
                  000........  
 5463    0000002C ........              DC32    HERE
 5464    00000030 ........0D000         DC32    LIT, 0Dh, WORD
                  000........  
 5465    0000003C .............         DC32    DUP, CAT
                  ...          
 5466    00000044 ........0A000         DC32    LIT, 0Ah, ROT, CSTORE
                  000..........
                  ......       
 5467    00000054 .............         DC32    DUP, ONEP, ALLOT
                  ...........  
 5468    00000060 ........84000         DC32    LIT, 084h        // Count before system text
                  000          
 5469    00000068 .............         DC32    PLUS, R, CSTORE
                  ...........  
 5470    00000074 ........0D000         DC32    LIT, 0Dh, CCOMMA
                  000........  
 5471    00000080 ........8A000         DC32    LIT, 08Ah, CCOMMA
                  000........  
 5472    0000008C ........              DC32    ALIGN32_FF_PAD
 5473    00000090 .............         DC32    LATEST, COMMA
                  ...          
 5474    00000098 ........              DC32    RFROM
 5475    0000009C .............         DC32    LIT, CURRENT
                  ...          
 5476    000000A4 ........              DC32    STORE
 5477    000000A8 ........              DC32    SEMIS
 5478                           
 5479                           
 5480                           //      WORDS WORDS:    ( -- ) RENAMED: VLIST to WORDS
 5481                           //      Output list of Words in the dictionary in search order.
 5482                           //      Uses WC_ nfa's to format Word Categories.
 5483                           //      Uses FENCE for where to stop.
 5484                           //      See MYWORDS.
 5485                           
 5486                            SECTION .text : CONST (2)
 5487                           WORDS_NFA:
 5488    00000000 85                    DC8     0x85
 5489    00000001 574F5244              DC8     'WORD'
 5490    00000005 D3                    DC8     'S'+0x80
 5491    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5492    00000008 ........              DC32    WORDCAT_NFA
 5493                           WORDS:
 5494    0000000C ........              DC32    DOCOL
 5495    00000010 .............         DC32    THREE, SPACES
                  ...          
 5496    00000018 ........              DC32    LATEST
 5497                           #ifdef XON_XOFF
 5498    0000001C ........              DC32    XOFF    // TEMP TEST THRE
 5499                           #endif
 5500                           VLIS1:  // ADD nfa length to current out_uv & verify it doesn't violate csll.
 5501                           
 5502    00000020 .............         DC32    ZERO, OVER      // -- nfa zero nfa
                  ...          
 5503    00000028 .............         DC32    ONEP, CAT       // If wc_ header skip
                  ...          
 5504    00000030 ........0D000         DC32    LIT, 0x0D       // -- nfa zero (c@) 0x0D
                  000          
 5505    00000038 .............         DC32    EQUAL, ZEQU     // -- nfa zerro flag
                  ...          
 5506    00000040 ........              DC32    ZBRAN           // -- nfa zero
 5507    00000044 1C000000              DC32     WORDS2-.       // wc_ goto
 5508                                   
 5509    00000048 ........              DC32    DROP            // -- nfa
 5510    0000004C .............         DC32    DUP, PFA, LFA   // -- nfa lfa
                  ...........  
 5511    00000058 .............         DC32    OVER, SUBB      // -- nfa (lfa - nfa)
                  ...          
 5512                           
 5513                           WORDS2: // -- nfa n
 5514                           
 5515    00000060 .............         DC32    OUT_SV, AT
                  ...          
 5516    00000068 ........              DC32    PLUS
 5517    0000006C ........4A000         DC32    LIT, 74         // was :NONAME CSLL - WORDS line length constant.
                  000          
 5518    00000074 ........              DC32    GREATERTHAN
 5519    00000078 ........              DC32    ZBRAN           // If not at end of line
 5520    0000007C 10000000              DC32     WORD21-.        // skip cr and out reset
 5521                           
 5522    00000080 ........              DC32    CR              // Start another line
 5523    00000084 .............         DC32    THREE, SPACES
                  ...          
 5524                           
 5525                           WORD21:
 5526                           #ifdef  IO2TP
 5529                           #endif
 5530                           // For MYWORDS test FENCE and stop if less
 5531    0000008C ........              DC32    DUP             // nfa
 5532    00000090 .............         DC32    FENCE_SV, AT
                  ...          
 5533    00000098 ........              DC32    LESSTHAN
 5534    0000009C ........              DC32    ZBRAN
 5535    000000A0 0C000000              DC32     WORDSCONT-.
 5536                           
 5537    000000A4 ........              DC32    BRAN
 5538    000000A8 5C000000              DC32     WORDSDONE-.
 5539                           
 5540                           WORDSCONT:
 5541    000000AC ........              DC32    DUP             // nfa
 5542    000000B0 ........              DC32    IDDOT
 5543    000000B4 .............         DC32    TWO, SPACES
                  ...          
 5544                           
 5545    000000BC .............         DC32    DUP, ONEP, CAT  // Take nfa and look for WORDCAT signature
                  ...........  
 5546    000000C8 ........0D000         DC32    LIT, 0x0D       // which is cr
                  000          
 5547    000000D0 ........              DC32    EQUAL
 5548    000000D4 ........              DC32    ZBRAN           // If not wordcat
 5549    000000D8 10000000              DC32     NOT_WC-.       // skip
 5550                           
 5551    000000DC ........00000         DC32    STRVA, 0, OUT
                  000........  
 5552                           
 5553                           NOT_WC:
 5554    000000E8 ........              DC32    PFA             // ( nfa -- pfa )
 5555    000000EC ........              DC32    LFA             // ( pfa -- lfa )
 5556    000000F0 ........              DC32    AT              // Is next lfa
 5557    000000F4 ........              DC32    DUP
 5558    000000F8 ........              DC32    ZEQU            // Zero = end of dictionary
 5559                           
 5560                           // REMOVED SO WORDS AND MYWORDS CAN BE USED in DOWNLOAD FILES
 5561                           //      DC32    QKEY           // Zero or break key ( ^C = 0x03 )
 5562                           //      DC32    OR
 5563                           
 5564    000000FC ........              DC32    ZBRAN           // Until break key or end of dictionary
 5565    00000100 20FFFFFF              DC32     VLIS1-.
 5566                           
 5567                           #ifdef  IO2TP
 5570                           #endif
 5571                           WORDSDONE:
 5572    00000104 .............         DC32    DROP, CR
                  ...          
 5573    0000010C ........              DC32    SEMIS
 5574                           
 5575                           
 5576                           //      MYWORDS MYWORDS: ( -- )
 5577                           //      Print only system defined words by manipulating FENCE.
 5578                           
 5579                            SECTION .text : CONST (2)
 5580                           MYWORDS_NFA:
 5581    00000000 87                    DC8     0x87
 5582    00000001 4D59574F5244          DC8     'MYWORD'
 5583    00000007 D3                    DC8     'S'+0x80
 5584                            ALIGNROM 2,0xFFFFFFFF
 5585    00000008 ........              DC32    WORDS_NFA
 5586                           MYWORDS:
 5587    0000000C ........              DC32    DOCOL
 5588    00000010 ........003C0         DC32    STRVA , FLASH_SPAGE, FENCE
                  000........  
 5589    0000001C ........              DC32    WORDS                   // now print words in ram
 5590    00000020 ........00000         DC32    STRVA, 0 , FENCE
                  000........  
 5591    0000002C ........              DC32    SEMIS
 5592                           
 5593                           
 5594                           //      FISH_ONLY FISH_ONLY     ( -- ) MODIFIED:
 5595                           //      RESET DP, UP AND CURRENT TO ORIGINAL FLASH IMAGE
 5596                           
 5597                            SECTION .text : CONST (2)
 5598                           FISH_ONLY_NFA:
 5599    00000000 89                    DC8     0x80+9
 5600    00000001 464953485F4F4         DC8     'FISH_ONL'
                  E4C          
 5601    00000009 D9                    DC8     'Y'+0x80
 5602    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 5603    0000000C ........              DC32    MYWORDS_NFA
 5604                           FISH_ONLY:
 5605    00000010 ........              DC32    .+5
 5606                            SECTION .text : CODE (2)
 5607                           //      LDR     n, = TASK_NFA           // preserve TOS
 5608                           #ifdef FISH_PubRel_WORDSET
 5609    00000000 0749                  LDR     n, = WC_FISH_PubRel_NFA
 5610                           #endif
 5611                           #ifdef FISH_NXP_M0_PRO_WORDCAT
 5613                           #endif
 5614    00000002 084C                  LDR     y, = CURRENT            // CURRENT SETTING
 5615    00000004 2160                  STR     n, [y]
 5616    00000006 084C                  LDR     y, = FPC                // FLASH CURRENT
 5617    00000008 2160                  STR     n, [y]
 5618    0000000A 0849                  LDR     n, = RAMVARSPACE_START
 5619    0000000C 084C                  LDR     y, = UP                 // UP SETTING
 5620    0000000E 2160                  STR     n, [y]
 5621    00000010 084C                  LDR     y, = FPSV                // FLASH USER VARS
 5622    00000012 2160                  STR     n, [y]
 5623    00000014 0849                  LDR     n, = ORIG
 5624    00000016 094C                  LDR     y, = DP                 // DP SETTING
 5625    00000018 2160                  STR     n, [y]
 5626                                   NEXT
 5626.1  0000001A 04CD                  LDM     i!, {w} // get cfa addr to w, incr i after
 5626                                   NEXT1
 5626.1  0000001C 08CA                  LDM     w!, {x}         // contents of cfa, (pfa), -> x, bump w to cfa+4
 5626.2  0000001E 9847                  BLX     x               // w preserves cfa+4 (pfa) for DOCOL's benefit
 5626.3                                 ENDM
 5626.4                                 ENDM
 5627                            LTORG
 5627.1                                  TABLE
 5627.2  00000020 ........              Reference on line 5609
 5627.3  00000024 ........              Reference on line 5614
 5627.4  00000028 ........              Reference on line 5616
 5627.5  0000002C ........              Reference on line 5618
 5627.6  00000030 ........              Reference on line 5619
 5627.7  00000034 ........              Reference on line 5621
 5627.8  00000038 ........              Reference on line 5623
 5627.9  0000003C ........              Reference on line 5624
 5628                           
 5629                           
 5630                           //      FISH FISH:      ( -- )
 5631                           //      Print Flash Status and FISH Signon Message.
 5632                           
 5633                            SECTION .text : CONST (2)
 5634                           FISH_NFA:
 5635    00000000 84                    DC8     0x84
 5636    00000001 464953                DC8     'FIS'
 5637    00000004 C8                    DC8     'H'+0x80
 5638    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5639    00000008 ........              DC32    FISH_ONLY_NFA
 5640                           FISH:
 5641    0000000C ........              DC32    DOCOL
 5642    00000010 ........              DC32    FLASH_SCAN
 5643    00000014 ........              DC32    SIGNON
 5644    00000018 ........              DC32    ABORT
 5645                           
 5646                           //=============================== WORDCAT ====================================//
 5647                           //NOEXEC HEADERFORWORDCATEGORIES
 5648                           //      WC_FISH_PubRel: = FISH Reference Model: CATEGORY
 5649                            SECTION .text : CONST (2)
 5650                           WC_FISH_PubRel_NFA:
 5651    00000000 99                    DC8     0x80+4+21
 5652    00000001 0D0A                  DC8     0x0D, 0x0A
 5653    00000003 4649534820526         DC8     'FISH Reference Model:'
                  5666572656E63
                  65204D6F64656
                  C3A          
 5654    00000018 0D8A                  DC8     0x0D, 0x0A+0x80
 5655    0000001A FFFF           ALIGNROM 2,0xFFFFFFFF
 5656    0000001C ........              DC32    FISH_NFA
 5657                           ;**** FIRST WORD LISTED****
 5658                           
 5659                           //=============================== WORDCAT ====================================//
 5660                           
 5661                           #ifdef FISH_NXP_M0_PRO_WORDCAT
 5663                           #endif
 5664                           // FIRST WORDCAT
 5665                           
 5666                           //------------------------------------------------------------------------------
 5667                           // FOR MULTI TASKING MUST BE PLACED in RAM AND OFFSET USED in SYSTEM VARS!!!!!!
 5668                           //            T A S K 
 5669                           //
 5670                           ;.data          // Place TASK at beginning of RAM, or not.
 5671                           /*
 5672                            SECTION .text : CONST (2)
 5673                           TASK_NFA:
 5674                                   DC8     0x84
 5675                                   DC8     'TAS'
 5676                                   DC8     'K'+0x80
 5677                            ALIGNROM 2,0xFFFFFFFF
 5678                           //      TASK Is top of dictionary until new definitionsa added
 5679                           //      PATCH CONTEXT or LATEST else LFA in TASK FROM SYM TABLE
 5680                           //      To debug dictionary searches - see - PFIND & DFIND
 5681                           //      DC32    ZEQU_NFA        // 4 (no match) bombing at +
 5682                           //      DC32    NOOP_NFA        // Patch here to shorten test of PFIND
 5683                           //      DC32    CAT_NFA         // C@ before @
 5684                           //      DC32    LESS_NFA        // < before =
 5685                           //       DC32   SoCinit_NFA     //XON_NFA               // FULL DICT SEARCH
 5686                                   DC32    MS_NFA
 5687                           TASK:
 5688                                   DC32    DOCOL
 5689                                   DC32    SEMIS
 5690                           */
 5691                           
 5692                           //------------------------------------------------------------------------------
 5693                           //:NONAME SECTION:
 5694                           // THESE STAY HERE (INSTEAD OF SLLIB) BECAUSE THEY ARE CONDITIONALLY INCLUDED
 5695                           // HI-LEVEL THEM ASM SECTIONS
 5696                           #ifdef IO2TP
 5705                           #endif
 5706                           
 5707                           #ifdef IO2TP
 5716                           #endif
 5717                           
 5718                           #ifdef USE_CMAIN
 5728                           #endif
 5729                           
 5730                           #ifdef TESTRAM
 5836                           #endif  // TESTRAM
 5837                           //------------------------------------------------------------------------------
 5838                           // Placing blocks that can change at end of link map
 5839                           // Place :NONAME for static Library first in FISH_NXP_M0_SLIB.s
 5840                           
 5841                           // $PROJ_DIR$\..\FISH_RM_COMMON
 5842                           // $PROJ_DIR$\..\FISH_RM_CORTEX_M_COMMON_CODE
 5843                           // In Assembler preprocessor set additional include directories 
 5844                           $FISH_RM_MSGS.h
    1                           //------------------------------------------------------------------------------
    2                           
    3                            SECTION .text : CONST (2)
    4                           
    5                           // DC8 "?" IS A NULL TERMINATED STRING
    6                           // DC8 '?' IS NOT
    7                           // #define EOL_DLE // DLE 0x10/16d in QUIT>CR after last word interpreted.
    8                           // #define EOL_NAK // NAK 0x15/21d in error messages for STDLED editor highlight
    9                           // The EOL_NAK makes SPACE NAK end of string in FISH_RM_MSGS.h
   10                           
   11                            ALIGNROM 2,0xFFFFFFFF
   12                           // ALIGN THIS ONE FOR PFIND          
   13                           msg_RUN:
   14    00000000 03                    DC8     3
   15    00000001 52554E2000            DC8     "RUN "
   16                           msg_questionmark:
   17    00000006 203F2000              DC8     " ? "
   18                           
   19                           msg_cr:
   20    0000000A 203C43523E200         DC8     " <CR> "
                  0            
   21                           
   22                           msg_uvspace:
   23    00000011 5641522043454         DC8     "VAR CELLS "
                  C4C532000    
   24                           
   25                           msg_dictspace:
   26    0000001C 44494354494F4         DC8     "DICTIONARY BYTES "
                  E415259204259
                  5445532000   
   27                           
   28                           msg_paren_err:
   29                           #ifdef EOL_NAK
   30    0000002E 20434F4D4D454         DC8     ' COMMENT LINE CANNOT BE EMPTY '
                  E54204C494E45
                  2043414E4E4F5
                  420424520454D
                  50545920     
   31    0000004C 1500                  DC8     0x15, 0
   32                           #else
   34                           #endif
   35                                     
   36                           msg_forget_fish:
   37                           #ifdef EOL_NAK
   38    0000004E 2043414E54204         DC8     ' CANT FORGET FISH IN FLASH '
                  64F5247455420
                  4649534820494
                  E20464C415348
                  20           
   39    00000069 1500                  DC8     0x15, 0
   40                           #else
   42                           #endif
   43                           
   44                           msg_forget_saved:
   45                           #ifdef EOL_NAK
   46    0000006B 20494E20464C4         DC8     ' IN FLASH - SEE FLASH_FORGET '
                  15348202D2053
                  454520464C415
                  3485F464F5247
                  455420       
   47    00000088 1500                  DC8     0x15, 0
   48                           #else
   50                           #endif
   51                           
   52                           msg_dictfull:
   53                           #ifdef EOL_NAK
   54    0000008A 2044494354494         DC8     ' DICTIONARY FULL - SEE .DS '
                  F4E4152592046
                  554C4C202D205
                  34545202E4453
                  20           
   55    000000A5 1500                  DC8     0x15, 0
   56                           #else
   58                           #endif
   59                           
   60                           msg_uvfull:
   61                           #ifdef EOL_NAK
   62    000000A7 2052414D20564         DC8     ' RAM VAR SPACE FULL - SEE .VS '
                  1522053504143
                  452046554C4C2
                  02D2053454520
                  2E565320     
   63    000000C5 1500                  DC8     0x15, 0
   64                           #else
   66                           #endif
   67                           
   68                           msg_wordexists:
   69                           #ifdef EOL_NAK
   70    000000C7 20495320414C5         DC8     ' IS ALREADY DEFINED '
                  2454144592044
                  4546494E45442
                  0            
   71    000000DB 1500                  DC8     0x15, 0
   72                           #else
   74                           #endif
   75                           
   76                           msg_word_error:
   77                           #ifdef EOL_NAK
   78    000000DD 203F204E4F542         DC8     ' ? NOT WORD '
                  0574F524420  
   79    000000E9 1500                  DC8     0x15, 0
   80                           #else
   82                           #endif
   83                           
   84                           msg_number_error:
   85                           #ifdef EOL_NAK
   86    000000EB 203F204E4F542         DC8     ' ? NOT WORD OR NUMBER '
                  0574F5244204F
                  52204E554D424
                  55220        
   87    00000101 1500                  DC8     0x15, 0
   88                           #else
   90                           #endif
   91                           
   92                           msg_qstack:
   93                           #ifdef EOL_NAK
   94    00000103 2043415553454         DC8     ' CAUSED A STACK ERROR '
                  4204120535441
                  434B204552524
                  F5220        
   95    00000119 1500                  DC8     0x15, 0
   96                           #else
   98                           #endif
   99                           
  100                           msg_qpair:
  101                           #ifdef EOL_NAK
  102    0000011B 20535441434B2         DC8     ' STACK ERROR WHILE EXECUTING OR COMPILING '
                  04552524F5220
                  5748494C45204
                  5584543555449
                  4E47204F52204
                  34F4D50494C49
                  4E4720       
  103    00000145 1500                  DC8     0x15, 0
  104                           #else
  106                           #endif
  107                           
  108                           msg_qcomp:
  109                           #ifdef EOL_NAK
  110    00000147 204552524F522         DC8     ' ERROR - NOT COMPILING '
                  02D204E4F5420
                  434F4D50494C4
                  94E4720      
  111    0000015E 1500                  DC8     0x15, 0
  112                           #else
  114                           #endif
  115                           
  116                           msg_qexec:
  117                           #ifdef EOL_NAK
  118    00000160 204552524F522         DC8     ' ERROR - EXECUTED WHILE COMPILING '
                  02D2045584543
                  5554454420574
                  8494C4520434F
                  4D50494C494E4
                  720          
  119    00000182 1500                  DC8     0x15, 0
  120                           #else
  122                           #endif
  123                           
 5845                           // equals below
 5846                           //#include ".\..\FISH_COMMON_CODE\FISH_RM_MSGS.h"
 5847                           
 5848                           // SYSTEMCLOCK #define set in FISH_M0_EQUATES.s for SYSCLOCK value.
 5849                           // THIS IS A :NONAME WORDSET
 5850                           
 5851                           #if     NXP_M0_11xx | NXP_M0_1115
 5853                           #endif  // NXP_M0_11xx
 5854                           
 5855                           #ifdef NXP_M0_812
 5856                           $FISH_NXP_M0_812_SOC_INIT.s
    1                           //      FISH_NXP_M0_81x_SOC_INIT.s
    2                           
    3                           //HEADERLESS SoCinit:        ( -- ) Initialize main SoC subsystems here.
    4                           //      Use of IRC, external xtal's and PLL done here.
    5                           //      Derive maximum SYSCLOCK frequiency possible.
    6                           //      Initialize FISH SYSCLK to system clock frequency in Hz. Used By UARTx_INIT.
    7                           //      Initialize SYSTICK, and others under #define control
    8                           
    9                            SECTION .text : CONST (2)
   10                           SoCinit:
   11    00000000 ........        DC32  DOCOL
   12                           // SYSTICK SECTION: (SysTick uses the processor clock.)
   13                           // SYST_RVR (Reload value) not set until user does with MS or DELAY.
   14                           // SYSTICK TIMER ENABLE: Bit 0 = 1
   15                           // SYSTICK CLKSOURCE: Bit 2 = 0 (SYSTEM CLOCK/2)
   16                           // SYSTICK CLKSOURCE: Bit 2 = 1 (SYSTEM CLOCK)
   17                           //  DC32    STRVA, 1, SYSTICKCSR    // SYSCLK/2
   18                           //  DC32    STRVA, 5, SYST_CSR    // SYSCLK
   19    00000004 ........07000   DC32    STRVA, 7, SYST_CSR    // SYSCLK + SYSTICK interrupt for FISH STCTR
                  00010E000E0  
   20                           
   21                           #ifdef SLOW_POWERUP
   24                           #endif
   25                           
   26                           // SYSAHBCLKCTRL, address 0x40048080h can disable uartclks.
   27                           // 0xFF = sys/rom/ram/flash/i2c/gpio and switch matrix
   28                           // 0x1C0 = uart0-1&2
   29                           // IOCON clockes are NOT enabled because the 812 special function pins
   30                           // TXD, RXD, CTS and RTS are configured solely by PINASSSIGNx
   31    00000010 ........FFC00   DC32    STRVA, 1C0FFh, SYSAHBCLKCTRL
                  10080800440  
   32                           
   33                           // UART HW FLOW CONTROL settings for STP 812 DevL Board:
   34                           // 812 CTS IS INPUT FROM FT230 RTS.
   35                           // 812 CTS enabled by pin assignment and CTSEN bit set in UART0_INIT.
   36                           // 812 RTS IS OUTPUT TO FT230 CTS.
   37                           // 812 RTS is enabled by pin assignment.
   38                           // All pins come up as inputs pulled high.
   39                           // CTS and RTS are active low, allowing flow.
   40                           // So enable pins here making RTS signal active,
   41                           // allowing CTSEN to be set in UART0_INIT if desired.
   42                           // UARTCLKDIV is the U_PCLK used by all UARTS!
   43                           // UARTCLKDIV set by value > 0 = U_PCLK - Value of 0 (power-up) stops uartclk
   44                           
   45                           // PINASSIGN0 addr 4000C000h FFH IS RESET (OFF!) VALUE
   46                           // Default when XON_XOFF and CTS not defined RTS is defined so reset value is on
   47                           #ifdef NXP_812_mBed_MAX  // use built in virtual USB serial interface
   50                           #else
   51                           // 0xFF0900004 where 0004 is RX = PIO0_0 and TX = PIO_4
   52    0000001C ........04000   DC32    STRVA, 0xFF090004, PINASSIGN0 // Order = RTS/CTS RX/TX CTS = INPUT
                  9FF00C00040  
   53                           #endif
   54                           
   55                           // ON STP Board CTS must be set for FTTDI chip!!!
   56                           #ifdef XON_XOFF
   57                           // REVERSE of schematic
   58                           // Asign CTS signal pin vs GPIO usage
   59                           // Set RTS (bit 14 = 0x2000) to OUTPUT and CTS (bit 9 = 0x200) to INPUT
   60                           // GPIO usage of RTS pin, which if assined as RTS signal which enables it.
   61    00000028 ........00200   DC32    STRVA, 0x2000, DIR0     // RTS_PIN_14 0= IN 0x2000 = OUT
                  000002000A0  
   62                           // Set RTS Low
   63    00000034 ........00000   DC32    STRVA,  0x00, PIN0      // RTS HI/LOW IF OUTPUT
                  000002100A0  
   64                           #endif
   65                           
   66                           #ifdef CTS_RTS
   68                           #ifdef NXP_812_mBed_MAX  // use built in virtual USB serial interface
   70                           #else
   72                           #endif
   73                           #endif
   74                             
   75                           #ifdef NXP_M0_81x_IRC12_24MHZ   // Defined in IAR Project Configuration
   76                           // Voltages should be stable now - proceed to init.
   77    00000040 ........70ED0   DC32  STRVA, 0ED70h, PDRUNCFG         // power-up PLL
                  00038820440  
   78                           
   79                           // CHOOSE CLOCK TO FEED PLL
   80                           // 0=irc, 1=sysclk, 2=wdt, 3=mainclock
   81    0000004C ........00000   DC32  STRVA, 0, SYSPLLCLKSEL  // 12MHz IRC
                  00040800440  
   82                           // Tickle Update Register
   83    00000058 ........00000   DC32  STRVA, 0, SYSPLLCLKUEN
                  00044800440  
   84    00000064 ........01000   DC32  STRVA, 1, SYSPLLCLKUEN
                  00044800440  
   85                           
   86                           // SET PLL MULTIPLY AND DIVIDE IF NEEDED AND SET SYSCLOCK
   87    00000070 ........01000   DC32  STRVA, 1h, SYSPLLCTRL   // pll 12MHz*4 = 48MHz
                  00008800440  
   88    0000007C ........00366   DC32  STRVA, SYSTEMCLOCK, SYSCLOCK    // 
                  E01........  
   89                           Hz_28000000:
   90                           _wPLLlock
   91    00000088 ........0C800   DC32  LIT,SYSPLLSTAT,AT,ONE,ANDD,ZBRAN
                  440..........
                  .............
                  .........    
   92    000000A0 E8FFFFFF        DC32  (_wPLLlock - .)
   93                           
   94                           // 0=irc, 1=sysclk, 2=wdt, 3=mainclock
   95    000000A4 ........03000   DC32  STRVA, 3, MAINCLKSEL    // select PLL driven clock
                  00070800440  
   96                           // Tickle Update Register
   97    000000B0 ........00000   DC32  STRVA, 0, MAINCLKUEN
                  00074800440  
   98    000000BC ........01000   DC32  STRVA, 1, MAINCLKUEN
                  00074800440  
   99                           
  100                           #endif  // NXP_M0_81x_IRC12_24MHZ
  101                           
  102                           #ifdef CLKOUT
  106                           #endif
  107                           
  108                           // Set SYSCLOCK = SYSTEMCLOCK defined in FISH_M0_EQUATES.s
  109                           // And set in Project Configuration ex: NXP_M0_81x_IRC12_12MHZ
  110                           // in Assembler -> Preprocessor -> Defined Symbols
  111    000000C8 ........00366   DC32    STRVA, SYSTEMCLOCK, SYSCLOCK
                  E01........  
  112                           
  113    000000D4 ........        DC32    SEMIS
 5857                           #endif  // NXP_M0_812
 5858                           
 5859                            END


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
.                    Target symbol: 24 
/                    OPERATOR 
/                    DELIMITER 
:                    Target symbol: 22 
:                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
@                    DELIMITER 
AAPCS                DIRECTIVE 
ABORT_STOP_TILL_CO   #define, value: , line:       7:7  
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
ALIGNROM             DIRECTIVE 
ANOTE                DIRECTIVE 
ARGFRAME             DIRECTIVE 
ARM                  DIRECTIVE 
ASEGN                DIRECTIVE 
ASR                  MNEMONIC 
BIT                  SEGMENT TYPE 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C0                   REGISTER 
C1                   REGISTER 
C10                  REGISTER 
C11                  REGISTER 
C12                  REGISTER 
C13                  REGISTER 
C14                  REGISTER 
C15                  REGISTER 
C2                   REGISTER 
C3                   REGISTER 
C4                   REGISTER 
C5                   REGISTER 
C6                   REGISTER 
C7                   REGISTER 
C8                   REGISTER 
C9                   REGISTER 
CALL_GRAPH_ROOT      DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFI                  DIRECTIVE 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
CODE16               DIRECTIVE 
CODE32               DIRECTIVE 
COL                  DIRECTIVE 
CONST                SEGMENT TYPE 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DBAUD                #define, value: ALL_UNINITRAM_START, line:     129:8      146:8    24:10    57:13     4416
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DCB                  DIRECTIVE 
DCD                  DIRECTIVE 
DCREL32              DIRECTIVE 
DCW                  DIRECTIVE 
DEFINE               DIRECTIVE 
DF32                 DIRECTIVE 
DF64                 DIRECTIVE 
DPUSH                MACRO 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
END                  DIRECTIVE 
ENDIF                DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
EOL_DLE              #define, value: , line:       8:7      482:9
EOL_NAK              #define, value: , line:       9:7  
EQU                  DIRECTIVE 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTWEAK              DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FISH_Debug_WORDSET   Target symbol: 0 
FISH_PubRel_WORDSET  #define, value: 1, line:         0         85
FISH_STM32F4_Peripheral_Register_ADDRS
                     #define, value: , line:       4:7  
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IMPORT               DIRECTIVE 
INCLUDE              DIRECTIVE 
LIBRARY              DIRECTIVE 
LIT2t                MACRO 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LOW                  OPERATOR 
LR                   REGISTER 
LSL                  MNEMONIC 
LSR                  MNEMONIC 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTXRF               DIRECTIVE 
LTORG                DIRECTIVE 
LWRD                 OPERATOR 
MACRO                DIRECTIVE 
MODULE               DIRECTIVE 
NAME                 DIRECTIVE 
NDPOP2t              MACRO 
NDPOP2w              MACRO 
NDPOP2x              MACRO 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NEXT                 MACRO 
NEXT1                MACRO 
NOALLOC              SEGMENT TYPE 
NOCALL               DIRECTIVE 
NOROOT               SEGMENT TYPE 
NPAGE                SEGMENT TYPE 
NXP_M0_004kRam       #define, value: 1, line:         0         73
NXP_M0_008kRam       Target symbol: 0 
NXP_M0_016kFlash_1KWrite #define, value: 1, line:         0  
NXP_M0_032kFlash_4KWrite Target symbol: 0 
NXP_M0_064kFlash_4KWrite Target symbol: 0 
NXP_M0_1115          Target symbol: 0 
NXP_M0_11xx          Target symbol: 0 
NXP_M0_812           #define, value: 1, line:         0  
NXP_M0_81x_IRC12_24MHZ #define, value: 1, line:         0  
ODD                  DIRECTIVE 
P0                   REGISTER 
P1                   REGISTER 
P10                  REGISTER 
P11                  REGISTER 
P12                  REGISTER 
P13                  REGISTER 
P14                  REGISTER 
P15                  REGISTER 
P2                   REGISTER 
P3                   REGISTER 
P4                   REGISTER 
P5                   REGISTER 
P6                   REGISTER 
P7                   REGISTER 
P8                   REGISTER 
P9                   REGISTER 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP2i                MACRO 
POP2n                MACRO 
POP2t                MACRO 
POP2w                MACRO 
POP2x                MACRO 
POPp2w               MACRO 
POPr2i               MACRO 
POPr2t               MACRO 
PRESERVE8            DIRECTIVE 
PROGRAM              DIRECTIVE 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSHi                MACRO 
PUSHi2r              MACRO 
PUSHn                MACRO 
PUSHn2r              MACRO 
PUSHt                MACRO 
PUSHt2r              MACRO 
PUSHw                MACRO 
PUSHw2r              MACRO 
PUSHx                MACRO 
R0                   REGISTER 
R1                   REGISTER 
R10                  REGISTER 
R11                  REGISTER 
R12                  REGISTER 
R13                  REGISTER 
R14                  REGISTER 
R15                  REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
R8                   REGISTER 
R9                   REGISTER 
RADIX                DIRECTIVE 
REGISTER             SEGMENT TYPE 
RELOC_ARM_PREL31     OPERATOR 
RELOC_ARM_TARGET1    OPERATOR 
RELOC_ARM_TARGET2    OPERATOR 
RELOC_LOCAL          OPERATOR 
REORDER              SEGMENT TYPE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
REQUIRE8             DIRECTIVE 
ROOT                 SEGMENT TYPE 
ROR                  MNEMONIC 
RRX                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
SBREL                OPERATOR 
SECTION              DIRECTIVE 
SECTION_GROUP        DIRECTIVE 
SECTION_LINK         DIRECTIVE 
SECTION_TYPE         DIRECTIVE 
SET                  DIRECTIVE 
SETA                 DIRECTIVE 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFS                  OPERATOR 
SIZEOF               OPERATOR 
SORT                 SEGMENT TYPE 
SP                   REGISTER 
THUMB                DIRECTIVE 
THUMBX               DIRECTIVE 
TPUSH                MACRO 
TRUE_EQU_NEG_ONE     #define, value: , line:       5:7  
UBAUD                #define, value: ALL_UNINITRAM_START+4, line:     130:8      147:8    60:13     4417
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTYPED              SEGMENT TYPE 
VAR                  DIRECTIVE 
XDATA                SEGMENT TYPE 
XON_XOFF             #define, value: , line:       6:7  
XOR                  OPERATOR 
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
^                    DELIMITER 
__ARM4TM__           #define, value: 4, line:         0  
__ARM5TM__           #define, value: 5, line:         0  
__ARM5T__            #define, value: 5, line:         0  
__ARM5__             #define, value: 5, line:         0  
__ARM6M__            #define, value: 11, line:         0  
__ARM6SM__           #define, value: 12, line:         0  
__ARM6__             #define, value: 6, line:         0  
__ARM_PROFILE_M__    #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CORE__             #define, value: __ARM6M__, line:         0  
__DATE__             #define,            line:         0        106
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__IASMARM__          #define, value: 1, line:         0  
__LINE__             #define,            line:         0  
__LITTLE_ENDIAN__    #define, value: 1, line:         0  
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0        109
__VER__              #define,            line:         0  
comma_test           #define, value: , line:       950  
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
i                    #define, value: r5, line:      20:5      647:9    654:9    655:9    656:9
                                                                    667:9    668:9    677:9    684:9
                                                                    697:9    699:9    708:9    710:9
                                                                    723:9    724:9    740:9    742:9
                                                                    746:9    758:9    771:9    842:9
                                                                    877:9    891:9    892:9    892:9
                                                                    893:9    912:9    912:9    913:9
                                                                    939:9    939:9    940:9    972:9
                                                                    984:9   1016:9   1032:9   1068:9
                                                                   1112:9   1118:9   1134:9   1150:9
                                                                   1172:9   1178:9   1188:9   1199:9
                                                                   1211:9   1223:9   1233:9   1234:9
                                                                   1236:9    50:10    51:10    52:10
                                                                      133      465      630      649
                                                                      795      800      852      869
                                                                      886      887     1337     1659
                                                                     1706     1724     1744     1764
                                                                     1786     1804     1820     1842
                                                                     1867     1892     1916     1938
                                                                     1971     1993     2015     2058
                                                                     2089     2148     2172     2191
                                                                     2209     2228     3223     3310
                                                                     3334     3351     3368     3385
                                                                     3402     3419     3436     3453
                                                                     3698     3718     3740     3748
                                                                     3783     3858     3892     3960
                                                                     4040     4059     4077     4096
                                                                     4114     4132     4150     4170
                                                                     4190     4210     4463     4522
                                                                     4545     4747     4818     4863
                                                                     4868     4947     4963     4984
                                                                     5005   116:14   245:14   279:14
                                                                   310:14     5359     5418     5626
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
k                    #define, value: r12, line:      29:5      805:9    841:9   1210:9   1221:9
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
n                    #define, value: r1, line:      16:5      638:9    642:9    644:9    755:9
                                                                    756:9    756:9    757:9    768:9
                                                                    769:9    769:9    770:9    806:9
                                                                    807:9    818:9    819:9    824:9
                                                                    982:9    983:9    997:9   1006:9
                                                                   1027:9   1030:9   1047:9   1048:9
                                                                   1058:9   1059:9   1086:9   1087:9
                                                                   1090:9   1094:9   1094:9   1095:9
                                                                   1131:9   1145:9   1149:9   1209:9
                                                                   1210:9   1221:9   1222:9   1233:9
                                                                   1235:9    22:10    26:10    36:10
                                                                    95:10    96:10    97:10    99:10
                                                                   101:10      171      177      177
                                                                      193      197      211      216
                                                                      463      464      828      831
                                                                      831      836      836      838
                                                                      856      856      858     1330
                                                                     1331     1331     1700     1705
                                                                     1837     1838     1967     1968
                                                                     1970     1989     1990     1992
                                                                     2011     2012     2014     2034
                                                                     2037     2047     2047     2048
                                                                     2075     2077     2079     2140
                                                                     2145     2147     2170     2171
                                                                     2189     2190     2207     2208
                                                                     2226     2227     3305     3308
                                                                     3696     3697     3716     3717
                                                                     3736     3738     3738     3776
                                                                     3778     3847     3848     3879
                                                                     3887     3887     3887     4038
                                                                     4039     4057     4058     4094
                                                                     4095     4460     4462     4739
                                                                     4742     4743     4744     4746
                                                                     4813     4814     4814     4851
                                                                     4853     4853     4981     4983
                                                                     5002     5004   227:14   259:14
                                                                   293:14     5357     5358     5387
                                                                     5396     5400     5410     5411
                                                                     5413     5414     5609     5615
                                                                     5617     5618     5620     5622
                                                                     5623     5625
p                    #define, value: r7, line:      22:5      677:9    677:9    677:9    684:9
                                                                    684:9    684:9    699:9    699:9
                                                                    699:9    710:9    710:9    710:9
                                                                    723:9    723:9    723:9    745:9
                                                                    745:9    745:9    758:9    758:9
                                                                    758:9    771:9    771:9    771:9
                                                                    791:9    791:9    791:9    792:9
                                                                    792:9    792:9    839:9    839:9
                                                                    839:9    842:9    842:9    842:9
                                                                    842:9    842:9    842:9    877:9
                                                                    877:9    877:9    905:9    905:9
                                                                    905:9    950:9    950:9    950:9
                                                                    965:9    965:9    965:9    966:9
                                                                    966:9    966:9    980:9    980:9
                                                                    980:9    984:9    984:9    984:9
                                                                    997:9    997:9    997:9   1016:9
                                                                   1016:9   1016:9   1027:9   1027:9
                                                                   1027:9   1028:9   1028:9   1028:9
                                                                   1052:9   1052:9   1052:9   1054:9
                                                                   1054:9   1054:9   1085:9   1144:9
                                                                   1144:9   1144:9   1145:9   1145:9
                                                                   1145:9   1150:9   1150:9   1150:9
                                                                   1150:9   1150:9   1150:9   1164:9
                                                                   1164:9   1164:9   1165:9   1165:9
                                                                   1165:9   1166:9   1166:9   1166:9
                                                                   1172:9   1172:9   1172:9   1172:9
                                                                   1172:9   1172:9   1178:9   1178:9
                                                                   1178:9   1178:9   1178:9   1178:9
                                                                   1187:9    48:10      153      461
                                                                      461      461      465      465
                                                                      465      628      628      628
                                                                      630      630      630      647
                                                                      647      647      649      649
                                                                      649      776      776      776
                                                                      777      777      777      795
                                                                      795      795      795      795
                                                                      795      800      800      800
                                                                      827      827      827      828
                                                                      841      841      841      852
                                                                      852      852      852      852
                                                                      852      869      869      869
                                                                      869      869      869     1326
                                                                     1337     1337     1337     1657
                                                                     1658     1659     1659     1659
                                                                     1659     1659     1659     1699
                                                                     1699     1699     1700     1700
                                                                     1700     1704     1704     1704
                                                                     1705     1705     1705     1706
                                                                     1706     1706     1706     1706
                                                                     1706     1724     1724     1724
                                                                     1743     1744     1744     1744
                                                                     1764     1764     1764     1804
                                                                     1804     1804     1820     1820
                                                                     1820     1837     1837     1837
                                                                     1858     1858     1858     1864
                                                                     1864     1864     1866     1866
                                                                     1866     1867     1867     1867
                                                                     1867     1867     1867     1889
                                                                     1889     1913     1913     1913
                                                                     1914     1914     1914     1916
                                                                     1916     1916     1916     1916
                                                                     1916     1936     1938     1938
                                                                     1938     1966     1967     1967
                                                                     1967     1988     1989     1989
                                                                     1989     2010     2011     2011
                                                                     2011     2034     2034     2034
                                                                     2035     2035     2035     2036
                                                                     2036     2036     2074     2074
                                                                     2074     2075     2075     2075
                                                                     2076     2076     2076     2140
                                                                     2140     2140     2144     2144
                                                                     2144     2170     2170     2170
                                                                     2172     2172     2172     2189
                                                                     2189     2189     2191     2191
                                                                     2191     2206     2206     2206
                                                                     2207     2207     2207     2225
                                                                     2225     2225     2226     2226
                                                                     2226     3218     3218     3218
                                                                     3219     3219     3219     3223
                                                                     3223     3223     3223     3223
                                                                     3223     3304     3304     3304
                                                                     3305     3305     3305     3306
                                                                     3306     3306     3307     3307
                                                                     3307     3310     3310     3310
                                                                     3310     3310     3310     3327
                                                                     3327     3327     3334     3334
                                                                     3334     3334     3334     3334
                                                                     3349     3349     3349     3351
                                                                     3351     3351     3366     3366
                                                                     3366     3368     3368     3368
                                                                     3383     3383     3383     3385
                                                                     3385     3385     3400     3400
                                                                     3400     3402     3402     3402
                                                                     3417     3417     3417     3419
                                                                     3419     3419     3434     3434
                                                                     3434     3436     3436     3436
                                                                     3451     3451     3451     3453
                                                                     3453     3453     3695     3695
                                                                     3695     3696     3696     3696
                                                                     3698     3698     3698     3715
                                                                     3715     3715     3716     3716
                                                                     3716     3718     3718     3718
                                                                     3736     3736     3736     3737
                                                                     3737     3737     3740     3740
                                                                     3740     3748     3748     3748
                                                                     3776     3776     3776     3777
                                                                     3777     3777     3783     3783
                                                                     3783     3847     3847     3847
                                                                     3858     3858     3858     3879
                                                                     3879     3879     3892     3892
                                                                     3892     3957     3957     3957
                                                                     3960     3960     3960     4037
                                                                     4037     4037     4038     4038
                                                                     4038     4040     4040     4040
                                                                     4056     4056     4056     4057
                                                                     4057     4057     4059     4059
                                                                     4059     4075     4075     4075
                                                                     4077     4077     4077     4093
                                                                     4093     4093     4094     4094
                                                                     4094     4096     4096     4096
                                                                     4112     4112     4112     4114
                                                                     4114     4114     4130     4130
                                                                     4130     4132     4132     4132
                                                                     4148     4148     4148     4150
                                                                     4150     4150     4167     4167
                                                                     4167     4168     4168     4168
                                                                     4170     4170     4170     4187
                                                                     4187     4187     4188     4188
                                                                     4188     4190     4190     4190
                                                                     4207     4207     4207     4208
                                                                     4208     4208     4210     4210
                                                                     4210     4463     4463     4463
                                                                     4733     4733     4733     4818
                                                                     4818     4818     4863     4863
                                                                     4863     4868     4868     4868
                                                                   110:14   110:14   110:14   116:14
                                                                   116:14   116:14     5359     5359
                                                                     5359     5387     5387     5387
                                                                     5388     5388     5388
pragma               PREPROCESSOR DIRECTIVE 
r                    #define, value: r6, line:      21:5      654:9    654:9    654:9    667:9
                                                                    667:9    667:9    740:9    740:9
                                                                    740:9    927:9    928:9    933:9
                                                                    938:9    938:9    967:9    967:9
                                                                    967:9    968:9    968:9    968:9
                                                                   1198:9    49:10    51:10    51:10
                                                                    51:10      886      886      886
                                                                     1723     1763     1784     1785
                                                                     1803     1803     1803     1819
                                                                     1838     1838     1838
r0                   Target symbol: 0 
r1                   Target symbol: 0 
r10                  Target symbol: 0 
r11                  Target symbol: 0 
r12                  Target symbol: 0 
r2                   Target symbol: 0 
r3                   Target symbol: 0 
r4                   Target symbol: 0 
r5                   Target symbol: 0 
r6                   Target symbol: 0 
r7                   Target symbol: 0 
ra                   #define, value: r10, line:      27:5      999:9   1013:9
rb                   #define, value: r11, line:      28:5      793:9    799:9
t                    #define, value: r0, line:      15:5      637:9    641:9    643:9    676:9
                                                                    677:9    683:9    684:9    697:9
                                                                    699:9    708:9    710:9    742:9
                                                                    744:9    744:9    745:9    754:9
                                                                    757:9    757:9    758:9    767:9
                                                                    770:9    770:9    771:9    800:9
                                                                    805:9    807:9    807:9    809:9
                                                                    817:9    819:9    823:9    823:9
                                                                    824:9    832:9    833:9    840:9
                                                                    842:9    854:9    856:9    865:9
                                                                    866:9    876:9    877:9    905:9
                                                                    906:9    965:9    968:9    980:9
                                                                    981:9    981:9    983:9    983:9
                                                                    984:9   1004:9   1006:9   1009:9
                                                                   1016:9   1029:9   1030:9   1030:9
                                                                   1031:9   1048:9   1052:9   1053:9
                                                                   1054:9   1059:9   1085:9   1086:9
                                                                   1094:9   1115:9   1144:9   1148:9
                                                                   1149:9   1150:9   1164:9   1167:9
                                                                   1172:9   1175:9   1175:9   1176:9
                                                                   1176:9   1177:9   1178:9    23:10
                                                                    26:10    27:10    27:10    28:10
                                                                    33:10    36:10    37:10    37:10
                                                                    38:10    95:10    97:10    98:10
                                                                    99:10   101:10      461      462
                                                                      462      464      464      465
                                                                      628      629      629      630
                                                                      647      648      648      649
                                                                      777      778      778      781
                                                                      785      785      786      790
                                                                      793      794      795      799
                                                                      800      827      839      850
                                                                      852      859      867      868
                                                                      868      869     1327     1327
                                                                     1330     1333     1333     1337
                                                                     1657     1659     1704     1706
                                                                     1723     1724     1743     1744
                                                                     1763     1764     1803     1804
                                                                     1819     1820     1864     1866
                                                                     1867     1914     1916     1936
                                                                     1938     1968     1969     1969
                                                                     1970     1990     1991     1991
                                                                     1992     2012     2013     2013
                                                                     2014     2045     2046     2074
                                                                     2081     2144     2146     2146
                                                                     2147     2171     2172     2190
                                                                     2191     2206     2208     2225
                                                                     2227     3218     3220     3220
                                                                     3223     3304     3309     3309
                                                                     3310     3328     3328     3332
                                                                     3332     3334     3349     3350
                                                                     3350     3351     3366     3367
                                                                     3367     3368     3383     3384
                                                                     3384     3385     3400     3401
                                                                     3401     3402     3417     3418
                                                                     3418     3419     3434     3435
                                                                     3435     3436     3451     3452
                                                                     3452     3453     3695     3697
                                                                     3697     3698     3715     3717
                                                                     3717     3718     3734     3734
                                                                     3740     3744     3748     3771
                                                                     3771     3772     3781     3781
                                                                     3783     3846     3846     3852
                                                                     3852     3858     3882     3882
                                                                     3883     3890     3890     3892
                                                                     3957     3958     3958     3959
                                                                     3959     3960     4037     4039
                                                                     4039     4040     4056     4058
                                                                     4058     4059     4075     4076
                                                                     4076     4077     4093     4095
                                                                     4095     4096     4112     4113
                                                                     4113     4114     4130     4131
                                                                     4131     4132     4148     4149
                                                                     4149     4150     4168     4169
                                                                     4169     4170     4188     4189
                                                                     4189     4190     4208     4209
                                                                     4209     4210     4462     4463
                                                                     4733     4742     4744     4745
                                                                     4745     4746     4817     4818
                                                                     4858     4858     4859     4863
                                                                     4867     4867     4868     4982
                                                                     4983     5003     5004   110:14
                                                                   112:14   112:14   115:14   115:14
                                                                   116:14   226:14   229:14   238:14
                                                                   239:14   258:14   261:14   270:14
                                                                   271:14   273:14   292:14   295:14
                                                                   298:14   300:14   302:14   304:14
                                                                     5358     5359     5388     5391
                                                                     5391     5392     5392     5393
                                                                     5402     5409     5417
undef                PREPROCESSOR DIRECTIVE 
w                    #define, value: r2, line:      17:5      639:9    645:9    647:9    647:9
                                                                    655:9    656:9    656:9    668:9
                                                                    668:9    676:9    677:9    677:9
                                                                    683:9    684:9    684:9    699:9
                                                                    699:9    710:9    710:9    724:9
                                                                    724:9    746:9    746:9    758:9
                                                                    758:9    771:9    771:9    792:9
                                                                    793:9    799:9    806:9    815:9
                                                                    815:9    818:9    841:9    842:9
                                                                    842:9    842:9    877:9    877:9
                                                                    893:9    893:9    913:9    913:9
                                                                    928:9    929:9    932:9    932:9
                                                                    933:9    934:9    940:9    940:9
                                                                    966:9    967:9    972:9    972:9
                                                                    984:9    984:9    998:9    999:9
                                                                   1002:9   1002:9   1004:9   1005:9
                                                                   1014:9   1014:9   1015:9   1016:9
                                                                   1016:9   1028:9   1029:9   1031:9
                                                                   1032:9   1032:9   1068:9   1068:9
                                                                   1095:9   1096:9   1098:9   1101:9
                                                                   1103:9   1106:9   1108:9   1112:9
                                                                   1112:9   1115:9   1116:9   1118:9
                                                                   1118:9   1130:9   1131:9   1132:9
                                                                   1133:9   1134:9   1134:9   1148:9
                                                                   1150:9   1150:9   1150:9   1166:9
                                                                   1172:9   1172:9   1172:9   1177:9
                                                                   1178:9   1178:9   1178:9   1186:9
                                                                   1187:9   1188:9   1188:9   1197:9
                                                                   1198:9   1199:9   1199:9   1208:9
                                                                   1209:9   1211:9   1211:9   1220:9
                                                                   1222:9   1223:9   1223:9   1234:9
                                                                   1235:9   1236:9   1236:9    52:10
                                                                    52:10    82:10      133      133
                                                                      153      154      160      181
                                                                      187      198      205      217
                                                                      465      465      630      630
                                                                      649      649      776      790
                                                                      793      795      795      795
                                                                      800      800      829      830
                                                                      830      837      837      841
                                                                      851      851      852      852
                                                                      852      857      857      867
                                                                      869      869      869      887
                                                                      887     1326     1330     1337
                                                                     1337     1658     1659     1659
                                                                     1659     1699     1706     1706
                                                                     1706     1724     1724     1744
                                                                     1744     1764     1764     1784
                                                                     1785     1786     1786     1804
                                                                     1804     1820     1820     1842
                                                                     1842     1858     1867     1867
                                                                     1867     1892     1892     1913
                                                                     1916     1916     1916     1938
                                                                     1938     1966     1969     1971
                                                                     1971     1988     1991     1993
                                                                     1993     2010     2013     2015
                                                                     2015     2035     2046     2051
                                                                     2051     2058     2058     2076
                                                                     2079     2081     2082     2082
                                                                     2083     2089     2089     2145
                                                                     2146     2148     2148     2172
                                                                     2172     2191     2191     2209
                                                                     2209     2228     2228     3219
                                                                     3221     3221     3222     3222
                                                                     3223     3223     3223     3307
                                                                     3308     3308     3310     3310
                                                                     3310     3327     3329     3329
                                                                     3329     3334     3334     3334
                                                                     3351     3351     3368     3368
                                                                     3385     3385     3402     3402
                                                                     3419     3419     3436     3436
                                                                     3453     3453     3698     3698
                                                                     3718     3718     3737     3738
                                                                     3740     3740     3748     3748
                                                                     3777     3778     3783     3783
                                                                     3858     3858     3892     3892
                                                                     3960     3960     4040     4040
                                                                     4059     4059     4077     4077
                                                                     4096     4096     4114     4114
                                                                     4132     4132     4150     4150
                                                                     4167     4169     4170     4170
                                                                     4187     4189     4190     4190
                                                                     4207     4209     4210     4210
                                                                     4463     4463     4522     4522
                                                                     4545     4545     4747     4747
                                                                     4805     4817     4818     4818
                                                                     4863     4863     4868     4868
                                                                     4947     4947     4963     4963
                                                                     4984     4984     5005     5005
                                                                   111:14   112:14   113:14   114:14
                                                                   114:14   115:14   116:14   116:14
                                                                   228:14   229:14   231:14   236:14
                                                                   236:14   238:14   239:14   245:14
                                                                   245:14   260:14   261:14   263:14
                                                                   268:14   268:14   270:14   271:14
                                                                   272:14   273:14   279:14   279:14
                                                                   294:14   295:14   296:14   297:14
                                                                   297:14   298:14   299:14   300:14
                                                                   301:14   302:14   303:14   304:14
                                                                   310:14   310:14     5359     5359
                                                                     5395     5396     5398     5400
                                                                     5408     5409     5411     5417
                                                                     5418     5418     5626     5626
x                    #define, value: r3, line:      18:5      641:9    642:9    647:9    647:9
                                                                    656:9    656:9    668:9    668:9
                                                                    677:9    677:9    684:9    684:9
                                                                    699:9    699:9    710:9    710:9
                                                                    724:9    724:9    746:9    746:9
                                                                    758:9    758:9    771:9    771:9
                                                                    791:9    800:9    816:9    816:9
                                                                    817:9    831:9    831:9    832:9
                                                                    838:9    838:9    839:9    842:9
                                                                    842:9    850:9    850:9    854:9
                                                                    864:9    864:9    866:9    866:9
                                                                    867:9    867:9    868:9    877:9
                                                                    877:9    891:9    892:9    893:9
                                                                    893:9    913:9    913:9    924:9
                                                                    932:9    940:9    940:9    950:9
                                                                    972:9    972:9    984:9    984:9
                                                                   1000:9   1001:9   1015:9   1016:9
                                                                   1016:9   1032:9   1032:9   1068:9
                                                                   1068:9   1112:9   1112:9   1118:9
                                                                   1118:9   1134:9   1134:9   1150:9
                                                                   1150:9   1165:9   1172:9   1172:9
                                                                   1178:9   1178:9   1188:9   1188:9
                                                                   1199:9   1199:9   1211:9   1211:9
                                                                   1223:9   1223:9   1236:9   1236:9
                                                                    52:10    52:10    82:10    83:10
                                                                      133      133      154      154
                                                                      465      465      630      630
                                                                      649      649      795      795
                                                                      800      800      838      839
                                                                      843      850      852      852
                                                                      858      859      862      869
                                                                      869      887      887     1337
                                                                     1337     1659     1659     1706
                                                                     1706     1724     1724     1744
                                                                     1744     1764     1764     1786
                                                                     1786     1804     1804     1820
                                                                     1820     1842     1842     1867
                                                                     1867     1892     1892     1916
                                                                     1916     1938     1938     1971
                                                                     1971     1993     1993     2015
                                                                     2015     2036     2045     2052
                                                                     2052     2058     2058     2079
                                                                     2083     2089     2089     2148
                                                                     2148     2172     2172     2191
                                                                     2191     2209     2209     2228
                                                                     2228     3223     3223     3306
                                                                     3309     3310     3310     3334
                                                                     3334     3351     3351     3368
                                                                     3368     3385     3385     3402
                                                                     3402     3419     3419     3436
                                                                     3436     3453     3453     3698
                                                                     3698     3718     3718     3740
                                                                     3740     3748     3748     3783
                                                                     3783     3858     3858     3892
                                                                     3892     3960     3960     4040
                                                                     4040     4059     4059     4077
                                                                     4077     4096     4096     4114
                                                                     4114     4132     4132     4150
                                                                     4150     4170     4170     4190
                                                                     4190     4210     4210     4463
                                                                     4463     4522     4522     4545
                                                                     4545     4747     4747     4806
                                                                     4813     4818     4818     4849
                                                                     4851     4863     4863     4868
                                                                     4868     4947     4947     4963
                                                                     4963     4984     4984     5005
                                                                     5005   116:14   116:14   230:14
                                                                   231:14   240:14   241:14   245:14
                                                                   245:14   262:14   263:14   274:14
                                                                   275:14   279:14   279:14   305:14
                                                                   306:14   310:14   310:14     5359
                                                                     5359     5418     5418     5626
                                                                     5626
y                    #define, value: r4, line:      19:5      808:9    809:9    822:9    823:9
                                                                    855:9    856:9    927:9    929:9
                                                                    934:9    934:9   1001:9   1002:9
                                                                   1013:9   1014:9   1121:9   1124:9
                                                                   1127:9   1133:9    24:10    28:10
                                                                    34:10    38:10      167      171
                                                                      196      197      215      216
                                                                     5390     5393     5413     5614
                                                                     5615     5616     5617     5619
                                                                     5620     5621     5622     5624
                                                                     5625
{                    DELIMITER 
|                    OPERATOR 
||                   OPERATOR 
}                    DELIMITER 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
.text               CONST  	REL 
FISH_Ram_MemMap     DATA  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 
ABORT               REL    CONST UNTYP.           .text      C 
ABORT_NFA           REL    CONST UNTYP.           .text      0 
ABORT_QUIT          REL    CONST UNTYP.           .text      48 
ABS                 REL    CONST UNTYP.           .text      8 
ABS1_NFA            REL    CONST UNTYP.           .text      0 
AD0CR               ABS    CONST UNTYP.           ASEG       4001C000 
AD0DR0              ABS    CONST UNTYP.           ASEG       4001C010 
AD0DR1              ABS    CONST UNTYP.           ASEG       4001C014 
AD0DR2              ABS    CONST UNTYP.           ASEG       4001C018 
AD0DR3              ABS    CONST UNTYP.           ASEG       4001C01C 
AD0DR4              ABS    CONST UNTYP.           ASEG       4001C020 
AD0DR5              ABS    CONST UNTYP.           ASEG       4001C024 
AD0DR6              ABS    CONST UNTYP.           ASEG       4001C028 
AD0DR7              ABS    CONST UNTYP.           ASEG       4001C02C 
AD0GDR              ABS    CONST UNTYP.           ASEG       4001C004 
AD0INTEN            ABS    CONST UNTYP.           ASEG       4001C00C 
AD0STAT             ABS    CONST UNTYP.           ASEG       4001C030 
AGAIN               REL    CONST UNTYP.           .text      C 
AGAIN_NFA           REL    CONST UNTYP.           .text      0 
AIRCR               ABS    CONST UNTYP.           ASEG       E000ED0C 
ALIGN32_FF_PAD      REL    CONST UNTYP.           .text      C 
ALIGNED             REL    CONST UNTYP.           .text      C 
ALIGNED_NFA         REL    CONST UNTYP.           .text      0 
ALIGN_NFA           REL    CONST UNTYP.           .text      0 
ALIGN_PAD_DO        REL    CONST UNTYP.           .text      2C 
ALLOT               REL    CONST UNTYP.           .text      C 
ALLOTOK             REL    CONST UNTYP.           .text      2C 
ALLOT_NFA           REL    CONST UNTYP.           .text      0 
ALLOT_PRIM          REL    CONST UNTYP.           .text      AC 
ALL_UNINITRAM_END   ABS    CONST UNTYP.           ASEG       10000EEC 
ALL_UNINITRAM_FREE_STARTABS    CONST UNTYP.           ASEG       10000D48 
ALL_UNINITRAM_START ABS    CONST UNTYP.           ASEG       10000D40 
ANDBITS             REL    CONST UNTYP.           .text      C 
ANDBITS_NFA         REL    CONST UNTYP.           .text      0 
ANDD                REL    CONST UNTYP.           .text      8 
ANDD_NFA            REL    CONST UNTYP.           .text      0 
APCONT              REL    CONST UNTYP.           .text      70 
APDONE              REL    CONST UNTYP.           .text      C4 
APGOOD              REL    CONST UNTYP.           .text      98 
APNEXT              REL    CONST UNTYP.           .text      1C 
ASR                 REL    CONST UNTYP.           .text      8 
ASR_NFA             REL    CONST UNTYP.           .text      0 
ASSUREPAGE          REL    CONST UNTYP.           .text      0 
AT                  REL    CONST UNTYP.           .text      8 
AT_NFA              REL    CONST UNTYP.           .text      0 
BACK                REL    CONST UNTYP.           .text      3C0 
BACKSLASH           REL    CONST UNTYP.           .text      8 
BACKSLASH_NFA       REL    CONST UNTYP.           .text      0 
BACKSPACE_CHAR      REL    CONST UNTYP.           .text      14 
BASE_FROM_R12       REL    CONST UNTYP.           .text      0 
BASE_NFA            REL    CONST UNTYP.           .text      0 
BASE_RESET_THEN_ERRORREL    CONST UNTYP.           .text      C4 
BASE_SV             REL    CONST UNTYP.           .text      C 
BASE_TO_R12         REL    CONST UNTYP.           .text      0 
BAUD1               REL    CONST UNTYP.           .text      50 
BAUDDEFAULT         REL    CONST UNTYP.           .text      44 
BCOMP               REL    CONST UNTYP.           .text      10 
BCOMP_NFA           REL    CONST UNTYP.           .text      0 
BDIGS               REL    CONST UNTYP.           .text      8 
BDIGS_NFA           REL    CONST UNTYP.           .text      0 
BEGIN               REL    CONST UNTYP.           .text      C 
BEGIN_NFA           REL    CONST UNTYP.           .text      0 
BELL                REL    CONST UNTYP.           .text      0 
BIN                 REL    CONST UNTYP.           .text      8 
BIN_NFA             REL    CONST UNTYP.           .text      0 
BLANK               REL    CONST UNTYP.           .text      8 
BLANKS              REL    CONST UNTYP.           .text      C 
BLANKS_NFA          REL    CONST UNTYP.           .text      0 
BLANK_NFA           REL    CONST UNTYP.           .text      0 
BODCTRL             ABS    CONST UNTYP.           ASEG       40048150 
BOTTOM_RSTACK       ABS    CONST UNTYP.           ASEG       10000EF0 
BP1_ERROR           REL    CONST UNTYP.           .text      78 
BP1_QUIT            REL    CONST UNTYP.           .text      3A8 
BRAN                REL    CONST UNTYP.           .text      0 
BRAN1               REL    CONST UNTYP.           .text      1 
BRG81x              REL    CONST UNTYP.           .text      8C 
BSOUT               REL    CONST UNTYP.           .text      1C 
BUILDS              REL    CONST UNTYP.           .text      C 
BUILDS_NFA          REL    CONST UNTYP.           .text      0 
BYE                 REL    CONST UNTYP.           .text      8 
BYE_NFA             REL    CONST UNTYP.           .text      0 
CAT                 REL    CONST UNTYP.           .text      8 
CATLT7F             REL    CONST UNTYP.           .text      0 
CAT_NFA             REL    CONST UNTYP.           .text      0 
CCOMMA              REL    CONST UNTYP.           .text      8 
CCOMMA_NFA          REL    CONST UNTYP.           .text      0 
CCOMMA_OK           REL    CONST UNTYP.           .text      20 
CCR                 ABS    CONST UNTYP.           ASEG       E000ED14 
CFA                 REL    CONST UNTYP.           .text      8 
CFA_CREATE_DOES_GOTOREL    CONST UNTYP.           .text      14 
CFA_LIT             REL    CONST UNTYP.           .text      A0 
CFA_NFA             REL    CONST UNTYP.           .text      0 
CFA_PDOTQ           REL    CONST UNTYP.           .text      C0 
CFA_SEMIS           REL    CONST UNTYP.           .text      F8 
CHECKPAGE           REL    CONST UNTYP.           .text      AC 
CLKOUTCLKDIV        ABS    CONST UNTYP.           ASEG       400480E8 
CLKOUTCLKSEL        ABS    CONST UNTYP.           ASEG       400480E0 
CLKOUTDIV           ABS    CONST UNTYP.           ASEG       400480E8 
CLKOUTUEN           ABS    CONST UNTYP.           ASEG       400480E4 
CLRBITS             REL    CONST UNTYP.           .text      C 
CLRBITS_NFA         REL    CONST UNTYP.           .text      0 
CLRENA0             ABS    CONST UNTYP.           ASEG       E000E180 
CLRPEND0            ABS    CONST UNTYP.           ASEG       E000E280 
CLRSUFFIX           REL    CONST UNTYP.           .text      45 
CLS                 REL    CONST UNTYP.           .text      8 
CLS_NFA             REL    CONST UNTYP.           .text      0 
CM1                 REL    CONST UNTYP.           .text      11 
CM2                 REL    CONST UNTYP.           .text      21 
CMOVE               REL    CONST UNTYP.           .text      C 
CMOVE_NFA           REL    CONST UNTYP.           .text      0 
CMSIS_DISABLE_IRQS  REL    CONST UNTYP.           .text      14 
CMSIS_ENABLE_IRQS   REL    CONST UNTYP.           .text      10 
COLD                REL    CONST UNTYP.           .text      C 
COLD_NFA            REL    CONST UNTYP.           .text      0 
COLON               REL    CONST UNTYP.           .text      8 
COLON_NFA           REL    CONST UNTYP.           .text      0 
COMMA               REL    CONST UNTYP.           .text      8 
COMMA_NFA           REL    CONST UNTYP.           .text      0 
COMMA_OK            REL    CONST UNTYP.           .text      20 
COMMA_PRIM          REL    CONST UNTYP.           .text      BC 
COMP                REL    CONST UNTYP.           .text      240 
CON                 REL    CONST UNTYP.           .text      8 
CONSTANT            REL    CONST UNTYP.           .text      10 
CONSTANT_NFA        REL    CONST UNTYP.           .text      0 
CON_NFA             REL    CONST UNTYP.           .text      0 
COUNT               REL    CONST UNTYP.           .text      C 
COUNT_NFA           REL    CONST UNTYP.           .text      0 
CO_END              REL    CONST UNTYP.           .text      C4 
CPUID               ABS    CONST UNTYP.           ASEG       E000ED00 
CPUIDBR             ABS    CONST UNTYP.           ASEG       E000ED00 
CR                  REL    CONST UNTYP.           .text      8 
CREA1               REL    CONST UNTYP.           .text      5C 
CREATE              REL    CONST UNTYP.           .text      C 
CREATED_OK          REL    CONST UNTYP.           .text      74 
CREATEOK            REL    CONST UNTYP.           .text      30 
CREATE_DOES_GOTO    REL    CONST UNTYP.           .text      B 
CREATE_NFA          REL    CONST UNTYP.           .text      0 
CRS                 REL    CONST UNTYP.           .text      8 
CRS_BEGIN           REL    CONST UNTYP.           .text      14 
CRS_NFA             REL    CONST UNTYP.           .text      0 
CR_CHECK            REL    CONST UNTYP.           .text      13 
CR_NFA              REL    CONST UNTYP.           .text      0 
CSDP                REL    CONST UNTYP.           FISH_Ram_M B80 
CSDP_SV             REL    CONST UNTYP.           .text      3E8 
CSP                 REL    CONST UNTYP.           FISH_Ram_M B94 
CSP_SV              REL    CONST UNTYP.           .text      84 
CSTATE              REL    CONST UNTYP.           FISH_Ram_M B68 
CSTORE              REL    CONST UNTYP.           .text      8 
CSTORE_NFA          REL    CONST UNTYP.           .text      0 
CURRENT             REL    CONST UNTYP.           FISH_Ram_M B88 
CURRENT_NFA         REL    CONST UNTYP.           .text      0 
CURRENT_SV          REL    CONST UNTYP.           .text      C 
CWPJR02_at_gmail_dot_comABS    CONST UNTYP.           ASEG       1 
C_CMSIS_DISABLE_IRQSABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
C_CMSIS_ENABLE_IRQS ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
DABS                REL    CONST UNTYP.           .text      C 
DABSF               REL    CONST UNTYP.           .text      C 
DABS_NFA            REL    CONST UNTYP.           .text      0 
DBASE               REL    CONST UNTYP.           .text      C 
DBASEDONE           REL    CONST UNTYP.           .text      68 
DBASE_NFA           REL    CONST UNTYP.           .text      0 
DBAUDADDR           ABS    CONST UNTYP.           ASEG       10000D40 
DBSUSEDOT           REL    CONST UNTYP.           .text      80 
DBSUSEDUDOT         REL    CONST UNTYP.           .text      7C 
DBUSEDUDOT          REL    CONST UNTYP.           .text      64 
DDOT                REL    CONST UNTYP.           .text      8 
DDOTR               REL    CONST UNTYP.           .text      8 
DDOTR_NFA           REL    CONST UNTYP.           .text      0 
DDOT_NFA            REL    CONST UNTYP.           .text      0 
DDUP1               REL    CONST UNTYP.           .text      20 
DDUP_NFA            REL    CONST UNTYP.           .text      0 
DECIMAL             REL    CONST UNTYP.           .text      C 
DECIMAL_NFA         REL    CONST UNTYP.           .text      0 
DEC_OR_HEX          REL    CONST UNTYP.           .text      98 
DEFAULT_BASE        ABS    CONST UNTYP.           ASEG       A 
DEFAULT_BAUD        ABS    CONST UNTYP.           ASEG       2580 
DELAY               REL    CONST UNTYP.           .text      C 
DELAY_DONE          REL    CONST UNTYP.           .text      2B 
DELAY_LOOP          REL    CONST UNTYP.           .text      25 
DELAY_NFA           REL    CONST UNTYP.           .text      0 
DEVICE_ID           ABS    CONST UNTYP.           ASEG       400483F4 
DEVICE_ID_81x       ABS    CONST UNTYP.           ASEG       400483F8 
DFIND               REL    CONST UNTYP.           .text      224 
DICTFULL_ABORT      REL    CONST UNTYP.           .text      94 
DICTSPACE           REL    CONST UNTYP.           .text      0 
DICTSPACE_END       REL    CONST UNTYP.           FISH_Ram_M A38 
DICTSPACE_START     REL    CONST UNTYP.           FISH_Ram_M 10 
DIG                 REL    CONST UNTYP.           .text      8 
DIG1                REL    CONST UNTYP.           .text      40 
DIGI1               REL    CONST UNTYP.           .text      17 
DIGI2               REL    CONST UNTYP.           .text      2D 
DIGIT               REL    CONST UNTYP.           .text      C 
DIGIT_NFA           REL    CONST UNTYP.           .text      0 
DIGS                REL    CONST UNTYP.           .text      8 
DIGS1               REL    CONST UNTYP.           .text      C 
DIGS_NFA            REL    CONST UNTYP.           .text      0 
DIG_NFA             REL    CONST UNTYP.           .text      0 
DIR0                ABS    CONST UNTYP.           ASEG       A0002000 
DLIT1               REL    CONST UNTYP.           .text      30 
DLITERAL            REL    CONST UNTYP.           .text      10 
DLITERAL_NFA        REL    CONST UNTYP.           .text      0 
DNEGATE             REL    CONST UNTYP.           .text      C 
DNEGATE_NFA         REL    CONST UNTYP.           .text      0 
DO                  REL    CONST UNTYP.           .text      8 
DOCOL               REL    CONST UNTYP.           .text      1 
DOCON               REL    CONST UNTYP.           .text      1 
DOES                REL    CONST UNTYP.           .text      C 
DOES_NFA            REL    CONST UNTYP.           .text      0 
DOT                 REL    CONST UNTYP.           .text      8 
DOTBASE             REL    CONST UNTYP.           .text      30 
DOTBIN              REL    CONST UNTYP.           .text      8 
DOTBIN_NFA          REL    CONST UNTYP.           .text      0 
DOTDEC              REL    CONST UNTYP.           .text      8 
DOTDEC_NFA          REL    CONST UNTYP.           .text      0 
DOTDICTSPACE        REL    CONST UNTYP.           .text      8 
DOTDICTSPACE_NFA    REL    CONST UNTYP.           .text      0 
DOTHEX              REL    CONST UNTYP.           .text      8 
DOTHEX_NFA          REL    CONST UNTYP.           .text      0 
DOTQ                REL    CONST UNTYP.           .text      8 
DOTQ1               REL    CONST UNTYP.           .text      4C 
DOTQ2               REL    CONST UNTYP.           .text      5C 
DOTQ_NFA            REL    CONST UNTYP.           .text      0 
DOTR                REL    CONST UNTYP.           .text      8 
DOTRU               REL    CONST UNTYP.           .text      8 
DOTRU_NFA           REL    CONST UNTYP.           .text      0 
DOTR_NFA            REL    CONST UNTYP.           .text      0 
DOTS                REL    CONST UNTYP.           .text      8 
DOTSBASE            REL    CONST UNTYP.           .text      48 
DOTSBIN             REL    CONST UNTYP.           .text      8 
DOTSBIN_NFA         REL    CONST UNTYP.           .text      0 
DOTSDEC             REL    CONST UNTYP.           .text      8 
DOTSDEC_NFA         REL    CONST UNTYP.           .text      0 
DOTSEND             REL    CONST UNTYP.           .text      90 
DOTSHEX             REL    CONST UNTYP.           .text      8 
DOTSHEX_NFA         REL    CONST UNTYP.           .text      0 
DOTSLOOP            REL    CONST UNTYP.           .text      4C 
DOTS_NFA            REL    CONST UNTYP.           .text      0 
DOTVARSPACE         REL    CONST UNTYP.           .text      8 
DOTVARSPACE_NFA     REL    CONST UNTYP.           .text      0 
DOT_BASE_SUFFIX     REL    CONST UNTYP.           .text      0 
DOT_NFA             REL    CONST UNTYP.           .text      0 
DOVAR               REL    CONST UNTYP.           .text      1 
DO_NFA              REL    CONST UNTYP.           .text      0 
DP                  REL    CONST UNTYP.           FISH_Ram_M B7C 
DPLUS               REL    CONST UNTYP.           .text      8 
DPLUS_NFA           REL    CONST UNTYP.           .text      0 
DPL_NFA             REL    CONST UNTYP.           .text      0 
DPL_RESET           REL    CONST UNTYP.           .text      B4 
DPL_SV              REL    CONST UNTYP.           .text      8 
DPL_ZERO_INCR       REL    CONST UNTYP.           .text      D8 
DPM                 REL    CONST UNTYP.           .text      408 
DPM1                REL    CONST UNTYP.           .text      41C 
DP_NFA              REL    CONST UNTYP.           .text      0 
DP_SV               REL    CONST UNTYP.           .text      8 
DROP                REL    CONST UNTYP.           .text      C 
DROP_NFA            REL    CONST UNTYP.           .text      0 
DUMP                REL    CONST UNTYP.           .text      C 
DUMP_ADDR_LINE      REL    CONST UNTYP.           .text      28 
DUMP_CONT           REL    CONST UNTYP.           .text      78 
DUMP_EACH_LOC       REL    CONST UNTYP.           .text      48 
DUMP_NFA            REL    CONST UNTYP.           .text      0 
DUP                 REL    CONST UNTYP.           .text      8 
DUP_NFA             REL    CONST UNTYP.           .text      0 
DZERO               REL    CONST UNTYP.           .text      23 
EDIGS               REL    CONST UNTYP.           .text      8 
EDIGS_NFA           REL    CONST UNTYP.           .text      0 
EHOFF               REL    CONST UNTYP.           .text      C 
EHOFF_NFA           REL    CONST UNTYP.           .text      0 
EHON                REL    CONST UNTYP.           .text      C 
EHON_NFA            REL    CONST UNTYP.           .text      0 
EIGHT               REL    CONST UNTYP.           .text      14 
EL1                 REL    CONST UNTYP.           .text      54 
ELSE                REL    CONST UNTYP.           .text      C 
ELSE_NFA            REL    CONST UNTYP.           .text      0 
EMIT                REL    CONST UNTYP.           .text      C 
EMIT_NFA            REL    CONST UNTYP.           .text      0 
ENCL                REL    CONST UNTYP.           .text      C 
ENCL1               REL    CONST UNTYP.           .text      D 
ENCL2               REL    CONST UNTYP.           .text      31 
ENCL3               REL    CONST UNTYP.           .text      3F 
ENCL4               REL    CONST UNTYP.           .text      3F 
ENCL_NFA            REL    CONST UNTYP.           .text      0 
ENDIF               REL    CONST UNTYP.           .text      C 
ENDIF_NFA           REL    CONST UNTYP.           .text      0 
END_RAMVARSPACE_SV_STARTREL    CONST UNTYP.           FISH_Ram_M B5C 
EOL_SEND_XOFF       REL    CONST UNTYP.           .text      19 
EQUAL               REL    CONST UNTYP.           .text      8 
EQUAL_NFA           REL    CONST UNTYP.           .text      0 
EQUAL_TRUE          REL    CONST UNTYP.           .text      19 
ERASE               REL    CONST UNTYP.           .text      C 
ERASE_NFA           REL    CONST UNTYP.           .text      0 
ERROR               REL    CONST UNTYP.           .text      C 
ERROR_FIXUP         REL    CONST UNTYP.           .text      48 
ERROR_HALT          REL    CONST UNTYP.           FISH_Ram_M B90 
ERROR_NFA           REL    CONST UNTYP.           .text      0 
EXEC                REL    CONST UNTYP.           .text      C 
EXEC_NFA            REL    CONST UNTYP.           .text      0 
EXPE1               REL    CONST UNTYP.           .text      2C 
EXPE2               REL    CONST UNTYP.           .text      C8 
EXPE3               REL    CONST UNTYP.           .text      114 
EXPE33              REL    CONST UNTYP.           .text      118 
EXPE4               REL    CONST UNTYP.           .text      F8 
EXPE5               REL    CONST UNTYP.           .text      FC 
EXPE6               REL    CONST UNTYP.           .text      BC 
EXPE7               REL    CONST UNTYP.           .text      C0 
EXPECT              REL    CONST UNTYP.           .text      C 
EXPECT_NFA          REL    CONST UNTYP.           .text      0 
FENCE               REL    CONST UNTYP.           FISH_Ram_M B84 
FENCE_NFA           REL    CONST UNTYP.           .text      0 
FENCE_SV            REL    CONST UNTYP.           .text      C 
FEND                REL    CONST UNTYP.           .text      1B 
FFDONE              REL    CONST UNTYP.           .text      A4 
FF_FINISH           REL    CONST UNTYP.           .text      6C 
FF_LOOP             REL    CONST UNTYP.           .text      24 
FILL                REL    CONST UNTYP.           .text      C 
FILL_NFA            REL    CONST UNTYP.           .text      0 
FISH                REL    CONST UNTYP.           .text      C 
FISH_Author_Clyde_W_Phillips_JrABS    CONST UNTYP.           ASEG       1 
FISH_Copyright_2014_2015ABS    CONST UNTYP.           ASEG       1 
FISH_FUNDING_Contributions_NEEDED
                    ABS    CONST UNTYP.           ASEG       1 
FISH_NFA            REL    CONST UNTYP.           .text      0 
FISH_ONLY           REL    CONST UNTYP.           .text      10 
FISH_ONLY_NFA       REL    CONST UNTYP.           .text      0 
FISH_Questions_WelcomeABS    CONST UNTYP.           ASEG       1 
FISH_Team_A_Team_ForthABS    CONST UNTYP.           ASEG       1 
FLASHCFG            ABS    CONST UNTYP.           ASEG       4003C010 
FLASHCMD            REL    CONST UNTYP.           FISH_Ram_M BA0 
FLASHCRTF           REL    CONST UNTYP.           .text      0 
FLASHESEC           REL    CONST UNTYP.           .text      0 
FLASHPREP           REL    CONST UNTYP.           .text      0 
FLASHRET            REL    CONST UNTYP.           FISH_Ram_M BF0 
FLASHWRITE          REL    CONST UNTYP.           .text      0 
FLASH_FORGET        REL    CONST UNTYP.           .text      14 
FLASH_FORGET_NFA    REL    CONST UNTYP.           .text      0 
FLASH_LPAGE         ABS    CONST UNTYP.           ASEG       3C00 
FLASH_PPAGE         ABS    CONST UNTYP.           ASEG       4000 
FLASH_SAVE          REL    CONST UNTYP.           .text      10 
FLASH_SAVE_NFA      REL    CONST UNTYP.           .text      0 
FLASH_SCAN          REL    CONST UNTYP.           .text      0 
FLASH_SPAGE         ABS    CONST UNTYP.           ASEG       3C00 
FLASH_WR_SIZE       ABS    CONST UNTYP.           ASEG       400 
FLOOP               REL    CONST UNTYP.           .text      13 
FLPT                REL    CONST UNTYP.           .text      44 
FLSCLP              REL    CONST UNTYP.           .text      18 
FM0_COLD            REL    CONST PUB UNTYP.       .text      1 
FM0_SYSTICK_ISR     REL    CONST PUB UNTYP.       .text      1 
FM0_WARM            REL    CONST UNTYP.           .text      0 
FMSSTART            ABS    CONST UNTYP.           ASEG       4003C020 
FMSSTOP             ABS    CONST UNTYP.           ASEG       4003C024 
FMSTAT              ABS    CONST UNTYP.           ASEG       4003CFE0 
FMSTATCLR           ABS    CONST UNTYP.           ASEG       4003CFE8 
FMSW0               ABS    CONST UNTYP.           ASEG       4003C02C 
FMSW1               ABS    CONST UNTYP.           ASEG       4003C030 
FMSW2               ABS    CONST UNTYP.           ASEG       4003C034 
FMSW3               ABS    CONST UNTYP.           ASEG       4003C038 
FORGET              REL    CONST UNTYP.           .text      C 
FORGET_NFA          REL    CONST UNTYP.           .text      0 
FOUR                REL    CONST UNTYP.           .text      8 
FOURM               REL    CONST UNTYP.           .text      8 
FOURM_NFA           REL    CONST UNTYP.           .text      0 
FOURP               REL    CONST UNTYP.           .text      8 
FOURP_NFA           REL    CONST UNTYP.           .text      0 
FOUR_NFA            REL    CONST UNTYP.           .text      0 
FPA                 REL    CONST UNTYP.           FISH_Ram_M 4 
FPADDR              REL    CONST UNTYP.           .text      0 
FPC                 REL    CONST UNTYP.           FISH_Ram_M 8 
FPCURR              REL    CONST UNTYP.           .text      0 
FPSV                REL    CONST UNTYP.           FISH_Ram_M C 
FPVAR               REL    CONST UNTYP.           .text      0 
FSAVE               REL    CONST UNTYP.           .text      84 
FSDONE              REL    CONST UNTYP.           .text      F8 
FSLASTPAGE          REL    CONST UNTYP.           .text      60 
FSNEXT              REL    CONST UNTYP.           .text      B4 
FS_BEGIN            REL    CONST UNTYP.           .text      A4 
FS_EXIT             REL    CONST UNTYP.           .text      F8 
FS_RWORD            REL    CONST UNTYP.           .text      10C 
FS_WRITE            REL    CONST UNTYP.           .text      B8 
FWARM               REL    CONST UNTYP.           .text      0 
FWBEGIN             REL    CONST UNTYP.           .text      7 
GOTO                REL    CONST UNTYP.           .text      0 
GPIO0DATA           ABS    CONST UNTYP.           ASEG       50003FFC 
GPIO0DATA0          ABS    CONST UNTYP.           ASEG       50003FFC 
GPIO0DATA1          ABS    CONST UNTYP.           ASEG       50003FFD 
GPIO0DATAL          ABS    CONST UNTYP.           ASEG       50003FFC 
GPIO0DIR            ABS    CONST UNTYP.           ASEG       50008000 
GPIO0DIR0           ABS    CONST UNTYP.           ASEG       50008000 
GPIO0DIR1           ABS    CONST UNTYP.           ASEG       50008001 
GPIO0DIRL           ABS    CONST UNTYP.           ASEG       50008000 
GPIO0IBE            ABS    CONST UNTYP.           ASEG       50008008 
GPIO0IBE0           ABS    CONST UNTYP.           ASEG       50008008 
GPIO0IBE1           ABS    CONST UNTYP.           ASEG       50008009 
GPIO0IBEL           ABS    CONST UNTYP.           ASEG       50008008 
GPIO0IC             ABS    CONST UNTYP.           ASEG       5000801C 
GPIO0IE             ABS    CONST UNTYP.           ASEG       50008010 
GPIO0IE0            ABS    CONST UNTYP.           ASEG       50008010 
GPIO0IE1            ABS    CONST UNTYP.           ASEG       50008011 
GPIO0IEL            ABS    CONST UNTYP.           ASEG       50008010 
GPIO0IEV            ABS    CONST UNTYP.           ASEG       5000800C 
GPIO0IEV0           ABS    CONST UNTYP.           ASEG       5000800C 
GPIO0IEV1           ABS    CONST UNTYP.           ASEG       5000800D 
GPIO0IEVL           ABS    CONST UNTYP.           ASEG       5000800C 
GPIO0IS             ABS    CONST UNTYP.           ASEG       50008004 
GPIO0IS0            ABS    CONST UNTYP.           ASEG       50008004 
GPIO0IS1            ABS    CONST UNTYP.           ASEG       50008005 
GPIO0ISL            ABS    CONST UNTYP.           ASEG       50008004 
GPIO0MIS            ABS    CONST UNTYP.           ASEG       50008018 
GPIO0MIS0           ABS    CONST UNTYP.           ASEG       50008018 
GPIO0MIS1           ABS    CONST UNTYP.           ASEG       50008019 
GPIO0MISL           ABS    CONST UNTYP.           ASEG       50008018 
GPIO0RIS            ABS    CONST UNTYP.           ASEG       50008014 
GPIO0RIS0           ABS    CONST UNTYP.           ASEG       50008014 
GPIO0RIS1           ABS    CONST UNTYP.           ASEG       50008015 
GPIO0RISL           ABS    CONST UNTYP.           ASEG       50008014 
GPIO1DATA           ABS    CONST UNTYP.           ASEG       50013FFC 
GPIO1DATA0          ABS    CONST UNTYP.           ASEG       50013FFC 
GPIO1DATA1          ABS    CONST UNTYP.           ASEG       50013FFD 
GPIO1DATAL          ABS    CONST UNTYP.           ASEG       50013FFC 
GPIO1DIR            ABS    CONST UNTYP.           ASEG       50018000 
GPIO1DIR0           ABS    CONST UNTYP.           ASEG       50018000 
GPIO1DIR1           ABS    CONST UNTYP.           ASEG       50018001 
GPIO1DIRL           ABS    CONST UNTYP.           ASEG       50018000 
GPIO1IBE            ABS    CONST UNTYP.           ASEG       50018008 
GPIO1IBE0           ABS    CONST UNTYP.           ASEG       50018008 
GPIO1IBE1           ABS    CONST UNTYP.           ASEG       50018009 
GPIO1IBEL           ABS    CONST UNTYP.           ASEG       50018008 
GPIO1IC             ABS    CONST UNTYP.           ASEG       5001801C 
GPIO1IE             ABS    CONST UNTYP.           ASEG       50018010 
GPIO1IE0            ABS    CONST UNTYP.           ASEG       50018010 
GPIO1IE1            ABS    CONST UNTYP.           ASEG       50018011 
GPIO1IEL            ABS    CONST UNTYP.           ASEG       50018010 
GPIO1IEV            ABS    CONST UNTYP.           ASEG       5001800C 
GPIO1IEV0           ABS    CONST UNTYP.           ASEG       5001800C 
GPIO1IEV1           ABS    CONST UNTYP.           ASEG       5001800D 
GPIO1IEVL           ABS    CONST UNTYP.           ASEG       5001800C 
GPIO1IS             ABS    CONST UNTYP.           ASEG       50018004 
GPIO1IS0            ABS    CONST UNTYP.           ASEG       50018004 
GPIO1IS1            ABS    CONST UNTYP.           ASEG       50018005 
GPIO1ISL            ABS    CONST UNTYP.           ASEG       50018004 
GPIO1MIS            ABS    CONST UNTYP.           ASEG       50018018 
GPIO1MIS0           ABS    CONST UNTYP.           ASEG       50018018 
GPIO1MIS1           ABS    CONST UNTYP.           ASEG       50018019 
GPIO1MISL           ABS    CONST UNTYP.           ASEG       50018018 
GPIO1RIS            ABS    CONST UNTYP.           ASEG       50018014 
GPIO1RIS0           ABS    CONST UNTYP.           ASEG       50018014 
GPIO1RIS1           ABS    CONST UNTYP.           ASEG       50018015 
GPIO1RISL           ABS    CONST UNTYP.           ASEG       50018014 
GPIO2DATA           ABS    CONST UNTYP.           ASEG       50023FFC 
GPIO2DATA0          ABS    CONST UNTYP.           ASEG       50023FFC 
GPIO2DATA1          ABS    CONST UNTYP.           ASEG       50023FFD 
GPIO2DATAL          ABS    CONST UNTYP.           ASEG       50023FFC 
GPIO2DIR            ABS    CONST UNTYP.           ASEG       50028000 
GPIO2DIR0           ABS    CONST UNTYP.           ASEG       50028000 
GPIO2DIR1           ABS    CONST UNTYP.           ASEG       50028001 
GPIO2DIRL           ABS    CONST UNTYP.           ASEG       50028000 
GPIO2IBE            ABS    CONST UNTYP.           ASEG       50028008 
GPIO2IBE0           ABS    CONST UNTYP.           ASEG       50028008 
GPIO2IBE1           ABS    CONST UNTYP.           ASEG       50028009 
GPIO2IBEL           ABS    CONST UNTYP.           ASEG       50028008 
GPIO2IC             ABS    CONST UNTYP.           ASEG       5002801C 
GPIO2IE             ABS    CONST UNTYP.           ASEG       50028010 
GPIO2IE0            ABS    CONST UNTYP.           ASEG       50028010 
GPIO2IE1            ABS    CONST UNTYP.           ASEG       50028011 
GPIO2IEL            ABS    CONST UNTYP.           ASEG       50028010 
GPIO2IEV            ABS    CONST UNTYP.           ASEG       5002800C 
GPIO2IEV0           ABS    CONST UNTYP.           ASEG       5002800C 
GPIO2IEV1           ABS    CONST UNTYP.           ASEG       5002800D 
GPIO2IEVL           ABS    CONST UNTYP.           ASEG       5002800C 
GPIO2IS             ABS    CONST UNTYP.           ASEG       50028004 
GPIO2IS0            ABS    CONST UNTYP.           ASEG       50028004 
GPIO2IS1            ABS    CONST UNTYP.           ASEG       50028005 
GPIO2ISL            ABS    CONST UNTYP.           ASEG       50028004 
GPIO2MIS            ABS    CONST UNTYP.           ASEG       50028018 
GPIO2MIS0           ABS    CONST UNTYP.           ASEG       50028018 
GPIO2MIS1           ABS    CONST UNTYP.           ASEG       50028019 
GPIO2MISL           ABS    CONST UNTYP.           ASEG       50028018 
GPIO2RIS            ABS    CONST UNTYP.           ASEG       50028014 
GPIO2RIS0           ABS    CONST UNTYP.           ASEG       50028014 
GPIO2RIS1           ABS    CONST UNTYP.           ASEG       50028015 
GPIO2RISL           ABS    CONST UNTYP.           ASEG       50028014 
GPIO3DATA           ABS    CONST UNTYP.           ASEG       50033FFC 
GPIO3DATA0          ABS    CONST UNTYP.           ASEG       50033FFC 
GPIO3DATAL          ABS    CONST UNTYP.           ASEG       50033FFC 
GPIO3DIR            ABS    CONST UNTYP.           ASEG       50038000 
GPIO3DIR0           ABS    CONST UNTYP.           ASEG       50038000 
GPIO3DIRL           ABS    CONST UNTYP.           ASEG       50038000 
GPIO3IBE            ABS    CONST UNTYP.           ASEG       50038008 
GPIO3IBE0           ABS    CONST UNTYP.           ASEG       50038008 
GPIO3IBEL           ABS    CONST UNTYP.           ASEG       50038008 
GPIO3IC             ABS    CONST UNTYP.           ASEG       5003801C 
GPIO3IE             ABS    CONST UNTYP.           ASEG       50038010 
GPIO3IE0            ABS    CONST UNTYP.           ASEG       50038010 
GPIO3IEL            ABS    CONST UNTYP.           ASEG       50038010 
GPIO3IEV            ABS    CONST UNTYP.           ASEG       5003800C 
GPIO3IEV0           ABS    CONST UNTYP.           ASEG       5003800C 
GPIO3IEVL           ABS    CONST UNTYP.           ASEG       5003800C 
GPIO3IS             ABS    CONST UNTYP.           ASEG       50038004 
GPIO3IS0            ABS    CONST UNTYP.           ASEG       50038004 
GPIO3ISL            ABS    CONST UNTYP.           ASEG       50038004 
GPIO3MIS            ABS    CONST UNTYP.           ASEG       50038018 
GPIO3MIS0           ABS    CONST UNTYP.           ASEG       50038018 
GPIO3MISL           ABS    CONST UNTYP.           ASEG       50038018 
GPIO3RIS            ABS    CONST UNTYP.           ASEG       50038014 
GPIO3RIS0           ABS    CONST UNTYP.           ASEG       50038014 
GPIO3RISL           ABS    CONST UNTYP.           ASEG       50038014 
GPREG0              ABS    CONST UNTYP.           ASEG       40038004 
GPREG1              ABS    CONST UNTYP.           ASEG       40038008 
GPREG2              ABS    CONST UNTYP.           ASEG       4003800C 
GPREG3              ABS    CONST UNTYP.           ASEG       40038010 
GPREG4              ABS    CONST UNTYP.           ASEG       40038014 
GREATERTHAN         REL    CONST UNTYP.           .text      8 
GREATERTHAN_NFA     REL    CONST UNTYP.           .text      0 
HERE                REL    CONST UNTYP.           .text      C 
HERE_NFA            REL    CONST UNTYP.           .text      0 
HEX                 REL    CONST UNTYP.           .text      8 
HEX_NFA             REL    CONST UNTYP.           .text      0 
HLD_SV              REL    CONST UNTYP.           .text      8C 
HOLD                REL    CONST UNTYP.           .text      C 
HOLD_NFA            REL    CONST UNTYP.           .text      0 
Hz_28000000         REL    CONST UNTYP.           .text      88 
I                   REL    CONST UNTYP.           .text      8 
I2C0ADR             ABS    CONST UNTYP.           ASEG       4000000C 
I2C0ADR1            ABS    CONST UNTYP.           ASEG       40000020 
I2C0ADR2            ABS    CONST UNTYP.           ASEG       40000024 
I2C0ADR3            ABS    CONST UNTYP.           ASEG       40000028 
I2C0CONCLR          ABS    CONST UNTYP.           ASEG       40000018 
I2C0CONSET          ABS    CONST UNTYP.           ASEG       40000000 
I2C0DAT             ABS    CONST UNTYP.           ASEG       40000008 
I2C0DATABUFFER      ABS    CONST UNTYP.           ASEG       4000002C 
I2C0MASK0           ABS    CONST UNTYP.           ASEG       40000030 
I2C0MASK1           ABS    CONST UNTYP.           ASEG       40000034 
I2C0MASK2           ABS    CONST UNTYP.           ASEG       40000038 
I2C0MASK3           ABS    CONST UNTYP.           ASEG       4000003C 
I2C0MMCTRL          ABS    CONST UNTYP.           ASEG       4000001C 
I2C0SCLH            ABS    CONST UNTYP.           ASEG       40000010 
I2C0SCLL            ABS    CONST UNTYP.           ASEG       40000014 
I2C0STAT            ABS    CONST UNTYP.           ASEG       40000004 
I2CBUFFER           REL    CONST UNTYP.           FISH_Ram_M C3C 
I2CCMD              REL    CONST UNTYP.           FISH_Ram_M C30 
I2CROLE             REL    CONST UNTYP.           FISH_Ram_M C34 
I2CSTATE            REL    CONST UNTYP.           FISH_Ram_M C38 
IAPCALL             ABS    CONST UNTYP.           ASEG       1FFF1FF1 
ICER                ABS    CONST UNTYP.           ASEG       E000E180 
ICPR                ABS    CONST UNTYP.           ASEG       E000E280 
ICSR                ABS    CONST UNTYP.           ASEG       E000ED04 
IDDOT               REL    CONST UNTYP.           .text      8 
IDDOT_NFA           REL    CONST UNTYP.           .text      0 
IF                  REL    CONST UNTYP.           .text      8 
IF_EOL_SEND_XOFF    REL    CONST UNTYP.           .text      0 
IF_NFA              REL    CONST UNTYP.           .text      0 
IMMED               REL    CONST UNTYP.           .text      10 
IMMED_NFA           REL    CONST UNTYP.           .text      0 
IN                  REL    CONST UNTYP.           FISH_Ram_M B60 
INITRO              REL    CONST UNTYP.           FISH_Ram_M B70 
INITRO_SV           REL    CONST UNTYP.           .text      7C 
INITSO              REL    CONST UNTYP.           FISH_Ram_M B6C 
INITSO_SV           REL    CONST UNTYP.           .text      74 
INITTIB             REL    CONST UNTYP.           FISH_Ram_M B74 
INTE1               REL    CONST UNTYP.           .text      2C8 
INTE2               REL    CONST UNTYP.           .text      30C 
INTE3               REL    CONST UNTYP.           .text      2F8 
INTE4               REL    CONST UNTYP.           .text      300 
INTE5               REL    CONST UNTYP.           .text      340 
INTE6               REL    CONST UNTYP.           .text      334 
INTE7               REL    CONST UNTYP.           .text      33C 
INTERPRET           REL    CONST UNTYP.           .text      2C4 
IN_NFA              REL    CONST UNTYP.           .text      0 
IN_SV               REL    CONST UNTYP.           .text      8 
IOBUFSIZE           ABS    CONST UNTYP.           ASEG       60 
IOCON_DCD_LOC       ABS    CONST UNTYP.           ASEG       400440B8 
IOCON_DSR_LOC       ABS    CONST UNTYP.           ASEG       400440B4 
IOCON_PIO0_1        ABS    CONST UNTYP.           ASEG       40044010 
IOCON_PIO0_2        ABS    CONST UNTYP.           ASEG       4004401C 
IOCON_PIO0_3        ABS    CONST UNTYP.           ASEG       4004402C 
IOCON_PIO0_4        ABS    CONST UNTYP.           ASEG       40044030 
IOCON_PIO0_5        ABS    CONST UNTYP.           ASEG       40044034 
IOCON_PIO0_6        ABS    CONST UNTYP.           ASEG       4004404C 
IOCON_PIO0_7        ABS    CONST UNTYP.           ASEG       40044050 
IOCON_PIO0_8        ABS    CONST UNTYP.           ASEG       40044060 
IOCON_PIO0_9        ABS    CONST UNTYP.           ASEG       40044064 
IOCON_PIO1_10       ABS    CONST UNTYP.           ASEG       4004406C 
IOCON_PIO1_11       ABS    CONST UNTYP.           ASEG       40044098 
IOCON_PIO1_4        ABS    CONST UNTYP.           ASEG       40044094 
IOCON_PIO1_5        ABS    CONST UNTYP.           ASEG       400440A0 
IOCON_PIO1_6        ABS    CONST UNTYP.           ASEG       400440A4 
IOCON_PIO1_7        ABS    CONST UNTYP.           ASEG       400440A8 
IOCON_PIO1_8        ABS    CONST UNTYP.           ASEG       40044014 
IOCON_PIO1_9        ABS    CONST UNTYP.           ASEG       40044038 
IOCON_PIO2_0        ABS    CONST UNTYP.           ASEG       40044008 
IOCON_PIO2_1        ABS    CONST UNTYP.           ASEG       40044028 
IOCON_PIO2_10       ABS    CONST UNTYP.           ASEG       40044058 
IOCON_PIO2_11       ABS    CONST UNTYP.           ASEG       40044070 
IOCON_PIO2_2        ABS    CONST UNTYP.           ASEG       4004405C 
IOCON_PIO2_3        ABS    CONST UNTYP.           ASEG       4004408C 
IOCON_PIO2_4        ABS    CONST UNTYP.           ASEG       40044040 
IOCON_PIO2_5        ABS    CONST UNTYP.           ASEG       40044044 
IOCON_PIO2_6        ABS    CONST UNTYP.           ASEG       40044000 
IOCON_PIO2_7        ABS    CONST UNTYP.           ASEG       40044020 
IOCON_PIO2_8        ABS    CONST UNTYP.           ASEG       40044024 
IOCON_PIO2_9        ABS    CONST UNTYP.           ASEG       40044054 
IOCON_PIO3_0        ABS    CONST UNTYP.           ASEG       40044084 
IOCON_PIO3_1        ABS    CONST UNTYP.           ASEG       40044088 
IOCON_PIO3_2        ABS    CONST UNTYP.           ASEG       4004409C 
IOCON_PIO3_3        ABS    CONST UNTYP.           ASEG       400440AC 
IOCON_PIO3_4        ABS    CONST UNTYP.           ASEG       4004403C 
IOCON_PIO3_5        ABS    CONST UNTYP.           ASEG       40044048 
IOCON_RESET_PIO0_0  ABS    CONST UNTYP.           ASEG       4004400C 
IOCON_RI_LOC        ABS    CONST UNTYP.           ASEG       400440BC 
IOCON_R_PIO0_11     ABS    CONST UNTYP.           ASEG       40044074 
IOCON_R_PIO1_0      ABS    CONST UNTYP.           ASEG       40044078 
IOCON_R_PIO1_1      ABS    CONST UNTYP.           ASEG       4004407C 
IOCON_R_PIO1_2      ABS    CONST UNTYP.           ASEG       40044080 
IOCON_SCK_LOC       ABS    CONST UNTYP.           ASEG       400440B0 
IOCON_SWCLK_PIO0_10 ABS    CONST UNTYP.           ASEG       40044068 
IOCON_SWDIO_PIO1_3  ABS    CONST UNTYP.           ASEG       40044090 
IP0                 ABS    CONST UNTYP.           ASEG       E000E400 
IP1                 ABS    CONST UNTYP.           ASEG       E000E404 
IP2                 ABS    CONST UNTYP.           ASEG       E000E408 
IP3                 ABS    CONST UNTYP.           ASEG       E000E40C 
IP4                 ABS    CONST UNTYP.           ASEG       E000E410 
IP5                 ABS    CONST UNTYP.           ASEG       E000E414 
IP6                 ABS    CONST UNTYP.           ASEG       E000E418 
IP7                 ABS    CONST UNTYP.           ASEG       E000E41C 
IRCCTRL             ABS    CONST UNTYP.           ASEG       40048028 
IRQS_RESUME_NFA     REL    CONST UNTYP.           .text      0 
IRQS_SUSPEND_NFA    REL    CONST UNTYP.           .text      0 
ISER                ABS    CONST UNTYP.           ASEG       E000E100 
ISPR                ABS    CONST UNTYP.           ASEG       E000E200 
IS_BIN              REL    CONST UNTYP.           .text      84 
IS_DECIMAL          REL    CONST UNTYP.           .text      AC 
IS_HEX              REL    CONST UNTYP.           .text      BC 
I_NFA               REL    CONST UNTYP.           .text      0 
KEY                 REL    CONST UNTYP.           .text      18 
KEY_INTERPRETED_ENTRYREL    CONST UNTYP.           .text      8 
KEY_NFA             REL    CONST UNTYP.           .text      0 
LATEST              REL    CONST UNTYP.           .text      C 
LATEST_NFA          REL    CONST UNTYP.           .text      0 
LBRAC               REL    CONST UNTYP.           .text      8 
LBRAC_NFA           REL    CONST UNTYP.           .text      0 
LEAVE               REL    CONST UNTYP.           .text      C 
LEAVE_NFA           REL    CONST UNTYP.           .text      0 
LESS1               REL    CONST UNTYP.           .text      13 
LESSTHAN            REL    CONST UNTYP.           .text      8 
LESSTHAN_NFA        REL    CONST UNTYP.           .text      0 
LFA                 REL    CONST UNTYP.           .text      8 
LFA_NFA             REL    CONST UNTYP.           .text      0 
LIT                 REL    CONST UNTYP.           .text      0 
LITE1               REL    CONST UNTYP.           .text      2C 
LITERAL             REL    CONST UNTYP.           .text      C 
LITERAL_NFA         REL    CONST UNTYP.           .text      0 
LOOP                REL    CONST UNTYP.           .text      C 
LOOP_NFA            REL    CONST UNTYP.           .text      0 
LSL                 REL    CONST UNTYP.           .text      8 
LSL_NFA             REL    CONST UNTYP.           .text      0 
LSR                 REL    CONST UNTYP.           .text      8 
LSR_NFA             REL    CONST UNTYP.           .text      0 
MAINCLKSEL          ABS    CONST UNTYP.           ASEG       40048070 
MAINCLKUEN          ABS    CONST UNTYP.           ASEG       40048074 
MAX                 REL    CONST UNTYP.           .text      8 
MAX1                REL    CONST UNTYP.           .text      20 
MAXWORDLEN          ABS    CONST UNTYP.           ASEG       1F 
MAX_NFA             REL    CONST UNTYP.           .text      0 
MIN                 REL    CONST UNTYP.           .text      8 
MIN1                REL    CONST UNTYP.           .text      20 
MIN_NFA             REL    CONST UNTYP.           .text      0 
MOD                 REL    CONST UNTYP.           .text      8 
MODD_NFA            REL    CONST UNTYP.           .text      0 
MS                  REL    CONST UNTYP.           .text      8 
MSLASH              REL    CONST UNTYP.           .text      8 
MSLASH_NFA          REL    CONST UNTYP.           .text      0 
MSMOD               REL    CONST UNTYP.           .text      260 
MSTAR               REL    CONST UNTYP.           .text      8 
MSTAR_NFA           REL    CONST UNTYP.           .text      0 
MS_NFA              REL    CONST UNTYP.           .text      0 
MYBAUD              REL    CONST UNTYP.           .text      C 
MYBAUD_NFA          REL    CONST UNTYP.           .text      0 
MYWORDS             REL    CONST UNTYP.           .text      C 
MYWORDS_NFA         REL    CONST UNTYP.           .text      0 
NBASE               REL    CONST UNTYP.           FISH_Ram_M B5C 
NDPL                REL    CONST UNTYP.           FISH_Ram_M B98 
NEGATE              REL    CONST UNTYP.           .text      C 
NEGATE_NFA          REL    CONST UNTYP.           .text      0 
NFA                 REL    CONST UNTYP.           .text      8 
NFA_ALIGN_BEGIN     REL    CONST UNTYP.           .text      14 
NFA_NFA             REL    CONST UNTYP.           .text      0 
NHLD                REL    CONST UNTYP.           FISH_Ram_M B9C 
NMISRC              ABS    CONST UNTYP.           ASEG       40048174 
NOOP                REL    CONST UNTYP.           .text      C 
NOOP_NFA            REL    CONST UNTYP.           .text      0 
NOT                 REL    CONST UNTYP.           .text      8 
NOT_CO              REL    CONST UNTYP.           .text      6C 
NOT_CR              REL    CONST UNTYP.           .text      21 
NOT_NFA             REL    CONST UNTYP.           .text      0 
NOT_WC              REL    CONST UNTYP.           .text      E8 
NO_KEY              REL    CONST UNTYP.           .text      1F 
NSEXIT1             REL    CONST UNTYP.           .text      29 
NSLEN_DONE          REL    CONST UNTYP.           .text      F 
NSLEN_LOOP          REL    CONST UNTYP.           .text      5 
NSNOTTWO            REL    CONST UNTYP.           .text      D 
NSTWO               REL    CONST UNTYP.           .text      2F 
NULL                REL    CONST UNTYP.           .text      8 
NULLSTRLEN          REL    CONST UNTYP.           .text      C 
NULLSTRLEN_NFA      REL    CONST UNTYP.           .text      0 
NULL_NFA            REL    CONST UNTYP.           .text      0 
NUMB1               REL    CONST UNTYP.           .text      58 
NUMB2               REL    CONST UNTYP.           .text      E4 
NUMB3               REL    CONST UNTYP.           .text      F8 
NUMBER              REL    CONST UNTYP.           .text      C 
NUMBERSUFFIX        REL    CONST UNTYP.           .text      0 
NUMBER_NFA          REL    CONST UNTYP.           .text      0 
ONE                 REL    CONST UNTYP.           .text      8 
ONEM                REL    CONST UNTYP.           .text      8 
ONEM_NFA            REL    CONST UNTYP.           .text      0 
ONEP                REL    CONST UNTYP.           .text      8 
ONEP_NFA            REL    CONST UNTYP.           .text      0 
ONE_NFA             REL    CONST UNTYP.           .text      0 
OR                  REL    CONST UNTYP.           .text      8 
ORIG                REL    CONST UNTYP.           FISH_Ram_M 10 
OR_NFA              REL    CONST UNTYP.           .text      0 
OUT                 REL    CONST UNTYP.           FISH_Ram_M B64 
OUT_NFA             REL    CONST UNTYP.           .text      0 
OUT_SV              REL    CONST UNTYP.           .text      8 
OVER                REL    CONST UNTYP.           .text      C 
OVER_NFA            REL    CONST UNTYP.           .text      0 
P                   REL    CONST UNTYP.           .text      8 
PAD                 REL    CONST UNTYP.           FISH_Ram_M A38 
PAD_NFA             REL    CONST UNTYP.           .text      0 
PAD_SV              REL    CONST UNTYP.           .text      8 
PAREN               REL    CONST UNTYP.           .text      8 
PAREN_ERR           REL    CONST UNTYP.           .text      4C 
PAREN_NFA           REL    CONST UNTYP.           .text      0 
PCON                ABS    CONST UNTYP.           ASEG       40038000 
PDAWAKECFG          ABS    CONST UNTYP.           ASEG       40048234 
PDOTQ               REL    CONST UNTYP.           .text      154 
PDRUNCFG            ABS    CONST UNTYP.           ASEG       40048238 
PDSLEEPCFG          ABS    CONST UNTYP.           ASEG       40048230 
PE_DONE             REL    CONST UNTYP.           .text      48 
PFA                 REL    CONST UNTYP.           .text      8 
PFA_ALIGN_BEGIN     REL    CONST UNTYP.           .text      14 
PFA_NFA             REL    CONST UNTYP.           .text      0 
PFIN1               REL    CONST UNTYP.           .text      B 
PFIN2               REL    CONST UNTYP.           .text      1B 
PFIN21              REL    CONST UNTYP.           .text      2F 
PFIN5               REL    CONST UNTYP.           .text      4F 
PFIN51              REL    CONST UNTYP.           .text      51 
PFIN7               REL    CONST UNTYP.           .text      59 
PFIND               REL    CONST UNTYP.           .text      0 
PFIND_NEXT_NFA      REL    CONST UNTYP.           .text      65 
PIN0                ABS    CONST UNTYP.           ASEG       A0002100 
PINASSIGN0          ABS    CONST UNTYP.           ASEG       4000C000 
PINASSIGN1          ABS    CONST UNTYP.           ASEG       4000C004 
PINASSIGN2          ABS    CONST UNTYP.           ASEG       4000C008 
PINASSIGN3          ABS    CONST UNTYP.           ASEG       4000C00C 
PINASSIGN4          ABS    CONST UNTYP.           ASEG       4000C010 
PINASSIGN5          ABS    CONST UNTYP.           ASEG       4000C014 
PINASSIGN6          ABS    CONST UNTYP.           ASEG       4000C018 
PINASSIGN7          ABS    CONST UNTYP.           ASEG       4000C01C 
PINASSIGN8          ABS    CONST UNTYP.           ASEG       4000C020 
PINENABLE0          ABS    CONST UNTYP.           ASEG       4000C1C0 
PINIT               ABS    CONST UNTYP.           ASEG       10000FF0 
PIOPORCAP0          ABS    CONST UNTYP.           ASEG       40048100 
PIOPORCAP1          ABS    CONST UNTYP.           ASEG       40048104 
PLOOP               REL    CONST UNTYP.           .text      C 
PLOOP_NFA           REL    CONST UNTYP.           .text      0 
PLUS                REL    CONST UNTYP.           .text      8 
PLUS_NFA            REL    CONST UNTYP.           .text      0 
PM                  REL    CONST UNTYP.           .text      3F0 
PM1                 REL    CONST UNTYP.           .text      404 
PML_LOOP            REL    CONST UNTYP.           .text      C 
PNUM1               REL    CONST UNTYP.           .text      1A4 
PNUM2               REL    CONST UNTYP.           .text      21C 
PNUM3               REL    CONST UNTYP.           .text      210 
PNUMBER             REL    CONST UNTYP.           .text      1A0 
POFF                REL    CONST UNTYP.           .text      C 
POFF_NFA            REL    CONST UNTYP.           .text      0 
PON                 REL    CONST UNTYP.           .text      8 
PON_NFA             REL    CONST UNTYP.           .text      0 
PRESETCTRL          ABS    CONST UNTYP.           ASEG       40048004 
PRINT_SUFFIX        REL    CONST UNTYP.           .text      64 
PROMPT              REL    CONST UNTYP.           FISH_Ram_M B8C 
PSTORE              REL    CONST UNTYP.           .text      8 
PSTORE_NFA          REL    CONST UNTYP.           .text      0 
P_NFA               REL    CONST UNTYP.           .text      0 
QALIGNED            REL    CONST UNTYP.           .text      10 
QALIGNED_NFA        REL    CONST UNTYP.           .text      0 
QALIGN_OK           REL    CONST UNTYP.           .text      60 
QCOMP               REL    CONST UNTYP.           .text      D8 
QCSP                REL    CONST UNTYP.           .text      2A0 
QERROR              REL    CONST UNTYP.           .text      C 
QERROR_DONE         REL    CONST UNTYP.           .text      2C 
QERROR_FINISH       REL    CONST UNTYP.           .text      28 
QERROR_NFA          REL    CONST UNTYP.           .text      0 
QEXEC               REL    CONST UNTYP.           .text      F8 
QKEY                REL    CONST UNTYP.           .text      C 
QKEY_NFA            REL    CONST UNTYP.           .text      0 
QPAIR               REL    CONST UNTYP.           .text      114 
QSTACK              REL    CONST UNTYP.           .text      12C 
QUERY               REL    CONST UNTYP.           .text      17C 
QUES                REL    CONST UNTYP.           .text      8 
QUES_NFA            REL    CONST UNTYP.           .text      0 
QUIT                REL    CONST UNTYP.           .text      348 
QUIT1               REL    CONST UNTYP.           .text      354 
QUIT2               REL    CONST UNTYP.           .text      3A8 
QUIT_EOL_DLE        REL    CONST UNTYP.           .text      3A8 
R                   REL    CONST UNTYP.           .text      8 
RAMVARSPACE         REL    CONST UNTYP.           FISH_Ram_M AFC 
RAMVARSPACE_START   REL    CONST UNTYP.           FISH_Ram_M AFC 
RAMWORDS            REL    CONST UNTYP.           .text      8C 
RAM_END             ABS    CONST UNTYP.           ASEG       10001000 
RAM_START           ABS    CONST UNTYP.           ASEG       10000000 
RBASE               REL    CONST UNTYP.           .text      C 
RBASE_NFA           REL    CONST UNTYP.           .text      0 
RBRAC               REL    CONST UNTYP.           .text      8 
RBRAC_NFA           REL    CONST UNTYP.           .text      0 
RELOC_THIS_WORD     REL    CONST UNTYP.           .text      118 
REPEAT              REL    CONST UNTYP.           .text      C 
REPEAT_NFA          REL    CONST UNTYP.           .text      0 
REVW                REL    CONST UNTYP.           .text      C 
REVW_NFA            REL    CONST UNTYP.           .text      0 
RFROM               REL    CONST UNTYP.           .text      8 
RFROM_NFA           REL    CONST UNTYP.           .text      0 
RINIT               ABS    CONST UNTYP.           ASEG       10000F70 
RLIT                REL    CONST UNTYP.           .text      0 
ROT                 REL    CONST UNTYP.           .text      8 
ROT_NFA             REL    CONST UNTYP.           .text      0 
RPAT                REL    CONST UNTYP.           .text      8 
RPAT_NFA            REL    CONST UNTYP.           .text      0 
RPSTO               REL    CONST UNTYP.           .text      0 
RWORD               REL    CONST UNTYP.           .text      0 
RW_BEGIN            REL    CONST UNTYP.           .text      94 
RW_DOCONVAR         REL    CONST UNTYP.           .text      54 
RW_LFA              REL    CONST UNTYP.           .text      154 
RW_UNTIL            REL    CONST UNTYP.           .text      150 
R_NFA               REL    CONST UNTYP.           .text      0 
SCR                 ABS    CONST UNTYP.           ASEG       E000ED10 
SCSP                REL    CONST UNTYP.           .text      28C 
SEMI                REL    CONST UNTYP.           .text      8 
SEMIC_CREATE        REL    CONST UNTYP.           .text      3D4 
SEMIS               REL    CONST UNTYP.           .text      0 
SEMI_NFA            REL    CONST UNTYP.           .text      0 
SETBITS             REL    CONST UNTYP.           .text      C 
SETBITS_NFA         REL    CONST UNTYP.           .text      0 
SETENA0             ABS    CONST UNTYP.           ASEG       E000E100 
SETPEND0            ABS    CONST UNTYP.           ASEG       E000E200 
SHPR2               ABS    CONST UNTYP.           ASEG       E000ED1C 
SHPR3               ABS    CONST UNTYP.           ASEG       E000ED20 
SIGN                REL    CONST UNTYP.           .text      C 
SIGN1               REL    CONST UNTYP.           .text      2C 
SIGNON              REL    CONST UNTYP.           .text      420 
SIGN_NFA            REL    CONST UNTYP.           .text      0 
SLASH               REL    CONST UNTYP.           .text      8 
SLASH_NFA           REL    CONST UNTYP.           .text      0 
SLMOD               REL    CONST UNTYP.           .text      C 
SLMOD_NFA           REL    CONST UNTYP.           .text      0 
SPACE               REL    CONST UNTYP.           .text      C 
SPACES              REL    CONST UNTYP.           .text      C 
SPACES_DO           REL    CONST UNTYP.           .text      2C 
SPACES_DONE         REL    CONST UNTYP.           .text      38 
SPACES_NFA          REL    CONST UNTYP.           .text      0 
SPACE_NFA           REL    CONST UNTYP.           .text      0 
SPAT                REL    CONST UNTYP.           .text      8 
SPAT_NFA            REL    CONST UNTYP.           .text      0 
SPSTO               REL    CONST UNTYP.           .text      0 
SSLASH              REL    CONST UNTYP.           .text      8 
SSLASH_NFA          REL    CONST UNTYP.           .text      0 
SSMOD               REL    CONST UNTYP.           .text      C 
SSMOD_NFA           REL    CONST UNTYP.           .text      0 
SSP0CLKDIV          ABS    CONST UNTYP.           ASEG       40048094 
SSP0CPSR            ABS    CONST UNTYP.           ASEG       40040010 
SSP0CR0             ABS    CONST UNTYP.           ASEG       40040000 
SSP0CR1             ABS    CONST UNTYP.           ASEG       40040004 
SSP0DR              ABS    CONST UNTYP.           ASEG       40040008 
SSP0ICR             ABS    CONST UNTYP.           ASEG       40040020 
SSP0IMSC            ABS    CONST UNTYP.           ASEG       40040014 
SSP0MIS             ABS    CONST UNTYP.           ASEG       4004001C 
SSP0RIS             ABS    CONST UNTYP.           ASEG       40040018 
SSP0SR              ABS    CONST UNTYP.           ASEG       4004000C 
SSP1CLKDIV          ABS    CONST UNTYP.           ASEG       4004809C 
SSP1CPSR            ABS    CONST UNTYP.           ASEG       40058010 
SSP1CR0             ABS    CONST UNTYP.           ASEG       40058000 
SSP1CR1             ABS    CONST UNTYP.           ASEG       40058004 
SSP1DR              ABS    CONST UNTYP.           ASEG       40058008 
SSP1ICR             ABS    CONST UNTYP.           ASEG       40058020 
SSP1IMSC            ABS    CONST UNTYP.           ASEG       40058014 
SSP1MIS             ABS    CONST UNTYP.           ASEG       4005801C 
SSP1RIS             ABS    CONST UNTYP.           ASEG       40058018 
SSP1SR              ABS    CONST UNTYP.           ASEG       4005800C 
STACKSIZE           ABS    CONST UNTYP.           ASEG       80 
STAR                REL    CONST UNTYP.           .text      8 
STARTAPRP0          ABS    CONST UNTYP.           ASEG       40048200 
STARTERP0           ABS    CONST UNTYP.           ASEG       40048204 
STARTRSRP0CLR       ABS    CONST UNTYP.           ASEG       40048208 
STARTSRP0           ABS    CONST UNTYP.           ASEG       4004820C 
STAR_NFA            REL    CONST UNTYP.           .text      0 
STATE_NFA           REL    CONST UNTYP.           .text      0 
STATE_SV            REL    CONST UNTYP.           .text      C 
STCTR               REL    CONST UNTYP.           .text      C 
STCTR_NFA           REL    CONST UNTYP.           .text      0 
STICKER             REL    CONST UNTYP.           FISH_Ram_M AF8 
STOD                REL    CONST UNTYP.           .text      C 
STOD1               REL    CONST UNTYP.           .text      D 
STOD_NFA            REL    CONST UNTYP.           .text      0 
STORE               REL    CONST UNTYP.           .text      8 
STORE_NFA           REL    CONST UNTYP.           .text      0 
STRVA               REL    CONST UNTYP.           .text      0 
SUBB                REL    CONST UNTYP.           .text      8 
SUB_CR_4_NL         REL    CONST UNTYP.           .text      7 
SUB_NFA             REL    CONST UNTYP.           .text      0 
SV_END              REL    CONST UNTYP.           FISH_Ram_M C48 
SV_INIT_VALUES      REL    CONST UNTYP.           .text      0 
SWAP                REL    CONST UNTYP.           .text      C 
SWAP_NFA            REL    CONST UNTYP.           .text      0 
SXTB                REL    CONST UNTYP.           .text      C 
SXTB_NFA            REL    CONST UNTYP.           .text      0 
SXTH                REL    CONST UNTYP.           .text      C 
SXTH_NFA            REL    CONST UNTYP.           .text      0 
SYSAHBCLKCTRL       ABS    CONST UNTYP.           ASEG       40048080 
SYSAHBCLKDIV        ABS    CONST UNTYP.           ASEG       40048078 
SYSCLK              REL    CONST UNTYP.           .text      C 
SYSCLK_NFA          REL    CONST UNTYP.           .text      0 
SYSCLOCK            REL    CONST UNTYP.           FISH_Ram_M 0 
SYSMEMREMAP         ABS    CONST UNTYP.           ASEG       40048000 
SYSOSCCTRL          ABS    CONST UNTYP.           ASEG       40048020 
SYSPLLCLKSEL        ABS    CONST UNTYP.           ASEG       40048040 
SYSPLLCLKUEN        ABS    CONST UNTYP.           ASEG       40048044 
SYSPLLCTRL          ABS    CONST UNTYP.           ASEG       40048008 
SYSPLLSTAT          ABS    CONST UNTYP.           ASEG       4004800C 
SYSRESSTAT          ABS    CONST UNTYP.           ASEG       40048030 
SYSRSTSTAT          ABS    CONST UNTYP.           ASEG       40048030 
SYSTCKCAL           ABS    CONST UNTYP.           ASEG       40048154 
SYSTEMCLOCK         ABS    CONST UNTYP.           ASEG       16E3600 
SYSTICKCALVR        ABS    CONST UNTYP.           ASEG       E000E01C 
SYSTICKCSR          ABS    CONST UNTYP.           ASEG       E000E010 
SYSTICKCVR          ABS    CONST UNTYP.           ASEG       E000E018 
SYSTICKRVR          ABS    CONST UNTYP.           ASEG       E000E014 
SYSTICK_IRQ_OFF     REL    CONST UNTYP.           .text      14 
SYSTICK_IRQ_OFF_NFA REL    CONST UNTYP.           .text      0 
SYSTICK_IRQ_ON      REL    CONST UNTYP.           .text      14 
SYSTICK_IRQ_ON_NFA  REL    CONST UNTYP.           .text      0 
SYST_CALIB          ABS    CONST UNTYP.           ASEG       E000E01C 
SYST_CSR            ABS    CONST UNTYP.           ASEG       E000E010 
SYST_CVR            ABS    CONST UNTYP.           ASEG       E000E018 
SYST_RVR            ABS    CONST UNTYP.           ASEG       E000E014 
SoCinit             REL    CONST UNTYP.           .text      0 
TCS_FOUND           REL    CONST UNTYP.           .text      1B 
TCS_LOOP            REL    CONST UNTYP.           .text      F 
TDUP                REL    CONST UNTYP.           .text      C 
TDUP_NFA            REL    CONST UNTYP.           .text      0 
THEN                REL    CONST UNTYP.           .text      C 
THEN_NFA            REL    CONST UNTYP.           .text      0 
THREE               REL    CONST UNTYP.           .text      8 
THREE_NFA           REL    CONST UNTYP.           .text      0 
TIB                 REL    CONST UNTYP.           FISH_Ram_M A98 
TIB_CHAR_SCAN       REL    CONST UNTYP.           .text      0 
TIB_NFA             REL    CONST UNTYP.           .text      0 
TIB_SV              REL    CONST UNTYP.           .text      8 
TICK                REL    CONST UNTYP.           .text      8 
TICK_NFA            REL    CONST UNTYP.           .text      0 
TID                 ABS    CONST UNTYP.           ASEG       4F00 
TMR16B0CCR          ABS    CONST UNTYP.           ASEG       4000C028 
TMR16B0CR0          ABS    CONST UNTYP.           ASEG       4000C02C 
TMR16B0CTCR         ABS    CONST UNTYP.           ASEG       4000C070 
TMR16B0EMR          ABS    CONST UNTYP.           ASEG       4000C03C 
TMR16B0IR           ABS    CONST UNTYP.           ASEG       4000C000 
TMR16B0MCR          ABS    CONST UNTYP.           ASEG       4000C014 
TMR16B0MR0          ABS    CONST UNTYP.           ASEG       4000C018 
TMR16B0MR1          ABS    CONST UNTYP.           ASEG       4000C01C 
TMR16B0MR2          ABS    CONST UNTYP.           ASEG       4000C020 
TMR16B0MR3          ABS    CONST UNTYP.           ASEG       4000C024 
TMR16B0PC           ABS    CONST UNTYP.           ASEG       4000C010 
TMR16B0PR           ABS    CONST UNTYP.           ASEG       4000C00C 
TMR16B0PWMC         ABS    CONST UNTYP.           ASEG       4000C074 
TMR16B0TC           ABS    CONST UNTYP.           ASEG       4000C008 
TMR16B0TCR          ABS    CONST UNTYP.           ASEG       4000C004 
TMR16B1CCR          ABS    CONST UNTYP.           ASEG       40010028 
TMR16B1CR0          ABS    CONST UNTYP.           ASEG       4001002C 
TMR16B1CTCR         ABS    CONST UNTYP.           ASEG       40010070 
TMR16B1EMR          ABS    CONST UNTYP.           ASEG       4001003C 
TMR16B1IR           ABS    CONST UNTYP.           ASEG       40010000 
TMR16B1MCR          ABS    CONST UNTYP.           ASEG       40010014 
TMR16B1MR0          ABS    CONST UNTYP.           ASEG       40010018 
TMR16B1MR1          ABS    CONST UNTYP.           ASEG       4001001C 
TMR16B1MR2          ABS    CONST UNTYP.           ASEG       40010020 
TMR16B1MR3          ABS    CONST UNTYP.           ASEG       40010024 
TMR16B1PC           ABS    CONST UNTYP.           ASEG       40010010 
TMR16B1PR           ABS    CONST UNTYP.           ASEG       4001000C 
TMR16B1PWMC         ABS    CONST UNTYP.           ASEG       40010074 
TMR16B1TC           ABS    CONST UNTYP.           ASEG       40010008 
TMR16B1TCR          ABS    CONST UNTYP.           ASEG       40010004 
TMR32B0CCR          ABS    CONST UNTYP.           ASEG       40014028 
TMR32B0CR0          ABS    CONST UNTYP.           ASEG       4001402C 
TMR32B0CTCR         ABS    CONST UNTYP.           ASEG       40014070 
TMR32B0EMR          ABS    CONST UNTYP.           ASEG       4001403C 
TMR32B0IR           ABS    CONST UNTYP.           ASEG       40014000 
TMR32B0MCR          ABS    CONST UNTYP.           ASEG       40014014 
TMR32B0MR0          ABS    CONST UNTYP.           ASEG       40014018 
TMR32B0MR1          ABS    CONST UNTYP.           ASEG       4001401C 
TMR32B0MR2          ABS    CONST UNTYP.           ASEG       40014020 
TMR32B0MR3          ABS    CONST UNTYP.           ASEG       40014024 
TMR32B0PC           ABS    CONST UNTYP.           ASEG       40014010 
TMR32B0PR           ABS    CONST UNTYP.           ASEG       4001400C 
TMR32B0PWMC         ABS    CONST UNTYP.           ASEG       40014074 
TMR32B0TC           ABS    CONST UNTYP.           ASEG       40014008 
TMR32B0TCR          ABS    CONST UNTYP.           ASEG       40014004 
TMR32B1CCR          ABS    CONST UNTYP.           ASEG       40018028 
TMR32B1CR0          ABS    CONST UNTYP.           ASEG       4001802C 
TMR32B1CTCR         ABS    CONST UNTYP.           ASEG       40018070 
TMR32B1EMR          ABS    CONST UNTYP.           ASEG       4001803C 
TMR32B1IR           ABS    CONST UNTYP.           ASEG       40018000 
TMR32B1MCR          ABS    CONST UNTYP.           ASEG       40018014 
TMR32B1MR0          ABS    CONST UNTYP.           ASEG       40018018 
TMR32B1MR1          ABS    CONST UNTYP.           ASEG       4001801C 
TMR32B1MR2          ABS    CONST UNTYP.           ASEG       40018020 
TMR32B1MR3          ABS    CONST UNTYP.           ASEG       40018024 
TMR32B1PC           ABS    CONST UNTYP.           ASEG       40018010 
TMR32B1PR           ABS    CONST UNTYP.           ASEG       4001800C 
TMR32B1PWMC         ABS    CONST UNTYP.           ASEG       40018074 
TMR32B1TC           ABS    CONST UNTYP.           ASEG       40018008 
TMR32B1TCR          ABS    CONST UNTYP.           ASEG       40018004 
TOFA                REL    CONST UNTYP.           .text      0 
TOGGLE              REL    CONST UNTYP.           .text      0 
TOR                 REL    CONST UNTYP.           .text      8 
TOR_NFA             REL    CONST UNTYP.           .text      0 
TRAVERSE            REL    CONST UNTYP.           .text      460 
TRAVERSE_BEGIN      REL    CONST UNTYP.           .text      468 
TWO                 REL    CONST UNTYP.           .text      8 
TWOP                REL    CONST UNTYP.           .text      8 
TWOP_NFA            REL    CONST UNTYP.           .text      0 
TWOSLASH            REL    CONST UNTYP.           .text      8 
TWOSLASH_NFA        REL    CONST UNTYP.           .text      0 
TWOSTAR             REL    CONST UNTYP.           .text      8 
TWOSTAR_NFA         REL    CONST UNTYP.           .text      0 
TWO_NFA             REL    CONST UNTYP.           .text      0 
TXRDY_SUBR          REL    CONST UNTYP.           .text      1 
TYPE                REL    CONST UNTYP.           .text      C 
TYPE1               REL    CONST UNTYP.           .text      4C 
TYPE2               REL    CONST UNTYP.           .text      30 
TYPE3               REL    CONST UNTYP.           .text      50 
TYPE_NFA            REL    CONST UNTYP.           .text      0 
U0ACR               ABS    CONST UNTYP.           ASEG       40008020 
U0ADRMATCH          ABS    CONST UNTYP.           ASEG       40008050 
U0DLL               ABS    CONST UNTYP.           ASEG       40008000 
U0DLM               ABS    CONST UNTYP.           ASEG       40008004 
U0FCR               ABS    CONST UNTYP.           ASEG       40008008 
U0FDR               ABS    CONST UNTYP.           ASEG       40008028 
U0IER               ABS    CONST UNTYP.           ASEG       40008004 
U0IIR               ABS    CONST UNTYP.           ASEG       40008008 
U0LCR               ABS    CONST UNTYP.           ASEG       4000800C 
U0LSR               ABS    CONST UNTYP.           ASEG       40008014 
U0MCR               ABS    CONST UNTYP.           ASEG       40008010 
U0MSR               ABS    CONST UNTYP.           ASEG       40008018 
U0RBR               ABS    CONST UNTYP.           ASEG       40008000 
U0RBRTHR            ABS    CONST UNTYP.           ASEG       40008000 
U0RS485CTRL         ABS    CONST UNTYP.           ASEG       4000804C 
U0RS485DLY          ABS    CONST UNTYP.           ASEG       40008054 
U0SCR               ABS    CONST UNTYP.           ASEG       4000801C 
U0TER               ABS    CONST UNTYP.           ASEG       40008030 
U0THR               ABS    CONST UNTYP.           ASEG       40008000 
UART0_INIT          REL    CONST UNTYP.           .text      10 
UART0_INIT_NFA      REL    CONST UNTYP.           .text      0 
UART0_LSR           REL    CONST UNTYP.           .text      10 
UART0_LSR_NFA       REL    CONST UNTYP.           .text      0 
UART0_RX            REL    CONST UNTYP.           .text      10 
UART0_RX_NFA        REL    CONST UNTYP.           .text      0 
UART0_STAT          ABS    CONST UNTYP.           ASEG       40064008 
UART0_TX            REL    CONST UNTYP.           .text      10 
UART0_TX_NFA        REL    CONST UNTYP.           .text      0 
UARTCLKDIV          ABS    CONST UNTYP.           ASEG       40048098 
UARTCLKDIV_81x      ABS    CONST UNTYP.           ASEG       40048094 
UARTFRGDIV          ABS    CONST UNTYP.           ASEG       400480F0 
UBAUDADDR           ABS    CONST UNTYP.           ASEG       10000D44 
UDOT                REL    CONST UNTYP.           .text      8 
UDOT_BASE_SUFFIX    REL    CONST UNTYP.           .text      18 
UDOT_NFA            REL    CONST UNTYP.           .text      0 
ULES1               REL    CONST UNTYP.           .text      34 
ULES2               REL    CONST UNTYP.           .text      3C 
ULESSTHAN           REL    CONST UNTYP.           .text      8 
ULESSTHAN_NFA       REL    CONST UNTYP.           .text      0 
UNTIL               REL    CONST UNTYP.           .text      C 
UNTIL_NFA           REL    CONST UNTYP.           .text      0 
UP                  REL    CONST UNTYP.           FISH_Ram_M B78 
UP_NFA              REL    CONST UNTYP.           .text      0 
UP_SV               REL    CONST UNTYP.           .text      8 
USART0_BRG          ABS    CONST UNTYP.           ASEG       40064020 
USART0_CFG          ABS    CONST UNTYP.           ASEG       40064000 
USART0_RXDAT        ABS    CONST UNTYP.           ASEG       40064014 
USART0_TXDAT        ABS    CONST UNTYP.           ASEG       4006401C 
USEBIN              REL    CONST UNTYP.           .text      3B 
USEDEC              REL    CONST UNTYP.           .text      3F 
USEHEX              REL    CONST UNTYP.           .text      43 
USLASH              REL    CONST UNTYP.           .text      0 
USTAR               REL    CONST UNTYP.           .text      0 
VALLOT_OK           REL    CONST UNTYP.           .text      48 
VARALLOT            REL    CONST UNTYP.           .text      10 
VARALLOT_NFA        REL    CONST UNTYP.           .text      0 
VARIABLE            REL    CONST UNTYP.           .text      10 
VARIABLE_NFA        REL    CONST UNTYP.           .text      0 
VARSPACE            REL    CONST UNTYP.           .text      0 
VAR_                REL    CONST UNTYP.           .text      8 
VAR_NFA             REL    CONST UNTYP.           .text      0 
VBASE               REL    CONST UNTYP.           .text      C 
VBASE_NFA           REL    CONST UNTYP.           .text      0 
VLIS1               REL    CONST UNTYP.           .text      20 
VS_RECVR_LOOP       REL    CONST UNTYP.           .text      58 
VS_RECVR_NEXT       REL    CONST UNTYP.           .text      A4 
WARM                REL    CONST UNTYP.           .text      450 
WC_COMPILE_NFA      REL    CONST UNTYP.           .text      0 
WC_CREATE_NFA       REL    CONST UNTYP.           .text      0 
WC_FISH_PubRel_NFA  REL    CONST UNTYP.           .text      0 
WC_FISH_SYS_NFA     REL    CONST UNTYP.           .text      0 
WC_IRQ_NFA          REL    CONST UNTYP.           .text      0 
WC_NUMBERS_NFA      REL    CONST UNTYP.           .text      0 
WC_RWMEMORY_NFA     REL    CONST UNTYP.           .text      0 
WC_STACK_NFA        REL    CONST UNTYP.           .text      0 
WC_UARTx_NFA        REL    CONST UNTYP.           .text      0 
WDFEED              ABS    CONST UNTYP.           ASEG       40004008 
WDMOD               ABS    CONST UNTYP.           ASEG       40004000 
WDTC                ABS    CONST UNTYP.           ASEG       40004004 
WDTCLKDIV           ABS    CONST UNTYP.           ASEG       400480D8 
WDTCLKSEL           ABS    CONST UNTYP.           ASEG       400480D0 
WDTCLKUEN           ABS    CONST UNTYP.           ASEG       400480D4 
WDTOSCCTRL          ABS    CONST UNTYP.           ASEG       40048024 
WDTV                ABS    CONST UNTYP.           ASEG       4000400C 
WENCL               REL    CONST UNTYP.           .text      28 
WHILE               REL    CONST UNTYP.           .text      C 
WHILE_NFA           REL    CONST UNTYP.           .text      0 
WORD                REL    CONST UNTYP.           .text      C 
WORD1               REL    CONST UNTYP.           .text      10 
WORD2               REL    CONST UNTYP.           .text      14 
WORD21              REL    CONST UNTYP.           .text      8C 
WORDCAT             REL    CONST UNTYP.           .text      C 
WORDCAT_NFA         REL    CONST UNTYP.           .text      0 
WORDNOTFOUND        REL    CONST UNTYP.           .text      67 
WORDS               REL    CONST UNTYP.           .text      C 
WORDS2              REL    CONST UNTYP.           .text      60 
WORDSCONT           REL    CONST UNTYP.           .text      AC 
WORDSDONE           REL    CONST UNTYP.           .text      104 
WORDS_NFA           REL    CONST UNTYP.           .text      0 
WORD_NFA            REL    CONST UNTYP.           .text      0 
WTEST               REL    CONST UNTYP.           .text      10 
XDO                 REL    CONST UNTYP.           .text      0 
XLOO1               REL    CONST UNTYP.           .text      3 
XLOO2               REL    CONST UNTYP.           .text      13 
XLOOP               REL    CONST UNTYP.           .text      0 
XOFF                REL    CONST UNTYP.           .text      C 
XOFF_CHAR           ABS    CONST UNTYP.           ASEG       13 
XOFF_NFA            REL    CONST UNTYP.           .text      0 
XOFF_SUBR           REL    CONST UNTYP.           .text      1 
XON                 REL    CONST UNTYP.           .text      8 
XON_CHAR            ABS    CONST UNTYP.           ASEG       11 
XON_NFA             REL    CONST UNTYP.           .text      0 
XON_SUBR            REL    CONST UNTYP.           .text      1 
XORR                REL    CONST UNTYP.           .text      8 
XORR_NFA            REL    CONST UNTYP.           .text      0 
XPLOOP              REL    CONST UNTYP.           .text      0 
ZBRAN               REL    CONST UNTYP.           .text      0 
ZEQU                REL    CONST UNTYP.           .text      8 
ZEQU1               REL    CONST UNTYP.           .text      D 
ZEQU_NFA            REL    CONST UNTYP.           .text      0 
ZERO                REL    CONST UNTYP.           .text      8 
ZERO_NFA            REL    CONST UNTYP.           .text      0 
ZLESS               REL    CONST UNTYP.           .text      8 
ZLESS1              REL    CONST UNTYP.           .text      F 
ZLESS_NFA           REL    CONST UNTYP.           .text      0 
ZNDUP               REL    CONST UNTYP.           .text      C 
__lab0              REL    CONST UNTYP.           .text      80 
__lab1              REL    CONST UNTYP.           .text      A8 
__lab10             REL    CONST UNTYP.           .text      308 
__lab100            REL    CONST UNTYP.           .text      B8 
__lab101            REL    CONST UNTYP.           .text      C4 
__lab102            REL    CONST UNTYP.           .text      DC 
__lab103            REL    CONST UNTYP.           .text      F4 
__lab104            REL    CONST UNTYP.           .text      11C 
__lab105            REL    CONST UNTYP.           .text      C 
__lab106            REL    CONST UNTYP.           .text      90 
__lab107            REL    CONST UNTYP.           .text      B0 
__lab108            REL    CONST UNTYP.           .text      8 
__lab109            REL    CONST UNTYP.           .text      38 
__lab11             REL    CONST UNTYP.           .text      324 
__lab110            REL    CONST UNTYP.           .text      58 
__lab111            REL    CONST UNTYP.           .text      74 
__lab112            REL    CONST UNTYP.           .text      8C 
__lab113            REL    CONST UNTYP.           .text      A4 
__lab114            REL    CONST UNTYP.           .text      BC 
__lab115            REL    CONST UNTYP.           .text      28 
__lab116            REL    CONST UNTYP.           .text      6C 
__lab117            REL    CONST UNTYP.           .text      78 
__lab118            REL    CONST UNTYP.           .text      8C 
__lab119            REL    CONST UNTYP.           .text      C 
__lab12             REL    CONST UNTYP.           .text      330 
__lab120            REL    CONST UNTYP.           .text      18 
__lab121            REL    CONST UNTYP.           .text      8 
__lab122            REL    CONST UNTYP.           .text      8 
__lab123            REL    CONST UNTYP.           .text      8 
__lab124            REL    CONST UNTYP.           .text      8 
__lab125            REL    CONST UNTYP.           .text      C 
__lab126            REL    CONST UNTYP.           .text      8 
__lab127            REL    CONST UNTYP.           .text      8 
__lab128            REL    CONST UNTYP.           .text      8 
__lab129            REL    CONST UNTYP.           .text      C 
__lab13             REL    CONST UNTYP.           .text      344 
__lab130            REL    CONST UNTYP.           .text      C 
__lab131            REL    CONST UNTYP.           .text      C 
__lab132            REL    CONST UNTYP.           .text      8 
__lab133            REL    CONST UNTYP.           .text      C 
__lab134            REL    CONST UNTYP.           .text      C 
__lab135            REL    CONST UNTYP.           .text      C 
__lab136            REL    CONST UNTYP.           .text      C 
__lab137            REL    CONST UNTYP.           .text      C 
__lab138            REL    CONST UNTYP.           .text      8 
__lab139            REL    CONST UNTYP.           .text      8 
__lab14             REL    CONST UNTYP.           .text      370 
__lab140            REL    CONST UNTYP.           .text      8 
__lab141            REL    CONST UNTYP.           .text      8 
__lab142            REL    CONST UNTYP.           .text      8 
__lab143            REL    CONST UNTYP.           .text      20 
__lab144            REL    CONST UNTYP.           .text      1C 
__lab145            REL    CONST UNTYP.           .text      1C 
__lab146            REL    CONST UNTYP.           .text      24 
__lab147            REL    CONST UNTYP.           .text      30 
__lab148            REL    CONST UNTYP.           .text      28 
__lab149            REL    CONST UNTYP.           .text      38 
__lab15             REL    CONST UNTYP.           .text      384 
__lab150            REL    CONST UNTYP.           .text      C 
__lab151            REL    CONST UNTYP.           .text      8 
__lab152            REL    CONST UNTYP.           .text      C 
__lab153            REL    CONST UNTYP.           .text      8 
__lab154            REL    CONST UNTYP.           .text      8 
__lab155            REL    CONST UNTYP.           .text      8 
__lab156            REL    CONST UNTYP.           .text      8 
__lab157            REL    CONST UNTYP.           .text      8 
__lab158            REL    CONST UNTYP.           .text      8 
__lab159            REL    CONST UNTYP.           .text      8 
__lab16             REL    CONST UNTYP.           .text      3BC 
__lab160            REL    CONST UNTYP.           .text      8 
__lab161            REL    CONST UNTYP.           .text      8 
__lab162            REL    CONST UNTYP.           .text      8 
__lab163            REL    CONST UNTYP.           .text      8 
__lab164            REL    CONST UNTYP.           .text      1C 
__lab165            REL    CONST UNTYP.           .text      30 
__lab166            REL    CONST UNTYP.           .text      8 
__lab167            REL    CONST UNTYP.           .text      8 
__lab168            REL    CONST UNTYP.           .text      C 
__lab169            REL    CONST UNTYP.           .text      18 
__lab17             REL    CONST UNTYP.           .text      3FC 
__lab170            REL    CONST UNTYP.           .text      18 
__lab171            REL    CONST UNTYP.           .text      8 
__lab172            REL    CONST UNTYP.           .text      8 
__lab173            REL    CONST UNTYP.           .text      8 
__lab174            REL    CONST UNTYP.           .text      8 
__lab175            REL    CONST UNTYP.           .text      C 
__lab176            REL    CONST UNTYP.           .text      C 
__lab177            REL    CONST UNTYP.           .text      C 
__lab178            REL    CONST UNTYP.           .text      8 
__lab179            REL    CONST UNTYP.           .text      8 
__lab18             REL    CONST UNTYP.           .text      414 
__lab180            REL    CONST UNTYP.           .text      8 
__lab181            REL    CONST UNTYP.           .text      28 
__lab182            REL    CONST UNTYP.           .text      40 
__lab183            REL    CONST UNTYP.           .text      10 
__lab184            REL    CONST UNTYP.           .text      10 
__lab185            REL    CONST UNTYP.           .text      C 
__lab186            REL    CONST UNTYP.           .text      8 
__lab187            REL    CONST UNTYP.           .text      20 
__lab188            REL    CONST UNTYP.           .text      34 
__lab189            REL    CONST UNTYP.           .text      20 
__lab19             REL    CONST UNTYP.           .text      488 
__lab190            REL    CONST UNTYP.           .text      48 
__lab191            REL    CONST UNTYP.           .text      18 
__lab192            REL    CONST UNTYP.           .text      40 
__lab193            REL    CONST UNTYP.           .text      48 
__lab194            REL    CONST UNTYP.           .text      C 
__lab195            REL    CONST UNTYP.           .text      1C 
__lab196            REL    CONST UNTYP.           .text      20 
__lab197            REL    CONST UNTYP.           .text      18 
__lab198            REL    CONST UNTYP.           .text      18 
__lab199            REL    CONST UNTYP.           .text      1C 
__lab2              REL    CONST UNTYP.           .text      54 
__lab20             REL    CONST UNTYP.           .text      0 
__lab200            REL    CONST UNTYP.           .text      C 
__lab201            REL    CONST UNTYP.           .text      2C 
__lab202            REL    CONST UNTYP.           .text      1C 
__lab203            REL    CONST UNTYP.           .text      10 
__lab204            REL    CONST UNTYP.           .text      14 
__lab205            REL    CONST UNTYP.           .text      14 
__lab206            REL    CONST UNTYP.           .text      C 
__lab207            REL    CONST UNTYP.           .text      14 
__lab208            REL    CONST UNTYP.           .text      C 
__lab209            REL    CONST UNTYP.           .text      24 
__lab21             REL    CONST UNTYP.           .text      18 
__lab210            REL    CONST UNTYP.           .text      5C 
__lab211            REL    CONST UNTYP.           .text      B4 
__lab212            REL    CONST UNTYP.           .text      118 
__lab213            REL    CONST UNTYP.           .text      0 
__lab214            REL    CONST UNTYP.           .text      18 
__lab215            REL    CONST UNTYP.           .text      1C 
__lab216            REL    CONST UNTYP.           .text      2C 
__lab217            REL    CONST UNTYP.           .text      50 
__lab218            REL    CONST UNTYP.           .text      84 
__lab219            REL    CONST UNTYP.           .text      90 
__lab22             REL    CONST UNTYP.           .text      1C 
__lab220            REL    CONST UNTYP.           .text      B0 
__lab221            REL    CONST UNTYP.           .text      BC 
__lab222            REL    CONST UNTYP.           .text      D8 
__lab223            REL    CONST UNTYP.           .text      F4 
__lab224            REL    CONST UNTYP.           .text      114 
__lab225            REL    CONST UNTYP.           .text      12C 
__lab226            REL    CONST UNTYP.           .text      14C 
__lab227            REL    CONST UNTYP.           .text      0 
__lab228            REL    CONST UNTYP.           .text      1C 
__lab229            REL    CONST UNTYP.           .text      20 
__lab23             REL    CONST UNTYP.           .text      0 
__lab230            REL    CONST UNTYP.           .text      24 
__lab231            REL    CONST UNTYP.           .text      28 
__lab232            REL    CONST UNTYP.           .text      0 
__lab233            REL    CONST UNTYP.           .text      20 
__lab234            REL    CONST UNTYP.           .text      24 
__lab235            REL    CONST UNTYP.           .text      28 
__lab236            REL    CONST UNTYP.           .text      2C 
__lab237            REL    CONST UNTYP.           .text      30 
__lab238            REL    CONST UNTYP.           .text      0 
__lab239            REL    CONST UNTYP.           .text      24 
__lab24             REL    CONST UNTYP.           .text      0 
__lab240            REL    CONST UNTYP.           .text      28 
__lab241            REL    CONST UNTYP.           .text      2C 
__lab242            REL    CONST UNTYP.           .text      30 
__lab243            REL    CONST UNTYP.           .text      34 
__lab244            REL    CONST UNTYP.           .text      38 
__lab245            REL    CONST UNTYP.           .text      3C 
__lab246            REL    CONST UNTYP.           .text      40 
__lab247            REL    CONST UNTYP.           .text      68 
__lab248            REL    CONST UNTYP.           .text      7C 
__lab249            REL    CONST UNTYP.           .text      88 
__lab25             REL    CONST UNTYP.           .text      0 
__lab250            REL    CONST UNTYP.           .text      30 
__lab251            REL    CONST UNTYP.           .text      A8 
__lab252            REL    CONST UNTYP.           .text      D8 
__lab253            REL    CONST UNTYP.           .text      F4 
__lab254            REL    CONST UNTYP.           .text      28 
__lab255            REL    CONST UNTYP.           .text      8C 
__lab256            REL    CONST UNTYP.           .text      94 
__lab257            REL    CONST UNTYP.           .text      64 
__lab258            REL    CONST UNTYP.           .text      70 
__lab259            REL    CONST UNTYP.           .text      7C 
__lab26             REL    CONST UNTYP.           .text      0 
__lab260            REL    CONST UNTYP.           .text      20 
__lab261            REL    CONST UNTYP.           .text      3C 
__lab262            REL    CONST UNTYP.           .text      44 
__lab263            REL    CONST UNTYP.           .text      C 
__lab264            REL    CONST UNTYP.           .text      10 
__lab265            REL    CONST UNTYP.           .text      C 
__lab266            REL    CONST UNTYP.           .text      34 
__lab267            REL    CONST UNTYP.           .text      38 
__lab268            REL    CONST UNTYP.           .text      3C 
__lab269            REL    CONST UNTYP.           .text      40 
__lab27             REL    CONST UNTYP.           .text      0 
__lab270            REL    CONST UNTYP.           .text      44 
__lab271            REL    CONST UNTYP.           .text      7C 
__lab272            REL    CONST UNTYP.           .text      A0 
__lab273            REL    CONST UNTYP.           .text      A8 
__lab274            REL    CONST UNTYP.           .text      D8 
__lab275            REL    CONST UNTYP.           .text      100 
__lab276            REL    CONST UNTYP.           .text      10 
__lab277            REL    CONST UNTYP.           .text      20 
__lab278            REL    CONST UNTYP.           .text      24 
__lab279            REL    CONST UNTYP.           .text      28 
__lab28             REL    CONST UNTYP.           .text      14 
__lab280            REL    CONST UNTYP.           .text      2C 
__lab281            REL    CONST UNTYP.           .text      30 
__lab282            REL    CONST UNTYP.           .text      34 
__lab283            REL    CONST UNTYP.           .text      38 
__lab284            REL    CONST UNTYP.           .text      3C 
__lab285            REL    CONST UNTYP.           .text      A0 
__lab29             REL    CONST UNTYP.           .text      18 
__lab3              REL    CONST UNTYP.           .text      60 
__lab30             REL    CONST UNTYP.           .text      0 
__lab31             REL    CONST UNTYP.           .text      14 
__lab32             REL    CONST UNTYP.           .text      18 
__lab33             REL    CONST UNTYP.           .text      0 
__lab34             REL    CONST UNTYP.           .text      74 
__lab35             REL    CONST UNTYP.           .text      0 
__lab36             REL    CONST UNTYP.           .text      0 
__lab37             REL    CONST UNTYP.           .text      0 
__lab38             REL    CONST UNTYP.           .text      0 
__lab39             REL    CONST UNTYP.           .text      0 
__lab4              REL    CONST UNTYP.           .text      1C4 
__lab40             REL    CONST UNTYP.           .text      0 
__lab41             REL    CONST UNTYP.           .text      0 
__lab42             REL    CONST UNTYP.           .text      2C 
__lab43             REL    CONST UNTYP.           .text      30 
__lab44             REL    CONST UNTYP.           .text      0 
__lab45             REL    CONST UNTYP.           .text      0 
__lab46             REL    CONST UNTYP.           .text      0 
__lab47             REL    CONST UNTYP.           .text      54 
__lab48             REL    CONST UNTYP.           .text      0 
__lab49             REL    CONST UNTYP.           .text      0 
__lab5              REL    CONST UNTYP.           .text      200 
__lab50             REL    CONST UNTYP.           .text      0 
__lab51             REL    CONST UNTYP.           .text      C 
__lab52             REL    CONST UNTYP.           .text      0 
__lab53             REL    CONST UNTYP.           .text      C 
__lab54             REL    CONST UNTYP.           .text      0 
__lab55             REL    CONST UNTYP.           .text      C 
__lab56             REL    CONST UNTYP.           .text      0 
__lab57             REL    CONST UNTYP.           .text      C 
__lab58             REL    CONST UNTYP.           .text      0 
__lab59             REL    CONST UNTYP.           .text      2C 
__lab6              REL    CONST UNTYP.           .text      218 
__lab60             REL    CONST UNTYP.           .text      30 
__lab61             REL    CONST UNTYP.           .text      34 
__lab62             REL    CONST UNTYP.           .text      38 
__lab63             REL    CONST UNTYP.           .text      3C 
__lab64             REL    CONST UNTYP.           .text      40 
__lab65             REL    CONST UNTYP.           .text      44 
__lab66             REL    CONST UNTYP.           .text      C 
__lab67             REL    CONST UNTYP.           .text      C 
__lab68             REL    CONST UNTYP.           .text      C 
__lab69             REL    CONST UNTYP.           .text      C 
__lab7              REL    CONST UNTYP.           .text      2D0 
__lab70             REL    CONST UNTYP.           .text      C 
__lab71             REL    CONST UNTYP.           .text      C 
__lab72             REL    CONST UNTYP.           .text      24 
__lab73             REL    CONST UNTYP.           .text      C 
__lab74             REL    CONST UNTYP.           .text      14 
__lab75             REL    CONST UNTYP.           .text      40 
__lab76             REL    CONST UNTYP.           .text      18 
__lab77             REL    CONST UNTYP.           .text      18 
__lab78             REL    CONST UNTYP.           .text      30 
__lab79             REL    CONST UNTYP.           .text      8 
__lab8              REL    CONST UNTYP.           .text      2E4 
__lab80             REL    CONST UNTYP.           .text      8 
__lab81             REL    CONST UNTYP.           .text      30 
__lab82             REL    CONST UNTYP.           .text      30 
__lab83             REL    CONST UNTYP.           .text      24 
__lab84             REL    CONST UNTYP.           .text      18 
__lab85             REL    CONST UNTYP.           .text      24 
__lab86             REL    CONST UNTYP.           .text      C 
__lab87             REL    CONST UNTYP.           .text      C 
__lab88             REL    CONST UNTYP.           .text      8 
__lab89             REL    CONST UNTYP.           .text      78 
__lab9              REL    CONST UNTYP.           .text      2F4 
__lab90             REL    CONST UNTYP.           .text      94 
__lab91             REL    CONST UNTYP.           .text      B0 
__lab92             REL    CONST UNTYP.           .text      C0 
__lab93             REL    CONST UNTYP.           .text      E0 
__lab94             REL    CONST UNTYP.           .text      F0 
__lab95             REL    CONST UNTYP.           .text      34 
__lab96             REL    CONST UNTYP.           .text      44 
__lab97             REL    CONST UNTYP.           .text      48 
__lab98             REL    CONST UNTYP.           .text      78 
__lab99             REL    CONST UNTYP.           .text      AC 
_fillRAM            REL    CONST UNTYP.           .text      7 
_fillSTACKS         REL    CONST UNTYP.           .text      13 
_wPLLlock           REL    CONST UNTYP.           .text      88 
c_32by32to64mul     ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
c_64by32div         ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
endif               REL    CONST UNTYP.           .text      3B4 
if                  REL    CONST UNTYP.           .text      3A8 
msg_CO              REL    CONST UNTYP.           .text      0 
msg_FISH            REL    CONST UNTYP.           .text      0 
msg_FISH_TIMESTAMP  REL    CONST UNTYP.           .text      44 
msg_MY_OK           REL    CONST UNTYP.           .text      51 
msg_RUN             REL    CONST UNTYP.           .text      0 
msg_cr              REL    CONST UNTYP.           .text      A 
msg_dictfull        REL    CONST UNTYP.           .text      8A 
msg_dictspace       REL    CONST UNTYP.           .text      1C 
msg_forget_fish     REL    CONST UNTYP.           .text      4E 
msg_forget_saved    REL    CONST UNTYP.           .text      6B 
msg_number_error    REL    CONST UNTYP.           .text      EB 
msg_paren_err       REL    CONST UNTYP.           .text      2E 
msg_qcomp           REL    CONST UNTYP.           .text      147 
msg_qexec           REL    CONST UNTYP.           .text      160 
msg_qpair           REL    CONST UNTYP.           .text      11B 
msg_qstack          REL    CONST UNTYP.           .text      103 
msg_questionmark    REL    CONST UNTYP.           .text      6 
msg_uvfull          REL    CONST UNTYP.           .text      A7 
msg_uvspace         REL    CONST UNTYP.           .text      11 
msg_word_error      REL    CONST UNTYP.           .text      DD 
msg_wordexists      REL    CONST UNTYP.           .text      C7 
rxRDY?              REL    CONST UNTYP.           .text      5 
ssNEXT1             REL    CONST UNTYP.           .text      1 
thispfa             REL    CONST UNTYP.           .text      37 
tt1                 REL    CONST UNTYP.           .text      3C 
tt2                 REL    CONST UNTYP.           .text      40 
txRDY?              REL    CONST UNTYP.           .text      5 


##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#        Bytes: 17941        #
##############################



