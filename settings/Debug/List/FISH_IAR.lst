###############################################################################
#                                                                             #
#     IAR Assembler V6.60.1.5097/W32 for ARM 13/Oct/2013  02:52:53            #
#     Copyright 1999-2013 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\FISH_IAR.s#
#           List file     =  C:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\Debug\List\FISH_IAR.lst#
#           Object file   =  C:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\Debug\Obj\FISH_IAR.o#
#           Command line  =  C:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\FISH_IAR.s #
#                            -OC:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\Debug\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LC:\Documents and Settings\cw\My Documents\AllForth\AllFig\FISH IAR\IAR Port\Debug\List\ #
#                            -cA -t8 -xDI --cpu Cortex-M0 --fpu None          #
#                                                                             #
###############################################################################

    1                           //-----------------------------------------===
                                ========--------------------------
    2                           //FISH (FIG-ISH FORTH) for the NXP ARM Cortex
                                 series SystemsOnaChip (SoC).
    3                           //Designed for rapid ARM SoC coding, for fun,
                                 education and product development.
    4                           //Tested: NXP UM11049 board and NXP LPC1114FD/
                                102 chip with 32kFlash and 4kRam.
    5                           //FINAL CLOCK REQUIREMENTS GO HERE
    6                           //ARMv6 Cortex M0 uses a 32 bit cpu and the
                                 mixed 16/32 bit Thumb instruction.
    7                           //Register limits and instruction differences
                                 from other Cortex chips are ugly.
    8                           //FISH masks the smell very well. FISH will be
                                 the same for all ARM variants.
    9                           //--------------------------------------------
                                ----------------------------------
   10                           //FISH is all uppercase! INCLUDING HEX NUMBERS
                                 - UPPER CASE A-F
   11                           //FISH starts up in Hex, enforced by COLD,
                                 ABORT and BYE
   12                           //True flags are any non zero number thru
                                 -1
   13                           //FISH uses serial I/O to communicate thru
                                 UART0: 8n1, XON/XOFF 9600 baud.
   14                           //--------------------------------------------
                                ----------------------------------
   15                           
   16                            SECTION .text : CONST (2)
   17                           msg_FISH_VERSION:
   18    00000000 46495348202D2         DC8     "FISH - AUTOFORGET FIXED,
                                                 ?SERIAL INPUT HW FAIL?:
                                                 01:00am 13oct2013"
                  04155544F464F
                  5247455420464
                  95845442C203F
                  53455249414C2
                  0494E50555420
                  4857204641494
                  C3F3A2030313A
                  3030616D20313
                  36F6374323031
                  3300         
   19                           msg_MY_OK:
   20    00000043 206F6B2C20676         DC8     " ok, go fish!"
                  F206669736821
                  00           
   21                           
   22                           #include "ioLPC1114header.s"
   23                           
   24                           //--------------------------------------------
                                ----------------------------------
   25                           //      #defines are for system wide
                                 control
   26                           
   27                           #define XON_XOFF        // USE XON_XOFF FLOW
                                 CONTROL
   28                           ;#define DEBUG          // exclude non-release
                                 stuff like uartcal etc
   29                           ;#define IO2TP          // I/O at NOOP
                                 breakpoints using TIB and PAD.
   30                           ;#define BREAK_KEY      // if Break key
                                 detection supported.
   31                           
   32                           //--------------------------------------------
                                ----------------------------------
   33                           //      EQUATES are for REAL VALUES used in
                                 FISH assembly code
   34                           
   35                           DEFAULT_BAUD    EQU     9600            //
                                 9600 until UART0_INIT USED
   36                           XON_CHAR        EQU     17              //
                                 ASCII DECIMAL XON_CHAR
   37                           XOFF_CHAR       EQU     19              //
                                 ASCII DECIMAL XOFF_CHAR
   38                           IOBUFSIZE       EQU     96              // For
                                 Tib and Pad
   39                           MAXWORDLEN      EQU     31              //
                                 magic!!! for ID. <<<<<<<<<<<<<<<<<<<<
   40                           
   41                           RAMstart        EQU     0x10000000
   42                           RAMend          EQU     0x10001000      //
                                 LPC1114FD/102 32k/4k STP ATEAM BOARD
   43                           //RAMend        EQU     0x10002000      //
                                 LPC1114/301 32k/8k NXP BOARD 0M11049
   44                           
   45                           // RESERVE SPACE FOR IAP PROGRAMMING
                                 STACK
   46                           // IAR PROJECT->LINKER->COMFIG->EDIT->MEMORY
                                 REGIONS->RAM->END<<<<<<<<<<<<<<<<<
   47                           IAPSTACKEND     EQU     0x10000FE0      //
                                 0x10000FE0 VALUES SET BY FISH
   48                           
   49                           // RESERVE SPACE FOR CSTACK
   50                           // IAR PROJECT->LINKER->COMFIG->EDIT->STACK/HE
                                AP SIZES<<<<<<<<<<<<<<<<<<<<<<<<<
   51                           // FISH SETS THESE VALUES TO 0x40
   52                           
   53                           IAPCALL         EQU     0x1FFF1FF1      //
                                 Call Address of IAP routine
   54                           STACKSIZE       EQU     32*4            //
                                 SHOOULD BE GOOD - 120 BYTES 0x78
   55                           
   56                           //--------------------------------------------
                                ----------------------------------
   57                           // RESERVE SPACE AFTER .bss FOR FISH STACKS,
                                 AND UNINITIALIZED RAM
   58                           
   59                           PINIT   EQU     (IAPSTACKEND)           //
                                 FISH PARAMETER STACK in register p
   60                           RINIT   EQU     (PINIT - STACKSIZE)     //
                                 FISH RETURN STACK in register r
   61                           FSEND   EQU     (RINIT - STACKSIZE)     //
                                 FISH END OF RETURN STACK ADDR
   62                           
   63                           // Uninitialized RAM is between CSTACK$$Limit
                                 and RINIT-(size)
   64                           // RECALCULATE IF ANY NEW _UV'S ADDED OF
                                 STCKSIZE CHANGED<<<<<<<<<<<<<<<<<<<<<<<
   65                           // CSTACK AND HEAP IF ALLOCATED FOLLOWS .bss (
                                 FOLLOWING FROM SYM FILE )
   66                           
   67                           UNINITRAMBASE   EQU     0x10000C80      //
                                 ROUND UP CSTACK$$Limit
   68                           UNINITRAMEND    EQU     FSEND-4         //
                                 UNINT TO HERE
   69                           
   70                           // 10000c30 b WARNING
   71                           // 10000c34 b ??i
   72                           // 10000c38 B CSTACK$$Base
   73                           // 10000c78 B CSTACK$$Limit
   74                           // 10000f6a a RINIT
   75                           // 10000fe2 a IAPSTACKEND
   76                           // 10000fe2 a PINIT
   77                           // 10001000 a RAMend
   78                           
   79                           // USED FOR SAVING BAUDRATE BETWEEN RESETS AND
                                 HARD FAULT RESETS
   80                           
   81                           #define DBAUD   UNINITRAMBASE   // .bss
                                 zeroing out one word past WARNING
   82                           #define UBAUD   UNINITRAMBASE+4
   83                           
   84                           //--------------------------------------------
                                ----------------------------------
   85                           //      RESERVE SPACE FOR FISH SYSTEM VARS AND
                                 BUFFERS IN .bss
   86                           
   87                              SECTION .bss : DATA (2)
   88                           SYSCLOCK        DS32    1               //
                                 MUST BE SET AT STARTUP = FULL MHZ #
   89                           FPA:            DS32    1               //
                                 FPADDR
   90                           FPC:            DS32    1               //
                                 FPCURR
   91                           FPU:            DS32    1               //
                                 FPUSER
   92                           // The above 4 words are the SIGNATURE for
                                 saved code in a flash page(0x1-7000).
   93                           // The FISH Dictionary starts 0x10 bytes after
                                 RBASE (RAMstart)
   94                           
   95                           ORIG:           DS8     2600            //
                                 Dictionary at beginning of RAM
   96                           PAD:            DS8     IOBUFSIZE+4     // +4
                                 to protect following VAR's
   97                           RAMVARSPACE:    DS8     24*4            //
                                 VAR's are in RAM
   98                           TIB:            DS8     IOBUFSIZE+4     // +4
                                 to protect following VAR's
   99                           
  100                            ALIGNRAM 2
  101                           
  102                           INITSO:         DS32    1       // INITS0_UV
                                 Parameter Stack Addr
  103                           INITRO:         DS32    1       // INITR0_UV
                                 Return Stack Addr
  104                           INITTIB:        DS32    1       // TIB_UV TIB
                                 Addr
  105                           IN:             DS32    1       // IN_UV
                                 Offset into tib
  106                           OUT:            DS32    1       // OUT_UV
                                 Offset into pad
  107                           UP:             DS32    1       // UP_UV See
                                 VARALLOT
  108                           FENCE:          DS32    1       // FENCE_UV
                                 See FORGET
  109                           DP:             DS32    1       // DP_UV IS
                                 See LATEST, COMMA, ALLOT AND CALLOT
  110                           CURRENT:        DS32    1       // CURRENT_UV
                                 See LATEST
  111                           CSTATE:         DS32    1       // STATE_UV
                                 Compile STATE
  112                           CSP:            DS32    1       // CSP_UV SCSP
                                 saves stack pos here
  113    00000B8C 01000000      CSDP            DC32    1       // Create saves
  DP here to restore if errors 
  114                           NBASE:          DS32    1       // BASE_UV for
                                 number conversion
  115                           NDPL:           DS32    1       // DPL_UV for
                                 number conversion
  116                           NHLD:           DS32    1       // HLD_UV for
                                 number conversion
  117                           WIDTH:          DS32    1       // WIDTH_UV
  118                           FLASHCMD:       DS32    4*5     // IAP Command
                                 Slot + 4 words of arguments
  119                           FLASHRET:       DS32    4*4     // IAP Results
                                 Slot + 3 words of arguments
  120                           WARNING:        DS32    1       // WARNING_UV
  121                           
  122                           //--------------------------------------------
                                ----------------------------------
  123                           //      FISH REGISTERS, STACK MACRO's and
                                 MESSAGES
  124                           
  125                           $FISHREGS.h
  126                           $FISHMACROS.h
  127                           $FISHMSGS.h
  128                           
  129                           //-----------------------------------FM0_COLD-
                                ----------------------------------
  130                           
  131                            SECTION .text : CODE (2)
  132                            PUBLIC FM0_COLD
  133                           __iar_program_start
  134                           FM0_COLD:
  135    00000000 0B49                  ldr     n, = 0x11111111         // fill
                                                 pattern
  136    00000002 0C48                  ldr     t, = RAMstart           
                                                 //
  137    00000004 0C4C                  ldr     y, = DBAUD              //
                                                 START OF UNINT RAM, @ END OF 
                                                 CSTACK
  138                           _fillRAM:
  139    00000006 0160                  str     n, [t]
  140    00000008 001D                  adds    t, t, #4
  141    0000000A A042                  cmp     t, y
  142    0000000C FBD3                  blo     _fillRAM
  143                           
  144                           // Preserve some uninitialized RAM for system
                                 use such as MYBAUD
  145                           
  146    0000000E 0B48                  ldr     t, = UNINITRAMEND     // This
                                                 should be 0x10000D00
  147    00000010 0B4C                  ldr     y, = (RAMend)
  148                           _fillSTACKS:
  149    00000012 0160                  str     n, [t]
  150    00000014 001D                  adds    t, t, #4
  151    00000016 A042                  cmp     t, y
  152    00000018 FBD3                  blo     _fillSTACKS
  153                           
  154                           //      PUSH lr to sp for BYE
  155    0000001A 81B0                  SUB     sp, sp, #4
  156    0000001C 7046                  MOV     t, lr
  157    0000001E 0090                  STR     t, [sp]
  158                           
  159    00000020 084F                  LDR     p, =PINIT
  160    00000022 094E                  LDR     r, =RINIT
  161    00000024 ....                  ADR     i, FM0_WARM
  162                                   PUSHi2r
  162.1  00000026 361F                  SUBS    r, r, #4        //  push i to
                                                 r, pre decrement r
  162.2  00000028 3560                  STR     i, [r]
  162.3                                 ENDM
  163                                   NEXT
  163.1  0000002A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  163                                   NEXT1
  163.1  0000002C 074B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  163.2  0000002E 9847                  BLX     x
  163.3                          LTORG
  163.4                          LTORG
  163.5  00000030 11111111               TABLE
  163.6  00000034 00000010              Reference on line 135 
  163.7  00000038 800C0010              Reference on line 136 
  163.8  0000003C DC0E0010              Reference on line 137 
  163.9  00000040 00100010              Reference on line 146 
  163.10 00000044 E00F0010              Reference on line 147 
  163.11 00000048 600F0010              Reference on line 159 
  163.12 0000004C ........              Reference on line 160 
  163.13                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  163.14                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  163.15                                ENDM
  163.16                                ENDM
  164                           
  165                            LTORG
  166                           
  167                           //---------------------------------FM0_WARM---
                                ----------------------------------
  168                           
  169                            SECTION .text : CONST (2)
  170                           FM0_WARM:
  171    00000000 ........              DC32    WARM                    // FISH
                                                                         Init
  172    00000004 ........              DC32    SoCinit                 //
                                                                         clks,
                                                                         systic
                                                                        k UART
                                                                         ifdef
                                                                         DEBUG
  173    00000008 ........              DC32    UART0_INIT
  174    0000000C .............         DC32    ULSR, DROP              //
                                                       CLEAR 0x96 INITIAL
                                                       VALUE
                  ...          
  175    00000014 .............         DC32    THREE, UIO, CSTORE      // In
                                                        case download can be
                                                        stopped
                  ...........  
  176                           
  177                           #ifdef IO2TP
  179                           #endif
  180                           
  181                           // TEST CODE GOES HERE
  182    00000020 ........              DC32 TASK
  183                           // TEST CODE END
  184                           
  185    00000024 ........FB000         DC32    LIT, 0xFB, EMIT // ANSI ASCII
                                                      CheckMark
                  000........  
  186    00000030 ........F7000         DC32    LIT, 0xF7, EMIT // ANSI ASCII 2
                                                      wavy's
                  000........  
  187    0000003C ........              DC32    CR
  188    00000040 ........              DC32    COLD    // WARM ABORT THEN
                                                         QUIT
  189    00000044 ........              DC32    RET2c   // shouldnt get here,
                                                         return to c main and
                                                         restart
  190                           
  191                           //------------------------ for meta-single-ste
                                pping ----------------------------
  192                           
  193                            SECTION .text : CODE (2)
  194                           
  195                           ssNEXT1:
  196    00000000 08CA                  LDM     w!, {x}         // contents of
                                                 cfa, (pfa), -> x, bump w to
                                                 cfa+4
  197    00000002 1847                  BX      x               // w preserves
                                                 cfa+4 (pfa) for DOCOL's
                                                 benefit
  198                           
  199                           //-----------------START OF DICTIONARY = Last
                                 word in search--------------------
  200                           //
  201                           //      NOOP NOOP:      ( -- )
  202                           
  203                           
  204                            SECTION .text : CONST (2)
  205                           NOOP_NFA:
  206    00000000 84                    DC8     0x84
  207    00000001 4E4F4F                DC8     'NOO'
  208    00000004 D0                    DC8     'P'+0x80
  209    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  210    00000008 00000000              DC32    0       // 0 START OF
  DICTIONARY = Last word in search
  211                           NOOP:
  212    0000000C ........              DC32    .+5
  213                            SECTION .text : CODE (2)
  214                                   NEXT
  214.1  00000000 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  214                                   NEXT1
  214.1  00000002 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  214.2  00000004 9847                  BLX     x
  214.3                          LTORG
  214.4  00000006 0000           LTORG
  214.5  00000008 ........               TABLE
  214.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  214.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  214.8                                 ENDM
  214.9                                 ENDM
  215                           
  216                           
  217                           //      EXEC EXEC:      ( cfa -- ) RENAMED:
                                 EXECUTE to EXEC
  218                           //      Execute a single word whose cfa is on
                                 the stack
  219                           
  220                            SECTION .text : CONST (2)
  221                           EXEC_NFA:
  222    00000000 84                    DC8     0x84
  223    00000001 455845                DC8     'EXE'
  224    00000004 C3                    DC8     'C'+0x80
  225    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  226    00000008 ........              DC32    NOOP_NFA
  227                           EXEC:
  228    0000000C ........              DC32    .+5
  229                            SECTION .text : CODE (2)
  230                                   POPp2w // as in xeq token at ToS setup
                                 for exec LDM     p!, {w}
  230.1                                 // as in xeq token at ToS setup for
                                 exec
  230.2  00000000 04CF                  LDM     p!, {w} // fetch memory p
  points to into {w}, inc i
  230.3                                 ENDM
  231                                   NEXT1
  231.1  00000002 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  231.2  00000004 9847                  BLX     x
  231.3                          LTORG
  231.4  00000006 0000           LTORG
  231.5  00000008 ........               TABLE
  231.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  231.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  231.8                                 ENDM
  232                           
  233                           
  234                           //      FLASH_SAVE FLASHSAVE:   ( -- ) Save
                                 RAM to Flash
  235                           
  236                            SECTION .text : CONST (2)
  237                           FLASHSAVE_NFA:
  238    00000000 8A                    DC8     0x80+10
  239    00000001 464C4153485F5         DC8     'FLASH_SAV'
                  34156        
  240    0000000A C5                    DC8     'E'+0x80
  241    0000000B FF             ALIGNROM 2,0xFFFFFFFF
  242    0000000C ........              DC32    EXEC_NFA
  243                           FLASHSAVE:
  244    00000010 ........              DC32    DOCOL
  245                           // FPADDR SHOULD BE SET BY WARM ON STARTUP
  246                           // FPCURR AND FPUSER SAVE
  247    00000014 .............         DC32    UP_UV, AT, FPUSER, STORE
                  .............
                  ......       
  248    00000024 .............         DC32    LATEST, TOFA, FPCURR,
                                                         STORE
                  .............
                  ......       
  249                           // SOMETHING TO SAVE TEST
  250    00000034 .............         DC32    LATEST, DBASE, LESSTHAN
                  ...........  
  251    00000040 ........              DC32    ZBRAN
  252    00000044 08000000              DC32     FS_BEGIN-.
  253                           
  254    00000048 ........              DC32    SEMIS
  255                           FS_BEGIN:
  256    0000004C .............         DC32    LATEST, DBASE, EQUAL
                  ...........  
  257    00000058 ........              DC32    ZBRAN
  258    0000005C 68000000              DC32     FS_RWORD-.
  259                           
  260                                   // AFTER LAST WORD TO RELOCATE DO
                                 THIS
  261    00000060 ........              DC32    FLASHWRITE
  262    00000064 .............         DC32    DBASE, DP_UV, STORE
                  ...........  
  263    00000070 .............         DC32    FPUSER, AT, UP_UV, STORE
                  .............
                  ......       
  264    00000080 .............         DC32    FPCURR, AT, CURRENT_UV,
                                                         STORE
                  .............
                  ......       
  265    00000090 .............         DC32    FPADDR, AT, LIT, 0x7000, EQUAL,
                                                         ZEQU
                  ...........00
                  700000.......
                  .........    
  266    000000A8 ........              DC32    ZBRAN
  267    000000AC 14000000              DC32     FS_EXIT-.
  268                           
  269    000000B0 ........00100         DC32    LIT, 0x1000, FPADDR, PSTORE
                  000..........
                  ......       
  270                           FS_EXIT:
  271    000000C0 ........              DC32    SEMIS
  272                           FS_RWORD:
  273    000000C4 .............         DC32    LATEST, RWORD
                  ...          
  274    000000CC ........              DC32    BRAN
  275    000000D0 7CFFFFFF              DC32     FS_BEGIN-.
  276                           
  277                           
  278                           //HEADERLESS    FPADDR FPADDR:  ( -- addr
                                 )
  279                           //      Flash Page Addreess variable.
  280                           
  281                            SECTION .text : CONST (2)
  282                           FPADDR:
  283    00000000 .............         DC32    DOCON, FPA
                  ...          
  284                           
  285                           
  286                           //HEADERLESS    FPCURR FPCURR:  ( -- addr
                                 )
  287                           //      Flash Page CURRENT variable.
  288                           
  289                            SECTION .text : CONST (2)
  290                           FPCURR:
  291    00000000 .............         DC32    DOCON, FPC
                  ...          
  292                           
  293                           
  294                           //HEADERLESS    FPUSER FPUSER:  ( -- addr
                                 )
  295                           //      Flash Page USER variable.
  296                           
  297                            SECTION .text : CONST (2)
  298                           FPUSER:
  299    00000000 .............         DC32    DOCON, FPU
                  ...          
  300                           
  301                           //HEADERLESS >FA >FA:   ( addr -- raddr
                                 )
  302                           //      Convert address to raddr using FPADDR,
                                 which must be initialized.
  303                           
  304                            SECTION .text : CONST (2)
  305                           TOFA:
  306    00000000 ........              DC32    .+5
  307                            SECTION .text : CODE (2)
  308                                   POP2t
  308.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
  308.2  00000002 3F1D                  ADDS    p, p, #4
  308.3                                 ENDM
  309    00000004 044A                  LDR             w, =0x0FFF
  310    00000006 1040                  ANDS            t, t, w
  311    00000008 044A                  LDR             w, =FPA
  312    0000000A 1268                  LDR             w,      [w]
  313    0000000C 1043                  ORRS            t, t, w
  314                                   TPUSH
  314                                   PUSHt   // push t to p, pre decrement
                                 p
  314.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
  314.2  00000010 3860                  STR     t, [p]
  314.3                                 ENDM
  314                                   NEXT
  314.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  314                                   NEXT1
  314.1  00000014 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  314.2  00000016 9847                  BLX     x
  314.3                          LTORG
  314.4                          LTORG
  314.5  00000018 FF0F0000               TABLE
  314.6  0000001C ........              Reference on line 309 
  314.7  00000020 ........              Reference on line 311 
  314.8                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  314.9                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  314.10                                ENDM
  314.11                                ENDM
  314.12                                ENDM
  315                            LTORG   //Always outside of code, else data
                                 in words
  316                           
  317                           
  318                           //HEADERLESS RWORD RWORD:       ( nfa --
                                 )
  319                           //      Relocate word to FPADDR relative
                                 addresses
  320                           //      Handle case of CON/VAR, PDOTQ and
                                 LIT
  321                           
  322                            SECTION .text : CONST (2)
  323                           RWORD:
  324    00000000 ........              DC32    DOCOL
  325    00000004 .............         DC32    DUP, IDDOT
                  ...          
  326    0000000C .............         DC32    PFA, DUP, TOR   // SAVE FOR
                                                      RELOCATING LFA
                  ...........  
  327    00000018 .............         DC32    CFA, DUP, AT
                  ...........  
  328    00000024 .............         DC32    LIT, DOCON
                  ...          
  329    0000002C ........              DC32    EQUAL
  330    00000030 ........              DC32    ZBRAN
  331    00000034 10000000              DC32     RW_BEGIN-.     // IF NOT A
                                                           COM
  332                           
  333    00000038 ........              DC32    DROP
  334    0000003C ........              DC32    BRAN
  335    00000040 C4000000              DC32     RW_LFA-.       // CASE OF
                                                         CON
  336                           
  337                           RW_BEGIN:
  338    00000044 .............         DC32    FOURP, DUP, AT  // NEXT WORD IN
                                                        BODY TO EVALATE
                  ...........  
  339                           
  340                           CFA_LIT:
  341    00000050 .............         DC32    LIT, LIT, EQUAL
                  ...........  
  342    0000005C ........              DC32    ZBRAN
  343    00000060 10000000              DC32     CFA_PDOTQ-.
  344                           
  345    00000064 ........              DC32    FOURP
  346    00000068 ........              DC32    BRAN
  347    0000006C D8FFFFFF              DC32     RW_BEGIN-.
  348                           
  349                           CFA_PDOTQ:
  350    00000070 .............         DC32    DUP, AT
                  ...          
  351    00000078 .............         DC32    LIT, PDOTQ, EQUAL
                  ...........  
  352    00000084 ........              DC32    ZBRAN
  353    00000088 20000000              DC32     CFA_SEMIS-.
  354                           
  355    0000008C .............         DC32    DUP, FOURP, CAT
                  ...........  
  356    00000098 ........              DC32    PLUS
  357    0000009C ........              DC32    ALIGNED
  358    000000A0 ........              DC32    BRAN
  359    000000A4 A0FFFFFF              DC32     RW_BEGIN-.
  360                           
  361                           CFA_SEMIS:
  362    000000A8 .............         DC32    DUP, AT         // USE THIS AS
                                                      UNTIL FLAG TO FINISH
                  ...          
  363    000000B0 .............         DC32    LIT, SEMIS, EQUAL
                  ...........  
  364    000000BC .............         DC32    ZEQU, ZBRAN
                  ...          
  365    000000C4 3C000000              DC32     RW_UNTIL-.
  366                           
  367    000000C8 .............         DC32    DUP, AT
                  ...          
  368    000000D0 .............         DC32    DBASE, GREATERTHAN
                  ...          
  369    000000D8 ........              DC32    ZBRAN
  370    000000DC 68FFFFFF              DC32     RW_BEGIN-.
  371                           
  372                           //      DC32    DUP, AT, VBASE, GREATERTHAN
  373                           //      DC32    ZBRAN, CFA_LIT-.
  374                           //              DC32 NOOP
  375    000000E0 .............         DC32    DUP, DUP, AT
                  ...........  
  376    000000EC .............         DC32    TOFA, SWAP, STORE
                  ...........  
  377    000000F8 ........              DC32    BRAN
  378    000000FC 48FFFFFF              DC32     RW_BEGIN-.     // ZERO UNTIL
                                                           BRANCH
  379                           
  380                           RW_UNTIL:
  381    00000100 ........              DC32    DROP
  382                           RW_LFA: // RELOCATE LFA AND SET CURRENT/LATEST
                                 TO NEXT WORD
  383    00000104 ........              DC32    FROMR
  384    00000108 .............         DC32    LFA, DUP, AT
                  ...........  
  385    00000114 ........              DC32    DUP
  386    00000118 .............         DC32    CURRENT_UV, STORE
                  ...          
  387    00000120 .............         DC32    TOFA, SWAP, STORE
                  ...........  
  388    0000012C ........              DC32    SEMIS
  389                           
  390                           
  391                           //HEADERLESS FLASHPREP FLASHPREP:       ( --
                                 )
  392                           //      PREPARE SECTORS FOR WRITE OPERATION
                                 USING FPADDR
  393                           
  394                            SECTION .text : CONST (2)
  395                           FLASHPREP:
  396    00000000 ........              DC32 .+5
  397                            SECTION .text : CODE (2)
  398    00000000 0648                  LDR     t, =FLASHCMD            // t
                                                     and n DO NOT SURVIVE
                                                     FLASHCALL
  399    00000002 0749                  LDR     n, =FLASHRET
  400    00000004 3222                  LDR     w, =50                  //
                                                 Prepare sector to write
  401    00000006 0260                  STR     w, [t]
  402    00000008 064B                  LDR     x, = FPA                //
                                                      DERIVE SECTOR
  403    0000000A 1A68                  LDR     w, [x]                  // FROM
                                                 PAGE ADDR
  404    0000000C 120B                  LSRS    w, w, #12               // BY
                                                 SHIFTING RIGHT BY 12
  405    0000000E 4260                  STR     w, [t,#4]
  406    00000010 8260                  STR     w, [t,#8]
  407    00000012 054B                  LDR     x, =IAPCALL
  408    00000014 9847                  BLX     x
  409                                   NEXT
  409.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  409                                   NEXT1
  409.1  00000018 044B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  409.2  0000001A 9847                  BLX     x
  409.3                          LTORG
  409.4                          LTORG
  409.5  0000001C ........               TABLE
  409.6  00000020 ........              Reference on line 398 
  409.7  00000024 ........              Reference on line 399 
  409.8  00000028 F11FFF1F              Reference on line 402 
  409.9  0000002C ........              Reference on line 407 
  409.10                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  409.11                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  409.12                                ENDM
  409.13                                ENDM
  410                            LTORG   //Always outside of code, else data
                                 in words
  411                           
  412                           
  413                           //HEADERLESS FLASHESEC FLASHESEC:       ( -- )
                                 FLASH ERASE SECTORS COMMAND
  414                           //      MUST USE FLASHPREP FIRST. USES
                                 FPADDR.
  415                           
  416                            SECTION .text : CONST (2)
  417                           FLASHESEC:
  418    00000000 ........              DC32 .+5
  419                            SECTION .text : CODE (2)
  420    00000000 0748                  LDR     t, =FLASHCMD    // t and n DO
                                                     NOT SURVIVE FLASHCALL
  421    00000002 0849                  LDR     n, =FLASHRET
  422    00000004 3422                  LDR     w, =52          // Prepare
                                                 sector to write
  423    00000006 0260                  STR     w, [t]
  424    00000008 074B                  LDR     x, = FPA        // DERIVE
                                                      SECTOR
  425    0000000A 1A68                  LDR     w, [x]          // FROM PAGE
                                                 ADDR
  426    0000000C 120B                  LSRS    w, w, #12       // BY SHIFTING
                                                 RIGHT BY 12
  427    0000000E 4260                  STR     w, [t,#4]
  428    00000010 8260                  STR     w, [t,#8]
  429    00000012 064A                  LDR     w, =50000
  430    00000014 C260                  STR     w, [t,#12]
  431    00000016 064B                  LDR     x, =IAPCALL
  432    00000018 9847                  BLX     x
  433                                   NEXT
  433.1  0000001A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  433                                   NEXT1
  433.1  0000001C 054B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  433.2  0000001E 9847                  BLX     x
  433.3                          LTORG
  433.4                          LTORG
  433.5  00000020 ........               TABLE
  433.6  00000024 ........              Reference on line 420 
  433.7  00000028 ........              Reference on line 421 
  433.8  0000002C 50C30000              Reference on line 424 
  433.9  00000030 F11FFF1F              Reference on line 429 
  433.10 00000034 ........              Reference on line 431 
  433.11                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  433.12                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  433.13                                ENDM
  433.14                                ENDM
  434                            LTORG   //Always outside of code, else data
                                 in words
  435                           
  436                           
  437                           //HEADERLESS FLASHCRTF FLASHCRTF:       ( --
                                 )
  438                           //      FLASH COPY RAM TO FLASH COMMAND USING
                                 FPADDR
  439                           
  440                            SECTION .text : CONST (2)
  441                           FLASHCRTF:
  442    00000000 ........              DC32 .+5
  443                            SECTION .text : CODE (2)
  444    00000000 0848                  LDR     t, =FLASHCMD
  445    00000002 0949                  LDR     n, =FLASHRET
  446    00000004 3322                  LDR     w, =51          // Copy Ram to
                                                 Flash
  447    00000006 0260                  STR     w, [t]
  448    00000008 084A                  LDR     w, =FPA
  449    0000000A 1268                  LDR     w, [w]
  450    0000000C 4260                  STR     w, [t,#4]
  451    0000000E 084A                  LDR     w, =0x10000000
  452    00000010 8260                  STR     w, [t,#8]
  453    00000012 084A                  LDR     w, =4096        //0x01000 [
                                                 FFF=4095 1000=4096 ]
  454    00000014 C260                  STR     w, [t,#0x0C]
  455    00000016 084A                  LDR     w, =50000       // USE SYSCLK
                                                 AND SHIFT RIGHT
  456    00000018 0261                  STR     w, [t,#0x10]
  457    0000001A 084B                  LDR     x, =IAPCALL
  458    0000001C 9847                  BLX     x
  459                                   NEXT                    // NO RETURN
                                 VALUE
  459.1  0000001E 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
  459                                   NEXT1
  459.1  00000020 074B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  459.2  00000022 9847                  BLX     x
  459.3                          LTORG
  459.4                          LTORG
  459.5  00000024 ........               TABLE
  459.6  00000028 ........              Reference on line 444 
  459.7  0000002C ........              Reference on line 445 
  459.8  00000030 00000010              Reference on line 448 
  459.9  00000034 00100000              Reference on line 451 
  459.10 00000038 50C30000              Reference on line 453 
  459.11 0000003C F11FFF1F              Reference on line 455 
  459.12 00000040 ........              Reference on line 457 
  459.13                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  459.14                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  459.15                                ENDM
  459.16                                ENDM
  460                           //      LDR     t, [n]          // RETURN
                                 STATUS CODE
  461                           //      APUSH
  462                            LTORG   //Always outside of code, else data
                                 in words
  463                           
  464                           
  465                           //      FLASH_FORGET FLASH_FORGET:      ( -- 
                                 ) FLASH CMDS TO ERASE PAGES 4-7
  466                           
  467                            SECTION .text : CONST (2)
  468                           FLASH_FORGET_NFA:
  469    00000000 8C                    DC8     0x80+12
  470    00000001 464C4153485F4         DC8     'FLASH_FORGE'
                  64F524745    
  471    0000000C D4                    DC8     'T'+0x80
  472    0000000D FFFFFF         ALIGNROM 2,0xFFFFFFFF
  473    00000010 ........              DC32    FLASHSAVE_NFA
  474                           FLASH_FORGET:
  475    00000014 ........              DC32    DOCOL
  476    00000018 ........00700         DC32    LIT, 0x7000, FPADDR, STORE
                  000..........
                  ......       
  477    00000028 .............         DC32    FLASHPREP, FLASHESEC
                  ...          
  478    00000030 ........00600         DC32    LIT, 0x6000, FPADDR, STORE
                  000..........
                  ......       
  479    00000040 .............         DC32    FLASHPREP, FLASHESEC
                  ...          
  480    00000048 ........00500         DC32    LIT, 0x5000, FPADDR, STORE
                  000..........
                  ......       
  481    00000058 .............         DC32    FLASHPREP, FLASHESEC
                  ...          
  482    00000060 ........00400         DC32    LIT, 0x4000, FPADDR, STORE
                  000..........
                  ......       
  483    00000070 .............         DC32    FLASHPREP, FLASHESEC
                  ...          
  484                           
  485                           //       RESET DICTIONARY POINTERS APPROPRIATE
                                LY 
  486    00000078 .............         DC32    DBASE, CAT              // If
                                                        there are words defined
                                                        in Ram
                  ...          
  487    00000080 ........80000         DC32    LIT, 0X80, ANDD         // they
                                                      will have this signature
                  000........  
  488    0000008C ........              DC32    ZBRAN                   // vs.
                                                                         interp
                                                                        reter
                                                                         string
                                                                        s from
                                                                         expect
  489    00000090 24000000              DC32     NORAMWORDS-.
  490                           
  491                           IARBUG_TASKADDR:
  492    00000094 .............         DC32    LIT, TASK_NFA           // Fish
                                                      in Flash starts
                                                      here
                  ...          
  493    0000009C .............         DC32    DBASE, PFA, LFA         // --
                                                        task_nfa lfa
                  ...........  
  494    000000A8 ........              DC32    STORE                   //
                                                                         repatc
                                                                        h to
                                                                         Fish
                                                                         in
                                                                         flash
  495    000000AC ........              DC32    BRAN
  496    000000B0 08000000              DC32     FFDONE-.
  497                           
  498                           NORAMWORDS:
  499                           
  500    000000B4 ........              DC32    FISH_ONLY               // else
                                                                         set to
                                                                         Fish
                                                                         no
                                                                         words
                                                                         in
                                                                         ram
  501                           
  502                           FFDONE:
  503    000000B8 ........              DC32    SEMIS
  504                           
  505                           
  506                           //HEADERLESS FLASHWRITE FLASHWRITE:     ( -- 
                                 )
  507                           //      FLASH SEQ OF CMDS TO COPY 4K RAM USING
                                 FPADDR
  508                           
  509                            SECTION .text : CONST (2)
  510                           FLASHWRITE:
  511    00000000 ........              DC32    DOCOL
  512    00000004 ........              DC32    HERE                    //
                                                                         FILL
  513    00000008 .............         DC32    LIT, RAMVARSPACE-1      // REST
                                                      OF DICTIONAIRY
                  ...          
  514    00000010 .............         DC32    HERE, SUBB
                  ...          
  515    00000018 ........FF000         DC32    LIT, 0xFF               // WITH
                                                      FF SO
                  000          
  516    00000020 ........              DC32    FILL                    // END
                                                                         OF
                                                                         DICT
                                                                         VISIBL
                                                                        E IN
                                                                         FLASH
  517    00000024 .............         DC32    FLASHPREP, FLASHESEC    // PREP
                                                            AND ERSASE
                                                            SECTOR
                  ...          
  518    0000002C .............         DC32    FLASHPREP, FLASHCRTF    // PREP
                                                            AND COPY RAM TO
                                                            SECTOR
                  ...          
  519    00000034 ........              DC32    SEMIS
  520                           
  521                           
  522                           //      CLS CLS:        ( -- )
  523                           //      Clear serial terminal screen using a
                                 formfeed character
  524                           
  525                            SECTION .text : CONST (2)
  526                           CLS_NFA:
  527    00000000 83                    DC8     0x83
  528    00000001 434C                  DC8     'CL'
  529    00000003 D3                    DC8     'S'+0x80
  530                            ALIGNROM 2,0xFFFFFFFF
  531    00000004 ........              DC32    FLASH_FORGET_NFA
  532                           CLS:
  533    00000008 ........              DC32    DOCOL
  534    0000000C ........              DC32    PDOTQ
  535    00000010 04                    DC8     4
  536    00000011 1B5B                  DC8     0x1B, 0x5B              // ESC[
                                                       = ANSI VT100 ESC
                                                       SETUP
  537    00000013 324A00                DC8     "2J"                    //
                                                 Clearscreen
  538    00000016 FFFF           ALIGNROM 2,0xFFFFFFFF
  539    00000018 ........              DC32    PDOTQ
  540    0000001C 04                    DC8     4
  541    0000001D 1B5B                  DC8     0x1B, 0x5B              // ESC[
                                                       = ANSI VT00 ESC
                                                       SETUP
  542    0000001F 3B4800                DC8     ";H"                     //
                                                  CURSORHOME ( upper left
                                                  corner )
  543    00000022 FFFF           ALIGNROM 2,0xFFFFFFFF
  544    00000024 ........              DC32    CR
  545    00000028 ........              DC32    SEMIS
  546                           
  547                           
  548                           //      DUMP DUMP:      ( addr n -- )
  549                           //      Print adrr and 4 columns of values
                                 until n printed.
  550                           //      Address and n must be even and a
                                 multiple of 4
  551                           //      by ARM Alignment convention else error
                                 message issued.
  552                           
  553                            SECTION .text : CONST (2)
  554                           DUMP_NFA:
  555    00000000 84                    DC8     0x84
  556    00000001 44554D                DC8     'DUM'
  557    00000004 D0                    DC8     'P'+0x80
  558    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  559    00000008 ........              DC32    CLS_NFA
  560                           DUMP:
  561    0000000C ........              DC32    DOCOL
  562    00000010 ........              DC32    CR
  563    00000014 .............         DC32    BASE_UV, AT
                  ...          
  564    0000001C .............         DC32    TWO, EQUAL              // TRUE
                                                      IF NOT = 2
                  ...          
  565    00000024 ........              DC32    ZBRAN
  566    00000028 18000000              DC32    DUMPARGS-.
  567    0000002C .............         DC32    LIT, msg_not_in_binary
                  ...          
  568    00000034 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  569    0000003C ........              DC32    SEMIS//
  570                           
  571                           DUMPARGS:     
  572    00000040 .............         DC32    DUP, QEVEN
                  ...          
  573    00000048 .............         DC32    OVER, QADDR
                  ...          
  574    00000050 .............         DC32    ZERO, XDO
                  ...          
  575                           DUMP1:
  576    00000058 ........              DC32    CR
  577    0000005C .............         DC32    DUP, LIT, 10, DOTRU
                  ...0A000000..
                  ......       
  578    0000006C .............         DC32    FOUR, ZERO, XDO
                  ...........  
  579                           DUMP2:
  580    00000078 .............         DC32    DUP, AT, LIT, 14, DOTRU
                  ...........0E
                  000000.......
                  .            
  581    0000008C ........              DC32    FOURP
  582    00000090 ........              DC32    XLOOP
  583    00000094 E4FFFFFF              DC32    DUMP2-.
  584                           
  585    00000098 .............         DC32    FOUR, XPLOOP
                  ...          
  586    000000A0 B8FFFFFF              DC32    DUMP1-.
  587                           
  588    000000A4 .............         DC32    DROP, CR
                  ...          
  589    000000AC ........              DC32    SEMIS
  590                           
  591                           
  592                           //       VBASE VBASE:   ( -- addr )
  593                           //       Return base addr of VAR's .
  594                           
  595                            SECTION .text : CONST (2)
  596                           VBASE_NFA:
  597    00000000 85                    DC8     0x85
  598    00000001 56424153              DC8     'VBAS'
  599    00000005 C5                    DC8     'E'+0x80
  600    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  601    00000008 ........              DC32    DUMP_NFA
  602                           VBASE:
  603    0000000C .............         DC32    DOCON,  RAMVARSPACE
                  ...          
  604                           
  605                           
  606                           //       DBASE DBASE:   ( -- addr )
  607                           //       Return base addr of the dictionary.
  608                           
  609                            SECTION .text : CONST (2)
  610                           DBASE_NFA:
  611    00000000 85                    DC8     0x85
  612    00000001 44424153              DC8     'DBAS'
  613    00000005 C5                    DC8     'E'+0x80
  614    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  615    00000008 ........              DC32    VBASE_NFA
  616                           DBASE:
  617    0000000C .............         DC32    DOCON,  ORIG
                  ...          
  618                           
  619                           
  620                           //       RBASE RBASE:   ( -- addr )
  621                           //       Return base addr of RAM.
  622                           
  623                            SECTION .text : CONST (2)
  624                           RBASE_NFA:
  625    00000000 85                    DC8     0x85
  626    00000001 52424153              DC8     'RBAS'
  627    00000005 C5                    DC8     'E'+0x80
  628    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
  629    00000008 ........              DC32    DBASE_NFA
  630                           RBASE:
  631    0000000C ........00000         DC32    DOCON,  RAMstart
                  010          
  632                           
  633                           
  634                           //      SYSCLK SYSCLK:  ( -- value )   
                                 p
  635                           
  636                            SECTION .text : CONST (2)
  637                           SYSCLK_NFA:
  638    00000000 86                    DC8     0x86
  639    00000001 535953434C            DC8     'SYSCL'
  640    00000006 CB                    DC8     'K'+0x80
  641    00000007 FF             ALIGNROM 2,0xFFFFFFFF
  642    00000008 ........              DC32    RBASE_NFA
  643                           SYSCLK:
  644    0000000C ........              DC32    .+5
  645                            SECTION .text : CODE (2)
  646    00000000 0349                  LDR     n, =SYSCLOCK    // SystemCoreCl
                                                    ock
  647    00000002 0868                  LDR     t, [n]
  648                                   TPUSH   // Push -- t
  648                                   PUSHt   // push t to p, pre decrement
                                 p
  648.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p,
                                                                 pre decrement
                                                                 p
  648.2  00000006 3860                  STR     t, [p]
  648.3                                 ENDM
  648                                   NEXT
  648.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                              incr i after
  648                                   NEXT1
  648.1  0000000A 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  648.2  0000000C 9847                  BLX     x
  648.3                          LTORG
  648.4  0000000E 0000           LTORG
  648.5  00000010 ........               TABLE
  648.6  00000014 ........              Reference on line 646 
  648.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  648.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  648.9                                 ENDM
  648.10                                ENDM
  648.11                                ENDM
  649                           
  650                            LTORG   //Always outside of code, else data
                                 in words
  651                           
  652                           
  653                           //HEADERLESS DOTBASE:   ( n -- )
  654                           //       Pass BASE to DOT or U.
  655                           //       Used by .B .D and .H
  656                           
  657                            SECTION .text : CONST (2)
  658                           DOTBASE:
  659    00000000 ........              DC32    DOCOL
  660    00000004 .............         DC32    BASE_UV, AT, TOR
                  ...........  
  661    00000010 .............         DC32    DUP, BASE_UV, STORE
                  ...........  
  662    0000001C ........0A000         DC32    LIT, 10, EQUAL
                  000........  
  663    00000028 ........              DC32    ZBRAN
  664    0000002C 10000000              DC32    DBUSEDUDOT-.
  665    00000030 ........              DC32    DOT
  666    00000034 ........              DC32    BRAN
  667    00000038 08000000              DC32    DBUSEDOT-.
  668                           DBUSEDUDOT:
  669    0000003C ........              DC32    UDOT
  670                           DBUSEDOT:
  671    00000040 .............         DC32    FROMR, BASE_UV, STORE
                  ...........  
  672    0000004C ........              DC32    SEMIS
  673                           
  674                           
  675                           //      .D DOTDEC:      ( n -- )
  676                           //      Prints TOS in DECIMAL using DOT, not
                                 affecting Base in the system
  677                           
  678                            SECTION .text : CONST (2)
  679                           DOTDEC_NFA:
  680    00000000 82                    DC8     0x82
  681    00000001 2E                    DC8     '.'
  682    00000002 C4                    DC8     'D'+0x80
  683    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  684    00000004 ........              DC32    SYSCLK_NFA
  685                           DOTDEC:
  686    00000008 ........              DC32    DOCOL
  687    0000000C ........0A000         DC32    LIT, 10, DOTBASE
                  000........  
  688    00000018 ........              DC32    SEMIS
  689                           
  690                           
  691                           //      .B DOTBIN:      ( n -- )
  692                           //      Prints TOS in BINARY using DOT, not
                                 affecting Base in the system
  693                           
  694                            SECTION .text : CONST (2)
  695                           DOTBIN_NFA:
  696    00000000 82                    DC8     0x82
  697    00000001 2E                    DC8     '.'
  698    00000002 C2                    DC8     'B'+0x80
  699    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  700    00000004 ........              DC32    DOTDEC_NFA
  701                           DOTBIN:
  702    00000008 ........              DC32    DOCOL
  703    0000000C .............         DC32    TWO, DOTBASE
                  ...          
  704    00000014 ........              DC32    SEMIS
  705                           
  706                           
  707                           //      .H DOTHEX:      ( n -- )
  708                           //      Prints TOS in Hex using DOT, not
                                 affecting Base in the system
  709                           
  710                            SECTION .text : CONST (2)
  711                           DOTHEX_NFA:
  712    00000000 82                    DC8     0x82
  713    00000001 2E                    DC8     '.'
  714    00000002 C8                    DC8     'H'+0x80
  715    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  716    00000004 ........              DC32    DOTBIN_NFA
  717                           DOTHEX:
  718    00000008 ........              DC32    DOCOL
  719    0000000C ........10000         DC32    LIT, 16, DOTBASE
                  000........  
  720    00000018 ........              DC32    SEMIS
  721                           
  722                           
  723                           //      .S DOTS:        ( -- )
  724                           //      Nondestructively print items on stack
                                 in CURRENT BASE.
  725                           //      Prints TOS 1rst, i.e. TOS, NOS,
                                 etc.
  726                           
  727                            SECTION .text : CONST (2)
  728                           DOTS_NFA:
  729    00000000 82                    DC8     0x82
  730    00000001 2E                    DC8     '.'
  731    00000002 D3                    DC8     'S'+0x80
  732    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  733    00000004 ........              DC32    DOTHEX_NFA
  734                           DOTS:
  735    00000008 ........              DC32    DOCOL
  736    0000000C .............         DC32    INITSO_UV, AT, SPAT, FOURP
                  .............
                  ......       
  737    0000001C .............         DC32    EQUAL, ZEQU, ZBRAN
                  ...........  
  738    00000028 58000000              DC32    DOTSEND-.                      
                                                         // IF NOTHING ON
                                                         STACK
  739                           
  740    0000002C .............         DC32    INITSO_UV, AT, SPAT, FOURP
                  .............
                  ......       
  741    0000003C ........              DC32    XDO
  742                           DOTSLOOP:
  743    00000040 .............         DC32    I, AT
                  ...          
  744    00000048 .............         DC32    BASE_UV, AT
                  ...          
  745    00000050 ........0A000         DC32    LIT, 10, EQUAL                 
                                                      // 
                  000........  
  746    0000005C ........              DC32    ZBRAN                          
  // NOT = DECIMAL
  747    00000060 10000000              DC32    DBSUSEDUDOT-.
  748    00000064 ........              DC32    DOT
  749    00000068 ........              DC32    BRAN
  750    0000006C 08000000              DC32    DBSUSEDOT-.
  751                           DBSUSEDUDOT:
  752    00000070 ........              DC32    UDOT
  753                           DBSUSEDOT:
  754                           
  755    00000074 .............         DC32    FOUR, XPLOOP
                  ...          
  756    0000007C C4FFFFFF              DC32    DOTSLOOP-.
  757                           
  758                           DOTSEND:
  759    00000080 ........              DC32    SEMIS
  760                           
  761                           //HEADERLESS DOTSBASE:   ( n -- ) Pass BASE TO
                                 .S
  762                           
  763                            SECTION .text : CONST (2)
  764                           DOTSBASE:
  765    00000000 ........              DC32    DOCOL
  766    00000004 .............         DC32    BASE_UV, AT, TOR
                  ...........  
  767    00000010 .............         DC32    BASE_UV, STORE, DOTS
                  ...........  
  768    0000001C .............         DC32    FROMR, BASE_UV, STORE
                  ...........  
  769    00000028 ........              DC32    SEMIS
  770                           
  771                           
  772                           //      .SB DOTSBIN:    ( -- )
  773                           //      Nondestructively print items on stack
                                 in BINARY, preserving BASE.
  774                           //      Prints TOS 1rst, i.e. TOS, NOS,
                                 etc.
  775                           
  776                            SECTION .text : CONST (2)
  777                           DOTSBIN_NFA:
  778    00000000 83                    DC8     0x83
  779    00000001 2E53                  DC8     '.S'
  780    00000003 C2                    DC8     'B'+0x80
  781                            ALIGNROM 2,0xFFFFFFFF
  782    00000004 ........              DC32    DOTS_NFA
  783                           DOTSBIN:
  784    00000008 ........              DC32    DOCOL
  785    0000000C .............         DC32    TWO, DOTSBASE
                  ...          
  786    00000014 ........              DC32    SEMIS
  787                           
  788                           
  789                           //      .SD DOTSDEC:    ( -- )
  790                           //      Nondestructively print items on stack
                                 in DECIMAL, preserving BASE.
  791                           //      Prints TOS 1rst, i.e. TOS, NOS,
                                 etc.
  792                           
  793                            SECTION .text : CONST (2)
  794                           DOTSDEC_NFA:
  795    00000000 83                    DC8     0x83
  796    00000001 2E53                  DC8     '.S'
  797    00000003 C4                    DC8     'D'+0x80
  798                            ALIGNROM 2,0xFFFFFFFF
  799    00000004 ........              DC32    DOTSBIN_NFA
  800                           DOTSDEC:
  801    00000008 ........              DC32    DOCOL
  802    0000000C ........0A000         DC32    LIT, 10, DOTSBASE
                  000........  
  803    00000018 ........              DC32    SEMIS
  804                           
  805                           
  806                           //      .SH DOTSHEX:    ( -- )
  807                           //      Nondestructively print items on stack
                                 in HEX, preserving BASE.
  808                           //      Prints TOS 1rst, i.e. TOS, NOS,
                                 etc.
  809                           
  810                            SECTION .text : CONST (2)
  811                           DOTSHEX_NFA:
  812    00000000 83                    DC8     0x83
  813    00000001 2E53                  DC8     '.S'
  814    00000003 C8                    DC8     'H'+0x80
  815                            ALIGNROM 2,0xFFFFFFFF
  816    00000004 ........              DC32    DOTSDEC_NFA
  817                           DOTSHEX:
  818    00000008 ........              DC32    DOCOL
  819    0000000C ........10000         DC32    LIT, 16, DOTSBASE
                  000........  
  820    00000018 ........              DC32    SEMIS
  821                           
  822                           
  823                           //HEADERLESS DICTSPACE:  ( -- n ) CALCULATE
                                 AND PUSH DICTSPAVE AVAILABLE
  824                           
  825                            SECTION .text : CONST (2)
  826                           DICTSPACE:
  827    00000000 ........              DC32    .+5
  828                            SECTION .text : CODE (2)
  829    00000000 0448                  LDR     t, =PAD
  830    00000002 0549                  LDR     n, =DP
  831    00000004 0968                  LDR     n, [n]
  832    00000006 401A                  SUBS    t, t, n
  833                                   TPUSH
  833                                   PUSHt   // push t to p, pre decrement
                                 p
  833.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
  833.2  0000000A 3860                  STR     t, [p]
  833.3                                 ENDM
  833                                   NEXT
  833.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  833                                   NEXT1
  833.1  0000000E 034B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  833.2  00000010 9847                  BLX     x
  833.3                          LTORG
  833.4  00000012 0000           LTORG
  833.5  00000014 ........               TABLE
  833.6  00000018 ........              Reference on line 829 
  833.7  0000001C ........              Reference on line 830 
  833.8                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  833.9                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  833.10                                ENDM
  833.11                                ENDM
  833.12                                ENDM
  834                            LTORG
  835                           
  836                           
  837                           //      .DS DOTDICTSPACE:       ( n --
                                 )
  838                           //      Prints number of bytes availble in
                                 dictionary in DECIMAL using DOT,
  839                           //      not affecting Base in the system
  840                           
  841                            SECTION .text : CONST (2)
  842                           DOTDICTSPACE_NFA:
  843    00000000 83                    DC8     0x83
  844    00000001 2E44                  DC8     '.D'
  845    00000003 D3                    DC8     'S'+0x80
  846                            ALIGNROM 2,0xFFFFFFFF
  847    00000004 ........              DC32    DOTSHEX_NFA
  848                           DOTDICTSPACE:
  849    00000008 ........              DC32    DOCOL
  850    0000000C ........              DC32    DICTSPACE
  851    00000010 .............         DC32    BASE_UV, AT, TOR
                  ...........  
  852    0000001C .............         DC32    DECIMAL, DOT
                  ...          
  853    00000024 .............         DC32    FROMR, BASE_UV, STORE
                  ...........  
  854    00000030 .............         DC32    LIT, msg_dictspace
                  ...          
  855    00000038 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  856    00000040 ........              DC32    SEMIS
  857                           
  858                           
  859                           //HEADERLESS RVSPACE:    ( -- n ) CALCULATE
                                 AND PUSH USERVARSPAVE AVAILABLE
  860                           
  861                            SECTION .text : CONST (2)
  862                           RVSPACE:
  863    00000000 ........              DC32    .+5
  864                            SECTION .text : CODE (2)
  865    00000000 0448                  LDR     t, =TIB
  866    00000002 0549                  LDR     n, =UP  // UP IS ALLOCATION
                                                     POINTER FOR VARS AND
                                                     VARALLOT
  867    00000004 0968                  LDR     n, [n]
  868    00000006 401A                  SUBS    t, t, n
  869                                   TPUSH
  869                                   PUSHt   // push t to p, pre decrement
                                 p
  869.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
  869.2  0000000A 3860                  STR     t, [p]
  869.3                                 ENDM
  869                                   NEXT
  869.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
  869                                   NEXT1
  869.1  0000000E 034B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
  869.2  00000010 9847                  BLX     x
  869.3                          LTORG
  869.4  00000012 0000           LTORG
  869.5  00000014 ........               TABLE
  869.6  00000018 ........              Reference on line 865 
  869.7  0000001C ........              Reference on line 866 
  869.8                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
  869.9                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
  869.10                                ENDM
  869.11                                ENDM
  869.12                                ENDM
  870                            LTORG
  871                           
  872                           
  873                           //      .VS DOTVARSPACE:        ( n --
                                 )
  874                           //      Prints number of bytes availble in RAM
                                 VAR SPACE in DECIMAL using DOT,
  875                           //      not affecting Base in the system.
  876                           
  877                            SECTION .text : CONST (2)
  878                           DOTVARSPACE_NFA:
  879    00000000 83                    DC8     0x83
  880    00000001 2E56                  DC8     '.V'
  881    00000003 D3                    DC8     'S'+0x80
  882                            ALIGNROM 2,0xFFFFFFFF
  883    00000004 ........              DC32    DOTDICTSPACE_NFA
  884                           DOTVARSPACE:
  885    00000008 ........              DC32    DOCOL
  886    0000000C ........              DC32    RVSPACE
  887    00000010 .............         DC32    BASE_UV, AT, TOR
                  ...........  
  888    0000001C .............         DC32    FOUR, SLASH
                  ...          
  889    00000024 .............         DC32    DECIMAL, DOT
                  ...          
  890    0000002C .............         DC32    FROMR, BASE_UV, STORE
                  ...........  
  891    00000038 .............         DC32    LIT, msg_uvspace
                  ...          
  892    00000040 .............         DC32    NULLSTRLEN, TYPE
                  ...          
  893    00000048 ........              DC32    SEMIS
  894                           
  895                           
  896                           //      EMIT EMIT:      ( c -- )              
                                             L0
  897                           //      Transmit ascii character c to the
                                 selected output device. OUT is
  898                           //       incremented for each character
                                 output.
  899                           
  900                            SECTION .text : CONST (2)
  901                           EMIT_NFA:
  902    00000000 84                    DC8     0x84
  903    00000001 454D49                DC8     'EMI'
  904    00000004 D4                    DC8     'T'+0x80
  905    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
  906    00000008 ........              DC32    DOTVARSPACE_NFA
  907                           EMIT:
  908    0000000C .............         DC32    DOCOL, PEMIT
                  ...          
  909    00000014 .............         DC32    ONE, OUT_UV, PSTORE
                  ...........  
  910    00000020 ........              DC32    SEMIS
  911                           
  912                           
  913                           //      KEY:    (  -- ch )
  914                           
  915                            SECTION .text : CONST (2)
  916                           KEY_NFA:
  917    00000000 83                    DC8     0x83
  918    00000001 4B45                  DC8     'KE'
  919    00000003 D9                    DC8     'Y'+0x80
  920                            ALIGNROM 2,0xFFFFFFFF
  921    00000004 ........              DC32    EMIT_NFA
  922                           KEY:
  923                           
  924                           #ifdef IO2TP
  926                           #endif
  927                           
  928    00000008 ........              DC32    DOCOL
  929                           
  930                           #ifdef XON_XOFF
  931    0000000C ........              DC32    XON
  932                           #endif
  933                           
  934                           KL:     // Uart0 Line Status Register Bit 0 =
                                 1 = Char available
  935    00000010 .............         DC32    ULSR, ONE, ANDD, ZBRAN
                  .............
                  ......       
  936    00000020 F0FFFFFF              DC32    KL-.    //
  937                           
  938    00000024 .............         DC32    UIO, CAT
                  ...          
  939    0000002C ........              DC32    SEMIS
  940                           
  941                           
  942                           //      ?TERMINAL QTERM: ( -- f )
  943                           //      Perform a test of the terminal
                                 keyboard for actuation of the break
  944                           //      key. A true flag indicates actuation.
  945                           
  946                            SECTION .text : CONST (2)
  947                           #ifdef BREAK_KEY
  959                           #endif
  960                           
  961                           
  962                           //      CR CR:  ( -- )
  963                           //       EMIT cr (0x0d) and lf (0x0A)
  964                           
  965                            SECTION .text : CONST (2)
  966                           CR_NFA:
  967    00000000 82                    DC8     0x82
  968    00000001 43                    DC8     'C'
  969    00000002 D2                    DC8     'R'+0x80
  970    00000003 FF             ALIGNROM 2,0xFFFFFFFF
  971                           
  972                           #ifdef BREAK_KEY
  974                           #else
  975    00000004 ........              DC32    KEY_NFA
  976                           #endif
  977                           
  978                           CR:
  979                           
  980                           #ifdef IO2TP
  982                           #endif
  983                           
  984    00000008 ........              DC32    DOCOL
  985    0000000C ........              DC32    ZERO
  986    00000010 ........              DC32    OUT_UV
  987    00000014 ........              DC32    STORE
  988    00000018 ........              DC32    PDOTQ
  989    0000001C 02                    DC8     2
  990    0000001D 0D0A                  DC8     0x0D, 0x0A
  991    0000001F FF             ALIGNROM 2,0xFFFFFFFF
  992    00000020 ........              DC32    SEMIS
  993                           
  994                           
  995                           //      BL BLANK:       ( -- n )
  996                           //      Push ascii space character as n to
                                 TOS.
  997                           
  998                            SECTION .text : CONST (2)
  999                           BLANK_NFA:
 1000    00000000 82                    DC8     0x82
 1001    00000001 42                    DC8     'B'
 1002    00000002 CC                    DC8     'L'+0x80
 1003    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1004    00000004 ........              DC32    CR_NFA
 1005                           BLANK:
 1006    00000008 ........              DC32    DOCON
 1007    0000000C 20000000              DC32    0x20
 1008                           
 1009                           
 1010                           //--------------------------------------------
                                ----------------------------------
 1011                           //  START USER VARS. _UV IS cfa label of WORD
                                 that returns th address.
 1012                           //      MODIFIED ALL to be label based vs. fig
                                 model USER offset based.
 1013                           
 1014                           
 1015                           //      S0 INITSO_UV:   ( -- addr of INITSO )
                                 U
 1016                           //      A user variable that contains the
                                 initial value for the stack pointer.
 1017                           //      Pronounced S-zero. See SP!
 1018                           
 1019                            SECTION .text : CONST (2)
 1020                           SZERO_NFA:
 1021    00000000 82                    DC8     0x82
 1022    00000001 53                    DC8     'S'
 1023    00000002 B0                    DC8     '0'+0x80
 1024    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1025    00000004 ........              DC32    BLANK_NFA
 1026                           INITSO_UV:
 1027    00000008 .............         DC32    DOCON, INITSO
                  ...          
 1028                           
 1029                           
 1030                           //      R0 INITRO_UV:   ( -- addr of INITRO )
                                 U
 1031                           //      A user variable containing the initial
                                 location of the return stack.
 1032                           //      Pronounced R-zero. See RP!
 1033                           
 1034                            SECTION .text : CONST (2)
 1035                           RZERO_NFA:
 1036    00000000 82                    DC8     0x82
 1037    00000001 52                    DC8     'R'
 1038    00000002 B0                    DC8     '0'+0x80
 1039    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1040    00000004 ........              DC32    SZERO_NFA
 1041                           INITRO_UV:
 1042    00000008 .............         DC32    DOCON, INITRO
                  ...          
 1043                           
 1044                           
 1045                           //      WIDTH WIDTH_UV: ( -- addr of WIDTH
                                 )
 1046                           //      A user variable containing the maximum
                                 number of
 1047                           //      letters saved in the compilation of a
                                 definitions' name. It must be
 1048                           //      1 thru 31, with my default value of
                                 10. The name character count and
 1049                           //      its natural characters are saved, up
                                 to the value in WIDTH. The
 1050                           //      value may be changed at any time
                                 within the above limits.
 1051                           
 1052                            SECTION .text : CONST (2)
 1053                           WIDTH_NFA:
 1054    00000000 85                    DC8     0x85
 1055    00000001 57494454              DC8     'WIDT'
 1056    00000005 C8                    DC8     'H'+0x80
 1057    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1058    00000008 ........              DC32    RZERO_NFA
 1059                           WIDTH_UV:
 1060    0000000C .............         DC32    DOCON, WIDTH
                  ...          
 1061                           
 1062                           
 1063                           //      WARNING WARNING_UV:     ( -- addr of
                                 WARNING )
 1064                           //       A user variable containing a value
                                 controlling messages.
 1065                           //      If = 0 print messages from FLASH, If =
                                 -1 execute (abort).
 1066                           //       See MESSAGE, error.
 1067                           
 1068                            SECTION .text : CONST (2)
 1069                           WARN_NFA:
 1070    00000000 87                    DC8     0x87
 1071    00000001 5741524E494E          DC8     'WARNIN'
 1072    00000007 C7                    DC8     'G'+0x80
 1073                            ALIGNROM 2,0xFFFFFFFF
 1074    00000008 ........              DC32    WIDTH_NFA
 1075                           WARNING_UV:
 1076    0000000C .............          DC32   DOCON, WARNING
                  ...          
 1077                           
 1078                           
 1079                           //      DPL DPL_UV:     ( -- addr of NDPL
                                 )
 1080                           //      A user variable containing the number
                                 of digits to the right of the
 1081                           //      decimal on double integer input. It
                                 may also be used hold output
 1082                           //      column location of a decimal point, in
                                 user generated formating. The
 1083                           //      default value on single number input
                                 is -1.
 1084                           
 1085                            SECTION .text : CONST (2)
 1086                           DPL_NFA:
 1087    00000000 83                    DC8     0x83
 1088    00000001 4450                  DC8     'DP'
 1089    00000003 CC                    DC8     'L'+0x80
 1090                            ALIGNROM 2,0xFFFFFFFF
 1091    00000004 ........              DC32    WARN_NFA
 1092                           DPL_UV:
 1093    00000008 .............         DC32    DOCON, NDPL
                  ...          
 1094                           
 1095                           
 1096                           //      CSP CSP_UV:     ( -- addr of CSP
                                 )
 1097                           //       A user variable temporarily storing
                                 the stack pointer position, for
 1098                           //       compilation error checking.
 1099                           
 1100                            SECTION .text : CONST (2)
 1101                           CSPP_NFA:
 1102    00000000 83                    DC8     0x83
 1103    00000001 4353                  DC8     'CS'
 1104    00000003 D0                    DC8     'P'+0x80
 1105                            ALIGNROM 2,0xFFFFFFFF
 1106    00000004 ........              DC32    DPL_NFA
 1107                           CSP_UV:
 1108    00000008 .............         DC32    DOCON, CSP
                  ...          
 1109                           
 1110                           
 1111                           //      HLD HLD_UV:     ( -- addr of NHLD )   
                                  U,L0
 1112                           //      A user variable that holds the address
                                 of the latest character of
 1113                           //      text during numeric output conversion.
                                 Usually pad relative.
 1114                           
 1115                            SECTION .text : CONST (2)
 1116                           HLD_NFA:
 1117    00000000 83                    DC8     0x83
 1118    00000001 484C                  DC8     'HL'
 1119    00000003 C4                    DC8     'D'+0x80
 1120                            ALIGNROM 2,0xFFFFFFFF
 1121    00000004 ........              DC32    CSPP_NFA
 1122                           HLD_UV:
 1123    00000008 .............         DC32    DOCON, NHLD
                  ...          
 1124                           
 1125                           
 1126                           //      UP UP_UV:       ( -- addr of UP )
                                 ALIGNED
 1127                           //      A user variable, the USER VAR AND
                                 RALLOT pointer, which contains
 1128                           //      the address of the next free memory
                                 above in the USERRAMSPACE.
 1129                           //      The value may be read by .UV and
                                 altered by VAR.
 1130                           
 1131                            SECTION .text : CONST (2)
 1132                           UP_NFA:
 1133    00000000 82                    DC8     0x82
 1134    00000001 55                    DC8     'U'
 1135    00000002 D0                    DC8     'P'+0x80
 1136    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1137    00000004 ........              DC32    HLD_NFA
 1138                           UP_UV:
 1139    00000008 .............         DC32    DOCON, UP
                  ...          
 1140                           
 1141                           
 1142                           //      FENCE FENCE_UV: ( -- addr of FENCE
                                 )
 1143                           //      A user variable containing an address
                                 below which FORGETting is
 1144                           //      trapped. To forget below this point
                                 the user must alter the contents
 1145                           //      of FENCE.
 1146                           
 1147                            SECTION .text : CONST (2)
 1148                           FENCE_NFA:
 1149    00000000 85                    DC8     0x85
 1150    00000001 46454E43              DC8     'FENC'
 1151    00000005 C5                    DC8     'E'+0x80
 1152    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1153    00000008 ........              DC32    UP_NFA
 1154                           FENCE_UV:
 1155    0000000C .............         DC32    DOCON, FENCE
                  ...          
 1156                           
 1157                           
 1158                           //      DP DP_UV:       ( -- addr of DP )
                                 ALIGNED
 1159                           //      A user variable, the dictionary
                                 pointer, which contains the address
 1160                           //      of the next free memory above the
                                 dictionary. The value may be read
 1161                           //      by HERE and altered by COMMA (ALIGNED)
                                 , ALLOT and CALLOT (UNALIGNED) .
 1162                           
 1163                            SECTION .text : CONST (2)
 1164                           DP_NFA:
 1165    00000000 82                    DC8     0x82
 1166    00000001 44                    DC8     'D'
 1167    00000002 D0                    DC8     'P'+0x80
 1168    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1169    00000004 ........              DC32    FENCE_NFA
 1170                           DP_UV:
 1171    00000008 .............         DC32    DOCON, DP
                  ...          
 1172                           
 1173                           
 1174                           //      BASE BASE_UV:   ( -- addr of NBASE )  
                                  U,L0
 1175                           //       A user variable containing the
                                 current number base used for input
 1176                           //       and output conversion.
 1177                           
 1178                            SECTION .text : CONST (2)
 1179                           BASE_NFA:
 1180    00000000 84                    DC8     0x84
 1181    00000001 424153                DC8     'BAS'
 1182    00000004 C5                    DC8     'E'+0x80
 1183    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1184    00000008 ........              DC32    DP_NFA
 1185                           BASE_UV:
 1186    0000000C .............         DC32    DOCON, NBASE
                  ...          
 1187                           
 1188                           
 1189                           //      CURRENT CURRENT_UV:     ( -- addr of
                                 CURRENT )
 1190                           //      CURRENT and CONTEXT searched
                                 everytime.
 1191                           //      Used by Create, Definitions, etc and
                                 by Latest
 1192                           //       to leave the nfa of the topmost word
                                 in the CURRENT
 1193                           //       vocabulary.  See LATEST NOTE:(FIG)
                                 CURR @ @ this CURR @
 1194                           
 1195                            SECTION .text : CONST (2)
 1196                           CURRENT_NFA:
 1197    00000000 87                    DC8     0x87
 1198    00000001 43555252454E          DC8     'CURREN'
 1199    00000007 D4                    DC8     'T'+0x80
 1200                            ALIGNROM 2,0xFFFFFFFF
 1201    00000008 ........              DC32    BASE_NFA
 1202                           CURRENT_UV:
 1203    0000000C .............         DC32    DOCON, CURRENT  // LATEST =
                                                        CURRENT_UV -> MOST
                                                        RECENT DEF NFA
                  ...          
 1204                           
 1205                           
 1206                           //      STATE STATE_UV: ( -- addr of CSTATE
                                 )
 1207                           //      A user variable containing the
                                 compilation state. A non-zero value
 1208                           //      indicates compilation. The value
                                 itself may be implementation
 1209                           //      dependent. 0xC0 must be used for
                                 INTERPRET to execute IMMEDIATE words.
 1210                           
 1211                            SECTION .text : CONST (2)
 1212                           STATE_NFA:
 1213    00000000 85                    DC8     0x85
 1214    00000001 53544154              DC8     'STAT'
 1215    00000005 C5                    DC8     'E'+0x80
 1216    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1217    00000008 ........              DC32    CURRENT_NFA
 1218                           STATE_UV:
 1219    0000000C .............         DC32    DOCON, CSTATE       //Compile
                                                        STATE
                  ...          
 1220                           
 1221                           
 1222                           //      OUT OUT_UV:     ( --  addr of OUT
                                 )
 1223                           //       A user variable that contains a value
                                 incremented by EMIT. The user
 1224                           //       may alter and examine OUT to control
                                 display formating.
 1225                           
 1226                            SECTION .text : CONST (2)
 1227                           OUT_NFA:
 1228    00000000 83                    DC8     0x83
 1229    00000001 4F55                  DC8     'OU'
 1230    00000003 D4                    DC8     'T'+0x80
 1231                            ALIGNROM 2,0xFFFFFFFF
 1232    00000004 ........              DC32    STATE_NFA
 1233                           OUT_UV:
 1234    00000008 .............         DC32    DOCON, OUT
                  ...          
 1235                           
 1236                           
 1237                           //      IN IN_UV:       ( -- addr of IN
                                 )
 1238                           //      A user variable containing the byte
                                 offset within the current input
 1239                           //      text buffer (terminal or disc) from
                                 which the next text will be
 1240                           //      accepted. WORD uses and moves the
                                 value of IN.
 1241                           
 1242                            SECTION .text : CONST (2)
 1243                           IN_NFA:
 1244    00000000 82                    DC8     0x82
 1245    00000001 49                    DC8     'I'
 1246    00000002 CE                    DC8     'N'+0x80
 1247    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1248    00000004 ........              DC32    OUT_NFA
 1249                           IN_UV:
 1250    00000008 .............          DC32   DOCON, IN
                  ...          
 1251                           
 1252                           
 1253                           //      PAD PAD_UV:     ( -- addr of PAD
                                 )
 1254                           //       Leave the address of the text output
                                 buffer PAD on the stack.
 1255                           //      Typically at least 82 bytes long.
 1256                           
 1257                            SECTION .text : CONST (2)
 1258                           PAD_NFA:
 1259    00000000 83                    DC8     0x83
 1260    00000001 5041                  DC8     'PA'
 1261    00000003 C4                    DC8     'D'+0x80
 1262                            ALIGNROM 2,0xFFFFFFFF
 1263    00000004 ........              DC32    IN_NFA
 1264                           PAD_UV:
 1265    00000008 .............         DC32    DOCON, PAD
                  ...          
 1266                           
 1267                           
 1268                           //      TIB TIB_UV:     ( -- addr of INITTIB )
                                 U
 1269                           //       Leave the address of the text input
                                 buffer TIB on the stack.
 1270                           //      Typically at least 82 bytes long.
 1271                           
 1272                            SECTION .text : CONST (2)
 1273                           TIB_NFA:
 1274    00000000 83                    DC8     0x83
 1275    00000001 5449                  DC8     'TI'
 1276    00000003 C2                    DC8     'B'+0x80
 1277                            ALIGNROM 2,0xFFFFFFFF
 1278    00000004 ........              DC32    PAD_NFA
 1279                           TIB_UV:
 1280    00000008 .............         DC32    DOCON, TIB
                  ...          
 1281                           
 1282                           
 1283                           //========== END USER VARIABLES =============/
                                /
 1284                           
 1285                           
 1286                           //      HERE HERE:      ( -- addr ) ALIGNED
 1287                           //  Leave the address of the next available
                                 dictionary location.
 1288                           
 1289                            SECTION .text : CONST (2)
 1290                           HERE_NFA:
 1291    00000000 84                    DC8     0x84
 1292    00000001 484552                DC8     'HER'
 1293    00000004 C5                    DC8     'E'+0x80
 1294    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1295    00000008 ........              DC32    TIB_NFA
 1296                           HERE:
 1297    0000000C ........              DC32    DOCOL
 1298    00000010 ........              DC32    DP_UV
 1299    00000014 ........              DC32    AT
 1300    00000018 ........              DC32    SEMIS
 1301                           
 1302                           
 1303                           //      ALLOT ALLOT:    ( sn -- ) WARNING:
                                 UNALIGNED:
 1304                           //      IF DICTIONAIRY FULL PRINT error
                                 MESSAGE AND abort.
 1305                           //      Add the signed number to the
                                 dictionary pointer DP. May be used to
 1306                           //      reserve dictionary space or re-origin
                                 memory.
 1307                           //      CAUTION!
 1308                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY
                                 WORDS THAT CAN ALLOT UNEVEN AMOUNTS
 1309                           //      NOTE: USE ALIGN after ALLOT or C,
                                 (CCOMMA) .
 1310                           
 1311                            SECTION .text : CONST (2)
 1312                           ALLOT_NFA:
 1313    00000000 85                    DC8     0x85
 1314    00000001 414C4C4F              DC8     'ALLO'
 1315    00000005 D4                    DC8     'T'+0x80
 1316    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1317    00000008 ........              DC32    HERE_NFA
 1318                           ALLOT:
 1319    0000000C ........              DC32    DOCOL
 1320    00000010 ........              DC32    DICTSPACE       //      ( -- n
                                                                 )
 1321    00000014 ........              DC32    ZLESS
 1322    00000018 ........              DC32    ZBRAN
 1323    0000001C 18000000              DC32    ALLOTOK-.
 1324                           
 1325    00000020 .............         DC32    LIT, msg_dictfull
                  ...          
 1326    00000028 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 1327    00000030 ........              DC32    ABORT
 1328                           ALLOTOK:
 1329    00000034 ........              DC32    DP_UV
 1330    00000038 ........              DC32    PSTORE
 1331    0000003C ........              DC32    SEMIS
 1332                           
 1333                           
 1334                           //      ALIGNED ALIGNED:        ( addr --
                                 a-addr ) DPANS94
 1335                           
 1336                            SECTION .text : CONST (2)
 1337                           ALIGNED_NFA:
 1338    00000000 87                    DC8     0x87
 1339    00000001 414C49474E45          DC8     'ALIGNE'
 1340    00000007 C4                    DC8     'D'+0x80
 1341                            ALIGNROM 2,0xFFFFFFFF
 1342    00000008 ........              DC32    ALLOT_NFA
 1343                           ALIGNED:
 1344    0000000C ........              DC32    .+5
 1345                            SECTION .text : CODE (2)
 1346                                   POP2t
 1346.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 1346.2  00000002 3F1D                  ADDS    p, p, #4
 1346.3                                 ENDM
 1347    00000004 C01C                  ADDS            t, t, #3
 1348    00000006 0349                  LDR             n, =-4
 1349    00000008 0840                  ANDS            t, t, n
 1350                                   TPUSH
 1350                                   PUSHt   // push t to p, pre decrement
                                 p
 1350.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 1350.2  0000000C 3860                  STR     t, [p]
 1350.3                                 ENDM
 1350                                   NEXT
 1350.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 1350                                   NEXT1
 1350.1  00000010 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 1350.2  00000012 9847                  BLX     x
 1350.3                          LTORG
 1350.4                          LTORG
 1350.5  00000014 FCFFFFFF               TABLE
 1350.6  00000018 ........              Reference on line 1348 
 1350.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 1350.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 1350.9                                 ENDM
 1350.10                                ENDM
 1350.11                                ENDM
 1351                           
 1352                           
 1353                           //      ALIGN ALIGN:    ( -- ) DPANS94
 1354                           //      Align DP_UV primitive. Pads current DP
                                 with 0xFF until aligned.
 1355                           //      USED IN , (COMMA:) .  Reflected by
                                 HERE .
 1356                           //      CAUTION! USE AFTER ALLOT or C,
                                 (CCOMMA:) .
 1357                           //      See , (COMMA:) which is ALIGNED.
 1358                           
 1359                            SECTION .text : CONST (2)
 1360                           ALIGN_NFA:
 1361    00000000 85                    DC8     0x85
 1362    00000001 414C4947              DC8     'ALIG'
 1363    00000005 CE                    DC8     'N'+0x80
 1364    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1365    00000008 ........              DC32    ALIGNED_NFA
 1366                           ALIGN:
 1367    0000000C ........              DC32    DOCOL
 1368    00000010 ........              DC32    HERE
 1369                                   // COULD ADD CODE TO SEE IF ALIGNED
                                 ALREADY
 1370    00000014 .............         DC32    THREE, PLUS             //
                                                        3PLUS
                  ...          
 1371    0000001C .............         DC32    DUP, TOR
                  ...          
 1372    00000024 ........              DC32    HERE
 1373    00000028 ........              DC32    XDO
 1374                           ALIGNDP1:
 1375    0000002C ........FF000         DC32    LIT, 0xFF, I, CSTORE
                  000..........
                  ......       
 1376    0000003C ........              DC32    XLOOP
 1377    00000040 ECFFFFFF              DC32    ALIGNDP1-.
 1378                           
 1379    00000044 ........              DC32    FROMR
 1380    00000048 ........FCFFF         DC32    LIT, 0xFFFFFFFC // -4
                  FFF          
 1381    00000050 ........              DC32    ANDD
 1382    00000054 .............         DC32    DP_UV, STORE
                  ...          
 1383    0000005C ........              DC32    SEMIS
 1384                           
 1385                           
 1386                           //      , COMMA:        ( n -- ) ALIGNED:
 1387                           //      IF DICTIONAIRY FULL PRINT Error
                                 MESSAGE AND Abort.
 1388                           //      Write n into next ALIGNED dictionary
                                 memory cell, DP reflected by HERE
 1389                           
 1390                            SECTION .text : CONST (2)
 1391                           COMMA_NFA:
 1392    00000000 81                    DC8     0x81
 1393    00000001 AC                    DC8     ','+0x80
 1394    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1395    00000004 ........              DC32    ALIGN_NFA
 1396                           COMMA:
 1397    00000008 ........              DC32    DOCOL
 1398    0000000C ........              DC32    DICTSPACE       //      ( -- n
                                                                 )
 1399    00000010 ........              DC32    ZLESS
 1400    00000014 ........              DC32    ZBRAN
 1401    00000018 18000000              DC32    COMMAOK-.
 1402                           
 1403    0000001C .............         DC32    LIT, msg_dictfull
                  ...          
 1404    00000024 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 1405    0000002C ........              DC32    ABORT
 1406                           COMMAOK:
 1407    00000030 ........              DC32    ALIGN
 1408    00000034 ........              DC32    HERE            // is
                                                                 DP
 1409    00000038 ........              DC32    STORE
 1410    0000003C ........              DC32    FOUR
 1411    00000040 ........              DC32    ALLOT
 1412    00000044 ........              DC32    SEMIS
 1413                           
 1414                           
 1415                           
 1416                           //      C, CCOMMA:      ( n -- ) WARNING:
                                 UNALIGNED:
 1417                           //      IF DICTIONAIRY FULL PRINT Error
                                 MESSAGE AND Abort.
 1418                           //      Store LS 8 bits of n into the next
                                 available dictionary byte, advancing
 1419                           //      the dictionary pointer.
 1420                           //      CAUTION!
 1421                           //      ALLOT and C, (CCOMMA:) ARE THE ONLY
                                 WORDS THAT CAN ALLOT UNEVEN AMOUNTS
 1422                           //      NOTE: USE ALIGN after ALLOT or C,
                                 (CCOMMA) .
 1423                           //      See , (COMMA:) which is ALIGNED.
 1424                           
 1425                            SECTION .text : CONST (2)
 1426                           CCOMMA_NFA:
 1427    00000000 82                    DC8     0x82
 1428    00000001 43                    DC8     'C'
 1429    00000002 AC                    DC8     ','+0x80
 1430    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 1431    00000004 ........              DC32    COMMA_NFA
 1432                           CCOMMA:
 1433    00000008 ........              DC32    DOCOL
 1434    0000000C ........              DC32    DICTSPACE       //      ( -- n
                                                                 )
 1435    00000010 ........              DC32    ZLESS
 1436    00000014 ........              DC32    ZBRAN
 1437    00000018 18000000              DC32    CCOMMAOK-.
 1438                           
 1439    0000001C .............         DC32    LIT, msg_dictfull
                  ...          
 1440    00000024 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 1441    0000002C ........              DC32    ABORT
 1442                           CCOMMAOK:
 1443    00000030 ........              DC32    HERE
 1444    00000034 ........              DC32    CSTORE
 1445    00000038 ........              DC32    ONE
 1446    0000003C ........              DC32    ALLOT
 1447    00000040 ........              DC32    SEMIS
 1448                           
 1449                           
 1450                           //      VARALLOT VARALLOT:      ( n -- addr )
                                 ALIGNED:
 1451                           //      IF USERVAR SPACE FULL PRINT Error
                                 MESSAGE AND Abort.
 1452                           //      Add n * 32 bits to the RAMVARSPACE
                                 pointer UP.
 1453                           //      Used to allocate space in Ram for
                                 VAR's and other user data structures
 1454                           
 1455                            SECTION .text : CONST (2)
 1456                           VARALLOT_NFA:
 1457    00000000 88                    DC8     0x88
 1458    00000001 564152414C4C4         DC8     'VARALLO'
                  F            
 1459    00000008 D4                    DC8     'T'+0x80
 1460    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1461    0000000C ........              DC32    CCOMMA_NFA
 1462                           VARALLOT:
 1463    00000010 ........              DC32    DOCOL
 1464    00000014 ........              DC32    RVSPACE         //      ( -- n
                                                                 )
 1465    00000018 .............         DC32    FOUR, SLASH, OVER, SUBB
                  .............
                  ......       
 1466    00000028 ........              DC32    ZLESS
 1467    0000002C ........              DC32    ZBRAN
 1468    00000030 18000000              DC32    RVALLOTOK-.
 1469                           
 1470    00000034 .............         DC32    LIT, msg_uvfull
                  ...          
 1471    0000003C .............         DC32    NULLSTRLEN, TYPE
                  ...          
 1472    00000044 ........              DC32    ABORT
 1473                           
 1474                           RVALLOTOK:
 1475    00000048 .............         DC32    UP_UV, AT    // Address of this
                                                        allotment
                  ...          
 1476    00000050 ........              DC32    SWAP        // n
 1477    00000054 .............         DC32    FOUR, STAR    // n = 4
                                                       bytes
                  ...          
 1478    0000005C ........              DC32    UP_UV
 1479    00000060 ........              DC32    PSTORE        // Address of
                                                               next var
                                                               available
 1480    00000064 ........              DC32    SEMIS
 1481                           
 1482                           
 1483                           //      SPACE SPACE: ( -- )
 1484                           //      EMIT a space character, 0x20.
 1485                           
 1486                            SECTION .text : CONST (2)
 1487                           SPACE_NFA:
 1488    00000000 85                    DC8     0x85
 1489    00000001 53504143              DC8     'SPAC'
 1490    00000005 C5                    DC8     'E'+0x80
 1491    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1492    00000008 ........              DC32    VARALLOT_NFA
 1493                           SPACE:
 1494    0000000C ........              DC32    DOCOL
 1495    00000010 ........              DC32    BLANK
 1496    00000014 ........              DC32    EMIT
 1497    00000018 ........              DC32    SEMIS
 1498                           
 1499                           
 1500                           //      LATEST LATEST: ( -- addr ) MODIFIED:
 1501                           //      Inittially ADDR OF LAST FIRST WORD IN
                                 THE DICTIONARY = TASK_NFA
 1502                           //      Leave the nfa of the topmost word in
                                 the dictionary.
 1503                           
 1504                            SECTION .text : CONST (2)
 1505                           LATEST_NFA:
 1506    00000000 86                    DC8     0x86
 1507    00000001 4C41544553            DC8     'LATES'
 1508    00000006 D4                    DC8     'T'+0x80
 1509    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1510    00000008 ........              DC32    SPACE_NFA
 1511                           LATEST:
 1512    0000000C ........              DC32    DOCOL
 1513    00000010 ........              DC32    CURRENT_UV      // LATEST =
                                                                 CURRENT_UV
 1514    00000014 ........              DC32    AT
 1515    00000018 ........              DC32    SEMIS
 1516                           
 1517                           
 1518                           //      LFA LFA:        ( pfa --- lfa
                                 )
 1519                           //       Convert the parameter field address
                                 of a dictionary definition to
 1520                           //       its link field address.
 1521                           
 1522                            SECTION .text : CONST (2)
 1523                           LFA_NFA:
 1524    00000000 83                    DC8     0x83
 1525    00000001 4C46                  DC8     'LF'
 1526    00000003 C1                    DC8     'A'+0x80
 1527                            ALIGNROM 2,0xFFFFFFFF
 1528    00000004 ........              DC32    LATEST_NFA
 1529                           LFA:
 1530    00000008 ........              DC32    .+5
 1531                            SECTION .text : CODE (2)
 1532                                   POP2t
 1532.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 1532.2  00000002 3F1D                  ADDS    p, p, #4
 1532.3                                 ENDM
 1533    00000004 0838                  SUBS     t, t, #8
 1534                                   TPUSH
 1534                                   PUSHt   // push t to p, pre decrement
                                 p
 1534.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 1534.2  00000008 3860                  STR     t, [p]
 1534.3                                 ENDM
 1534                                   NEXT
 1534.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 1534                                   NEXT1
 1534.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 1534.2  0000000E 9847                  BLX     x
 1534.3                          LTORG
 1534.4                          LTORG
 1534.5  00000010 ........               TABLE
 1534.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 1534.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 1534.8                                 ENDM
 1534.9                                 ENDM
 1534.10                                ENDM
 1535                           
 1536                           
 1537                           //      CFA CFA: ( pfa -- cfa' )
 1538                           //       Convert the parameter field address
                                 of a dictionary definition to
 1539                           //       its code field address. <if thumb2
                                 execution addr smudged>
 1540                           
 1541                            SECTION .text : CONST (2)
 1542                           CFA_NFA:
 1543    00000000 83                    DC8     0x83
 1544    00000001 4346                  DC8     'CF'
 1545    00000003 C1                    DC8     'A'+0x80
 1546                            ALIGNROM 2,0xFFFFFFFF
 1547    00000004 ........              DC32    LFA_NFA
 1548                           CFA:
 1549    00000008 ........              DC32    .+5
 1550                            SECTION .text : CODE (2)
 1551                                   POP2t
 1551.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 1551.2  00000002 3F1D                  ADDS    p, p, #4
 1551.3                                 ENDM
 1552    00000004 001F                  SUBS     t, t, #4
 1553                                   TPUSH
 1553                                   PUSHt   // push t to p, pre decrement
                                 p
 1553.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 1553.2  00000008 3860                  STR     t, [p]
 1553.3                                 ENDM
 1553                                   NEXT
 1553.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 1553                                   NEXT1
 1553.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 1553.2  0000000E 9847                  BLX     x
 1553.3                          LTORG
 1553.4                          LTORG
 1553.5  00000010 ........               TABLE
 1553.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 1553.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 1553.8                                 ENDM
 1553.9                                 ENDM
 1553.10                                ENDM
 1554                           
 1555                           
 1556                           //      NFA NFA: ( pfa -- nfa ) MODIFIED:
 1557                           //       Convert the parameter field address
                                 of a definition to its name
 1558                           //       field. Modified for nfa alighnment
                                 padding
 1559                           
 1560                            SECTION .text : CONST (2)
 1561                           NFA_NFA:
 1562    00000000 83                    DC8     0x83
 1563    00000001 4E46                  DC8     'NF'
 1564    00000003 C1                    DC8     'A'+0x80
 1565                            ALIGNROM 2,0xFFFFFFFF
 1566    00000004 ........              DC32    CFA_NFA
 1567                           NFA:
 1568    00000008 ........              DC32    DOCOL
 1569    0000000C .............         DC32    EIGHT, SUBB     // Addr OF lfa,
                                                        DUPED TO TRAVERSE
                                                        Padding
                  ...          
 1570                           ALIGNLP:
 1571    00000014 .............         DC32    ONE, SUBB       // ADDR 1
                                                      BEFORE lfa, eliminate
                                                      padding
                  ...          
 1572    0000001C .............         DC32    DUP, CAT        // ALIGNROM FF
                                                      padded?
                  ...          
 1573    00000024 ........FF000         DC32    LIT, 0xFF, SUBB
                  000........  
 1574    00000030 ........              DC32    ZBRAN
 1575    00000034 E0FFFFFF              DC32    ALIGNLP-.
 1576                                       
 1577    00000038 ........FFFFF         DC32    LIT,-1          // DIRECTION
                                                     FOR TRAVERSE = Toward
                                                     nfa
                  FFF          
 1578    00000040 ........              DC32    TRAV            // ( -- addr2
                                                                 )
 1579    00000044 ........              DC32    SEMIS
 1580                           
 1581                           
 1582                           //      PFA PFA:        ( nfa -- pfa
                                 )
 1583                           //       Convert the name field address of a
                                 compiled definition to its
 1584                           //       parameter field address.
 1585                           
 1586                            SECTION .text : CONST (2)
 1587                           PFA_NFA:
 1588    00000000 83                    DC8     0x83
 1589    00000001 5046                  DC8     'PF'
 1590    00000003 C1                    DC8     'A'+0x80
 1591                            ALIGNROM 2,0xFFFFFFFF
 1592    00000004 ........              DC32    NFA_NFA
 1593                           PFA:
 1594    00000008 ........              DC32    DOCOL           // ( NFA --
                                                                 )
 1595    0000000C ........              DC32    ONE             // DIRECTION
                                                                 FOR TRAVERSE =
                                                                 Toward
                                                                 CFA
 1596    00000010 ........              DC32    TRAV            // ( NFA 1 --
                                                                 addr2
                                                                 )
 1597                           ALIGNPLP:
 1598    00000014 ........              DC32    ONEP            // ADDR 1
                                                                 BEFORE lfa,
                                                                 eliminate
                                                                 padding
 1599    00000018 .............         DC32    DUP, CAT        // ALIGNROM FF
                                                      padded?
                  ...          
 1600    00000020 ........FF000         DC32    LIT, 0xFF, SUBB
                  000........  
 1601    0000002C ........              DC32    ZBRAN
 1602    00000030 E4FFFFFF              DC32    ALIGNPLP-.
 1603                           
 1604    00000034 ........              DC32    EIGHT
 1605    00000038 ........              DC32    PLUS
 1606    0000003C ........              DC32    SEMIS
 1607                           
 1608                           
 1609                           //      ' TICK: ( -- pfa )
 1610                           //      Used in the form: .
 1611                           //      ' nnnn
 1612                           //      Leaves the parameter field address of
                                 dictionary word nnnn.
 1613                           //      As a compiler directive, executes in a
                                 colon-definition to compile
 1614                           //      the address as a literal. If the word
                                 is not found after a search of
 1615                           //      CONTEXT and CURRENT, an appropriate
                                 error message is given.
 1616                           //      Pronounced "TICK".
 1617                           
 1618                            SECTION .text : CONST (2)
 1619                           TICK_NFA:
 1620    00000000 C1                    DC8     0x0C1
 1621    00000001 A7                    DC8     ''''+0x80
 1622    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 1623    00000004 ........              DC32    PFA_NFA
 1624                           TICK:
 1625    00000008 ........              DC32    DOCOL
 1626    0000000C ........              DC32    DFIND   // NOOP there for TIB
                                                         entry
 1627    00000010 ........              DC32    ZEQU
 1628    00000014 .............         DC32    LIT, msg_number_error
                  ...          
 1629    0000001C ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 1630    00000020 ........              DC32    DROP
 1631    00000024 ........              DC32    LITERAL
 1632    00000028 ........              DC32    SEMIS
 1633                           
 1634                           
 1635                           //      MYBAUD MYBAUD: ( n -- ) BAUD MUST BE
                                 IN DECIMAL or EQUIVALENT!!!
 1636                           //      MUST BE USED BEFORE USING UART0_INIT!!
                                !
 1637                           //      Because FISH does a reset if you
                                 invoke a HARD FAULT RESET
 1638                           //      THIS MECHANISM IS ESSENTIAL TO STAYING
                                 AT USER SET BAUDRATE THRU A RESET!
 1639                           //      SET NON-INIT RAM VARIABLES DBAUD TO
                                 ZERO AND UBAUD n.
 1640                           //      See UART0_INIT
 1641                           
 1642                            SECTION .text : CONST (2)
 1643                           MYBAUD_NFA:
 1644    00000000 86                    DC8     0x86
 1645    00000001 4D59424155            DC8     'MYBAU'
 1646    00000006 C4                    DC8     'D'+0x80
 1647    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1648    00000008 ........              DC32    TICK_NFA
 1649                           MYBAUD:
 1650    0000000C ........              DC32    DOCOL
 1651    00000010 .............         DC32    ZERO, LIT, DBAUD, STORE // SET
                                                       DBAUD TO INTIALIZED
                  ...800C0010..
                  ......       
 1652    00000020 ........840C0         DC32    LIT, UBAUD, STORE       // SET
                                                      UBAUD TO NEW BAUD FOR
                                                      UART0_INIT
                  010........  
 1653    0000002C ........              DC32    SEMIS
 1654                           
 1655                           
 1656                           //      UART0_INIT UART0_INIT: ( -- )
 1657                           //      If setting BAUD MYBAUD MUST BE USED
                                 FIRST
 1658                           //      THIS IS TO PRESERVE YOUR BAUD DURING
                                 HARD FAULT RESET
 1659                           //      UseDEFAULT_BAUD UNLESS DBAUD IS ZERO,
                                 THEN USE UBAUD VALUE
 1660                           //      WHEN DBAUD IS NOT ZERO USE DEFAULT_BAU
                                D         // pwrup
 1661                           //      WHEN DBAUD IS ZERO USE UBAUD          
                                          // RESET
 1662                           
 1663                            SECTION .text : CONST (2)
 1664                           UART0_INIT_NFA:
 1665    00000000 8A                    DC8     0x8A
 1666    00000001 55415254305F4         DC8     'UART0_INI'
                  94E49        
 1667    0000000A D4                    DC8     'T'+0x80
 1668    0000000B FF             ALIGNROM 2,0xFFFFFFFF
 1669    0000000C ........              DC32    MYBAUD_NFA
 1670                           UART0_INIT:
 1671    00000010 ........              DC32    DOCOL
 1672                           
 1673    00000014 ........800C0         DC32    LIT, DBAUD, AT, ZEQU
                  010..........
                  ......       
 1674    00000024 ........              DC32    ZBRAN
 1675    00000028 1C000000              DC32    BAUDDEFAULT-.           // IF
                                                             DBAUD NOT ZERO SET
                                                             DEFAULT_BAUD
 1676    0000002C ........840C0         DC32    LIT, UBAUD, AT          //
                                                      IARBUG , TOR
                  010........  
 1677    00000038 ........              DC32    TOR                     // ELSE
                                                                         USE
                                                                         UBAUD
 1678    0000003C ........              DC32    BRAN
 1679    00000040 10000000              DC32    BAUD1-.                 // SET
                                                       UBAUD TO ZERO TO
                                                       PRESERVE UBAUD
 1680                           BAUDDEFAULT:                            //
                                 ELSE
 1681    00000044 ........80250         DC32    LIT, DEFAULT_BAUD       //
                                                      IARBUG , TOR
                  000          
 1682    0000004C ........              DC32    TOR                     //
                                                                         SET
 1683                           BAUD1:
 1684    00000050 ........A4400         DC32    LIT, IOCON_PIO1_6       //
                                                      RX
                  440          
 1685    00000058 ........F8FFF         DC32    LIT, -8, ANDBITS        // &=
                                                      ~0x07//
                  FFF........  
 1686                           
 1687    00000064 ........A4400         DC32    LIT, IOCON_PIO1_6       //
                                                      
                  440          
 1688    0000006C .............         DC32    ONE, SETBITS            // UART
                                                      RXD gpio pins
                  ...          
 1689                           
 1690    00000074 ........A8400         DC32    LIT, IOCON_PIO1_7       //
                                                      TX
                  440          
 1691    0000007C ........F8FFF         DC32    LIT, -8, ANDBITS        // &=
                                                      ~0x07//
                  FFF........  
 1692                           
 1693    00000088 ........A8400         DC32    LIT, IOCON_PIO1_7              
                                                      // 
                  440          
 1694    00000090 .............         DC32    ONE, SETBITS            // UART
                                                      TXD gpio pins
                  ...          
 1695                           
 1696                                   // LPC_SYSCON->SYSAHBCLKCTRL |=
                                 (1<<12);        // OR= Enable UART clock
 1697                           //      DC32    LIT, SYSAHBCLKCTRL            
                                  // LPC_IOCON->SYSAHBCLKCTRL//
 1698                           //      DC32    LIT, 0x8000, SETBITS    //
                                 IOCON CLKS ON ( Bit 12 )
 1699                                   // should = 0x1105F or 1185Fh
 1700    00000098 ........5F180         DC32    LIT, 0x1185F            // FIX
                                                      OR in correct bits
                  100          
 1701    000000A0 ........80800         DC32    LIT, SYSAHBCLKCTRL
                  440          
 1702    000000A8 ........              DC32    STORE                   //
                                                                         LPC_SY
                                                                        SCON->S
                                                                        YSAHBCL
                                                                        KCTRL =
                                                                         0X1105
                                                                        F
 1703                           
 1704    000000AC .............         DC32    ONE, LIT, UARTCLKDIV    //
                                                      LPC_SYSCON->UARTCLKDIV
                  ...98800440  
 1705    000000B8 ........              DC32    STORE                   //
                                                                         UARTCL
                                                                        KDIV =
                                                                         1
 1706                           
 1707    000000BC ........83000         DC32    LIT, 0x83               // DLAB
                                                      = 1 8n1
                  000          
 1708    000000C4 ........0C800         DC32    LIT, U0LCR              //
                                                      LPC_UART->LCR =
                                                      0x83//
                  040          
 1709    000000CC ........              DC32    STORE
 1710                           
 1711                           //      regVal = LPC_SYSCON->UARTCLKDIV//
 1712                           //      Fdiv = (((SystemCoreClock*LPC_SYSCON->
                                SYSAHBCLKDIV)/regVal)/16)/baudrate
 1713                           //      LPC_UART->DLM = Fdiv / 256//
 1714                           //      LPC_UART->DLL = Fdiv % 256//
 1715                           //      LPC_UART->LCR = 0x03//          //
                                 DLAB = 0 8n1
 1716                           
 1717                                   // DIV BY UARTCLKDIV 1RST IF NOT 1
                                 !
 1718                                   // SYSCLK 16 / R>  /  256  /MOD
 1719                           
 1720    000000D0 .............         DC32    SYSCLK, LIT, 16, SLASH
                  ...10000000..
                  ......       
 1721    000000E0 ........              DC32    FROMR                   //
                                                                         Baud
 1722    000000E4 ........              DC32    SLASH
 1723    000000E8 ........00010         DC32    LIT, 256, SLMOD
                  000........  
 1724    000000F4 .............         DC32    UIO, FOURP, STORE       // DLM
                                                      = TOS
                  ...........  
 1725    00000100 .............         DC32    UIO, STORE              // DLL
                                                      = NOS
                  ...          
 1726                           
 1727    00000108 .............         DC32    THREE, LIT, U0LCR       //
                                                        LPC_UART->LCR =
                                                        0x03//
                  ...0C800040  
 1728    00000114 ........              DC32    STORE                   // DLAB
                                                                         = 0
                                                                         8n1
 1729                           
 1730    00000118 ........              DC32    ZERO                    //
                                                                         LPC_UA
                                                                        RT->FCR
                                                                         = 0
                                                                         then
                                                                         7
 1731    0000011C ........08800         DC32    LIT, U0FCR, STORE       //
                                                      FIFO'S OFF
                  040........  
 1732    00000128 ........07000         DC32    LIT, 7
                  000          
 1733    00000130 ........08800         DC32    LIT, U0FCR, STORE       //
                                                      FIFO'S ON
                  040........  
 1734                           
 1735    0000013C .............         DC32    ULSR, DROP              //
                                                       Clear Line Status
                                                       Register
                  ...          
 1736                           //      DC32    CLRUART
 1737    00000144 ........              DC32    SEMIS
 1738                           
 1739                           
 1740                           //      EXPECT EXPECT:( addr count -- )
                                 MODIFIED:
 1741                           //      Transfer characters from the terminal
                                 to address as a counted string,
 1742                           //      until a "return" or the count of
                                 characters have been received.
 1743                           //      One or more nulls are added at the end
                                 of the text.
 1744                           //;     XON/XOFF PROTOCOL USED.
 1745                           
 1746                            SECTION .text : CONST (2)
 1747                           EXPECT_NFA:
 1748    00000000 86                    DC8     0x86
 1749    00000001 4558504543            DC8     'EXPEC'
 1750    00000006 D4                    DC8     'T'+0x80
 1751    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1752    00000008 ........              DC32    UART0_INIT_NFA
 1753                           EXPECT:                 //       ( NOS TOS --
                                 NOS TOS )
 1754    0000000C ........              DC32    DOCOL   //TYP.   ( TIB LEN --
                                                         )
 1755    00000010 ........              DC32    OVER    //       ( TIB LEN TIB
                                                         -- )
 1756    00000014 ........              DC32    PLUS    //       ( TIB TIB+LEN
                                                         -- )
 1757    00000018 ........              DC32    OVER    //       ( TIB TIB+LEN
                                                         TIB -- )
 1758                           
 1759                           #ifdef XON_XOFF
 1760    0000001C ........              DC32    XON
 1761                           #endif
 1762                           
 1763    00000020 ........              DC32    XDO     // DO   Index = addr,
                                                         Limit = addr+cnt
 1764                           EXPE1:
 1765                           
 1766                           
 1767                           #ifdef IO2TP
 1771                           #else
 1772                           
 1773                           EL:     // Uart0 Line Status Register Bit 0 =
                                 1 = Char available
 1774    00000024 .............         DC32    ULSR, ONE, ANDD, ZBRAN
                  .............
                  ......       
 1775    00000034 F0FFFFFF              DC32    EL-.                           
                                                    // CHAR READY?
 1776                           
 1777    00000038 .............         DC32    UIO, CAT, IF_CR_SEND_XOFF      
                                                      // IF CR QUICK XOFF!
                  ...........  
 1778    00000044 .............         DC32    DUP, LIT, 9, EQUAL             
                                                      // ? TAB
                  ...09000000..
                  ......       
 1779                           // REPLACE TAB WITH SPACE                     
                                   // -- ch f
 1780    00000054 ........              DC32    ZBRAN                          
  // Not tab
 1781    00000058 0C000000              DC32     EL1-.                         
                                                      // Goto MAIN LOOP
 1782    0000005C .............         DC32    DROP, BLANK                    
                                                       // Convert tab to
                                                       space
                  ...          
 1783                           
 1784                           EL1:
 1785                           #endif // IO2TP
 1786                           
 1787                                   // MAIN LOOP ENTERED WITH CHAR ON
                                 TOS
 1788    00000064 ........              DC32    DUP             // ( key key --
                                                                 )
 1789    00000068 ........              DC32    BACKSPACE_CHAR  
 1790    0000006C ........              DC32    EQUAL
 1791    00000070 ........              DC32    ZBRAN           // If not
                                                                 backspace
 1792    00000074 4C000000              DC32     EXPE2-.        // go
                                                        here
 1793    00000078 ........              DC32    DROP            // Drop
                                                                 Backspace on
                                                                 stack
 1794    0000007C ........              DC32    DUP             // Current TIB
                                                                 addr
 1795    00000080 ........              DC32    I               // 
 1796    00000084 ........              DC32    EQUAL           //
 1797    00000088 ........              DC32    DUP
 1798    0000008C ........              DC32    FROMR
 1799    00000090 ........              DC32    TWO
 1800    00000094 ........              DC32    SUBB
 1801    00000098 ........              DC32    PLUS
 1802    0000009C ........              DC32    TOR
 1803    000000A0 ........              DC32    ZBRAN           // If not at
                                                                 beginning of
                                                                 line
 1804    000000A4 10000000              DC32     EXPE6-.        // Goto
                                                        bsout
 1805                           
 1806    000000A8 ........              DC32    BELL            // At beginning
                                                                 of TIB issue
                                                                 bell
 1807    000000AC ........              DC32    BRAN            // Goto end of
                                                                 loop
 1808    000000B0 60000000              DC32     EXPE33-.
 1809                           
 1810                           EXPE6:
 1811    000000B4 ........              DC32    BSOUT           // endif
 1812                           
 1813                           EXPE7:  // LABEL NOT USED BECAUSE BELL AND
                                 BSOUT EMIT THEMSELVES
 1814    000000B8 ........              DC32    BRAN            // Goto end of
                                                                 loop
 1815    000000BC 54000000              DC32     EXPE33-.
 1816                           
 1817                           EXPE2:
 1818    000000C0 ........              DC32    DUP
 1819    000000C4 ........0D000         DC32    LIT, 0x0D       // cr
                  000          
 1820    000000CC ........              DC32    EQUAL
 1821    000000D0 ........              DC32    ZBRAN           // If not
                                                                 cr
 1822    000000D4 1C000000              DC32     EXPE4-.        // Goto save
                                                        this char and loop
                                                        again
 1823                           
 1824    000000D8 ........              DC32    LEAVE           // Leave
                                                                 loop
 1825    000000DC ........              DC32    DROP            // Cleanup to
                                                                 leave
                                                                 loop
 1826    000000E0 ........              DC32    BLANK           // Space
                                                                 char
 1827    000000E4 ........              DC32    ZERO            // and a
                                                                 null
 1828    000000E8 ........              DC32    BRAN            // Goto store
                                                                 these end end
                                                                 loop
 1829    000000EC 08000000              DC32     EXPE5-.
 1830                           
 1831                           EXPE4:
 1832    000000F0 ........              DC32    DUP             // Regular char
                                                                 
 1833                           
 1834                           EXPE5:
 1835    000000F4 ........              DC32    I
 1836    000000F8 ........              DC32    CSTORE
 1837    000000FC ........              DC32    ZERO
 1838    00000100 ........              DC32    I
 1839    00000104 ........              DC32    ONEP
 1840    00000108 ........              DC32    CSTORE
 1841                           
 1842                           EXPE3:
 1843    0000010C ........              DC32    EMIT
 1844                           
 1845                           EXPE33:
 1846    00000110 ........              DC32    XLOOP
 1847    00000114 10FFFFFF              DC32     EXPE1-.
 1848                           
 1849                           #ifdef XON_XOFF
 1850    00000118 ........              DC32    XOFF    // DONE HERE FOR CASE
                                                         OF COUNT  VS
                                                         CR
 1851                           #endif
 1852                           
 1853    0000011C ........              DC32    DROP
 1854    00000120 ........              DC32    SEMIS
 1855                           
 1856                           
 1857                           //      TYPE TYPE:      ( addr count --
                                 )
 1858                           //      ADDR must be ALIGNED!
 1859                           //      OUT MUST BE INITIALIZED!!
 1860                           //      EMIT COUNT OF 8-bits in a string,
                                 preferably ascii characters,
 1861                           //      (last nfa char (+80h)ok!) from addr
                                 thru count,
 1862                           
 1863                            SECTION .text : CONST (2)
 1864                           TYPE_NFA:
 1865    00000000 84                    DC8     0x84
 1866    00000001 545950                DC8     'TYP'
 1867    00000004 C5                    DC8     'E'+0x80
 1868    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1869    00000008 ........              DC32    EXPECT_NFA
 1870                           TYPE:
 1871    0000000C ........              DC32    DOCOL
 1872    00000010 ........              DC32    ZNDUP
 1873    00000014 ........              DC32    ZBRAN   // IF
 1874    00000018 3C000000              DC32     TYPE1-.
 1875                           
 1876    0000001C ........              DC32    OVER
 1877    00000020 ........              DC32    PLUS
 1878    00000024 ........              DC32    SWAP
 1879    00000028 ........              DC32    XDO     // DO
 1880                           
 1881                           TYPE2:
 1882    0000002C ........              DC32    I
 1883    00000030 ........              DC32    CAT
 1884    00000034 ........7F000         DC32    LIT, 0x7F
                  000          
 1885    0000003C ........              DC32    ANDD    //STRIP 80H FROM LAST
                                                         CHAR
 1886    00000040 ........              DC32    EMIT
 1887                           
 1888                           tt1:
 1889    00000044 ........              DC32    XLOOP   // LOOP
 1890                           
 1891                           tt2:
 1892    00000048 E4FFFFFF              DC32     TYPE2-.
 1893                           
 1894    0000004C ........              DC32    BRAN    // ELSE
 1895    00000050 08000000              DC32     TYPE3-.
 1896                           
 1897                           TYPE1:
 1898    00000054 ........              DC32    DROP    // endif
 1899                           
 1900                           TYPE3:
 1901    00000058 ........              DC32    SEMIS
 1902                           
 1903                           
 1904                           //      COUNT COUNT:    ( addr1 --- addr2 n
                                 )
 1905                           //      Leave the byte address addr2 and byte
                                 count n of a message text
 1906                           //      beginning at address addr1. It is
                                 presumed that the first byte at
 1907                           //      addr1 contains the text byte count and
                                 the actual text starts with
 1908                           //      the second byte.
 1909                           //      Typically COUNT is followed by
                                 TYPE.
 1910                           //      See TYPE and $LEN
 1911                           
 1912                            SECTION .text : CONST (2)
 1913                           COUNT_NFA:
 1914    00000000 85                    DC8     0x85
 1915    00000001 434F554E              DC8     'COUN'
 1916    00000005 D4                    DC8     'T'+0x80
 1917    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 1918    00000008 ........              DC32    TYPE_NFA
 1919                           COUNT:
 1920    0000000C ........              DC32    DOCOL
 1921    00000010 ........              DC32    DUP
 1922    00000014 ........              DC32    ONEP
 1923    00000018 ........              DC32    SWAP
 1924    0000001C ........              DC32    CAT
 1925    00000020 ........              DC32    SEMIS
 1926                           
 1927                           
 1928                           //       $LEN NULLSTRLEN:       ( addr - addr
                                 len )
 1929                           //       Count length of null terminated
                                 string.
 1930                           //       TYPE can be used after this
                                 word.
 1931                           
 1932                            SECTION .text : CONST (2)
 1933                           NLEN_NFA:
 1934    00000000 84                    DC8     0x84
 1935    00000001 244C45                DC8     '$LE'
 1936    00000004 CE                    DC8     'N'+0x80
 1937    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 1938    00000008 ........              DC32    COUNT_NFA
 1939                           NULLSTRLEN:
 1940    0000000C ........              DC32    .+5
 1941                            SECTION .text : CODE (2)
 1942                                   NDPOP2w                         // Get
                                 but leave addr on stack
 1942.1  00000000 3A68                  LDR     w, [p]
 1942.2                                 ENDM
 1943    00000002 4040                  EORS            t, t            //
                                                         Count
 1944                           NLENL:
 1945    00000004 115C                  LDRB            n, [w,t]
 1946    00000006 0943                  ORRS            n, n
 1947    00000008 01D0                  BEQ             NLENX
 1948    0000000A 401C                  ADDS            t, t, #1
 1949    0000000C FAE7                  B               NLENL
 1950                           NLENX:
 1951                                   TPUSH
 1951                                   PUSHt   // push t to p, pre decrement
                                 p
 1951.1  0000000E 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 1951.2  00000010 3860                  STR     t, [p]
 1951.3                                 ENDM
 1951                                   NEXT
 1951.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 1951                                   NEXT1
 1951.1  00000014 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 1951.2  00000016 9847                  BLX     x
 1951.3                          LTORG
 1951.4                          LTORG
 1951.5  00000018 ........               TABLE
 1951.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 1951.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 1951.8                                 ENDM
 1951.9                                 ENDM
 1951.10                                ENDM
 1952                           
 1953                           
 1954                           //      SPACES SPACES:  ( n -- )
 1955                           //      Transmit n ascii blanks (0x20) to the
                                 output device.
 1956                           
 1957                            SECTION .text : CONST (2)
 1958                           SPACES_NFA:
 1959    00000000 86                    DC8     0x86
 1960    00000001 5350414345            DC8     'SPACE'
 1961    00000006 D3                    DC8     'S'+0x80
 1962    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 1963    00000008 ........              DC32    NLEN_NFA
 1964                           SPACES:
 1965    0000000C ........              DC32    DOCOL
 1966    00000010 ........              DC32    ZERO
 1967    00000014 ........              DC32    MAX
 1968    00000018 ........              DC32    ZNDUP
 1969    0000001C ........              DC32    ZBRAN
 1970    00000020 18000000              DC32     SPAX1-.
 1971                           
 1972    00000024 ........              DC32    ZERO
 1973    00000028 ........              DC32    XDO     //DO
 1974                           SPAX2:
 1975    0000002C ........              DC32    SPACE
 1976    00000030 ........              DC32    XLOOP   //LOOP
 1977    00000034 F8FFFFFF              DC32     SPAX2-.
 1978                           
 1979                           SPAX1:
 1980    00000038 ........              DC32    SEMIS
 1981                           
 1982                           
 1983                           //      ." DOTQ:        ( -- ) MODIFIED:
 1984                           //      Type quoted string out or compile
                                 inline string to be typed at runtime
 1985                           //      CHANGED COMPILE TIME ACTION TO WORK
                                 WITH 4 byte alighment REQUIREMENT.
 1986                           //      Used in the form:
 1987                           //              .' cccc"
 1988                           //      Compiles an in-line string cccc
                                 (delimited by the trailing ") with
 1989                           //      an execution proceedure to transmit
                                 the text to the output device.
 1990                           //      If executed outside a definition, ."
                                 will immediately print the text
 1991                           //      until the final ',. The maximum number
                                 of characters may be an
 1992                           //      installation dependent value. See
                                 (.").
 1993                           
 1994                            SECTION .text : CONST (2)
 1995                           DOTQ_NFA:
 1996    00000000 C2                    DC8     0x0C2
 1997    00000001 2E                    DC8     '.'
 1998    00000002 A2                    DC8     '"'+0x80
 1999    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2000    00000004 ........              DC32    SPACES_NFA
 2001                           DOTQ:
 2002    00000008 ........              DC32    DOCOL
 2003    0000000C ........22000         DC32    LIT, '"'        // 0x22 ending
                                                      qoute delimiter for
                                                      word
                  000          
 2004    00000014 ........              DC32    STATE_UV
 2005    00000018 ........              DC32    AT
 2006    0000001C ........              DC32    ZBRAN   // IF Not COMPILING
 2007    00000020 2C000000              DC32     DOTQ1-.
 2008                           
 2009    00000024 ........              DC32    COMP    // COMPILING
 2010    00000028 ........              DC32    PDOTQ   // compile LIT,
                                                         cnt-str-addr, COUNT,
                                                         TYPE
 2011                           //        DC32    LIT, PDOTQ, COMMA
 2012    0000002C ........              DC32    WORD   // ( cH-DELIM  --- ) 
                                                        CHCNT-STR OF TOKEN TO
                                                        HERE
 2013    00000030 ........              DC32    HERE
 2014    00000034 ........              DC32    CAT
 2015    00000038 ........              DC32    ONEP
 2016    0000003C ........              DC32    ALIGNED
 2017    00000040 ........              DC32    ALLOT
 2018    00000044 ........              DC32    BRAN    // ELSE
 2019    00000048 14000000              DC32     DOTQ2-.
 2020                           DOTQ1:
 2021    0000004C ........              DC32    WORD   // ( cH-DELIM  --- ) 
                                                        CHCNT-STR OF TOKEN TO
                                                        HERE
 2022    00000050 ........              DC32    HERE
 2023    00000054 ........              DC32    COUNT
 2024    00000058 ........              DC32    TYPE    // endif
 2025                           DOTQ2:
 2026    0000005C ........              DC32    SEMIS
 2027                           
 2028                           
 2029                           //      FORGET FORGET:  ( -- )  MODIFIED:
 2030                           //      PRINTS NEW HERE IF SUCCESSFUL. FIXED
                                 FIG VERSION MEMORY LEAK.
 2031                           //      Executed in the form:
 2032                           //      FORGET cccc
 2033                           //      Deletes definition named cccc from the
                                 dictionary with all entries
 2034                           //      physically following it. In fig-FORTH,
                                 an error message will occur
 2035                           //      if the CURRENT and CONTEXT vocabularie
                                s are not currently the same.
 2036                           //      MODIFIED: To update Current along with
                                 context and reset DP,
 2037                           //      PRINT OUT HERE
 2038                           
 2039                            SECTION .text : CONST (2)
 2040                           FORGET_NFA:
 2041    00000000 86                    DC8     0x86
 2042    00000001 464F524745            DC8     'FORGE'
 2043    00000006 D4                    DC8     'T'+0x80
 2044    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2045    00000008 ........              DC32    DOTQ_NFA
 2046                           FORGET:
 2047    0000000C ........              DC32    DOCOL
 2048    00000010 ........              DC32    TICK            // ( -- pfa )
                                                                 ELSE error
                                                                 message
 2049    00000014 ........              DC32    DUP
 2050    00000018 ........00400         DC32    LIT, 0x4000     // MYWORDS WILL
                                                      LIST WORDS SAVED IN
                                                      FLASH
                  000          
 2051    00000020 ........              DC32    LESSTHAN
 2052    00000024 .............         DC32    LIT, msg_forget_fish
                  ...          
 2053    0000002C ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 2054    00000030 ........              DC32    DUP
 2055    00000034 ........00800         DC32    LIT, 0x8000     // MYWORDS WILL
                                                      LIST WORDS SAVED IN
                                                      FLASH
                  000          
 2056    0000003C ........              DC32    LESSTHAN
 2057    00000040 .............         DC32    LIT, msg_forget_saved
                  ...          
 2058    00000048 ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 2059                           //      PATCH TO MOVE NFA update of the DP to
                                 after Currrent and Context
 2060    0000004C ........              DC32    DUP             // pfa
 2061    00000050 ........              DC32    LFA
 2062    00000054 ........              DC32    AT
 2063                           //      PATCH END
 2064    00000058 ........              DC32    CURRENT_UV
 2065    0000005C ........              DC32    STORE
 2066    00000060 ........              DC32    NFA
 2067    00000064 ........              DC32    DP_UV
 2068    00000068 ........              DC32    STORE
 2069    0000006C .............         DC32    HERE, DOT
                  ...          
 2070    00000074 ........              DC32    SEMIS
 2071                           
 2072                           
 2073                           //      WORDS WORDS:    ( -- ) RENAMED: VLIST
                                 to WORDS
 2074                           //      Output list of Words in the dictionary
                                 in search order.
 2075                           //      Uses WC_ nfa's to format Word
                                 Categories.
 2076                           //      Uses FENCE for where to stop.
 2077                           //      See MYWORDS.
 2078                           
 2079                            SECTION .text : CONST (2)
 2080                           WORDS_NFA:
 2081    00000000 85                    DC8     0x85
 2082    00000001 574F5244              DC8     'WORD'
 2083    00000005 D3                    DC8     'S'+0x80
 2084    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2085    00000008 ........              DC32    FORGET_NFA
 2086                           WORDS:
 2087    0000000C ........              DC32    DOCOL
 2088    00000010 .............         DC32    THREE, SPACES
                  ...          
 2089    00000018 ........              DC32    LATEST
 2090                                   
 2091                           VLIS1:  // ADD nfa length to current out_uv &
                                 verify it doesn't violate csll.
 2092                           
 2093    0000001C .............         DC32    ZERO, OVER      // -- nfa zero
                                                       nfa
                  ...          
 2094    00000024 .............         DC32    ONEP, CAT       // If wc_
                                                       header skip
                  ...          
 2095    0000002C ........0D000         DC32    LIT, 0x0D       // -- nfa zero
                                                      (c@) 0x0D
                  000          
 2096    00000034 .............         DC32    EQUAL, ZEQU     // -- nfa zerro
                                                        flag
                  ...          
 2097    0000003C ........              DC32    ZBRAN           // -- nfa
                                                                 zero
 2098    00000040 1C000000              DC32     WORDS2-.       // wc_
                                                         goto
 2099                                   
 2100    00000044 ........              DC32    DROP            // --
                                                                 nfa
 2101    00000048 .............         DC32    DUP, PFA, LFA   // -- nfa
                                                      lfa
                  ...........  
 2102    00000054 .............         DC32    OVER, SUBB      // -- nfa (lfa
                                                       - nfa)
                  ...          
 2103                           
 2104                           WORDS2: // -- nfa n
 2105                           
 2106    0000005C .............         DC32    OUT_UV, AT
                  ...          
 2107    00000064 ........              DC32    PLUS
 2108    00000068 ........              DC32    CSLL            // Line length
                                                                 constant
 2109    0000006C ........              DC32    GREATERTHAN
 2110    00000070 ........              DC32    ZBRAN           // If not at
                                                                 end of
                                                                 line
 2111    00000074 10000000              DC32     VLIS2-.        // skip cr and
                                                        out reset
 2112                           
 2113    00000078 ........              DC32    CR              // Start
                                                                 another
                                                                 line
 2114    0000007C .............         DC32    THREE, SPACES
                  ...          
 2115                           
 2116                           VLIS2:
 2117                           
 2118                           #ifdef  IO2TP
 2121                           #endif
 2122                           
 2123                           // FOR MYWORDS TEST FENCE NAD STOP IF
                                 LESS
 2124    00000084 ........              DC32    DUP             // nfa
 2125    00000088 .............         DC32    FENCE_UV, AT
                  ...          
 2126    00000090 ........              DC32    LESSTHAN
 2127    00000094 ........              DC32    ZBRAN
 2128    00000098 0C000000              DC32     WORDSCONT-.
 2129                           
 2130    0000009C ........              DC32    BRAN
 2131    000000A0 64000000              DC32     WORDSDONE-.
 2132                           
 2133                           WORDSCONT:
 2134    000000A4 ........              DC32    DUP             // nfa
 2135    000000A8 ........              DC32    IDDOT
 2136    000000AC .............         DC32    TWO, SPACES
                  ...          
 2137                           
 2138    000000B4 .............         DC32    DUP, ONEP, CAT  // Take nfa and
                                                      look for WORDCAT
                                                      signature
                  ...........  
 2139    000000C0 ........0D000         DC32    LIT, 0x0D       // which is
                                                      cr
                  000          
 2140    000000C8 ........              DC32    EQUAL
 2141    000000CC ........              DC32    ZBRAN           // If not
                                                                 wordcat
 2142    000000D0 10000000              DC32     NOT_WC-.       // skip
 2143    000000D4 .............         DC32    ZERO, OUT_UV    // Set out_uv
                                                       to zero
                  ...          
 2144    000000DC ........              DC32    STORE
 2145                           
 2146                           NOT_WC:
 2147    000000E0 ........              DC32    PFA             // ( nfa -- pfa
                                                                 )
 2148    000000E4 ........              DC32    LFA             // ( pfa -- lfa
                                                                 )
 2149    000000E8 ........              DC32    AT              // Is next
                                                                 lfa
 2150    000000EC ........              DC32    DUP
 2151    000000F0 ........              DC32    ZEQU            // Zero = end
                                                                 of dictionary
 2152                           
 2153                           #ifdef BREAK_KEY
 2155                           #else
 2156    000000F4 ........              DC32    ZERO            // No break
                                                                 key
 2157                           #endif
 2158                           
 2159    000000F8 ........              DC32    OR
 2160    000000FC ........              DC32    ZBRAN           // Until break
                                                                 key or end of
                                                                 dictionary
 2161    00000100 1CFFFFFF              DC32     VLIS1-.
 2162                           
 2163                           #ifdef  IO2TP
 2166                           #endif
 2167                           
 2168                           WORDSDONE:
 2169    00000104 .............         DC32    DROP, CR
                  ...          
 2170    0000010C ........              DC32    SEMIS
 2171                           
 2172                           
 2173                           //      MYWORDS MYWORDS: ( -- )
 2174                           //      PRINT ONLY USER DEFINED WORDS BY
                                 MANIPULATING FENCE.
 2175                           
 2176                            SECTION .text : CONST (2)
 2177                           MYWORDS_NFA:
 2178    00000000 87                    DC8     0x87
 2179    00000001 4D59574F5244          DC8     'MYWORD'
 2180    00000007 D3                    DC8     'S'+0x80
 2181                            ALIGNROM 2,0xFFFFFFFF
 2182    00000008 ........              DC32    WORDS_NFA
 2183                           MYWORDS:
 2184    0000000C ........              DC32    DOCOL
 2185                           //        DC32    RBASE, LATEST, LESSTHAN // 0
                                 if no words defined in ram
 2186                           //        DC32    ZBRAN
 2187                           //        DC32    MWSEMIS-.
 2188                           
 2189                           //        DC32    DBASE, PFA, LFA         //
                                 lfa of first word
 2190                           //        DC32    DUP, AT, TOR            //
                                 save lfa value to restore it
 2191                           //        DC32    DUP, ZERO, SWAP, STORE  //
                                 put end of dictionary here
 2192                           
 2193    00000010 ........00400         DC32   LIT, 0x4000
                  000          
 2194    00000018 .............         DC32   FENCE_UV, STORE
                  ...          
 2195                           
 2196    00000020 ........              DC32    WORDS                   // now
                                                                         print
                                                                         words
                                                                         in
                                                                         ram
 2197                           
 2198    00000024 .............         DC32    ZERO, FENCE_UV, STORE
                  ...........  
 2199                           
 2200                           //        DC32    FROMR, SWAP, STORE      //
                                 restore lfa linking rest of words
 2201                           //MWSEMIS:
 2202    00000030 ........              DC32    SEMIS
 2203                           
 2204                           
 2205                           //      BYE BYE: ( -- ) COLD RESTART WITH
                                 SERIAL INITIALIZATION
 2206                           
 2207                            SECTION .text : CONST (2)
 2208                           BYE_NFA:
 2209    00000000 83                    DC8     0x83
 2210    00000001 4259                  DC8     'BY'
 2211    00000003 C5                    DC8     'E'+0x80
 2212                            ALIGNROM 2,0xFFFFFFFF
 2213    00000004 ........              DC32    MYWORDS_NFA
 2214                           BYE:
 2215    00000008 ........              DC32    DOCOL
 2216    0000000C ........              DC32    RET2c   // COLD Restart
 2217    00000010 ........              DC32    ABORT   // WARM Restart
 2218                           
 2219                           
 2220                           //      ABORT ABORT:    ( -- )  L0
 2222                           //      DOES NOT RESET DICTIONAIRY. SEE
                                 COLD.
 2223                           
 2224                            SECTION .text : CONST (2)
 2225                           ABORT_NFA:
 2226    00000000 85                    DC8     0x85
 2227    00000001 41424F52              DC8     'ABOR'
 2228    00000005 D4                    DC8     'T'+0x80
 2229    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2230    00000008 ........              DC32    BYE_NFA
 2231                           ABORT:
 2232    0000000C ........              DC32    DOCOL
 2233    00000010 ........              DC32    SPSTO
 2234    00000014 ........              DC32    RPSTO
 2235    00000018 ........              DC32    CLRTIB
 2236    0000001C .............         DC32    ZERO, OUT_UV, STORE
                  ...........  
 2237    00000028 ........              DC32    QSTACK  // IF STACK error abort
                                                         using qerr
 2238    0000002C ........              DC32    HEX
 2239                           //      PATCH for not using vocabularies.
 2240                           //      DC32    FORTH
 2241                           //      DC32    DEFIN
 2242    00000030 ........              DC32    QUIT    // OI
 2243                           
 2244                           #ifdef IO2TP
 2246                           #endif
 2247                           
 2248    00000034 ........              DC32   RPSTO
 2249                           
 2250                           #ifdef IO2TP
 2252                           #endif
 2253                           
 2254    00000038 ........              DC32    CLRTIB
 2255    0000003C ........              DC32    SPSTO
 2256    00000040 ........              DC32    QUIT    // FROM Abort
 2257                           
 2258                           
 2259                           //      COLD COLD:      ( -- )  MODIFIED:
 2260                           //      FIGISH SYSTEM COLD = WARM (INIT
                                 RAMVARSPACE) -> TYPE SIGNON MSG ->ABORT
 2261                           //      CLEARS DICTIONAIRY. SEE ABORT.
 2262                           
 2263                            SECTION .text : CONST (2)
 2264                           COLD_NFA:
 2265    00000000 84                    DC8     0x84
 2266    00000001 434F4C                DC8     'COL'
 2267    00000004 C4                    DC8     'D'+0x80
 2268    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2269    00000008 ........              DC32    ABORT_NFA
 2270                           COLD:
 2271    0000000C ........              DC32    DOCOL
 2272    00000010 ........              DC32    WARM            // RAMVARSPACE
                                                                 Init
 2273    00000014 .............         DC32    CR, SIGNON, CR  // REPLACE with
                                                     PDOTQ
                  ...........  
 2274    00000020 ........              DC32    ABORT
 2275                           
 2276                           
 2277                           //NOEXEC HEADERFORWORDCATEGORIES
 2278                           //      WC_FISH_SYS: = FISH SYSTEM CATEGORY
 2279                           
 2280                            SECTION .text : CONST (2)
 2281                           WC_FISH_SYS_NFA:
 2282    00000000 90                    DC8     0x80+4+12
 2283    00000001 0D0A                  DC8     0x0D, 0x0A
 2284    00000003 4649534820535         DC8     'FISH SYSTEM:'
                  95354454D3A  
 2285    0000000F 0D8A                  DC8     0x0D, 0x0A+0x80
 2286    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2287    00000014 ........              DC32    COLD_NFA
 2288                           
 2289                           
 2290                           //      -DUP ZNDUP:     ( n1 -- n1 (if zero) 
                                 ( n1 -- n1 n1 (non-zero)
 2291                           //      Reproduce n1 only if it is non-zero.
 2292                           //       This is usually used to copy a value
                                 just before IF, to eliminate
 2293                           //       the need for an ELSE part to drop
                                 it.
 2294                           
 2295                            SECTION .text : CONST (2)
 2296                           DDUP_NFA:
 2297    00000000 84                    DC8     0x84
 2298    00000001 2D4455                DC8     '-DU'
 2299    00000004 D0                    DC8     'P'+0x80
 2300    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2301    00000008 ........              DC32    WC_FISH_SYS_NFA
 2302                           ZNDUP:
 2303    0000000C ........              DC32    DOCOL
 2304    00000010 ........              DC32    DUP
 2305    00000014 ........              DC32    ZBRAN   // IF
 2306    00000018 08000000              DC32    DDUP1-.
 2307                           
 2308    0000001C ........              DC32    DUP     //endif
 2309                           DDUP1:
 2310    00000020 ........              DC32    SEMIS
 2311                           
 2312                           
 2313                           //      ROT ROT: ( nl n2 n3 --- n2 n3 nl
                                 )
 2314                           //      Rotate the top three values on the
                                 stack, bringing the third to the top.
 2315                           
 2316                            SECTION .text : CONST (2)
 2317                           ROT_NFA:
 2318    00000000 83                    DC8     0x83
 2319    00000001 524F                  DC8     'RO'
 2320    00000003 D4                    DC8     'T'+0x80
 2321                            ALIGNROM 2,0xFFFFFFFF
 2322    00000004 ........              DC32    DDUP_NFA
 2323                           ROT:
 2324    00000008 ........              DC32    .+5
 2325                            SECTION .text : CODE (2)
 2326                                   POP2w
 2326.1  00000000 3A68                  LDR     w, [p]
 2326.2  00000002 3F1D                  ADDS    p, p, #4
 2326.3                                 ENDM
 2327                                   POP2n
 2327.1  00000004 3968                  LDR     n, [p]
 2327.2  00000006 3F1D                  ADDS    p, p, #4
 2327.3                                 ENDM
 2328                                   POP2t
 2328.1  00000008 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 2328.2  0000000A 3F1D                  ADDS    p, p, #4
 2328.3                                 ENDM
 2329                                   PUSHn
 2329.1  0000000C 3F1F                  SUBS    p, p, #4        // push n to p,
                                                 pre decrement p
 2329.2  0000000E 3960                  STR     n, [p]
 2329.3                                 ENDM
 2330                                   DPUSH                   //  --  LSW
                                 MSW )
 2330                                   PUSHw   // push w to p, pre decrement
                                 p
 2330.1  00000010 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 2330.2  00000012 3A60                  STR     w, [p]
 2330.3                                 ENDM
 2330                                   TPUSH
 2330                                   PUSHt   // push t to p, pre decrement
                                 p
 2330.1  00000014 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 2330.2  00000016 3860                  STR     t, [p]
 2330.3                                 ENDM
 2330                                   NEXT
 2330.1  00000018 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 2330                                   NEXT1
 2330.1  0000001A 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2330.2  0000001C 9847                  BLX     x
 2330.3                          LTORG
 2330.4  0000001E 0000           LTORG
 2330.5  00000020 ........               TABLE
 2330.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2330.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2330.8                                 ENDM
 2330.9                                 ENDM
 2330.10                                ENDM
 2330.11                                ENDM
 2331                           
 2332                           
 2333                           //      I I:    ( -- n )
 2334                           //  Used within a DO-LOOP to copy the loop
                                 index to the stack. Other use
 2335                           //  is implementation dependent.
 2336                           //  See R.
 2337                           
 2338                            SECTION .text : CONST (2)
 2339                           I_NFA:
 2340    00000000 81                    DC8     0x81
 2341    00000001 C9                    DC8     'I'+0x80
 2342    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2343    00000004 ........              DC32    ROT_NFA
 2344                           I:
 2345    00000008 ........              DC32    .+5
 2346                            SECTION .text : CODE (2)
 2347    00000000 3068                  ldr     t, [r]  // GET INDEX VALUE
 2348                                   TPUSH
 2348                                   PUSHt   // push t to p, pre decrement
                                 p
 2348.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2348.2  00000004 3860                  STR     t, [p]
 2348.3                                 ENDM
 2348                                   NEXT
 2348.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2348                                   NEXT1
 2348.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2348.2  0000000A 9847                  BLX     x
 2348.3                          LTORG
 2348.4                          LTORG
 2348.5  0000000C ........               TABLE
 2348.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2348.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2348.8                                 ENDM
 2348.9                                 ENDM
 2348.10                                ENDM
 2349                           
 2350                           
 2351                           //      SP@ SPAT:       ( -- addr )
 2352                           //      ( -- addr = Current TOP of the
                                 parameter stack (p) )
 2353                           //       Place the address of the TOP of the
                                 parameter stack (p)
 2354                           //      on the parameter stack (p) as it was
                                 before RP@ was executed.
 2355                           //       e.g.  1  2  SP@  @  .   .   .    
                                 would type 2  2  1
 2356                           
 2357                            SECTION .text : CONST (2)
 2358                           SPAT_NFA:
 2359    00000000 83                    DC8     0x83
 2360    00000001 5350                  DC8     'SP'
 2361    00000003 C0                    DC8     '@'+0x80
 2362                            ALIGNROM 2,0xFFFFFFFF
 2363    00000004 ........              DC32    I_NFA
 2364                           SPAT:
 2365    00000008 ........              DC32    .+5
 2366                            SECTION .text : CODE (2)
 2367    00000000 3846                  MOV             t, p
 2368                                   TPUSH
 2368                                   PUSHt   // push t to p, pre decrement
                                 p
 2368.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2368.2  00000004 3860                  STR     t, [p]
 2368.3                                 ENDM
 2368                                   NEXT
 2368.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2368                                   NEXT1
 2368.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2368.2  0000000A 9847                  BLX     x
 2368.3                          LTORG
 2368.4                          LTORG
 2368.5  0000000C ........               TABLE
 2368.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2368.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2368.8                                 ENDM
 2368.9                                 ENDM
 2368.10                                ENDM
 2369                           
 2370                           
 2371                           //      RP@     RPAT:   ( -- addr )
 2372                           //      ( -- addr = Current TOP of the Return
                                 Stack (r) )
 2373                           //       Place the address of the TOP of the
                                 return stack (r)
 2374                           //      on the parameter stack (p) as it was
                                 before RP@ was executed.
 2375                           //       e.g.  1 >R  2 >R  RP@  @  .   .   .
                                 would type 2  2  1
 2376                           
 2377                            SECTION .text : CONST (2)
 2378                           RPAT_NFA:
 2379    00000000 83                    DC8     0x83
 2380    00000001 5250                  DC8     'RP'
 2381    00000003 C0                    DC8     '@'+0x80
 2382                            ALIGNROM 2,0xFFFFFFFF
 2383    00000004 ........              DC32    SPAT_NFA
 2384                           RPAT:
 2385    00000008 ........              DC32    .+5
 2386                            SECTION .text : CODE (2)
 2387    00000000 3046                  MOV             t, r
 2388                                   TPUSH
 2388                                   PUSHt   // push t to p, pre decrement
                                 p
 2388.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2388.2  00000004 3860                  STR     t, [p]
 2388.3                                 ENDM
 2388                                   NEXT
 2388.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2388                                   NEXT1
 2388.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2388.2  0000000A 9847                  BLX     x
 2388.3                          LTORG
 2388.4                          LTORG
 2388.5  0000000C ........               TABLE
 2388.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2388.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2388.8                                 ENDM
 2388.9                                 ENDM
 2388.10                                ENDM
 2389                           
 2390                           
 2391                           //      SP!     SPSTO:  ( -- )
 2392                           //       A computer dependent proceedure to
                                 initialize the stack pointer from
 2393                           //       INITSO, 'This' users stack pointer
                                 initialization value
 2394                           
 2395                            SECTION .text : CONST (2)
 2396                           SPSTO_NFA:
 2397    00000000 83                    DC8     0x83
 2398    00000001 5350                  DC8     'SP'
 2399    00000003 A1                    DC8     '!'+0x80
 2400                            ALIGNROM 2,0xFFFFFFFF
 2401    00000004 ........              DC32    RPAT_NFA
 2402                           SPSTO:
 2403    00000008 ........              DC32    .+5
 2404                            SECTION .text : CODE (2)
 2405    00000000 024A                  LDR     w, =INITSO      // USER VAR
                                                     BASE ADDR, Initially set
                                                     to PINIT
 2406    00000002 1768                  LDR     p, [w]          // RESET
                                                 PARAMETER STACK PTR
 2407                                   NEXT
 2407.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2407                                   NEXT1
 2407.1  00000006 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2407.2  00000008 9847                  BLX     x
 2407.3                          LTORG
 2407.4  0000000A 0000           LTORG
 2407.5  0000000C ........               TABLE
 2407.6  00000010 ........              Reference on line 2405 
 2407.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2407.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2407.9                                 ENDM
 2407.10                                ENDM
 2408                            LTORG
 2409                           
 2410                           
 2411                           //      RP! RPSTO:      ( -- )
 2412                           //      A computer dependent proceedure to
                                 initialize the return stack
 2413                           //       pointer from user variable R0.
 2414                           
 2415                            SECTION .text : CONST (2)
 2416                           RPSTO_NFA:
 2417    00000000 83                    DC8     0x83
 2418    00000001 5250                  DC8     'RP'
 2419    00000003 A1                    DC8     '!'+0x80
 2420                            ALIGNROM 2,0xFFFFFFFF
 2421    00000004 ........              DC32    SPSTO_NFA
 2422                           RPSTO:
 2423    00000008 ........              DC32    .+5
 2424                            SECTION .text : CODE (2)
 2425    00000000 024A                  LDR     w, =INITRO      // USER VAR
                                                     BASE ADDR, Initially set
                                                     to RINIT
 2426    00000002 1668                  LDR     r, [w]          // SET RETURN
                                                 STACK PTR
 2427                                   NEXT
 2427.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2427                                   NEXT1
 2427.1  00000006 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2427.2  00000008 9847                  BLX     x
 2427.3                          LTORG
 2427.4  0000000A 0000           LTORG
 2427.5  0000000C ........               TABLE
 2427.6  00000010 ........              Reference on line 2425 
 2427.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2427.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2427.9                                 ENDM
 2427.10                                ENDM
 2428                            LTORG
 2429                           
 2430                           
 2431                           //      LEAVE LEAVE:    ( -- )
 2432                           //       Force termination of a DO-LOOP at the
                                 next opportunity by setting
 2433                           //       the loop limit equal to the current
                                 value of the index. The index
 2434                           //       itself remains unchanged, and
                                 execution proceeds until LOOP
 2435                           //       or +LOOP is encountered.
 2436                           
 2437                            SECTION .text : CONST (2)
 2438                           LEAVE_NFA:
 2439    00000000 85                    DC8     0x85
 2440    00000001 4C454156              DC8     'LEAV'
 2441    00000005 C5                    DC8     'E'+0x80
 2442    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2443    00000008 ........              DC32    RPSTO_NFA
 2444                           LEAVE:
 2445    0000000C ........              DC32    .+5
 2446                            SECTION .text : CODE (2)
 2447    00000000 3268                  lDR     w, [r]          // GET
                                                 Index
 2448    00000002 7260                  STR     w, [r, #4]  // Store it at
                                                 Limit
 2449                                   NEXT
 2449.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2449                                   NEXT1
 2449.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2449.2  00000008 9847                  BLX     x
 2449.3                          LTORG
 2449.4  0000000A 0000           LTORG
 2449.5  0000000C ........               TABLE
 2449.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2449.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2449.8                                 ENDM
 2449.9                                 ENDM
 2450                           
 2451                           
 2452                           //      >R TOR: ( n -- )
 2453                           //       Remove a number from the computation
                                 stack and place as the most
 2454                           //       accessable on the return stack. Use
                                 should be balanced with R> in
 2455                           //       the same definition.
 2456                           
 2457                            SECTION .text : CONST (2)
 2458                           TOR_NFA:
 2459    00000000 82                    DC8     0x82
 2460    00000001 3E                    DC8     '>'
 2461    00000002 D2                    DC8     'R'+0x80
 2462    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2463    00000004 ........              DC32    LEAVE_NFA
 2464                           TOR:
 2465    00000008 ........              DC32    .+5
 2466                            SECTION .text : CODE (2)
 2467                                   POP2n
 2467.1  00000000 3968                  LDR     n, [p]
 2467.2  00000002 3F1D                  ADDS    p, p, #4
 2467.3                                 ENDM
 2468                                   PUSHn2r
 2468.1  00000004 361F                  SUBS    r, r, #4        //  push t to
                                                 r, pre decrement r
 2468.2  00000006 3160                  STR     n, [r]
 2468.3                                 ENDM
 2469                                   NEXT
 2469.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2469                                   NEXT1
 2469.1  0000000A 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2469.2  0000000C 9847                  BLX     x
 2469.3                          LTORG
 2469.4  0000000E 0000           LTORG
 2469.5  00000010 ........               TABLE
 2469.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2469.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2469.8                                 ENDM
 2469.9                                 ENDM
 2470                           
 2471                           
 2472                           //      R> FROMR:       ( -- n )              
                                             L0
 2473                           //  Remove the top value from the return stack
                                 and leave it on the
 2474                           //  computation stack. See >R and R.
 2475                           
 2476                            SECTION .text : CONST (2)
 2477                           FROMR_NFA:
 2478    00000000 82                    DC8     0x82
 2479    00000001 52                    DC8     'R'
 2480    00000002 BE                    DC8     '>'+0x80
 2481    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2482    00000004 ........              DC32    TOR_NFA
 2483                           FROMR:
 2484    00000008 ........              DC32    .+5
 2485                            SECTION .text : CODE (2)
 2486                                   POPr2t
 2486.1  00000000 3068                  LDR     t, [r]
 2486.2  00000002 361D                  ADDS    r, r, #4
 2486.3                                 ENDM
 2487                                   TPUSH
 2487                                   PUSHt   // push t to p, pre decrement
                                 p
 2487.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2487.2  00000006 3860                  STR     t, [p]
 2487.3                                 ENDM
 2487                                   NEXT
 2487.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2487                                   NEXT1
 2487.1  0000000A 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2487.2  0000000C 9847                  BLX     x
 2487.3                          LTORG
 2487.4  0000000E 0000           LTORG
 2487.5  00000010 ........               TABLE
 2487.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2487.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2487.8                                 ENDM
 2487.9                                 ENDM
 2487.10                                ENDM
 2488                           
 2489                           
 2490                           //      R R:    ( -- n )
 2491                           //      Copy the top of the return stack to
                                 the computation stack.
 2492                           
 2493                            SECTION .text : CONST (2)
 2494                           R_NFA:
 2495    00000000 81                    DC8     0x81
 2496    00000001 D2                    DC8     'R'+0x80
 2497    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2498    00000004 ........              DC32    FROMR_NFA
 2499                           R:
 2500    00000008 ........              DC32    .+5
 2501                            SECTION .text : CODE (2)
 2502    00000000 3068                  LDR     t, [r]  // Get Index
 2503                                   TPUSH
 2503                                   PUSHt   // push t to p, pre decrement
                                 p
 2503.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2503.2  00000004 3860                  STR     t, [p]
 2503.3                                 ENDM
 2503                                   NEXT
 2503.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2503                                   NEXT1
 2503.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2503.2  0000000A 9847                  BLX     x
 2503.3                          LTORG
 2503.4                          LTORG
 2503.5  0000000C ........               TABLE
 2503.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2503.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2503.8                                 ENDM
 2503.9                                 ENDM
 2503.10                                ENDM
 2504                           
 2505                           
 2506                           //      OVER OVER:      ( nl n2 -- nl n2 n1
                                 )
 2507                           //      Copy the second stack value, placing
                                 it as the new top.
 2508                           
 2509                            SECTION .text : CONST (2)
 2510                           OVER_NFA:
 2511    00000000 84                    DC8     0x84
 2512    00000001 4F5645                DC8     'OVE'
 2513    00000004 D2                    DC8     'R'+0x80
 2514    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2515    00000008 ........              DC32    R_NFA
 2516                           OVER:
 2517    0000000C ........              DC32    .+5
 2518                            SECTION .text : CODE (2)
 2519                                   POP2w           // n2
 2519.1  00000000 3A68                  LDR     w, [p]
 2519.2  00000002 3F1D                  ADDS    p, p, #4
 2519.3                                 ENDM
 2520                                   POP2t           // n1
 2520.1  00000004 3868                  LDR     t, [p]          // pop tos to
                                                                 t, post
                                                                 increment
                                                                 p
 2520.2  00000006 3F1D                  ADDS    p, p, #4
 2520.3                                 ENDM
 2521                                   PUSHt           // -- n1 )
 2521.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p,
                                                                    pre
                                                                    decrement
                                                                    p
 2521.2  0000000A 3860                  STR     t, [p]
 2521.3                                 ENDM
 2522                                   DPUSH           //  --  LSW MSW
                                 )
 2522                                   PUSHw   // push w to p, pre decrement
                                 p
 2522.1  0000000C 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 2522.2  0000000E 3A60                  STR     w, [p]
 2522.3                                 ENDM
 2522                                   TPUSH
 2522                                   PUSHt   // push t to p, pre decrement
                                 p
 2522.1  00000010 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 2522.2  00000012 3860                  STR     t, [p]
 2522.3                                 ENDM
 2522                                   NEXT
 2522.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 2522                                   NEXT1
 2522.1  00000016 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2522.2  00000018 9847                  BLX     x
 2522.3                          LTORG
 2522.4  0000001A 0000           LTORG
 2522.5  0000001C ........               TABLE
 2522.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2522.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2522.8                                 ENDM
 2522.9                                 ENDM
 2522.10                                ENDM
 2522.11                                ENDM
 2523                           
 2524                           
 2525                           //      DROP DROP:      ( n1 -- )
 2526                           //      Drop n1 from the stack.
 2527                           
 2528                            SECTION .text : CONST (2)
 2529                           DROP_NFA:
 2530    00000000 84                    DC8     0x84
 2531    00000001 44524F                DC8     'DRO'
 2532    00000004 D0                    DC8     'P'+0x80
 2533    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2534    00000008 ........              DC32    OVER_NFA
 2535                           DROP:
 2536    0000000C ........              DC32    .+5
 2537                            SECTION .text : CODE (2)
 2538                                   POP2t           // Opt to just do
                                 p
 2538.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 2538.2  00000002 3F1D                  ADDS    p, p, #4
 2538.3                                 ENDM
 2539                                   NEXT
 2539.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2539                                   NEXT1
 2539.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2539.2  00000008 9847                  BLX     x
 2539.3                          LTORG
 2539.4  0000000A 0000           LTORG
 2539.5  0000000C ........               TABLE
 2539.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2539.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2539.8                                 ENDM
 2539.9                                 ENDM
 2540                           
 2541                           
 2542                           //      SWAP SWAP:      ( nl n2 -- n2 n1
                                 )
 2543                           //      Exchange the top two values On the
                                 stack.
 2544                           
 2545                            SECTION .text : CONST (2)
 2546                           SWAP_NFA:
 2547    00000000 84                    DC8     0x84
 2548    00000001 535741                DC8     'SWA'
 2549    00000004 D0                    DC8     'P'+0x80
 2550    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2551    00000008 ........              DC32    DROP_NFA
 2552                           SWAP:
 2553    0000000C ........              DC32    .+5
 2554                            SECTION .text : CODE (2)
 2555                                   POP2w           // n2
 2555.1  00000000 3A68                  LDR     w, [p]
 2555.2  00000002 3F1D                  ADDS    p, p, #4
 2555.3                                 ENDM
 2556                                   POP2t           // n1
 2556.1  00000004 3868                  LDR     t, [p]          // pop tos to
                                                                 t, post
                                                                 increment
                                                                 p
 2556.2  00000006 3F1D                  ADDS    p, p, #4
 2556.3                                 ENDM
 2557                                   DPUSH           //  --  LSW MSW
                                 )
 2557                                   PUSHw   // push w to p, pre decrement
                                 p
 2557.1  00000008 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 2557.2  0000000A 3A60                  STR     w, [p]
 2557.3                                 ENDM
 2557                                   TPUSH
 2557                                   PUSHt   // push t to p, pre decrement
                                 p
 2557.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 2557.2  0000000E 3860                  STR     t, [p]
 2557.3                                 ENDM
 2557                                   NEXT
 2557.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 2557                                   NEXT1
 2557.1  00000012 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2557.2  00000014 9847                  BLX     x
 2557.3                          LTORG
 2557.4  00000016 0000           LTORG
 2557.5  00000018 ........               TABLE
 2557.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2557.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2557.8                                 ENDM
 2557.9                                 ENDM
 2557.10                                ENDM
 2557.11                                ENDM
 2558                           
 2559                           
 2560                           //      DUP DUP:        ( n1 -- n1 n1
                                 )
 2561                           //      Duplicate the value n1 on the
                                 stack.
 2562                           
 2563                            SECTION .text : CONST (2)
 2564                           DUP_NFA:
 2565    00000000 83                    DC8     0x83
 2566    00000001 4455                  DC8     'DU'
 2567    00000003 D0                    DC8     'P'+0x80
 2568                            ALIGNROM 2,0xFFFFFFFF
 2569    00000004 ........              DC32    SWAP_NFA
 2570                           DUP:
 2571    00000008 ........              DC32    .+5
 2572                            SECTION .text : CODE (2)
 2573                           // OPT by picking pops
 2574    00000000 3868                  LDR     t, [p]
 2575                                   TPUSH
 2575                                   PUSHt   // push t to p, pre decrement
                                 p
 2575.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2575.2  00000004 3860                  STR     t, [p]
 2575.3                                 ENDM
 2575                                   NEXT
 2575.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2575                                   NEXT1
 2575.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2575.2  0000000A 9847                  BLX     x
 2575.3                          LTORG
 2575.4                          LTORG
 2575.5  0000000C ........               TABLE
 2575.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2575.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2575.8                                 ENDM
 2575.9                                 ENDM
 2575.10                                ENDM
 2576                           
 2577                           
 2578                           //      2DUP TDUP:      ( n2 n1 -- n2 n1 n2 n1
                                 )
 2579                           //      Duplicate top two stack items. The
                                 prefix 2 convention means
 2580                           //      an operation on the top two stack
                                 items.
 2581                           
 2582                            SECTION .text : CONST (2)
 2583                           TDUP_NFA:
 2584    00000000 84                    DC8     0x84
 2585    00000001 324455                DC8     '2DU'
 2586    00000004 D0                    DC8     'P'+0x80
 2587    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2588    00000008 ........              DC32    DUP_NFA
 2589                           TDUP:
 2590    0000000C ........              DC32    .+5
 2591                            SECTION .text : CODE (2)
 2592                           // OPT by picking pops
 2593    00000000 3868                  LDR     t, [p]          //
 2594    00000002 7A68                  LDR     w, [p, #4]      //
 2595                                   DPUSH                   // 
 2595                                   PUSHw   // push w to p, pre decrement
                                 p
 2595.1  00000004 3F1F                  SUBS    p, p, #4        //  push w to
                                                                     p, pre
                                                                     decrement
                                                                     p
 2595.2  00000006 3A60                  STR     w, [p]
 2595.3                                 ENDM
 2595                                   TPUSH
 2595                                   PUSHt   // push t to p, pre decrement
                                 p
 2595.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p,
                                                                     pre
                                                                     decrement
                                                                     p
 2595.2  0000000A 3860                  STR     t, [p]
 2595.3                                 ENDM
 2595                                   NEXT
 2595.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                                     incr i
                                                                     after
 2595                                   NEXT1
 2595.1  0000000E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2595.2  00000010 9847                  BLX     x
 2595.3                          LTORG
 2595.4  00000012 0000           LTORG
 2595.5  00000014 ........               TABLE
 2595.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2595.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2595.8                                 ENDM
 2595.9                                 ENDM
 2595.10                                ENDM
 2595.11                                ENDM
 2596                           
 2597                           
 2598                           //NOEXEC HEADERFORWORDCATEGORIES
 2599                           //      WC_STACK_NFA = STACK STUFF CATEGORY
 2600                           
 2601                            SECTION .text : CONST (2)
 2602                           WC_STACK_NFA:
 2603    00000000 90                    DC8     0x80+4+12
 2604    00000001 0D0A                  DC8     0x0D, 0x0A
 2605    00000003 535441434B205         DC8     'STACK STUFF:'
                  3545546463A  
 2606    0000000F 0D8A                  DC8     0x0D, 0x0A+0x80
 2607    00000011 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2608    00000014 ........              DC32    TDUP_NFA
 2609                           
 2610                           
 2611                            SECTION .text : CONST (2)
 2612                           ANDBITS_NFA:
 2613    00000000 87                    DC8     0x87
 2614    00000001 414E44424954          DC8     'ANDBIT'
 2615    00000007 D3                    DC8     'S'+0x80
 2616                            ALIGNROM 2,0xFFFFFFFF
 2617    00000008 ........              DC32    WC_STACK_NFA
 2618                           ANDBITS:
 2619    0000000C ........              DC32    .+5
 2620                            SECTION .text : CODE (2)
 2621                                   POPp2w          // val
 2621.1                                 // as in xeq token at ToS setup for
                                 exec
 2621.2  00000000 04CF                  LDM     p!, {w} // fetch memory p
                                                                points to into
                                                                {w}, inc
                                                                i
 2621.3                                 ENDM
 2622                                   POP2n           // addr
 2622.1  00000002 3968                  LDR     n, [p]
 2622.2  00000004 3F1D                  ADDS    p, p, #4
 2622.3                                 ENDM
 2623    00000006 0868                  LDR     t, [n]  // [val]
 2624    00000008 1040                  ANDS    t, t, w
 2625    0000000A 0860                  STR     t, [n]
 2626                                   NEXT
 2626.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2626                                   NEXT1
 2626.1  0000000E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2626.2  00000010 9847                  BLX     x
 2626.3                          LTORG
 2626.4  00000012 0000           LTORG
 2626.5  00000014 ........               TABLE
 2626.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2626.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2626.8                                 ENDM
 2626.9                                 ENDM
 2627                           
 2628                           
 2629                           //       SETBITS SETBITS:       ( addr val --
                                 )
 2630                           //      OR val bits into addr. See also
                                 CLRBITS.
 2631                           //      Preserves bits at addr - useful for
                                 ARM SoC initialization.
 2632                           
 2633                            SECTION .text : CONST (2)
 2634                           SETBITS_NFA:
 2635    00000000 87                    DC8     0x87
 2636    00000001 534554424954          DC8     'SETBIT'
 2637    00000007 D3                    DC8     'S'+0x80
 2638                            ALIGNROM 2,0xFFFFFFFF
 2639    00000008 ........              DC32    ANDBITS_NFA
 2640                           SETBITS:
 2641    0000000C ........              DC32    .+5
 2642                            SECTION .text : CODE (2)
 2643                                   POPp2w          // val
 2643.1                                 // as in xeq token at ToS setup for
                                 exec
 2643.2  00000000 04CF                  LDM     p!, {w} // fetch memory p
                                                                points to into
                                                                {w}, inc
                                                                i
 2643.3                                 ENDM
 2644                                   POP2n           // addr
 2644.1  00000002 3968                  LDR     n, [p]
 2644.2  00000004 3F1D                  ADDS    p, p, #4
 2644.3                                 ENDM
 2645    00000006 0868                  LDR     t, [n]  // [val]
 2646    00000008 1043                  ORRS    t, t, w
 2647    0000000A 0860                  STR     t, [n]
 2648                                   NEXT
 2648.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2648                                   NEXT1
 2648.1  0000000E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2648.2  00000010 9847                  BLX     x
 2648.3                          LTORG
 2648.4  00000012 0000           LTORG
 2648.5  00000014 ........               TABLE
 2648.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2648.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2648.8                                 ENDM
 2648.9                                 ENDM
 2649                           
 2650                           
 2651                           //       CLRBITS CLRBITS:       ( addr val
                                 )
 2652                           //      XOR val bits into addr. See also
                                 SETBITS.
 2653                           //      Preserves bits at addr - useful for
                                 ARM SoC initialization.
 2654                           
 2655                            SECTION .text : CONST (2)
 2656                           CLRBITS_NFA:
 2657    00000000 87                    DC8     0x87
 2658    00000001 434C52424954          DC8     'CLRBIT'
 2659    00000007 D3                    DC8     'S'+0x80
 2660                            ALIGNROM 2,0xFFFFFFFF
 2661    00000008 ........              DC32    SETBITS_NFA
 2662                           CLRBITS:
 2663    0000000C ........              DC32    .+5
 2664                            SECTION .text : CODE (2)
 2665                                   POPp2w                  // val
 2665.1                                 // as in xeq token at ToS setup for
                                 exec
 2665.2  00000000 04CF                  LDM     p!, {w} // fetch memory p
                                                                         points
                                                                         to
                                                                         into
                                                                         {w},
                                                                         inc
                                                                         i
 2665.3                                 ENDM
 2666                                   POP2n                   // addr
 2666.1  00000002 3968                  LDR     n, [p]
 2666.2  00000004 3F1D                  ADDS    p, p, #4
 2666.3                                 ENDM
 2667    00000006 0868                  LDR     t, [n]          // [val]
 2668    00000008 0446                  MOV     y, t            // SAVE
                                                 [val]
 2669    0000000A 5B40                  EORS    x, x, x
 2670    0000000C 5B1E                  SUBS    x, x, #1        // MAKE ALL
                                                 BITS SET
 2671    0000000E 5040                  EORS    t, t, w         // MAKE MASK
                                                 FROM val
 2672    00000010 2040                  ANDS    t, t, y         // AND [val]
                                                 WITH MASK
 2673    00000012 0860                  STR     t, [n]
 2674                                   NEXT
 2674.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2674                                   NEXT1
 2674.1  00000016 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2674.2  00000018 9847                  BLX     x
 2674.3                          LTORG
 2674.4  0000001A 0000           LTORG
 2674.5  0000001C ........               TABLE
 2674.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2674.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2674.8                                 ENDM
 2674.9                                 ENDM
 2675                           
 2676                           
 2677                           //      CMOVE CMOVE:    ( from to count --
                                 )
 2678                           //       Move the specified quantity of bytes
                                 beginning at address from to
 2679                           //       address to. The contents of address
                                 from is moved first proceeding
 2680                           //       toward high memory. Further
                                 specification is necessary on word
 2681                           //       addressing computers.
 2682                           
 2683                            SECTION .text : CONST (2)
 2684                           CMOVE_NFA:
 2685    00000000 85                    DC8     0x85
 2686    00000001 434D4F56              DC8     'CMOV'
 2687    00000005 C5                    DC8     'E'+0x80
 2688    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2689    00000008 ........              DC32    CLRBITS_NFA
 2690                           CMOVE:
 2691    0000000C ........              DC32    .+5
 2692                            SECTION .text : CODE (2)
 2693                                   POP2n //    ldr n, [p],#4      
                                 //COUNT
 2693.1  00000000 3968                  LDR     n, [p]
 2693.2  00000002 3F1D                  ADDS    p, p, #4
 2693.3                                 ENDM
 2694                                   POP2w //    ldr w, [p],#4     
                                 //DEST
 2694.1  00000004 3A68                  LDR     w, [p]
 2694.2  00000006 3F1D                  ADDS    p, p, #4
 2694.3                                 ENDM
 2695                                   POP2x //    ldr x, [p],#4     
                                 //SOURCE
 2695.1  00000008 3B68                  LDR     x, [p]
 2695.2  0000000A 3F1D                  ADDS    p, p, #4
 2695.3                                 ENDM
 2696    0000000C 0029                  CMP     n, #0
 2697    0000000E 07D0                  BEQ     CM2
 2698                           CM1:
 2699                           //not for THUMB
 2700                           //strcpy  LDRB R2, [R1], #1
 2701                           //        STRB R2, [R0], #1
 2702                           //        TST R2, R2      // repeat if R2 is
                                 nonzero
 2703                           //        BNE strcpy
 2704    00000010 1878                  LDRB    t, [x]
 2705    00000012 1070                  STRB    t, [w]
 2706    00000014 491E                  SUBS    n, n, #1
 2707    00000016 0029                  CMP     n, #0
 2708    00000018 02D0                  BEQ     CM2
 2709                           
 2710    0000001A 521C                  ADDS    w, w, #1
 2711    0000001C 5B1C                  ADDS    x, x, #1
 2712    0000001E F7D1                  BNE     CM1
 2713                           CM2:
 2714                                   NEXT
 2714.1  00000020 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2714                                   NEXT1
 2714.1  00000022 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2714.2  00000024 9847                  BLX     x
 2714.3                          LTORG
 2714.4  00000026 0000           LTORG
 2714.5  00000028 ........               TABLE
 2714.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2714.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2714.8                                 ENDM
 2714.9                                 ENDM
 2715                           
 2716                           
 2717                           //      FILL FILL:      ( addr quan b --
                                 )
 2718                           //       Fill memory at the address with the
                                 specified quantity of bytes b.
 2719                           
 2720                            SECTION .text : CONST (2)
 2721                           FILL_NFA:
 2722    00000000 84                    DC8     0x84
 2723    00000001 46494C                DC8     'FIL'
 2724    00000004 CC                    DC8     'L'+0x80
 2725    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 2726    00000008 ........              DC32    CMOVE_NFA
 2727                           FILL:
 2728    0000000C ........              DC32    .+5
 2729                            SECTION .text : CODE (2)
 2730                                   POP2t                                 
                                  // Fill CHAR
 2730.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 2730.2  00000002 3F1D                  ADDS    p, p, #4
 2730.3                                 ENDM
 2731                                   POP2n                                 
                                  // Fill COUNT
 2731.1  00000004 3968                  LDR     n, [p]
 2731.2  00000006 3F1D                  ADDS    p, p, #4
 2731.3                                 ENDM
 2732                                   POP2w                                 
                                  // Beginning ADDR
 2732.1  00000008 3A68                  LDR     w, [p]
 2732.2  0000000A 3F1D                  ADDS    p, p, #4
 2732.3                                 ENDM
 2733    0000000C 0029                  CMP     n, #0
 2734    0000000E 05D0                  BEQ     FEND
 2735    00000010 8B18                  ADDS            x, n, w
 2736    00000012 5B1C                  ADDS            x, x, #1
 2737                           FLOOP:
 2738    00000014 1070                  STRB    t, [w]
 2739    00000016 521C                  ADDS            w, w, #1
 2740    00000018 9A42                  CMP             w, x
 2741    0000001A FBD1                  BNE             FLOOP
 2742                           FEND:
 2743                                   NEXT
 2743.1  0000001C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2743                                   NEXT1
 2743.1  0000001E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2743.2  00000020 9847                  BLX     x
 2743.3                          LTORG
 2743.4  00000022 0000           LTORG
 2743.5  00000024 ........               TABLE
 2743.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2743.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2743.8                                 ENDM
 2743.9                                 ENDM
 2744                           
 2745                           
 2746                           //      ERASE ERASE:    ( addr n -- )
 2747                           //       Clear a region of memory to zero from
                                 addr over n addresses.
 2748                           
 2749                            SECTION .text : CONST (2)
 2750                           ERASE_NFA:
 2751    00000000 85                    DC8     0x85
 2752    00000001 45524153              DC8     'ERAS'
 2753    00000005 C5                    DC8     'E'+0x80
 2754    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 2755    00000008 ........              DC32    FILL_NFA
 2756                           ERASE:
 2757    0000000C ........              DC32    DOCOL
 2758    00000010 ........              DC32    ZERO
 2759    00000014 ........              DC32    FILL
 2760    00000018 ........              DC32    SEMIS
 2761                           
 2762                           
 2763                           //      BLANKS BLANKS:  ( addr count --
                                 )
 2764                           //       Fill an area of memory beginning at
                                 addr with blanks (0x20).
 2765                           
 2766                            SECTION .text : CONST (2)
 2767                           BLANKS_NFA:
 2768    00000000 86                    DC8     0x86
 2769    00000001 424C414E4B            DC8     'BLANK'
 2770    00000006 D3                    DC8     'S'+0x80
 2771    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 2772    00000008 ........              DC32    ERASE_NFA
 2773                           BLANKS:
 2774    0000000C ........              DC32    DOCOL
 2775    00000010 ........              DC32    BLANK
 2776    00000014 ........              DC32    FILL
 2777    00000018 ........              DC32    SEMIS
 2778                           
 2779                           
 2780                           //      +! PSTORE:      ( n addr -- )
 2781                           //      Add n to the value at the address.
 2782                           //      Pronounced Plus Store
 2783                           
 2784                            SECTION .text : CONST (2)
 2785                           PSTORE_NFA:
 2786    00000000 82                    DC8     0x82
 2787    00000001 2B                    DC8     '+'
 2788    00000002 A1                    DC8     '!'+0x80
 2789    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2790    00000004 ........              DC32    BLANKS_NFA
 2791                           PSTORE:
 2792    00000008 ........              DC32    .+5
 2793                            SECTION .text : CODE (2)
 2794                                   POP2n                   // ADDRESS
 2794.1  00000000 3968                  LDR     n, [p]
 2794.2  00000002 3F1D                  ADDS    p, p, #4
 2794.3                                 ENDM
 2795                                   POP2t                   // INCREMENT
 2795.1  00000004 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 2795.2  00000006 3F1D                  ADDS    p, p, #4
 2795.3                                 ENDM
 2796    00000008 0A68                  LDR     w, [n]
 2797    0000000A 8018                  ADDS    t, t, w
 2798    0000000C 0860                  STR     t, [n]
 2799                                   NEXT
 2799.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2799                                   NEXT1
 2799.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2799.2  00000012 9847                  BLX     x
 2799.3                          LTORG
 2799.4                          LTORG
 2799.5  00000014 ........               TABLE
 2799.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2799.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2799.8                                 ENDM
 2799.9                                 ENDM
 2800                           
 2801                           
 2802                           //      TOGGLE TOGGLE:  ( addr b -- ) ? SHOULD
                                 THIS BE BYTE ONLY?
 2803                           //      Complement (FLIP) the BYTE contents of
                                 addr by the bit pattern b.
 2804                           //      SEE SETBITS and CLRBITS
 2805                           
 2806                            SECTION .text : CONST (2)
 2807                           TOGGLE_NFA:
 2808    00000000 86                    DC8     0x86
 2809    00000001 544F47474C45          DC8     'TOGGLE'
 2810    00000007 C5                    DC8     'E'+0x80
 2811                            ALIGNROM 2,0xFFFFFFFF
 2812    00000008 ........              DC32    PSTORE_NFA
 2813                           TOGGLE:
 2814    0000000C ........              DC32    .+5
 2815                            SECTION .text : CODE (2)
 2816                                   POP2n                   // Bit
                                 PATTERN
 2816.1  00000000 3968                  LDR     n, [p]
 2816.2  00000002 3F1D                  ADDS    p, p, #4
 2816.3                                 ENDM
 2817                                   POP2w                   // ADDR
 2817.1  00000004 3A68                  LDR     w, [p]
 2817.2  00000006 3F1D                  ADDS    p, p, #4
 2817.3                                 ENDM
 2818    00000008 1078                  LDRB    t, [w]
 2819    0000000A 4840                  EORS    t, t, n
 2820    0000000C 1070                  STRB    t, [w]
 2821                                   NEXT
 2821.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2821                                   NEXT1
 2821.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2821.2  00000012 9847                  BLX     x
 2821.3                          LTORG
 2821.4                          LTORG
 2821.5  00000014 ........               TABLE
 2821.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2821.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2821.8                                 ENDM
 2821.9                                 ENDM
 2822                           
 2823                           
 2824                           //      @ AT:   ( addr --  n )
 2825                           //      Read 32 bit contents of address to
                                 TOS.
 2826                           //      Pronounced Fetch, as in Fetch word at
                                 addr.
 2827                           
 2828                            SECTION .text : CONST (2)
 2829                           AT_NFA:
 2830    00000000 81                    DC8     0x81
 2831    00000001 C0                    DC8     '@'+0x80 //C0H
 2832    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2833    00000004 ........              DC32    TOGGLE_NFA
 2834                           AT:
 2835    00000008 ........              DC32    .+5
 2836                            SECTION .text : CODE (2)
 2837                                   POP2n
 2837.1  00000000 3968                  LDR     n, [p]
 2837.2  00000002 3F1D                  ADDS    p, p, #4
 2837.3                                 ENDM
 2838    00000004 0868                  LDR     t, [n]
 2839                                   TPUSH
 2839                                   PUSHt   // push t to p, pre decrement
                                 p
 2839.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2839.2  00000008 3860                  STR     t, [p]
 2839.3                                 ENDM
 2839                                   NEXT
 2839.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2839                                   NEXT1
 2839.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2839.2  0000000E 9847                  BLX     x
 2839.3                          LTORG
 2839.4                          LTORG
 2839.5  00000010 ........               TABLE
 2839.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2839.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2839.8                                 ENDM
 2839.9                                 ENDM
 2839.10                                ENDM
 2840                           
 2841                                   
 2842                           //      C@ CAT: ( addr -- b )
 2843                           //      Leave the 8 bit contents of addr on
                                 the stack.
 2844                           //      Pronounced "Char Fetch", as in Fetch
                                 byte at addr.
 2845                           
 2846                            SECTION .text : CONST (2)
 2847                           CAT_NFA:
 2848    00000000 82                    DC8     0x82
 2849    00000001 43                    DC8     'C'
 2850    00000002 C0                    DC8     '@'+0x80 //C0H
 2851    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2852    00000004 ........              DC32    AT_NFA
 2853                           CAT:
 2854    00000008 ........              DC32    .+5
 2855                            SECTION .text : CODE (2)
 2856                                   POP2n
 2856.1  00000000 3968                  LDR     n, [p]
 2856.2  00000002 3F1D                  ADDS    p, p, #4
 2856.3                                 ENDM
 2857    00000004 0878                  LDRB    t, [n]
 2858                                   TPUSH
 2858                                   PUSHt   // push t to p, pre decrement
                                 p
 2858.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 2858.2  00000008 3860                  STR     t, [p]
 2858.3                                 ENDM
 2858                                   NEXT
 2858.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2858                                   NEXT1
 2858.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2858.2  0000000E 9847                  BLX     x
 2858.3                          LTORG
 2858.4                          LTORG
 2858.5  00000010 ........               TABLE
 2858.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2858.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2858.8                                 ENDM
 2858.9                                 ENDM
 2858.10                                ENDM
 2859                           
 2860                           
 2861                           //      ! STORE:        ( n addr -- )
 2862                           //       Store n at address. Pronounced
                                 "Store".
 2863                           
 2864                            SECTION .text : CONST (2)
 2865                           STORE_NFA:
 2866    00000000 81                    DC8     0x81
 2867    00000001 A1                    DC8     '!'+0x80
 2868    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2869    00000004 ........              DC32    CAT_NFA
 2870                           STORE:
 2871    00000008 ........              DC32    .+5
 2872                            SECTION .text : CODE (2)
 2873                                   POP2t           // ADDR
 2873.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                                 t, post
                                                                 increment
                                                                 p
 2873.2  00000002 3F1D                  ADDS    p, p, #4
 2873.3                                 ENDM
 2874                                   POP2n           // DATA
 2874.1  00000004 3968                  LDR     n, [p]
 2874.2  00000006 3F1D                  ADDS    p, p, #4
 2874.3                                 ENDM
 2875    00000008 0160                  STR     n, [t]
 2876                                   NEXT
 2876.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2876                                   NEXT1
 2876.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2876.2  0000000E 9847                  BLX     x
 2876.3                          LTORG
 2876.4                          LTORG
 2876.5  00000010 ........               TABLE
 2876.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2876.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2876.8                                 ENDM
 2876.9                                 ENDM
 2877                           
 2878                           
 2879                           //      C! CSTORE:      ( n addr -- )
 2880                           //       Store LS 8 bits of n at address.
                                 Pronounced "Char Store".
 2881                           
 2882                            SECTION .text : CONST (2)
 2883                           CSTORE_NFA:
 2884    00000000 82                    DC8     0x82
 2885    00000001 43                    DC8     'C'
 2886    00000002 A1                    DC8     '!'+0x80
 2887    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 2888    00000004 ........              DC32    STORE_NFA
 2889                           CSTORE:
 2890    00000008 ........              DC32    .+5
 2891                            SECTION .text : CODE (2)
 2892                                   POP2t
 2892.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 2892.2  00000002 3F1D                  ADDS    p, p, #4
 2892.3                                 ENDM
 2893                                   POP2n
 2893.1  00000004 3968                  LDR     n, [p]
 2893.2  00000006 3F1D                  ADDS    p, p, #4
 2893.3                                 ENDM
 2894    00000008 0170                  STRB    n, [t]
 2895                                   NEXT
 2895.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 2895                                   NEXT1
 2895.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 2895.2  0000000E 9847                  BLX     x
 2895.3                          LTORG
 2895.4                          LTORG
 2895.5  00000010 ........               TABLE
 2895.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 2895.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 2895.8                                 ENDM
 2895.9                                 ENDM
 2896                           
 2897                           
 2898                           //NOEXEC HEADERFORWORDCATEGORIES
 2899                           //      WC_RWMEMORY_NFA = MEMORY READ AND
                                 WRITE CATEGORY
 2900                           
 2901                            SECTION .text : CONST (2)
 2902                           WC_RWMEMORY_NFA:
 2903    00000000 9F                    DC8     0x80+31
 2904    00000001 0D0A                  DC8     0x0D, 0x0A
 2905    00000003 5245414420414         DC8     'READ AND WRITE MEMORY
                                                 WITH:'
                  E442057524954
                  45204D454D4F5
                  2592057495448
                  3A           
 2906    0000001E 0D8A                  DC8     0x0D, 0x0A+0x80
 2907                            ALIGNROM 2,0xFFFFFFFF
 2908    00000020 ........              DC32    CSTORE_NFA
 2909                           
 2910                           
 2911                           //      SMUDGE SMUDGE:  ( -- )
 2912                           //      Used during word definition to toggle
                                 the "smudge bit" in a
 2913                           //      definitions' name field. LATEST MUST
                                 BE THIS WORD!<<<<<<<<<<<<<<<<<<<<<<
 2914                           //      Used to prevent an uncompleted
                                 definition from being found
 2915                           //      or to make it findeable while
                                 compiling words such as CONSTANT
 2916                           //      because compilation is completed in
                                 the defining word.
 2917                           //      CREATE un SMUDGE's at compile time so
                                 words that don't compile
 2918                           //      can be forgotten without wasting
                                 dictionary space.
 2919                           //      See FORGET.
 2920                           
 2921                            SECTION .text : CONST (2)
 2922                           SMUDGE_NFA:
 2923    00000000 86                    DC8     0x86
 2924    00000001 534D55444745          DC8     'SMUDGE'
 2925    00000007 C5                    DC8     'E'+0x80
 2926                            ALIGNROM 2,0xFFFFFFFF
 2927    00000008 ........              DC32    WC_RWMEMORY_NFA
 2928                           SMUDGE:
 2929    0000000C ........              DC32    DOCOL
 2930    00000010 ........              DC32    LATEST
 2931    00000014 ........20000         DC32    LIT, 0x20
                  000          
 2932    0000001C ........              DC32    TOGGLE
 2933    00000020 ........              DC32    SEMIS
 2934                           
 2935                           
 2936                           //      ] RBRAC:        ( -- )
 2937                           //      Resume compilation, to the completion
                                 of a colon-definition.
 2938                           //       See [.
 2939                           
 2940                            SECTION .text : CONST (2)
 2941                           RBRAC_NFA:
 2942    00000000 81                    DC8     0x81
 2943    00000001 DD                    DC8     ']'+0x80
 2944    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2945    00000004 ........              DC32    SMUDGE_NFA
 2946                           RBRAC:
 2947    00000008 ........              DC32    DOCOL
 2948    0000000C ........C0000         DC32    LIT, 0xC0       // used in
                                                      INTER: to execute
                                                      Immediate words
                  000          
 2949                                                           // while
                                 compiling
 2950    00000014 ........              DC32    STATE_UV
 2951    00000018 ........              DC32    STORE
 2952    0000001C ........              DC32    SEMIS
 2953                           
 2954                           
 2955                           //      [ LBRAC:        ( -- )
 2956                           //      Used in a colon-definition in
                                 form
 2957                           //              xxx    [  words   ]   
                                 more
 2958                           //      Suspend compilation. The words after [
                                 are executed, not compiled.
 2959                           //      This allows calculation or compilation
                                 exceptions before resuming
 2960                           //      compilation with ] .  See LITERAL,
                                 ].
 2961                           
 2962                            SECTION .text : CONST (2)
 2963                           LBRAC_NFA:
 2964    00000000 C1                    DC8     0x0C1
 2965    00000001 DB                    DC8     '['+0x80
 2966    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 2967    00000004 ........              DC32    RBRAC_NFA
 2968                           LBRAC:
 2969    00000008 ........              DC32    DOCOL
 2970    0000000C ........              DC32    ZERO
 2971    00000010 ........              DC32    STATE_UV
 2972    00000014 ........              DC32    STORE
 2973    00000018 ........              DC32    SEMIS
 2974                           
 2975                           
 2976                           //      [COMPILE] BCOMP:        ( --
                                 )
 2977                           //      Used in a colon-definition in
                                 form:
 2978                           //              :  xxx    [COMPILE]  
                                 immediate_word   ;
 2979                           //      [COMPILE] will force the compilation
                                 of an IMMEDIATE WORD
 2980                           //      that would otherwise execute during
                                 compilation. The above example
 2981                           //      will select the FORTH vocabulary then
                                 xxx executes, rather than at
 2982                           //      compile time.
 2983                           
 2984                            SECTION .text : CONST (2)
 2985                           BCOMP_NFA:
 2986    00000000 C9                    DC8     0x0C9
 2987    00000001 5B434F4D50494         DC8     '[COMPILE'
                  C45          
 2988    00000009 DD                    DC8     ']'+0x80
 2989    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 2990    0000000C ........              DC32    LBRAC_NFA
 2991                           BCOMP:
 2992    00000010 ........              DC32    DOCOL
 2993    00000014 ........              DC32    DFIND   // NOOP there for TIB
                                                         entry
 2994                           //      -FIND ( --- pfa len tf )(found) ( ---
                                 ff ) (not found)
 2995    00000018 ........              DC32    ZEQU
 2996                           //      DC32    ZERO
 2997    0000001C .............         DC32    LIT, msg_qstack
                  ...          
 2998    00000024 ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 2999    00000028 ........              DC32    DROP
 3000    0000002C ........              DC32    CFA
 3001    00000030 ........              DC32    COMMA   // alighned, INCREMENTS
                                                         DP REFLECTED by
                                                         HERE
 3002    00000034 ........              DC32    SEMIS
 3003                           
 3004                           
 3005                           //      COMPILE COMP:   ( -- )
 3006                           //      Compile CFA of word that follows.
 3007                           //      When the word containing COMPILE
                                 executes, the execution address of
 3008                           //      the word following COMPILE is copied
                                 (compiled) into the dictionary.
 3009                           //      This allows specific compilation
                                 situations to be handled in
 3010                           //      addition to simply compiling an
                                 execution address (which the
 3011                           //      interpreter already does).
 3012                           
 3013                            SECTION .text : CONST (2)
 3014                           COMP_NFA:
 3015    00000000 87                    DC8     0x87
 3016    00000001 434F4D50494C          DC8     'COMPIL'
 3017    00000007 C5                    DC8     'E'+0x80
 3018                            ALIGNROM 2,0xFFFFFFFF
 3019    00000008 ........              DC32    BCOMP_NFA
 3020                           COMP:
 3021    0000000C ........              DC32    DOCOL
 3022    00000010 ........              DC32    QCOMP
 3023    00000014 ........              DC32    FROMR   // addr of next word in
                                                         body of this
                                                         word
 3024    00000018 ........              DC32    DUP
 3025    0000001C ........              DC32    FOURP   // addr past next
                                                         word...
 3026    00000020 ........              DC32    TOR     // that where execution
                                                         resumes after
 3027    00000024 ........              DC32    AT      // compiling this
                                                         word
 3028    00000028 ........              DC32    COMMA   // ALIGNED, INCREMENTS
                                                         DP REFLECTED by
                                                         HERE
 3029    0000002C ........              DC32    SEMIS
 3030                           
 3031                           
 3032                           //      DLITERAL DLITERAL:      ( d -- d )
                                 (executing)
 3033                           //                              ( d -- )  
                                 (compiling)
 3034                           //      If compiling, compile a stack double
                                 number into a literal. Later
 3035                           //      execution of the definition containing
                                 the literal will push it to
 3036                           //      the stack. If executing, the number
                                 will remain on the stack.
 3037                           //      : xxx    [ calculate ]  DLITERAL 
                                 //
 3038                           
 3039                            SECTION .text : CONST (2)
 3040                           DLITERAL_NFA:
 3041    00000000 C8                    DC8     0x0C8
 3042    00000001 444C495445524         DC8     'DLITERA'
                  1            
 3043    00000008 CC                    DC8     'L'+0x80
 3044    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3045    0000000C ........              DC32    COMP_NFA
 3046                           DLITERAL:
 3047    00000010 ........              DC32    DOCOL
 3048    00000014 ........              DC32    STATE_UV
 3049    00000018 ........              DC32    AT
 3050    0000001C ........              DC32    ZBRAN   // IF
 3051    00000020 10000000              DC32     DLIT1-.
 3052                           
 3053    00000024 ........              DC32    SWAP
 3054    00000028 ........              DC32    LITERAL
 3055    0000002C ........              DC32    LITERAL // endif
 3056                           DLIT1:
 3057    00000030 ........              DC32    SEMIS
 3058                           
 3059                           
 3060                           //      LITERAL LITERAL:        ( n -- )
                                 COMPILE ONLY
 3061                           //      If compiling, then compile the stack
                                 value n as a 32 bit literal.
 3062                           //      This definition is immediate so that
                                 it will execute during a colon
 3063                           //      definition. The intended use
                                 is:
 3064                           //      : xxx    [ calculate ]  LITERAL 
                                 //
 3065                           //      Compilation is suspended for the
                                 compile time calculation of value.
 3066                           //      Compilation is resumed and LITERAL
                                 compiles this value.
 3067                           
 3068                            SECTION .text : CONST (2)
 3069                           LITERAL_NFA:
 3070    00000000 C7                    DC8     0x0C7
 3071    00000001 4C4954455241          DC8     'LITERA'
 3072    00000007 CC                    DC8     'L'+0x80
 3073                            ALIGNROM 2,0xFFFFFFFF
 3074    00000008 ........              DC32    DLITERAL_NFA
 3075                           LITERAL:
 3076    0000000C ........              DC32    DOCOL
 3077    00000010 ........              DC32    STATE_UV
 3078    00000014 ........              DC32    AT
 3079    00000018 ........              DC32    ZBRAN           // If not
                                                                 compiling
 3080    0000001C 10000000              DC32     LITE1-.        // go
                                                        here
 3081                           
 3082    00000020 ........              DC32    COMP            // Compile
 3083    00000024 ........              DC32    LIT             // Literal
 3084    00000028 ........              DC32    COMMA           // Then COMPILE
                                                                 THE LITERAL
                                                                 VALUE
 3085                           LITE1:
 3086    0000002C ........              DC32    SEMIS
 3087                           
 3088                           
 3089                           //      #> EDIGS:       ( d=(LSW MSW) -- addr
                                 count )
 3090                           //      Terminates numeric output conversion
                                 by dropping dnum,
 3091                           //      leaving the text address and character
                                 count suitable for TYPE.
 3092                           
 3093                            SECTION .text : CONST (2)
 3094                           EDIGS_NFA:
 3095    00000000 82                    DC8     0x82
 3096    00000001 23                    DC8     '#'
 3097    00000002 BE                    DC8     '>'+0x80
 3098    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3099    00000004 ........              DC32    LITERAL_NFA
 3100                           EDIGS:
 3101    00000008 ........              DC32    DOCOL
 3102    0000000C ........              DC32    DROP
 3103    00000010 ........              DC32    DROP
 3104    00000014 ........              DC32    HLD_UV
 3105    00000018 ........              DC32    AT
 3106    0000001C ........              DC32    PAD_UV
 3107    00000020 ........              DC32    OVER
 3108    00000024 ........              DC32    SUBB
 3109    00000028 ........              DC32    SEMIS
 3110                           
 3111                           
 3112                           //      HOLD HOLD:      ( c -- )
 3113                           //      Used between <# and #> to insert an
                                 ascii character into a pictured
 3114                           //      numeric output string.
 3115                           //      e.g. 0x2E HOLD will place a decimal
                                 point.
 3116                           
 3117                            SECTION .text : CONST (2)
 3118                           HOLD_NFA:
 3119    00000000 84                    DC8     0x84
 3120    00000001 484F4C                DC8     'HOL'
 3121    00000004 C4                    DC8     'D'+0x80
 3122    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3123    00000008 ........              DC32    EDIGS_NFA
 3124                           HOLD:
 3125    0000000C ........              DC32    DOCOL
 3126    00000010 ........FFFFF         DC32    LIT,-1
                  FFF          
 3127    00000018 ........              DC32    HLD_UV
 3128    0000001C ........              DC32    PSTORE
 3129    00000020 ........              DC32    HLD_UV
 3130    00000024 ........              DC32    AT
 3131    00000028 ........              DC32    CSTORE
 3132    0000002C ........              DC32    SEMIS
 3133                           
 3134                           
 3135                           //      SIGN SIGN:      ( n d=<LSW MSW> --
                                 d=<LSW MSW> )
 3136                           //      Place an ascii "-" sign just before a
                                 converted numeric output
 3137                           //      string in the text output buffer when
                                 n is negative. n is discarded
 3138                           //      but double number dnum is maintained.
                                 Must be used between <# and #>.
 3139                           
 3140                            SECTION .text : CONST (2)
 3141                           SIGN_NFA:
 3142    00000000 84                    DC8     0x84
 3143    00000001 534947                DC8     'SIG'
 3144    00000004 CE                    DC8     'N'+0x80
 3145    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3146    00000008 ........              DC32    HOLD_NFA
 3147                           SIGN:
 3148    0000000C ........              DC32    DOCOL
 3149    00000010 ........              DC32    ROT
 3150    00000014 ........              DC32    ZLESS
 3151    00000018 ........              DC32    ZBRAN           // IF
 3152    0000001C 10000000              DC32     SIGN1-.
 3153                           
 3154    00000020 ........2D000         DC32    LIT, '-'        // 0x2D
                  000          
 3155    00000028 ........              DC32    HOLD            // ENDIF
 3156                           SIGN1:
 3157    0000002C ........              DC32    SEMIS
 3158                           
 3159                           
 3160                           //      #S DIGS:        ( d1=<LSW MSW> --
                                 d2=<LSW MSW> )
 3161                           //      Generates ascii text in the text
                                 output buffer, by the use of #,
 3162                           //      until a zero double number d2
                                 results.
 3163                           //      Used between <# and #>.
 3164                           //      EACH NUMBER = BASE_UV*number+(characte
                                r-'0')
 3165                           
 3166                            SECTION .text : CONST (2)
 3167                           DIGS_NFA:
 3168    00000000 82                    DC8     0x82
 3169    00000001 23                    DC8     '#'
 3170    00000002 D3                    DC8     'S'+0x80
 3171    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3172    00000004 ........              DC32    SIGN_NFA
 3173                           DIGS:
 3174    00000008 ........              DC32    DOCOL
 3175                           DIGS1:                          // Begin
                                 generating ascii chars by DIG
 3176    0000000C ........              DC32    DIG             //( d1=<LSW
                                                                 MSW> --
                                                                 d2=QUO=<LSW
                                                                 MSW>
                                                                 )
 3177    00000010 ........              DC32    OVER
 3178    00000014 ........              DC32    OVER
 3179    00000018 ........              DC32    OR
 3180    0000001C ........              DC32    ZEQU
 3181    00000020 ........              DC32    ZBRAN           //UNTIL
 3182    00000024 E8FFFFFF              DC32     DIGS1-.
 3183    00000028 ........              DC32    SEMIS
 3184                           
 3185                           
 3186                           //      # DIG:  ( d1=<LSW MSW> -- d2=QUO=<LSW
                                 MSW> ) BASE MUST BE SET!
 3187                           //      Generate from a double number d1, the
                                 next ascii character which is
 3188                           //      placed in an output string. Result d2
                                 is the quotient after division
 3189                           //      by BASE, and is maintained for further
                                 processing.
 3190                           //      Used between <# and #>.
 3191                           //      See #S.
 3192                           //      EACH NUMBER = BASE_UV*number+(characte
                                r-'0')
 3193                           
 3194                            SECTION .text : CONST (2)
 3195                           DIG_NFA:
 3196    00000000 81                    DC8     0x81
 3197    00000001 A3                    DC8     '#'+0x80
 3198    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3199    00000004 ........              DC32    DIGS_NFA
 3200                           DIG:
 3201    00000008 ........              DC32    DOCOL
 3202    0000000C ........              DC32    BASE_UV
 3203    00000010 ........              DC32    AT              // -- 1 0
                                                                 a
 3204    00000014 ........              DC32    MSMOD           // -- 1 0
                                                                 0
 3205    00000018 ........              DC32    ROT
 3206    0000001C ........09000         DC32    LIT,9
                  000          
 3207    00000024 ........              DC32    OVER
 3208    00000028 ........              DC32    LESSTHAN
 3209    0000002C ........              DC32    ZBRAN           //IF
 3210    00000030 10000000              DC32     DIG1-.
 3211                           
 3212    00000034 ........07000         DC32    LIT,7
                  000          
 3213    0000003C ........              DC32    PLUS            //ENDIF
 3214                           DIG1:
 3215    00000040 ........30000         DC32    LIT, 0x30
                  000          
 3216    00000048 ........              DC32    PLUS
 3217    0000004C ........              DC32    HOLD
 3218    00000050 ........              DC32    SEMIS
 3219                           
 3220                           
 3221                           //      <# BDIGS:       ( -- )
 3222                           //      Setup for pictured numeric output
                                 formatting using the words:
 3223                           //              <# # #S SIGN HOLD #>
 3224                           //      The conversion is done on a double
                                 number producing text at Pad
 3225                           
 3226                            SECTION .text : CONST (2)
 3227                           BDIGS_NFA:
 3228    00000000 82                    DC8     0x82
 3229    00000001 3C                    DC8     '<'
 3230    00000002 A3                    DC8     '#'+0x80
 3231    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3232    00000004 ........              DC32    DIG_NFA
 3233                           BDIGS:
 3234    00000008 ........              DC32    DOCOL
 3235    0000000C ........              DC32    PAD_UV
 3236    00000010 ........              DC32    HLD_UV
 3237    00000014 ........              DC32    STORE
 3238    00000018 ........              DC32    SEMIS
 3239                           
 3240                           
 3241                           //      DOES> DOES:     ( pfa -- ) MODIFIED:
 3242                           //      A word which defines the run-time
                                 action within a high-level
 3243                           //      defining word. DOES> alters the code
                                 field and first parameter of
 3244                           //      the new word to execute the sequence
                                 of compiled word addresses
 3245                           //      following DOES>. Used in combination
                                 with <BUILDS. When the DOES>
 3246                           //      part executes it begins with the
                                 address of the first parameter of
 3247                           //      the new word on the stack. This allows
                                 interpretation using this
 3248                           //      area or its contents. Typical uses
                                 include the Forth assembler,
 3249                           //      multidimensional arrays, and compiler
                                 generation.
 3250                           
 3251                            SECTION .text : CONST (2)
 3252                           DOES_NFA:
 3253    00000000 85                    DC8     0x85
 3254    00000001 444F4553              DC8     'DOES'
 3255    00000005 BE                    DC8     '>'+0x80
 3256    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3257    00000008 ........              DC32    BDIGS_NFA
 3258                           DOES:
 3259    0000000C ........              DC32    DOCOL
 3260    00000010 ........              DC32    FROMR           // Get the addr
                                                                 of the first
                                                                 word after
                                                                 DOES>
 3261    00000014 ........              DC32    LATEST          // ( -- addr )
                                                                 nfa OF the
                                                                 current
                                                                 <creator>
                                                                 word
 3262    00000018 ........              DC32    PFA             // Use the pfa
                                                                 to store a
                                                                 run-time
                                                                 cfa
 3263    0000001C .............         DC32    FOUR, PLUS
                  ...          
 3264    00000024 ........              DC32    STORE           // Store the
                                                                 run-time cfa
                                                                 as 1rst pfa
                                                                 Parameter.
 3265    00000028 ........              DC32    SEMIS
 3266                           
 3267                           
 3268                           //      <BUILDS BUILDS: ( -- )  MODIFIED:
 3269                           //      Used within a colon-definition
 3270                           //              cccc  <BUILDS  ...  DOES>    
                                 ...
 3271                           //      Each time cccc is executed, <BUILDS
                                 defines a new word with a
 3272                           //      high-level execution proceedure.
                                 Executing cccc in the form
 3273                           //              cccc nnnn
 3274                           //      uses <BUILDS to create a dictionary
                                 entry for nnnn with a call to
 3275                           //      the DOES> part for nnnn. When nnnn is
                                 later executed, it has the
 3276                           //      address of its parameter area on the
                                 stack and executes the words
 3277                           //      after DOES> in cccc. <BUILDS and DOES>
                                 allow runtime proceedures to
 3278                           //      written in high-level code.
 3279                           
 3280                            SECTION .text : CONST (2)
 3281                           BUILDS_NFA:
 3282    00000000 87                    DC8     0x87
 3283    00000001 3C4255494C44          DC8     '<BUILD'
 3284    00000007 D3                    DC8     'S'+0x80
 3285                            ALIGNROM 2,0xFFFFFFFF
 3286    00000008 ........              DC32    DOES_NFA
 3287                           BUILDS:
 3288    0000000C ........              DC32    DOCOL
 3289    00000010 ........              DC32    CREATE                  //
                                                                         CREATE
                                                                        's A
                                                                         CON
                                                                         POINTI
                                                                        NG TO
                                                                         IT'S
                                                                         PFA
 3290    00000014 ........F8FFF         DC32    LIT, -8, DP_UV, PSTORE  // BACK
                                                      UP TO CFA 
                  FFF..........
                  ......       
 3291    00000024 .............         DC32    LIT, DOCOL, COMMA       //
                                                      COMPILE DOCOL
                  ...........  
 3292    00000030 .............         DC32    LIT, RLIT, COMMA               
                                                      // COMPILE LIT
                  ...........  
 3293    0000003C .............         DC32    ZERO, COMMA     // Create a PFA
                                                       + 4 DOES PATCHES WITH
                                                       ITS CFA
                  ...          
 3294    00000044 .............         DC32    LIT, RLIT, COMMA               
                                                      // COMPILE LIT
                  ...........  
 3295    00000050 .............         DC32    HERE, LIT, 16, PLUS, COMMA     
                                                       // COMPILE GOTO ADDR AT
                                                       RUNTIME
                  ...10000000..
                  .............
                  .            
 3296                           // THIS LIT IS DEPENDANT ON NUMBER OF WORDS
                                 COMPILED FROM HERE TO AFTER SEMIS
 3297    00000064 .............         DC32    LIT, SWAP, COMMA        //
                                                      COMPILE AT RUNTIME
                  ...........  
 3298    00000070 .............         DC32    LIT, GOTO, COMMA        //
                                                      COMPILE AT RUNTIME NEED a
                                                      GOTO
                  ...........  
 3299    0000007C .............         DC32    LIT, SEMIS, COMMA       //
                                                      COMPILE AT RUNTIME
                  ...........  
 3300    00000088 ........              DC32    SEMIS
 3301                           
 3302                           
 3303                           //       +LOOP PLOOP:   ( n1 -- ) RUNTIME
 3304                           //                      ( addr n2 -- )
                                 COMPILE
 3305                           //      At run time, DO begins a sequence with
                                 repetitive execution
 3306                           //      controlled by a loop limit n1 and an
                                 index with initial value n2. DO
 3307                           //      removes these from the stack. Upon
                                 reaching LOOP the index is
 3308                           //      incremented by one.
 3309                           //      Until the new index equals or exceeds
                                 the limit, execution loops
 3310                           //      back to just after DO// otherwise the
                                 loop parameters are discarded
 3311                           //      and execution continues ahead. Both n1
                                 and n2 are determined at
 3312                           //      run-time and may be the result of
                                 other operations.
 3313                           //      Within a loop 'I' will copy the
                                 current value of the index to the
 3314                           //      stack. See I, LOOP, +LOOP, LEAVE.
 3315                           //
 3316                           //      When compiling within the colon
                                 definition, DO compiles (DO), leaves
 3317                           //      the following address addr and n for
                                 later error checking.
 3318                           
 3319                            SECTION .text : CONST (2)
 3320                           PLOOP_NFA:
 3321    00000000 C5                    DC8     0x0C5
 3322    00000001 2B4C4F4F              DC8     '+LOO'
 3323    00000005 D0                    DC8     'P'+0x80
 3324    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3325    00000008 ........              DC32    BUILDS_NFA
 3326                           PLOOP:
 3327    0000000C ........              DC32    DOCOL
 3328    00000010 ........              DC32    THREE
 3329    00000014 ........              DC32    QPAIR
 3330    00000018 ........              DC32    COMP
 3331    0000001C ........              DC32    XPLOOP
 3332                           //        DC32    LIT, XPLOOP, COMMA
 3333    00000020 ........              DC32    BACK
 3334    00000024 ........              DC32    SEMIS
 3335                           
 3336                           
 3337                           //      LOOP LOOP:      ( addr n -- )
                                 COMPILE
 3338                           //      Occurs in a colon-definition in
                                 form:
 3339                           //              DO ... LOOP
 3340                           //      At run-time, LOOP selectively controls
                                 branching back to the
 3341                           //      corresponding DO based on the loop
                                 index and limit. The loop index
 3342                           //      is incremented by one and compared to
                                 the limit. The branch back to
 3343                           //      DO occurs until the index equals or
                                 exceeds the limit, then
 3344                           //      the parameters are discarded and
                                 execution continues ahead.
 3345                           //
 3346                           //      At compile-time. LOOP compiles (LOOP)
                                 and uses addr to calculate an
 3347                           //      offset to DO. n is used for error
                                 testing.
 3348                           
 3349                            SECTION .text : CONST (2)
 3350                           LOOP_NFA:
 3351    00000000 C4                    DC8     0x0C4
 3352    00000001 4C4F4F                DC8     'LOO'
 3353    00000004 D0                    DC8     'P'+0x80
 3354    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3355    00000008 ........              DC32    PLOOP_NFA
 3356                           LOOP:
 3357    0000000C ........              DC32    DOCOL
 3358    00000010 ........              DC32    THREE
 3359    00000014 ........              DC32    QPAIR
 3360    00000018 ........              DC32    COMP
 3361    0000001C ........              DC32    XLOOP
 3362                           //        DC32    LIT, XLOOP, COMMA
 3363    00000020 ........              DC32    BACK
 3364    00000024 ........              DC32    SEMIS
 3365                           
 3366                           
 3367                           //      DO DO:  ( n1 n2 -- ) EXECUTE:
 3368                           //              (addr n -- ) COMPILE
 3369                           //      Occurs in a colon-definition in
                                 form:
 3370                           //      DO ... LOOP
 3371                           
 3372                            SECTION .text : CONST (2)
 3373                           DO_NFA:
 3374    00000000 C2                    DC8     0x0C2
 3375    00000001 44                    DC8     'D'
 3376    00000002 CF                    DC8     'O'+0x80
 3377    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3378    00000004 ........              DC32    LOOP_NFA
 3379                           DO:
 3380    00000008 ........              DC32    DOCOL
 3381    0000000C ........              DC32    COMP
 3382    00000010 ........              DC32    XDO
 3383                           //        DC32    LIT, XDO, COMMA
 3384    00000014 ........              DC32    HERE
 3385    00000018 ........              DC32    THREE
 3386    0000001C ........              DC32    SEMIS
 3387                           
 3388                           
 3389                           //      ENDIF ENDIF:    ( addr n -- )
                                 COMPILE
 3390                           //      Occurs in a colon-definition in
                                 form:
 3391                           //              IF ... ENDIF
 3392                           //              IF ... ELSE ... ENDIF
 3393                           //      At run-time, ENDIF serves only as the
                                 destination of a forward
 3394                           //      branch from IF or ELSE. It marks the
                                 conclusion of the conditional
 3395                           //      structure. THEN is another name for
                                 ENDIF. Both names are supported
 3396                           //      in fig-FORTH. See also IF and
                                 ELSE.
 3397                           //
 3398                           //      At compile-time, ENDIF computes the
                                 forward branch offset from addr
 3399                           //      to HERE and stores it at addr. n is
                                 used for error tests.
 3400                           
 3401                            SECTION .text : CONST (2)
 3402                           ENDIF_NFA:
 3403    00000000 C5                    DC8     0x0C5
 3404    00000001 454E4449              DC8     'ENDI'
 3405    00000005 C6                    DC8     'F'+0x80
 3406    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3407    00000008 ........              DC32    DO_NFA
 3408                           ENDIF:
 3409    0000000C ........              DC32    DOCOL
 3410    00000010 ........              DC32    QCOMP
 3411    00000014 ........              DC32    TWO     // 2 is the Error
                                                         checking number for
                                                         if.
 3412    00000018 ........              DC32    QPAIR
 3413    0000001C ........              DC32    HERE
 3414    00000020 ........              DC32    OVER
 3415    00000024 ........              DC32    SUBB
 3416    00000028 ........              DC32    SWAP
 3417    0000002C ........              DC32    STORE
 3418    00000030 ........              DC32    SEMIS
 3419                           
 3420                           
 3421                           //      THEN THEN:      ( -- )
 3422                           //      An alias for ENDIF.
 3423                           
 3424                            SECTION .text : CONST (2)
 3425                           THEN_NFA:
 3426    00000000 C4                    DC8     0x0C4
 3427    00000001 544845                DC8     'THE'
 3428    00000004 CE                    DC8     'N'+0x80
 3429    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3430    00000008 ........              DC32    ENDIF_NFA
 3431                           THEN:
 3432    0000000C ........              DC32    DOCOL
 3433    00000010 ........              DC32    ENDIF
 3434    00000014 ........              DC32    SEMIS
 3435                           
 3436                           
 3437                           //      ELSE ELSE:      ( addr1 n1 -- )
                                 RUNTIME
 3438                           //                      ( addr2 n2 -- )
                                 COMPILING
 3439                           //      Occurs within a colon-definition in
                                 the form:
 3440                           //              IF ... ELSE ... ENDIF
 3441                           //      At run-time, ELSE executes after the
                                 true part following IF. ELSE
 3442                           //      forces execution to skip over the
                                 following false part and resumes
 3443                           //      execution after the ENDIF. It has no
                                 stack effect.
 3444                           //
 3445                           //      At compile-time ELSE emplaces BRANCH
                                 reserving a branch offset,
 3446                           //      leaves the address addr2 and n2 for
                                 error testing. ELSE also
 3447                           //      resolves the pending forward branch
                                 from IF by calculating the
 3448                           //      offset from addr1 to HERE and storing
                                 at addr1.
 3449                           
 3450                            SECTION .text : CONST (2)
 3451                           ELSE_NFA:
 3452    00000000 C4                    DC8     0x0C4
 3453    00000001 454C53                DC8     'ELS'
 3454    00000004 C5                    DC8     'E'+0x80
 3455    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3456    00000008 ........              DC32    THEN_NFA
 3457                           ELSE:
 3458    0000000C ........              DC32    DOCOL
 3459    00000010 ........              DC32    TWO
 3460    00000014 ........              DC32    QPAIR
 3461    00000018 ........              DC32    COMP
 3462    0000001C ........              DC32    BRAN
 3463    00000020 ........              DC32    HERE
 3464    00000024 ........              DC32    ZERO
 3465    00000028 ........              DC32    COMMA   // aligned, INCREMENTS
                                                         DP REFLECTED by
                                                         HERE
 3466    0000002C ........              DC32    SWAP
 3467    00000030 ........              DC32    TWO
 3468    00000034 ........              DC32    ENDIF
 3469    00000038 ........              DC32    TWO
 3470    0000003C ........              DC32    SEMIS
 3471                           
 3472                           
 3473                           //      IF IF:  ( f -- ) RUNTIME
 3474                           //              ( -- addr n ) COMPILE
 3475                           //      Occurs is a colon-definition in
                                 form:
 3476                           //              IF (tp) ...  ENDIF     
                                 .
 3477                           //              IF (tp) ... ELSE (fp) ...
                                 ENDIF
 3478                           //      At run-time, IF selects execution
                                 based on a boolean flag. If f is
 3479                           //      true (non-zero), execution continues
                                 ahead thru the true part. If f
 3480                           //      is false (zero), execution skips till
                                 just after ELSE to execute
 3481                           //      the false part. After either part,
                                 execution resumes after ENDIF.
 3482                           //      ELSE and its false part are optional.;
                                 if missing, false execution
 3483                           //      skips to just after ENDIF..
 3484                           //
 3485                           //      At compile-time IF compiles 0BRANCH
                                 and reserves space for an offset
 3486                           //      at addr. addr and n are used later for
                                 resolution of the offset and
 3487                           //      error testing.
 3488                           
 3489                            SECTION .text : CONST (2)
 3490                           IF_NFA:
 3491    00000000 C2                    DC8     0x0C2
 3492    00000001 49                    DC8     'I'
 3493    00000002 C6                    DC8     'F'+0x80
 3494    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3495    00000004 ........              DC32    ELSE_NFA
 3496                           IF:
 3497    00000008 ........              DC32    DOCOL
 3498    0000000C ........              DC32    COMP
 3499    00000010 ........              DC32    ZBRAN
 3500    00000014 ........              DC32    HERE
 3501    00000018 ........              DC32    ZERO
 3502    0000001C ........              DC32    COMMA
 3503    00000020 ........              DC32    TWO     // 2 is the Error
                                                         checking number for
                                                         if.
 3504    00000024 ........              DC32    SEMIS
 3505                           
 3506                           
 3507                           //      UNTIL UNTIL:    ( f -- ) RUNTIME:
 3508                           //                      ( addr n -- )
                                 COMPILE:
 3509                           //      Occurs within a colon-definition in
                                 the form:
 3510                           //              BEGIN ... UNTIL
 3511                           //      At run-time, UNTIL controls the
                                 conditional branch back to the
 3512                           //      corresponding BEGIN. If f is false,
                                 execution returns to just after.
 3513                           //      BEGIN:  if true, execution continues
                                 ahead.
 3514                           //      At compile-time, UNTIL compiles
                                 (0BRANCH) and an offset from HERE to
 3515                           //      addr. n is used for error tests.
 3516                           
 3517                            SECTION .text : CONST (2)
 3518                           UNTIL_NFA:
 3519    00000000 C5                    DC8     0x0C5
 3520    00000001 554E5449              DC8     'UNTI'
 3521    00000005 CC                    DC8     'L'+0x80
 3522    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3523    00000008 ........              DC32    IF_NFA
 3524                           UNTIL:
 3525    0000000C ........              DC32    DOCOL
 3526    00000010 ........              DC32    ONE
 3527    00000014 ........              DC32    QPAIR
 3528    00000018 ........              DC32    COMP
 3529    0000001C ........              DC32    ZBRAN
 3530    00000020 ........              DC32    BACK
 3531    00000024 ........              DC32    SEMIS
 3532                           
 3533                           
 3534                           //      END END:        ( -- )
 3535                           //      This is an 'alias' or duplicate
                                 definition for UNTIL.
 3536                           
 3537                            SECTION .text : CONST (2)
 3538                           END_NFA:
 3539    00000000 C3                    DC8     0x0C3
 3540    00000001 454E                  DC8     'EN'
 3541    00000003 C4                    DC8     'D'+0x80
 3542                            ALIGNROM 2,0xFFFFFFFF
 3543    00000004 ........              DC32    UNTIL_NFA
 3544                           END:
 3545    00000008 ........              DC32    DOCOL
 3546    0000000C ........              DC32    UNTIL
 3547    00000010 ........              DC32    SEMIS
 3548                           
 3549                           
 3550                           //      AGAIN AGAIN:    ( addr n -- )
                                 COMPILE
 3551                           //      Used in a colon-definition in the
                                 form:
 3552                           //                      BEGIN ... AGAIN
 3553                           //      At run-time, AGAIN forces execution to
                                 return to corresponding
 3554                           //      BEGIN.
 3555                           //      There is no effect on the stack.
                                 Execution cannot leave this loop
 3556                           //      (unless R> DROP is executed one level
                                 below).
 3557                           //
 3558                           //      At compile time, AGAIN compiles BRANCH
                                 with an offset from HERE to
 3559                           //      addr. n is used for compile-time error
                                 checking.
 3560                           
 3561                            SECTION .text : CONST (2)
 3562                           AGAIN_NFA:
 3563    00000000 C5                    DC8     0x0C5
 3564    00000001 41474149              DC8     'AGAI'
 3565    00000005 CE                    DC8     'N'+0x80
 3566    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3567    00000008 ........              DC32    END_NFA
 3568                           AGAIN:
 3569    0000000C ........              DC32    DOCOL
 3570    00000010 ........              DC32    ONE
 3571    00000014 ........              DC32    QPAIR
 3572    00000018 ........              DC32    COMP
 3573    0000001C ........              DC32    BRAN
 3574    00000020 ........              DC32    BACK
 3575    00000024 ........              DC32    SEMIS
 3576                           
 3577                           
 3578                           //      REPEAT REPEAT:  ( addr n -- )
                                 COMPILE
 3579                           //      Used within a colon-definition in the
                                 form:
 3580                           //              BEGIN ... WHILE ... REPEAT
 3581                           //      At run-time, REPEAT forces an
                                 unconditional branch back to just
 3582                           //      after the corresponding BEGIN.
 3583                           //
 3584                           //      At compile-time, REPEAT compiles
                                 BRANCH and the offset from HERE to
 3585                           //      addr. n is used for error testing.
 3586                           
 3587                            SECTION .text : CONST (2)
 3588                           REPEAT_NFA:
 3589    00000000 C6                    DC8     0x0C6
 3590    00000001 5245504541            DC8     'REPEA'
 3591    00000006 D4                    DC8     'T'+0x80
 3592    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 3593    00000008 ........              DC32    AGAIN_NFA
 3594                           REPEAT:
 3595    0000000C ........              DC32    DOCOL
 3596    00000010 ........              DC32    TOR
 3597    00000014 ........              DC32    TOR
 3598    00000018 ........              DC32    AGAIN
 3599    0000001C ........              DC32    FROMR
 3600    00000020 ........              DC32    FROMR
 3601    00000024 ........              DC32    TWO
 3602    00000028 ........              DC32    SUBB
 3603    0000002C ........              DC32    ENDIF
 3604    00000030 ........              DC32    SEMIS
 3605                           
 3606                           
 3607                           //      WHILE WHILE:    ( f -- ) RUNTIME
 3608                           //                      (ad1 nl -- ad1 n1 ad2
                                 n2 ) COMPILE
 3609                           //      Occurs in a colon-definition in the
                                 form:
 3610                           //              BEGIN ... WHILE (tp) ...
                                 REPEAT
 3611                           //      At run-time, WHILE selects conditional
                                 execution based on boolean
 3612                           //      flag f. If f is true (non-zero), WHILE
                                 continues execution of the
 3613                           //      true part thru to REPEAT, which then
                                 branches back to BEGIN. If f is
 3614                           //      false (zero), execution skips to just
                                 after REPEAT, exiting the
 3615                           //      structure.
 3616                           //
 3617                           //      At compile time, WHILE emplaces
                                 (0BRANCH) and leaves ad2 of the
 3618                           //      reserved offset. The stack values will
                                 be resolved by REPEAT.
 3619                           
 3620                            SECTION .text : CONST (2)
 3621                           WHILE_NFA:
 3622    00000000 C5                    DC8     0x0C5
 3623    00000001 5748494C              DC8     'WHIL'
 3624    00000005 C5                    DC8     'E'+0x80
 3625    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3626    00000008 ........              DC32    REPEAT_NFA
 3627                           WHILE:
 3628    0000000C ........              DC32    DOCOL
 3629    00000010 ........              DC32    IF
 3630    00000014 ........              DC32    TWOP
 3631    00000018 ........              DC32    SEMIS
 3632                           
 3633                           
 3634                           //      BEGIN BEGIN:    ( -- addr n )
                                 COMPILE
 3635                           //      Occurs in a colon-definition in
                                 form:
 3636                           //      BEGIN ... UNTIL
 3637                           //      BEGIN ... AGAIN
 3638                           //      BEGIN ... WHILE ... REPEAT
 3639                           //      At run-time, BEGIN marks the start of
                                 a sequence that may be
 3640                           //      repetitively executed. It serves as a
                                 return point from the
 3641                           //      corresponding UNTIL, AGAIN or REPEAT.
                                 When executing UNTIL, a return
 3642                           //      to BEGIN will occur if the top of the
                                 stack is false//
 3643                           //      for AGAIN and REPEAT a return to BEGIN
                                 always occurs.
 3644                           //
 3645                           //      At compile time BEGIN leaves its
                                 return address and n for compiler
 3646                           //      error checking.
 3647                           
 3648                            SECTION .text : CONST (2)
 3649                           BEGIN_NFA:
 3650    00000000 C5                    DC8     0x0C5
 3651    00000001 42454749              DC8     'BEGI'
 3652    00000005 CE                    DC8     'N'+0x80
 3653    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 3654    00000008 ........              DC32    WHILE_NFA
 3655                           BEGIN:
 3656    0000000C ........              DC32    DOCOL
 3657    00000010 ........              DC32    QCOMP
 3658    00000014 ........              DC32    HERE
 3659    00000018 ........              DC32    ONE
 3660    0000001C ........              DC32    SEMIS
 3661                           
 3662                           
 3663                           //NOEXEC HEADERFORWORDCATEGORIES
 3664                           //      WC_COMPILE_NFA = COMPILING WORDS
                                 CATEGORY
 3665                           
 3666                            SECTION .text : CONST (2)
 3667                           WC_COMPILE_NFA:
 3668    00000000 97                    DC8     0x80+4+19
 3669    00000001 0D0A                  DC8     0x0D, 0x0A
 3670    00000003 494E534944452         DC8     'INSIDE COLON WORDS:'
                  0434F4C4F4E20
                  574F5244533A 
 3671    00000016 0D8A                  DC8     0x0D, 0x0A+0x80
 3672                            ALIGNROM 2,0xFFFFFFFF
 3673    00000018 ........              DC32    BEGIN_NFA
 3674                           
 3675                           
 3676                           //      IMMEDIATE IMMED:        ( --
                                 )
 3677                           //      Mark the most recently made definition
                                 so that when encountered at
 3678                           //      compile time, it will be executed
                                 rather than being compiled. i.e.
 3679                           //      the precedence bit in its header is
                                 set.
 3680                           //      This method allows definitions to
                                 handle unusual compiling
 3681                           //      situations, rather. than build them
                                 into the fundamental compiler.
 3682                           //      The user may force compilation of an
                                 immediate definition by
 3683                           //      preceeding it with [COMPILE].
 3684                           
 3685                            SECTION .text : CONST (2)
 3686                           IMMED_NFA:
 3687    00000000 89                    DC8     0x89
 3688    00000001 494D4D4544494         DC8     'IMMEDIAT'
                  154          
 3689    00000009 C5                    DC8     'E'+0x80
 3690    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 3691    0000000C ........              DC32    WC_COMPILE_NFA
 3692                           IMMED:
 3693    00000010 ........              DC32    DOCOL
 3694    00000014 ........              DC32    LATEST
 3695    00000018 ........40000         DC32    LIT, 0x40
                  000          
 3696    00000020 ........              DC32    TOGGLE
 3697    00000024 ........              DC32    SEMIS
 3698                           
 3699                           
 3700                           //      CREATE CREATE:  ( -- )  MODIFIED:
 3701                           //      IF DICTIONAIRY FULL PRINT Error
                                 MESSAGE AND Abort.
 3702                           //      Make a complete forget-able word
                                 leaving DP -> Aligned CFA
 3703                           //      USE <BUILDS with DOES> instead OF
                                 create
 3704                           //      If word is not completed executions
                                 should bomb
 3705                           //      Also explicitly patched to update
                                 Context,
 3706                           //      So created words can be (FORGET:)
                                 forgotten.
 3707                           //      A defining word used in the form:
 3708                           //              CREATE cccc
 3709                           //      by such words as VAR, CON AND <BUILDS
                                 to create a dictionary header for
 3710                           //      a new word. The code field contains
                                 the address of the words
 3711                           //      parameter field. The new word is
                                 created in the CURRENT vocabulary.
 3712                           
 3713                            SECTION .text : CONST (2)
 3714                           CREATE_NFA:
 3715    00000000 86                    DC8     0x86
 3716    00000001 4352454154            DC8     'CREAT'
 3717    00000006 C5                    DC8     'E'+0x80
 3718    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 3719    00000008 ........              DC32    IMMED_NFA
 3720                           CREATE:
 3721    0000000C ........              DC32    DOCOL
 3722    00000010 ........              DC32    DICTSPACE       //      ( -- n
                                                                 )
 3723    00000014 ........              DC32    ZLESS
 3724    00000018 ........              DC32    ZBRAN
 3725    0000001C 18000000              DC32    CREATEOK-.
 3726                           
 3727    00000020 .............         DC32    LIT, msg_dictfull
                  ...          
 3728    00000028 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 3729    00000030 ........              DC32    ABORT
 3730                           
 3731                           CREATEOK:
 3732    00000034 .............         DC32    HERE, LIT, CSDP, STORE  //
                                                       RESET DP IF Error
                                                       CREATING WORD
                  .............
                  ......       
 3733    00000044 ........              DC32    DFIND                   //
                                                                         Parse
                                                                         nfa
 3734                           //      -FIND DFIND: ( --- pfa len tf )(found)
                                 ( --- ff ) (not found)
 3735    00000048 ........              DC32    ZBRAN
 3736    0000004C 24000000              DC32     CREA1-.
 3737                           
 3738    00000050 ........              DC32    DROP
 3739    00000054 ........              DC32    NFA
 3740    00000058 ........              DC32    IDDOT
 3741    0000005C .............         DC32    LIT, msg_wordexists, NULLSTRLEN
                                                     , TYPE
                  .............
                  ......       
 3742    0000006C ........              DC32    ABORT
 3743                           CREA1:
 3744    00000070 ........              DC32    HERE
 3745    00000074 ........              DC32    DUP
 3746    00000078 ........              DC32    CAT
 3747    0000007C ........              DC32    WIDTH_UV
 3748    00000080 ........              DC32    AT
 3749    00000084 ........              DC32    MIN
 3750    00000088 ........              DC32    ONEP
 3751    0000008C ........              DC32    ALLOT
 3752    00000090 ........              DC32    DUP
 3753    00000094 ........A0000         DC32    LIT, 0x0A0
                  000          
 3754    0000009C ........              DC32    TOGGLE
 3755    000000A0 ........              DC32    HERE
 3756    000000A4 ........              DC32    ONE
 3757    000000A8 ........              DC32    SUBB
 3758    000000AC ........80000         DC32    LIT,0x80
                  000          
 3759    000000B4 ........              DC32    TOGGLE
 3760    000000B8 ........              DC32    LATEST          // LATEST =
                                                                 CURRENT_UV ->
                                                                 MOST RECENT
                                                                 DEF NFA
 3761    000000BC ........              DC32    COMMA           // Compile last
                                                                 words NFA into
                                                                 this link
                                                                 field.
 3762                                                           // DUP'd HERE
                                 should be on stack
 3763    000000C0 ........              DC32    CURRENT_UV      // LATEST =
                                                                 CURRENT_UV
 3764    000000C4 ........              DC32    STORE           // so storing
                                                                 NEWWORD_NFA
                                                                 into
                                                                 TASK_NFA
 3765    000000C8 .............         DC32    LIT, DOCON      // Compile as
                                                      a
                  ...          
 3766    000000D0 ........              DC32    COMMA           // CON
 3767    000000D4 .............         DC32    HERE, FOURP     // Compute
                                                       and
                  ...          
 3768    000000DC ........              DC32    COMMA           // COMPILE Addr
                                                                 of PFA
 3769    000000E0 ........              DC32    SMUDGE
 3770    000000E4 .............         DC32    ZERO, LIT       // RESET AUTO
                                                       FORGET
                  ...          
 3771    000000EC .............         DC32    CSDP, STORE     // WHEN CREATE
                                                       ERROR
                  ...          
 3772    000000F4 ........              DC32    SEMIS
 3773                           
 3774                           
 3775                           //      CON CON:        ( n -- )  MODIFIED:
                                 and CONSTANT renamed CON
 3776                           //      IF DICTIONAIRY FULL PRINT Error
                                 MESSAGE AND Abort.
 3777                           //      A defining word used in the form:
 3778                           //      n CONSTANT cccc
 3779                           //      to create word cccc, with its
                                 parameter field containing n. When
 3780                           //      cccc is later executed, it will push
                                 the value of n to the stack.
 3781                           
 3782                            SECTION .text : CONST (2)
 3783                           CON_NFA:
 3784    00000000 83                    DC8     0x83
 3785    00000001 434F                  DC8     'CO'
 3786    00000003 CE                    DC8     'N'+0x80
 3787                            ALIGNROM 2,0xFFFFFFFF
 3788    00000004 ........              DC32    CREATE_NFA
 3789                           CON:
 3790    00000008 ........              DC32    DOCOL
 3791    0000000C ........              DC32    DICTSPACE       //      ( -- n
                                                                 )
 3792    00000010 ........              DC32    ZLESS
 3793    00000014 ........              DC32    ZBRAN
 3794    00000018 18000000              DC32    CONOK-.
 3795                           
 3796    0000001C .............         DC32    LIT, msg_dictfull
                  ...          
 3797    00000024 .............         DC32    NULLSTRLEN, TYPE
                  ...          
 3798    0000002C ........              DC32    ABORT
 3799                           CONOK:
 3800    00000030 ........              DC32    CREATE  // PATCHED Make Header
                                                         NFA and LFA, update
                                                         CURRENT
 3801    00000034 ........F8FFF         DC32    LIT, -8, DP_UV, PSTORE
                  FFF..........
                  ......       
 3802    00000044 .............         DC32    LIT, DOCON      // CFA of
                                                      CONSTANTS
                  ...          
 3803    0000004C ........              DC32    COMMA           // aligned,
                                                                 INCREMENTS DP
                                                                 REFLECTED by
                                                                 HERE
 3804                                                           // compile the
                                 value ( v -- )
 3805    00000050 ........              DC32    COMMA           // aligned,
                                                                 INCREMENTS DP
                                                                 REFLECTED by
                                                                 HERE
 3806    00000054 ........              DC32    SEMIS
 3807                           
 3808                           
 3809                            SECTION .text : CODE (2)
 3810                            ALIGNROM 2,0xFFFFFFFF
 3811                           DOCON:
 3812    00000000 01CA                  LDM     w!, {t}
 3813                                   TPUSH
 3813                                   PUSHt   // push t to p, pre decrement
                                 p
 3813.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 3813.2  00000004 3860                  STR     t, [p]
 3813.3                                 ENDM
 3813                                   NEXT
 3813.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 3813                                   NEXT1
 3813.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 3813.2  0000000A 9847                  BLX     x
 3813.3                          LTORG
 3813.4                          LTORG
 3813.5  0000000C ........               TABLE
 3813.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 3813.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 3813.8                                 ENDM
 3813.9                                 ENDM
 3813.10                                ENDM
 3814                           
 3815                           //      VAR VAR:        ( -- ) MODIFIED: and
                                 RENAMED: VARIABLE to VAR
 3816                           //      IF RAMVARSPACE FULL PRINT Error
                                 MESSAGE AND Abort.
 3817                           //      A defining word used in the form:
 3818                           //      VARIABLE cccc
 3819                           //      When VARIABLE is executed, it creates
                                 the definition cccc with its
 3820                           //      parameter field unintitialized. When
                                 cccc is later executed, the
 3821                           //      address of its parameter field is left
                                 on the stack,
 3822                           //      so that a fetch or store may access
                                 this location.
 3823                           
 3824                            SECTION .text : CONST (2)
 3825                           VAR_NFA:
 3826    00000000 83                    DC8     0x83
 3827    00000001 5641                  DC8     'VA'
 3828    00000003 D2                    DC8     'R'+0x80
 3829                            ALIGNROM 2,0xFFFFFFFF
 3830    00000004 ........              DC32    CON_NFA
 3831                           VAR:
 3832    00000008 ........              DC32    DOCOL
 3833    0000000C ........              DC32    CREATE  // Make Header NFA and
                                                         LFA, update CURRENT
 3834    00000010 ........F8FFF         DC32    LIT, -8, DP_UV, PSTORE
                  FFF..........
                  ......       
 3835    00000020 .............         DC32    LIT, DOCON      // CFA of
                                                      CONSTANTS
                  ...          
 3836    00000028 ........              DC32    COMMA           // aligned,
                                                                 INCREMENTS DP
                                                                 REFLECTED by
                                                                 HERE
 3837                                                           // compile the
                                 value ( v -- )
 3838    0000002C ........              DC32    ONE
 3839    00000030 ........              DC32    VARALLOT        // aligned,
                                                                 INCREMENTS UP
                                                                 REFLECTED by
                                                                 .UV
 3840    00000034 ........              DC32    COMMA           // Compile
                                                                 address of the
                                                                 ram allotment.
 3841    00000038 ........              DC32    SEMIS
 3842                           
 3843                           
 3844                           //      ; SEMI: ( -- ) Interpreted, never
                                 compiled in core wordset.
 3845                           //      Terminate a colon-definition and stop
                                 further compilation. Compiles
 3846                           //      the run-time //S.
 3847                           
 3848                            SECTION .text : CONST (2)
 3849                           SEMI_NFA:
 3850    00000000 C1                    DC8     0x0C1
 3851    00000001 BB                    DC8     ';'+0x80
 3852    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3853    00000004 ........              DC32    VAR_NFA
 3854                           SEMI:
 3855    00000008 ........              DC32    DOCOL
 3856    0000000C ........              DC32    QCSP
 3857    00000010 ........              DC32    COMP
 3858    00000014 ........              DC32    SEMIS
 3859                           //      DC32    LIT,SEMIS,COMMA
 3860    00000018 ........              DC32    LBRAC
 3861    0000001C ........              DC32    SEMIS
 3862                           
 3863                           
 3864                           //      : COLON:        ( -- ) MODIFIED
 3865                           //      IF DICTIONAIRY FULL PRINT Error
                                 MESSAGE AND Abort.
 3866                           //      Used in the form called a colon-defini
                                tion:
 3867                           //      : cccc     ...     //
 3868                           //      Creates a dictionary entry defining
                                 cccc as equivalent to the
 3869                           //      following sequence of Forth word
                                 definitions '...' until the next
 3870                           //      ';' or ';CODE'.
 3871                           //      The compiling process is done by the
                                 text interpreter as long as
 3872                           //      STATE is non-zero. Other details are
                                 that the CONTEXT vocabulary is
 3873                           //      set to the CURRENT vocabulary and that
                                 words with the precedence bit
 3874                           //      set (P) are executed rather than being
                                 compiled.
 3875                           
 3876                            SECTION .text : CONST (2)
 3877                           COLON_NFA:
 3878    00000000 C1                    DC8     0x0C1
 3879    00000001 BA                    DC8     ':'+0x80
 3880    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 3881    00000004 ........              DC32    SEMI_NFA
 3882                           COLON:
 3883    00000008 ........              DC32    DOCOL
 3884                           //      DICTSPACE TEST DONE IN CREATE
 3885    0000000C ........              DC32    QEXEC
 3886    00000010 ........              DC32    SCSP    // Save the stack
                                                         position in CSP.
                                                         Compiler security.
 3887    00000014 ........              DC32    CREATE  // Make Header NFA and
                                                         LFA, update CURRENT
 3888    00000018 ........              DC32    RBRAC   // Resume compiliting
                                                         by setting STATE_UV to
                                                         0xC0
 3889    0000001C ........F8FFF         DC32    LIT, -8, DP_UV, PSTORE
                  FFF..........
                  ......       
 3890    0000002C .............         DC32    LIT, DOCOL
                  ...          
 3891    00000034 ........              DC32    COMMA   // aligned, INCREMENTS
                                                         DP REFLECTED by
                                                         HERE
 3892    00000038 ........              DC32    SEMIS
 3893                           
 3894                           
 3895                            SECTION .text : CODE (2)
 3896                            ALIGNROM 2,0xFFFFFFFF
 3897                           DOCOL:  // no cfa for DOCOL!!!!!       
                                 <<<<<<<<<<<<<<<<<<
 3898                                   PUSHi2r         // save IP to
                                 Rstack
 3898.1  00000000 361F                  SUBS    r, r, #4        //  push i to
  r, pre decrement r
 3898.2  00000002 3560                  STR     i, [r]
 3898.3                                 ENDM
 3899    00000004 1546                  MOV     i, w    // jam new IP =
                                                 cfa+4
 3900                                   NEXT
 3900.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 3900                                   NEXT1
 3900.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 3900.2  0000000A 9847                  BLX     x
 3900.3                          LTORG
 3900.4                          LTORG
 3900.5  0000000C ........               TABLE
 3900.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 3900.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 3900.8                                 ENDM
 3900.9                                 ENDM
 3901                           
 3902                           
 3903                           //NOEXEC HEADERFORWORDCATEGORIES
 3904                           //      WC_CREATE_NFA = CREATEing WORDS
                                 CATEGORY
 3905                           
 3906                            SECTION .text : CONST (2)
 3907                           WC_CREATE_NFA:
 3908    00000000 96                    DC8     0x80+22
 3909    00000001 0D0A                  DC8     0x0D, 0x0A
 3910    00000003 4352454154452         DC8     'CREATE WORDS WITH:'
                  0574F52445320
                  574954483A   
 3911    00000015 0D8A                  DC8     0x0D, 0x0A+0x80
 3912    00000017 FF             ALIGNROM 2,0xFFFFFFFF
 3913    00000018 ........              DC32    COLON_NFA
 3914                           
 3915                           //      S->D STOD:      ( n -- d=<LSW MSW> )
                                 SIGNED:
 3916                           //       Sign extend a single number to form a
                                 double number.
 3917                           //      : S->D DUP 0< NEGATE // hi level
                                 equivalent
 3918                           
 3919                            SECTION .text : CONST (2)
 3920                           STOD_NFA:
 3921    00000000 84                    DC8     0x84
 3922    00000001 532D3E                DC8     'S->'
 3923    00000004 C4                    DC8     'D'+0x80
 3924    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 3925    00000008 ........              DC32    WC_CREATE_NFA
 3926                           STOD:
 3927    0000000C ........              DC32    .+5
 3928                            SECTION .text : CODE (2)
 3929                                   POP2w                   // POP
                                 LSW
 3929.1  00000000 3A68                  LDR     w, [p]
 3929.2  00000002 3F1D                  ADDS    p, p, #4
 3929.3                                 ENDM
 3930    00000004 4040                  EORS    t, t, t         // Zero
                                                 MSW
 3931    00000006 1243                  ORRS    w, w, w         // OR
                                                 LSW
 3932    00000008 00D5                  BPL     STOD1           // LSW is
                                                  POS
 3933                           
 3934    0000000A 401E                  SUBS     t, t, #1       // LSW is
                                                  NEG
 3935                           STOD1:
 3936                                   DPUSH                   //  --  LSW
                                 MSW )
 3936                                   PUSHw   // push w to p, pre decrement
                                 p
 3936.1  0000000C 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 3936.2  0000000E 3A60                  STR     w, [p]
 3936.3                                 ENDM
 3936                                   TPUSH
 3936                                   PUSHt   // push t to p, pre decrement
                                 p
 3936.1  00000010 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 3936.2  00000012 3860                  STR     t, [p]
 3936.3                                 ENDM
 3936                                   NEXT
 3936.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 3936                                   NEXT1
 3936.1  00000016 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 3936.2  00000018 9847                  BLX     x
 3936.3                          LTORG
 3936.4  0000001A 0000           LTORG
 3936.5  0000001C ........               TABLE
 3936.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 3936.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 3936.8                                 ENDM
 3936.9                                 ENDM
 3936.10                                ENDM
 3936.11                                ENDM
 3937                           
 3938                           
 3939                           //      +- PM:  ( n1 n2 -- n3 ) SIGNED:
 3940                           //       Apply the sign of n2 to n1, which is
                                 left as n3.
 3941                           
 3942                            SECTION .text : CONST (2)
 3943                           PM_NFA:
 3944    00000000 82                    DC8     0x82
 3945    00000001 2B                    DC8     '+'
 3946    00000002 AD                    DC8     '-'+0x80
 3947    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 3948    00000004 ........              DC32    STOD_NFA
 3949                           PM:
 3950    00000008 ........              DC32    DOCOL
 3951    0000000C ........              DC32    ZLESS
 3952    00000010 ........              DC32    ZBRAN   //IF
 3953    00000014 08000000              DC32    PM1-.
 3954                           
 3955    00000018 ........              DC32    NEGATE  //endif
 3956                           PM1:
 3957    0000001C ........              DC32    SEMIS
 3958                           
 3959                           
 3960                           //      D+- DPM: ( d1=(LSW MSW) n -- d2=(LSW'
                                 MSW')
 3961                           //       Apply the sign of n to the double
                                 number d1, leaving it as d2.
 3962                           
 3963                            SECTION .text : CONST (2)
 3964                           DPM_NFA:
 3965    00000000 83                    DC8     0x83
 3966    00000001 442B                  DC8     'D+'
 3967    00000003 80                    DC8             +0x80
 3968                            ALIGNROM 2,0xFFFFFFFF
 3969    00000004 ........              DC32    PM_NFA
 3970                           DPM:
 3971    00000008 ........              DC32    DOCOL
 3972    0000000C ........              DC32    ZLESS
 3973    00000010 ........              DC32    ZBRAN   //IF
 3974    00000014 08000000              DC32    DPM1-.
 3975                           
 3976    00000018 ........              DC32    DNEGATE //endif
 3977                           DPM1:
 3978    0000001C ........              DC32    SEMIS
 3979                           
 3980                           
 3981                           //      ABS ABS:        ( n -- u )
 3982                           //       Leave the absolute value of n as
                                 u.
 3983                           
 3984                            SECTION .text : CONST (2)
 3985                           ABS1_NFA:
 3986    00000000 83                    DC8     0x83
 3987    00000001 4142                  DC8     'AB'
 3988    00000003 D3                    DC8     'S'+0x80
 3989                            ALIGNROM 2,0xFFFFFFFF
 3990    00000004 ........              DC32    DPM_NFA
 3991                           ABS:
 3992    00000008 ........              DC32    DOCOL
 3993    0000000C ........              DC32    DUP
 3994    00000010 ........              DC32    PM
 3995    00000014 ........              DC32    SEMIS
 3996                           
 3997                           
 3998                           //      DABS DABS: ( sd=(LSW MSW) -- ud=(LSW
                                 MSW) )
 3999                           //       Leave the absolute value ud of a
                                 signed double number.
 4000                           
 4001                            SECTION .text : CONST (2)
 4002                           DABS_NFA:
 4003    00000000 84                    DC8     0x84
 4004    00000001 444142                DC8     'DAB'
 4005    00000004 D3                    DC8     'S'+0x80
 4006    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4007    00000008 ........              DC32    ABS1_NFA
 4008                           DABSF:
 4009                           DABS:
 4010    0000000C ........              DC32    DOCOL
 4011    00000010 ........              DC32    DUP
 4012    00000014 ........              DC32    DPM
 4013    00000018 ........              DC32    SEMIS
 4014                           
 4015                           //      MIN MIN:        ( n1 n2 -- min
                                 )
 4016                           //       Leave the smaller of two numbers.
 4017                           
 4018                            SECTION .text : CONST (2)
 4019                           MIN_NFA:
 4020    00000000 83                    DC8     0x83
 4021    00000001 4D49                  DC8     'MI'
 4022    00000003 CE                    DC8     'N'+0x80
 4023                            ALIGNROM 2,0xFFFFFFFF
 4024    00000004 ........              DC32    DABS_NFA
 4025                           MIN:
 4026    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 4027    00000010 ........              DC32    GREATERTHAN
 4028    00000014 ........              DC32    ZBRAN   //IF
 4029    00000018 08000000              DC32     MIN1-.
 4030                           
 4031    0000001C ........              DC32    SWAP    //endif
 4032                           MIN1:
 4033    00000020 ........              DC32    DROP
 4034    00000024 ........              DC32    SEMIS
 4035                           
 4036                           
 4037                           //      MAX MAX:        ( n1 n2 -- max
                                 )
 4038                           //       Leave the greater of two numbers.
 4039                           
 4040                            SECTION .text : CONST (2)
 4041                           MAX_NFA:
 4042    00000000 83                    DC8     0x83
 4043    00000001 4D41                  DC8     'MA'
 4044    00000003 D8                    DC8     'X'+0x80
 4045                            ALIGNROM 2,0xFFFFFFFF
 4046    00000004 ........              DC32    MIN_NFA
 4047                           MAX:
 4048    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 4049    00000010 ........              DC32    LESSTHAN
 4050    00000014 ........              DC32    ZBRAN   //IF
 4051    00000018 08000000              DC32     MAX1-.
 4052                           
 4053    0000001C ........              DC32    SWAP    //endif
 4054                           MAX1:
 4055    00000020 ........              DC32    DROP
 4056    00000024 ........              DC32    SEMIS
 4057                           
 4058                           
 4059                           //      M* MSTAR:       ( n1 n2 -- d=<S32LSW
                                 S32MSW> )  SIGNED:
 4060                           //       A mixed magnitude math operation
                                 which leaves the double number
 4061                           //       signed product of two signed
                                 number.
 4062                           
 4063                            SECTION .text : CONST (2)
 4064                           MSTAR_NFA:
 4065    00000000 82                    DC8     0x82
 4066    00000001 4D                    DC8     'M'
 4067    00000002 AA                    DC8     '*'+0x80
 4068    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4069    00000004 ........              DC32    MAX_NFA
 4070                           MSTAR:
 4071    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 4072    00000010 ........              DC32    XORR
 4073    00000014 ........              DC32    TOR
 4074    00000018 ........              DC32    ABS
 4075    0000001C ........              DC32    SWAP
 4076    00000020 ........              DC32    ABS
 4077    00000024 ........              DC32    USTAR
 4078    00000028 ........              DC32    FROMR
 4079    0000002C ........              DC32    DPM
 4080    00000030 ........              DC32    SEMIS
 4081                           
 4082                           
 4083                           //      M/ MSLASH:      ( sd  n1  --- 
                                 d=<s32REM  S32QUO> )
 4084                           //       A mixed magnitude math operator which
                                 leaves the signed remainder
 4085                           //       and signed quotient from sd, a double
                                 number dividend and divisor n1.
 4086                           //       The remainder takes its sign from the
                                 dividend.
 4087                           
 4088                            SECTION .text : CONST (2)
 4089                           MSLASH_NFA:
 4090    00000000 82                    DC8     0x82
 4091    00000001 4D                    DC8     'M'
 4092    00000002 AF                    DC8     '/'+0x80
 4093    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4094    00000004 ........              DC32    MSTAR_NFA
 4095                           MSLASH:
 4096    00000008 ........              DC32    DOCOL
 4097    0000000C ........              DC32    OVER
 4098    00000010 ........              DC32    TOR
 4099    00000014 ........              DC32    TOR
 4100    00000018 ........              DC32    DABS    // ( LSW MSW -- uLSW
                                                         uMSW )
 4101    0000001C ........              DC32    R
 4102    00000020 ........              DC32    ABS
 4103    00000024 ........              DC32    USLASH
 4104    00000028 ........              DC32    FROMR
 4105    0000002C ........              DC32    R
 4106    00000030 ........              DC32    XORR
 4107    00000034 ........              DC32    PM
 4108    00000038 ........              DC32    SWAP
 4109    0000003C ........              DC32    FROMR
 4110    00000040 ........              DC32    PM
 4111    00000044 ........              DC32    SWAP
 4112    00000048 ........              DC32    SEMIS
 4113                           
 4114                           
 4115                           //      * STAR: ( n1 n2 -- prod=n3 )
 4116                           //      Leave the signed product n3 of two
                                 (32bit) signed numbers n1 and n2.
 4117                           
 4118                            SECTION .text : CONST (2)
 4119                           STAR_NFA:
 4120    00000000 81                    DC8     0x81
 4121    00000001 AA                    DC8     '*'+0x80
 4122    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4123    00000004 ........              DC32    MSLASH_NFA
 4124                           STAR:
 4125    00000008 ........              DC32    DOCOL
 4126    0000000C ........              DC32    MSTAR
 4127    00000010 ........              DC32    DROP
 4128    00000014 ........              DC32    SEMIS
 4129                           
 4130                           
 4131                           //      /MOD SLMOD:     ( n1 n2 -- rem quot ) 
                                  SIGNED:
 4132                           //      Leave the remainder and signed
                                 quotient of n1/n2. The remainder has
 4133                           //      the sign of the dividend.
 4134                           
 4135                            SECTION .text : CONST (2)
 4136                           SLMOD_NFA:
 4137    00000000 84                    DC8     0x84
 4138    00000001 2F4D4F                DC8     '/MO'
 4139    00000004 C4                    DC8     'D'+0x80
 4140    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4141    00000008 ........              DC32    STAR_NFA
 4142                           SLMOD:
 4143    0000000C ........              DC32    DOCOL
 4144    00000010 ........              DC32    TOR
 4145    00000014 ........              DC32    STOD
 4146    00000018 ........              DC32    FROMR
 4147    0000001C ........              DC32    MSLASH
 4148    00000020 ........              DC32    SEMIS
 4149                           
 4150                           
 4151                           //      / SLASH:        ( sn1 sn2 -- sn )
                                 SIGNED:
 4152                           //      Leave the signed quotient sn of
                                 sn1/sn2.
 4153                           
 4154                            SECTION .text : CONST (2)
 4155                           SLASH_NFA:
 4156    00000000 81                    DC8     0x81
 4157    00000001 AF                    DC8     '/'+0x80
 4158    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4159    00000004 ........              DC32    SLMOD_NFA
 4160                           SLASH:
 4161    00000008 ........              DC32    DOCOL
 4162    0000000C ........              DC32    SLMOD
 4163    00000010 ........              DC32    SWAP
 4164    00000014 ........              DC32    DROP
 4165    00000018 ........              DC32    SEMIS
 4166                           
 4167                           
 4168                           //      MOD MOD:        ( sn1 n2 -- modulo
                                 )
 4169                           //      Leave the remainder of sn1/n2, with
                                 the same sign as sn1.
 4170                           
 4171                            SECTION .text : CONST (2)
 4172                           MODD_NFA:
 4173    00000000 83                    DC8     0x83
 4174    00000001 4D4F                  DC8     'MO'
 4175    00000003 C4                    DC8     'D'+0x80
 4176                            ALIGNROM 2,0xFFFFFFFF
 4177    00000004 ........              DC32    SLASH_NFA
 4178                           MOD:
 4179    00000008 ........              DC32    DOCOL
 4180    0000000C ........              DC32    SLMOD
 4181    00000010 ........              DC32    DROP
 4182    00000014 ........              DC32    SEMIS
 4183                           
 4184                           
 4185                           //      */MOD SSMOD:    ( n1 n2 n3 -- n4 n5
                                 )
 4186                           //      Leave the quotient n5 and remainder n4
                                 of the operation n1*n2/n3 A
 4187                           //      31 bit intermediate product is used as
                                 for */.
 4188                           
 4189                            SECTION .text : CONST (2)
 4190                           SSMOD_NFA:
 4191    00000000 85                    DC8     0x85
 4192    00000001 2A2F4D4F              DC8     '*/MO'
 4193    00000005 C4                    DC8     'D'+0x80
 4194    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4195    00000008 ........              DC32    MODD_NFA
 4196                           SSMOD:
 4197    0000000C ........              DC32    DOCOL
 4198    00000010 ........              DC32    TOR
 4199    00000014 ........              DC32    MSTAR
 4200    00000018 ........              DC32    FROMR
 4201    0000001C ........              DC32    MSLASH
 4202    00000020 ........              DC32    SEMIS
 4203                           
 4204                           
 4205                           //      */ SSLASH:      ( n1 n2 n3 -- n4
                                 )
 4206                           //      Leave the ratio n4 = n1*n2/n3 where
                                 all are signed numbers.
 4207                           //      Retention of an intermediate 31 bit
                                 product permits greater accuracy
 4208                           //      than would. be available with the
                                 sequence:
 4209                           //              n1  n2  *  n3  /
 4210                           
 4211                            SECTION .text : CONST (2)
 4212                           SSLASH_NFA:
 4213    00000000 82                    DC8     0x82
 4214    00000001 2A                    DC8     '*'
 4215    00000002 AF                    DC8     '/'+0x80
 4216    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4217    00000004 ........              DC32    SSMOD_NFA
 4218                           SSLASH:
 4219    00000008 ........              DC32    DOCOL
 4220    0000000C ........              DC32    SSMOD
 4221    00000010 ........              DC32    SWAP
 4222    00000014 ........              DC32    DROP
 4223    00000018 ........              DC32    SEMIS
 4224                           
 4225                           
 4226                           //      M/MOD MSMOD:    ( ud1 n2 -- n3 ud4
                                 )
 4227                           //       An unsigned mixed magnitude math
                                 operation which leaves a double
 4228                           //       quotient ud4 and remainder u3, from a
                                 double dividend ud1 and single
 4229                           //       divisor u2. Primarily used in
                                 pictured numeric output DIG:
 4230                           
 4231                            SECTION .text : CONST (2)
 4232                           MSMOD_NFA:
 4233    00000000 85                    DC8     0x85
 4234    00000001 4D2F4D4F              DC8     'M/MO'
 4235    00000005 C4                    DC8     'D'+0x80
 4236    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 4237    00000008 ........              DC32    SSLASH_NFA
 4238                           MSMOD:
 4239    0000000C ........              DC32    DOCOL
 4240    00000010 ........              DC32    TOR
 4241    00000014 ........              DC32    ZERO
 4242    00000018 ........              DC32    R
 4243    0000001C ........              DC32    USLASH
 4244    00000020 ........              DC32    FROMR
 4245    00000024 ........              DC32    SWAP
 4246    00000028 ........              DC32    TOR
 4247    0000002C ........              DC32    USLASH
 4248    00000030 ........              DC32    FROMR
 4249    00000034 ........              DC32    SEMIS
 4250                           
 4251                           
 4252                           //      BIN BIN:        ( -- )
 4253                           //      Set the numeric conversion base to TWO
                                 (bianry).
 4254                           
 4255                            SECTION .text : CONST (2)
 4256                           BIN_NFA:
 4257    00000000 83                    DC8     0x83
 4258    00000001 4249                  DC8     'BI'
 4259    00000003 CE                    DC8     'N'+0x80
 4260                            ALIGNROM 2,0xFFFFFFFF
 4261    00000004 ........              DC32    MSMOD_NFA
 4262                           BIN:
 4263    00000008 ........              DC32    DOCOL
 4264    0000000C ........              DC32    TWO
 4265    00000010 ........              DC32    BASE_UV
 4266    00000014 ........              DC32    STORE
 4267    00000018 ........              DC32    SEMIS
 4268                           
 4269                           
 4270                           //      HEX HEX:        ( -- )
 4271                           //      Set the numeric conversion base to
                                 sixteen (hexadecimal).
 4272                           
 4273                            SECTION .text : CONST (2)
 4274                           HEX_NFA:
 4275    00000000 83                    DC8     0x83
 4276    00000001 4845                  DC8     'HE'
 4277    00000003 D8                    DC8     'X'+0x80
 4278                            ALIGNROM 2,0xFFFFFFFF
 4279    00000004 ........              DC32    BIN_NFA
 4280                           HEX:
 4281    00000008 ........              DC32    DOCOL
 4282    0000000C ........10000         DC32    LIT,16
                  000          
 4283    00000014 ........              DC32    BASE_UV
 4284    00000018 ........              DC32    STORE
 4285    0000001C ........              DC32    SEMIS
 4286                           
 4287                           
 4288                           //      DECIMAL DECIMAL:        ( --
                                 )
 4289                           //      Set the numeric conversion base to TEN
                                 (decimal).
 4290                           //      DEC IS A NUMBER!
 4291                           
 4292                            SECTION .text : CONST (2)
 4293                           DECIMAL_NFA:
 4294    00000000 87                    DC8     0x87
 4295    00000001 444543494D41          DC8     'DECIMA'
 4296    00000007 CC                    DC8     'L'+0x80
 4297                            ALIGNROM 2,0xFFFFFFFF
 4298    00000008 ........              DC32    HEX_NFA
 4299                           DECIMAL:
 4300    0000000C ........              DC32    DOCOL
 4301    00000010 ........0A000         DC32    LIT,10
                  000          
 4302    00000018 ........              DC32    BASE_UV
 4303    0000001C ........              DC32    STORE
 4304    00000020 ........              DC32    SEMIS
 4305                           
 4306                           
 4307                           //      D.R DDOTR:      ( sd=<LSW MSW> n -- )
                                 SIGNED:
 4308                           //      Print a signed double number sd right
                                 aligned
 4309                           //      in a field n characters wide.
 4310                           
 4311                            SECTION .text : CONST (2)
 4312                           DDOTR_NFA:
 4313    00000000 83                    DC8     0x83
 4314    00000001 442E                  DC8     'D.'
 4315    00000003 D2                    DC8     'R'+0x80
 4316                            ALIGNROM 2,0xFFFFFFFF
 4317    00000004 ........              DC32    DECIMAL_NFA
 4318                           DDOTR:
 4319    00000008 ........              DC32    DOCOL
 4320    0000000C ........              DC32    TOR     // N CHAR FIELD LEN to
                                                         r
 4321    00000010 ........              DC32    SWAP    // ( LSW MSW -- MSW LSW
                                                         )
 4322    00000014 ........              DC32    OVER    // ( MSW LSW -- MSW LSW
                                                         MSW )
 4323    00000018 ........              DC32    DABS    // ( MSW LSW MSW -- MSW
                                                         uLSW uMSW )
 4324    0000001C ........              DC32    BDIGS   // <# SET HLD to
                                                         Pad
 4325    00000020 ........              DC32    DIGS    // ( d=<LSW MSW> --
                                                         d=<LSW MSW> )
 4326    00000024 ........              DC32    SIGN    // ( d=<LSW MSW> --
                                                         d=<LSW MSW> )
 4327    00000028 ........              DC32    EDIGS   //      #>  ( d=<LSW
                                                         MSW>  ---  addr  count
                                                         )
 4328    0000002C ........              DC32    FROMR   // GET THE N CHAR FIELD
                                                         LEN
 4329    00000030 ........              DC32    OVER    // ( addr count n --
                                                         addr count n count
                                                         )
 4330    00000034 ........              DC32    SUBB    // ( n addr count addr
                                                         -- n addr count-n
                                                         )
 4331    00000038 ........              DC32    SPACES  // SPACES  ( n --
                                                         )
 4332    0000003C ........              DC32    TYPE    // ( n addr --
                                                         )
 4333    00000040 ........              DC32    SEMIS
 4334                           
 4335                           
 4336                           
 4337                           //      .R DOTR:        ( sn1 n2 -- )
                                 SIGNED:
 4338                           //      Print the signed number sn1 right
                                 aligned in a field whose width is n2.
 4339                           //       No following blank is printed.
 4340                           
 4341                            SECTION .text : CONST (2)
 4342                           DOTR_NFA:
 4343    00000000 82                    DC8     0x82
 4344    00000001 2E                    DC8     '.'
 4345    00000002 D2                    DC8     'R'+0x80
 4346    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4347    00000004 ........              DC32    DDOTR_NFA
 4348                           DOTR:
 4349    00000008 ........              DC32    DOCOL
 4350    0000000C ........              DC32    TOR
 4351    00000010 ........              DC32    STOD
 4352    00000014 ........              DC32    FROMR
 4353    00000018 ........              DC32    DDOTR
 4354    0000001C ........              DC32    SEMIS
 4355                           
 4356                           
 4357                           //      .RU DOTRU:      ( n1 n2 -- )
                                 UNSIGNED:
 4358                           //      Print the unsigned number n1 right
                                 aligned in a field whose width is n2.
 4359                           //      No following blank is printed.
 4360                           
 4361                            SECTION .text : CONST (2)
 4362                           DOTRU_NFA:
 4363    00000000 83                    DC8     0x83
 4364    00000001 2E52                  DC8     '.R'
 4365    00000003 D5                    DC8     'U'+0x80
 4366                            ALIGNROM 2,0xFFFFFFFF
 4367    00000004 ........              DC32    DOTR_NFA
 4368                           DOTRU:
 4369    00000008 ........              DC32    DOCOL
 4370    0000000C ........              DC32    TOR
 4371    00000010 ........              DC32    ZERO
 4372    00000014 .............         DC32    BDIGS, DIGS, EDIGS
                  ...........  
 4373    00000020 .............         DC32    DUP, FROMR
                  ...          
 4374    00000028 .............         DC32    SWAP, SUBB, SPACES, TYPE
                  .............
                  ......       
 4375    00000038 ........              DC32    SEMIS
 4376                           
 4377                           
 4378                           //      D. DDOT:        ( S32-2'S COMPLEMET =
                                 (d=<LSW MSW> -- )
 4379                           //      Print a signed double number from a 32
                                 bit two's complement value.
 4380                           //       The high-order 32 bits are most
                                 accessable on the stack. Conversion
 4381                           //       is performed according to the current
                                 BASE. A blank follows.
 4382                           
 4383                            SECTION .text : CONST (2)
 4384                           DDOT_NFA:
 4385    00000000 82                    DC8     0x82
 4386    00000001 44                    DC8     'D'
 4387    00000002 AE                    DC8     '.'+0x80
 4388    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4389    00000004 ........              DC32    DOTRU_NFA
 4390                           DDOT:
 4391    00000008 ........              DC32    DOCOL
 4392    0000000C ........              DC32    ZERO
 4393    00000010 ........              DC32    DDOTR
 4394    00000014 ........              DC32    SPACE
 4395    00000018 ........              DC32    SEMIS
 4396                           
 4397                           
 4398                           //      . DOT:  ( n -- ) SIGNED 2'S COMPLEMENT
                                :
 4399                           //      Print a number from a signed 32 bit
                                 two's complement value,
 4400                           //       converted according to the numeric
                                 BASE.
 4401                           //       A trailing blanks follows.
 4402                           
 4403                            SECTION .text : CONST (2)
 4404                           DOT_NFA:
 4405    00000000 81                    DC8     0x81
 4406    00000001 AE                    DC8     '.'+0x80
 4407    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4408    00000004 ........              DC32    DDOT_NFA
 4409                           DOT:
 4410    00000008 ........              DC32    DOCOL
 4411    0000000C ........              DC32    STOD
 4412    00000010 ........              DC32    DDOT
 4413    00000014 ........              DC32    SEMIS
 4414                           
 4415                           
 4416                           //      ? QUES: ( addr -- )
 4417                           //      Print the value contained at the
                                 address in free format according to
 4418                           //       the current base using DOT.
 4419                           
 4420                            SECTION .text : CONST (2)
 4421                           QUES_NFA:
 4422    00000000 81                    DC8     0x81
 4423    00000001 BF                    DC8     '?'+0x80
 4424    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4425    00000004 ........              DC32    DOT_NFA
 4426                           QUES:
 4427    00000008 ........              DC32    DOCOL
 4428    0000000C ........              DC32    AT
 4429    00000010 ........              DC32    DOT
 4430    00000014 ........              DC32    SEMIS
 4431                           
 4432                           
 4433                           //      U. UDOT:        ( n -- ) USIGNED
                                 DOT
 4434                           
 4435                            SECTION .text : CONST (2)
 4436                           UDOT_NFA:
 4437    00000000 82                    DC8     0x82
 4438    00000001 55                    DC8     'U'
 4439    00000002 AE                    DC8     '.'+0x80
 4440    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4441    00000004 ........              DC32    QUES_NFA
 4442                           UDOT:
 4443    00000008 ........              DC32    DOCOL
 4444    0000000C ........              DC32    ZERO
 4445    00000010 ........              DC32    DDOT
 4446    00000014 ........              DC32    SEMIS
 4447                           
 4448                           
 4449                           //      U* USTAR:       (u1 u2 --  ud=<LSW
                                 MSW> )
 4450                           //       Leave the unsigned double number
                                 product of two unsigned numbers.
 4451                           
 4452                            SECTION .text : CONST (2)
 4453                           USTAR_NFA:
 4454    00000000 82                    DC8     0x82
 4455    00000001 55                    DC8     'U'
 4456    00000002 AA                    DC8     '*'+0x80
 4457    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4458    00000004 ........              DC32    UDOT_NFA
 4459                           USTAR:
 4460    00000008 ........              DC32    .+5
 4461                            SECTION .text : CODE (2)
 4462                                   POP2t
 4462.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4462.2  00000002 3F1D                  ADDS    p, p, #4
 4462.3                                 ENDM
 4463                                   POP2n
 4463.1  00000004 3968                  LDR     n, [p]
 4463.2  00000006 3F1D                  ADDS    p, p, #4
 4463.3                                 ENDM
 4464                            IMPORT c_32by32to64mul // LSW in t (r0), MSW
                                 in n (r1)
 4465    00000008 ........              BL              c_32by32to64mul
 4466    0000000C 0246                  MOV             w, t    // LSW
 4467    0000000E 0846                  MOV             t, n    // MSW
 4468                                   DPUSH                   //  --  LSW
                                 MSW )
 4468                                   PUSHw   // push w to p, pre decrement
                                 p
 4468.1  00000010 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 4468.2  00000012 3A60                  STR     w, [p]
 4468.3                                 ENDM
 4468                                   TPUSH
 4468                                   PUSHt   // push t to p, pre decrement
                                 p
 4468.1  00000014 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 4468.2  00000016 3860                  STR     t, [p]
 4468.3                                 ENDM
 4468                                   NEXT
 4468.1  00000018 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 4468                                   NEXT1
 4468.1  0000001A 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4468.2  0000001C 9847                  BLX     x
 4468.3                          LTORG
 4468.4  0000001E 0000           LTORG
 4468.5  00000020 ........               TABLE
 4468.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4468.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4468.8                                 ENDM
 4468.9                                 ENDM
 4468.10                                ENDM
 4468.11                                ENDM
 4469                           
 4470                           
 4471                           //      U/ USLASH:      ( uLSW uMSW u32 ---
                                 u32REMAINDER u32QUOTIENT )
 4472                           //       Leave the unsigned remainder u2 and
                                 unsigned quotient u3 from the
 4473                           //       unsigned double dividend ud and
                                 unsigned divisor u1.
 4474                           //       RESULTS ARE NOT A TRADITOIONAL DOUBLE
                                 NUMBER ONE WOULD PRINT USING D.
 4475                           //       Quotient = int ( Dividend / Divisor
                                 )
 4476                           //       Remainder = Dividend - Quotient *
                                 Divisor
 4477                           
 4478                            SECTION .text : CONST (2)
 4479                           USLASH_NFA:
 4480    00000000 82                    DC8     0x82
 4481    00000001 55                    DC8     'U'
 4482    00000002 AF                    DC8     '/'+0x80
 4483    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4484    00000004 ........              DC32    USTAR_NFA
 4485                           USLASH:
 4486    00000008 ........              DC32    .+5
 4487                            SECTION .text : CODE (2)
 4488                           //      U/  USLASH: ( uLSW uMSW u32 ---
                                 u32REMAINDER u32QUOTIENT )
 4489                                   POP2t                   // U32 
                                 divisor
 4489.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 4489.2  00000002 3F1D                  ADDS    p, p, #4
 4489.3                                 ENDM
 4490                                   POP2x                   // UMSW 
                                 dividendHI
 4490.1  00000004 3B68                  LDR     x, [p]
 4490.2  00000006 3F1D                  ADDS    p, p, #4
 4490.3                                 ENDM
 4491                                   POP2w                   // ULSW
                                 dividendLO
 4491.1  00000008 3A68                  LDR     w, [p]
 4491.2  0000000A 3F1D                  ADDS    p, p, #4
 4491.3                                 ENDM
 4492    0000000C 0028                  CMP     t, #0           // divide by
                                                 zero is divisor = 0
 4493    0000000E 0BD0                  BEQ     DZERO           // J Not
                                                  Below
 4494                           
 4495                            IMPORT c_64by32div             // LSW of quo
                                 in t (r0), rem in w (r2)
 4496    00000010 ........              BL      c_64by32div
 4497                                   DPUSH                   //  --  LSW
                                 MSW )
 4497                                   PUSHw   // push w to p, pre decrement
                                 p
 4497.1  00000014 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 4497.2  00000016 3A60                  STR     w, [p]
 4497.3                                 ENDM
 4497                                   TPUSH
 4497                                   PUSHt   // push t to p, pre decrement
                                 p
 4497.1  00000018 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 4497.2  0000001A 3860                  STR     t, [p]
 4497.3                                 ENDM
 4497                                   NEXT
 4497.1  0000001C 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 4497                                   NEXT1
 4497.1  0000001E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4497.2  00000020 9847                  BLX     x
 4497.3                          LTORG
 4497.4  00000022 0000           LTORG
 4497.5  00000024 ........               TABLE
 4497.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4497.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4497.8                                 ENDM
 4497.9                                 ENDM
 4497.10                                ENDM
 4497.11                                ENDM
 4498                           
 4499                           DZERO:
 4500                           
 4501    00000028 4040                  EORS    t, t, t         // zero
 4502    0000002A 401E                  SUBS    t, t, #1        // 
 4503    0000002C 0246                  MOV     w, t            // 
 4504                                   DPUSH                   //  --  LSW
                                 MSW )
 4504                                   PUSHw   // push w to p, pre decrement
                                 p
 4504.1  0000002E 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 4504.2  00000030 3A60                  STR     w, [p]
 4504.3                                 ENDM
 4504                                   TPUSH
 4504                                   PUSHt   // push t to p, pre decrement
                                 p
 4504.1  00000032 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 4504.2  00000034 3860                  STR     t, [p]
 4504.3                                 ENDM
 4504                                   NEXT
 4504.1  00000036 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 4504                                   NEXT1
 4504.1  00000038 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4504.2  0000003A 9847                  BLX     x
 4504.3                          LTORG
 4504.4                          LTORG
 4504.5  0000003C ........               TABLE
 4504.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4504.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4504.8                                 ENDM
 4504.9                                 ENDM
 4504.10                                ENDM
 4504.11                                ENDM
 4505                           
 4506                           
 4507                           //      ANDD AND: ( n1 n2 -- n2 )
 4508                           //      Leave the bitwise logical and of n1
                                 and n2 as n3.
 4509                           
 4510                            SECTION .text : CONST (2)
 4511                           ANDD_NFA:
 4512    00000000 83                    DC8     0x83
 4513    00000001 414E                  DC8     'AN'
 4514    00000003 C4                    DC8     'D'+0x80
 4515                            ALIGNROM 2,0xFFFFFFFF
 4516    00000004 ........              DC32    USLASH_NFA
 4517                           ANDD:
 4518    00000008 ........              DC32    .+5
 4519                            SECTION .text : CODE (2)
 4520                                   POP2t
 4520.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4520.2  00000002 3F1D                  ADDS    p, p, #4
 4520.3                                 ENDM
 4521                                   POP2n
 4521.1  00000004 3968                  LDR     n, [p]
 4521.2  00000006 3F1D                  ADDS    p, p, #4
 4521.3                                 ENDM
 4522    00000008 0840                  ANDS     t, t, n
 4523                                   TPUSH
 4523                                   PUSHt   // push t to p, pre decrement
                                 p
 4523.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4523.2  0000000C 3860                  STR     t, [p]
 4523.3                                 ENDM
 4523                                   NEXT
 4523.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4523                                   NEXT1
 4523.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4523.2  00000012 9847                  BLX     x
 4523.3                          LTORG
 4523.4                          LTORG
 4523.5  00000014 ........               TABLE
 4523.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4523.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4523.8                                 ENDM
 4523.9                                 ENDM
 4523.10                                ENDM
 4524                           
 4525                           
 4526                           //      OR OR:  ( n1 n2 -- n3 )
 4527                           //      Leave the bit-wise logical or of n1
                                 and n2 as n3.
 4528                           
 4529                            SECTION .text : CONST (2)
 4530                           OR_NFA:
 4531    00000000 82                    DC8     0x82
 4532    00000001 4F                    DC8     'O'
 4533    00000002 D2                    DC8     'R'+0x80
 4534    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4535    00000004 ........              DC32    ANDD_NFA
 4536                           OR:
 4537    00000008 ........              DC32    .+5
 4538                            SECTION .text : CODE (2)
 4539                                   POP2t
 4539.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4539.2  00000002 3F1D                  ADDS    p, p, #4
 4539.3                                 ENDM
 4540                                   POP2n
 4540.1  00000004 3968                  LDR     n, [p]
 4540.2  00000006 3F1D                  ADDS    p, p, #4
 4540.3                                 ENDM
 4541    00000008 0843                  ORRS     t, t, n
 4542                                   TPUSH
 4542                                   PUSHt   // push t to p, pre decrement
                                 p
 4542.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4542.2  0000000C 3860                  STR     t, [p]
 4542.3                                 ENDM
 4542                                   NEXT
 4542.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4542                                   NEXT1
 4542.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4542.2  00000012 9847                  BLX     x
 4542.3                          LTORG
 4542.4                          LTORG
 4542.5  00000014 ........               TABLE
 4542.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4542.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4542.8                                 ENDM
 4542.9                                 ENDM
 4542.10                                ENDM
 4543                           
 4544                           
 4545                           //      NOT NOT: ( nl -- n2 )
 4546                           //      Leave the bitwise logical not of n1 as
                                 n2
 4547                           
 4548                            SECTION .text : CONST (2)
 4549                           NOT_NFA:
 4550    00000000 83                    DC8     0x83
 4551    00000001 4E4F                  DC8     'NO'
 4552    00000003 D4                    DC8     'T'+0x80
 4553                            ALIGNROM 2,0xFFFFFFFF
 4554    00000004 ........              DC32    OR_NFA
 4555                           NOT:
 4556    00000008 ........              DC32    .+5
 4557                            SECTION .text : CODE (2)
 4558                                   POP2t
 4558.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4558.2  00000002 3F1D                  ADDS    p, p, #4
 4558.3                                 ENDM
 4559    00000004 C043                  MVNS            t, t    // 1's
                                                         compliment
 4560                                   TPUSH
 4560                                   PUSHt   // push t to p, pre decrement
                                 p
 4560.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4560.2  00000008 3860                  STR     t, [p]
 4560.3                                 ENDM
 4560                                   NEXT
 4560.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4560                                   NEXT1
 4560.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4560.2  0000000E 9847                  BLX     x
 4560.3                          LTORG
 4560.4                          LTORG
 4560.5  00000010 ........               TABLE
 4560.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4560.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4560.8                                 ENDM
 4560.9                                 ENDM
 4560.10                                ENDM
 4561                           
 4562                           
 4563                           //      XORR XOR:       ( nl n2 -- n3
                                 )
 4564                           //      Leave the bitwise logical exclusive or
                                 n1 and n2 as n3
 4565                           
 4566                            SECTION .text : CONST (2)
 4567                           XORR_NFA:
 4568    00000000 83                    DC8     0x83
 4569    00000001 584F                  DC8     'XO'
 4570    00000003 D2                    DC8     'R'+0x80
 4571                            ALIGNROM 2,0xFFFFFFFF
 4572    00000004 ........              DC32    NOT_NFA
 4573                           XORR:
 4574    00000008 ........              DC32    .+5
 4575                            SECTION .text : CODE (2)
 4576                                   POP2t
 4576.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4576.2  00000002 3F1D                  ADDS    p, p, #4
 4576.3                                 ENDM
 4577                                   POP2n
 4577.1  00000004 3968                  LDR     n, [p]
 4577.2  00000006 3F1D                  ADDS    p, p, #4
 4577.3                                 ENDM
 4578    00000008 4840                  EORS     t, t, n
 4579                                   TPUSH
 4579                                   PUSHt   // push t to p, pre decrement
                                 p
 4579.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4579.2  0000000C 3860                  STR     t, [p]
 4579.3                                 ENDM
 4579                                   NEXT
 4579.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4579                                   NEXT1
 4579.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4579.2  00000012 9847                  BLX     x
 4579.3                          LTORG
 4579.4                          LTORG
 4579.5  00000014 ........               TABLE
 4579.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4579.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4579.8                                 ENDM
 4579.9                                 ENDM
 4579.10                                ENDM
 4580                           
 4581                           
 4582                           //      + PLUS: ( n1 n2 -- n3 )
 4583                           //      Add n1 and n2, leaving sum n3
 4584                           
 4585                            SECTION .text : CONST (2)
 4586                           PLUS_NFA:
 4587    00000000 81                    DC8     0x81
 4588    00000001 AB                    DC8     0xAB    // '+' + 0x80
 4589    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4590    00000004 ........              DC32    XORR_NFA
 4591                           PLUS:
 4592    00000008 ........              DC32    .+5
 4593                            SECTION .text : CODE (2)
 4594                                   POP2t
 4594.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4594.2  00000002 3F1D                  ADDS    p, p, #4
 4594.3                                 ENDM
 4595                                   POP2n
 4595.1  00000004 3968                  LDR     n, [p]
 4595.2  00000006 3F1D                  ADDS    p, p, #4
 4595.3                                 ENDM
 4596    00000008 4018                  ADDS    t, t, n
 4597                                   TPUSH
 4597                                   PUSHt   // push t to p, pre decrement
                                 p
 4597.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4597.2  0000000C 3860                  STR     t, [p]
 4597.3                                 ENDM
 4597                                   NEXT
 4597.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4597                                   NEXT1
 4597.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4597.2  00000012 9847                  BLX     x
 4597.3                          LTORG
 4597.4                          LTORG
 4597.5  00000014 ........               TABLE
 4597.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4597.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4597.8                                 ENDM
 4597.9                                 ENDM
 4597.10                                ENDM
 4598                           
 4599                           
 4600                           //      - SUBB: ( n1 n2 -- n3 )
 4601                           //      Leave the difference of n1-n2 as
                                 n3.
 4602                           //      1 2 - . -1
 4603                           //      2 1 - .  1
 4604                           
 4605                            SECTION .text : CONST (2)
 4606                           SUB_NFA:
 4607    00000000 81                    DC8     0x81
 4608    00000001 AD                    DC8     '-'+0x80
 4609    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4610    00000004 ........              DC32    PLUS_NFA
 4611                           SUBB:
 4612    00000008 ........              DC32    .+5
 4613                            SECTION .text : CODE (2)
 4614                                   POP2t
 4614.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4614.2  00000002 3F1D                  ADDS    p, p, #4
 4614.3                                 ENDM
 4615                                   POP2n
 4615.1  00000004 3968                  LDR     n, [p]
 4615.2  00000006 3F1D                  ADDS    p, p, #4
 4615.3                                 ENDM
 4616    00000008 081A                  SUBS    t, n, t
 4617                                   TPUSH
 4617                                   PUSHt   // push t to p, pre decrement
                                 p
 4617.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4617.2  0000000C 3860                  STR     t, [p]
 4617.3                                 ENDM
 4617                                   NEXT
 4617.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4617                                   NEXT1
 4617.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4617.2  00000012 9847                  BLX     x
 4617.3                          LTORG
 4617.4                          LTORG
 4617.5  00000014 ........               TABLE
 4617.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4617.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4617.8                                 ENDM
 4617.9                                 ENDM
 4617.10                                ENDM
 4618                           
 4619                           
 4620                           //      = EQUAL:        (n1 n2 -- f )
 4621                           //      Leave a non-zero true flag if n1=n2//
                                 otherwise leave a false flag.
 4622                           
 4623                            SECTION .text : CONST (2)
 4624                           EQUAL_NFA:
 4625    00000000 81                    DC8     0x81
 4626    00000001 BD                    DC8     '='+0x80
 4627    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4628    00000004 ........              DC32    SUB_NFA
 4629                           EQUAL:
 4630    00000008 ........              DC32    DOCOL
 4631    0000000C ........              DC32    SUBB
 4632    00000010 ........              DC32    ZEQU
 4633    00000014 ........              DC32    SEMIS
 4634                           
 4635                           
 4636                           //      < LESSTHAN:     ( n1 n2 -- f )
                                 SIGNED:
 4637                           //      Leave a true flag if n1 is less than
                                 n2 otherwise leave a false flag.
 4638                           //      C0 1 < . 0  -1 C0 < . 1
 4639                           
 4640                            SECTION .text : CONST (2)
 4641                           LESSTHAN_NFA:
 4642    00000000 81                    DC8     0x81
 4643    00000001 BC                    DC8     '<'+0x80
 4644    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4645    00000004 ........              DC32    EQUAL_NFA
 4646                           LESSTHAN:
 4647    00000008 ........              DC32    .+5
 4648                            SECTION .text : CODE (2)
 4649    00000000 0120                  MOVS    t, #1
 4650                                   POP2n                           //
                                 n2
 4650.1  00000002 3968                  LDR     n, [p]
 4650.2  00000004 3F1D                  ADDS    p, p, #4
 4650.3                                 ENDM
 4651                                   POP2w                           //
                                 n1
 4651.1  00000006 3A68                  LDR     w, [p]
 4651.2  00000008 3F1D                  ADDS    p, p, #4
 4651.3                                 ENDM
 4652    0000000A 9142                  CMP     n, w        // n1 < n2
 4653    0000000C 00DC                  BGT     LESS1
 4654                           
 4655    0000000E 4040                  EORS    t, t, t                 // t =<
                                                 n
 4656                           LESS1:
 4657                                   TPUSH
 4657                                   PUSHt   // push t to p, pre decrement
                                 p
 4657.1  00000010 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4657.2  00000012 3860                  STR     t, [p]
 4657.3                                 ENDM
 4657                                   NEXT
 4657.1  00000014 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4657                                   NEXT1
 4657.1  00000016 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4657.2  00000018 9847                  BLX     x
 4657.3                          LTORG
 4657.4  0000001A 0000           LTORG
 4657.5  0000001C ........               TABLE
 4657.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4657.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4657.8                                 ENDM
 4657.9                                 ENDM
 4657.10                                ENDM
 4658                           
 4659                           
 4660                           //      U< ULESSTHAN:   ( n1 n2 -- f ) 
                                 UNSIGNED:
 4661                           //      Leave a true flag if n1 is less than
                                 n2 otherwise leave a false flag.
 4662                           //      -1 -2 U< . 0  -1 2 U< . 0  1 2 U< .
                                 1
 4663                           
 4664                            SECTION .text : CONST (2)
 4665                           ULESSTHAN_NFA:
 4666    00000000 82                    DC8     0x82
 4667    00000001 55                    DC8     'U'
 4668    00000002 BC                    DC8     '<'+0x80
 4669    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4670    00000004 ........              DC32    LESSTHAN_NFA
 4671                           ULESSTHAN:
 4672    00000008 .............         DC32    DOCOL,TDUP
                  ...          
 4673    00000010 .............         DC32    XORR, ZLESS
                  ...          
 4674    00000018 ........              DC32    ZBRAN
 4675    0000001C 18000000              DC32    ULES1-. //IF
 4676                           
 4677    00000020 .............         DC32    DROP, ZLESS
                  ...          
 4678    00000028 ........              DC32    ZEQU
 4679    0000002C ........              DC32    BRAN
 4680    00000030 0C000000              DC32    ULES2-.
 4681                           
 4682                           ULES1:
 4683    00000034 .............         DC32    SUBB,ZLESS      //ELSE
                  ...          
 4684                           
 4685                           ULES2:
 4686    0000003C ........              DC32    SEMIS           //endif
 4687                           
 4688                           
 4689                           //      > GREATERTHAN:  ( n1 n2 --  f )
                                 SIGNED: L0
 4690                           //      Leave a true flag if n1 is greater
                                 than n2 otherwise a false flag.
 4691                           //      -1 1 > . 0  1 -1 > . 1
 4692                           
 4693                            SECTION .text : CONST (2)
 4694                           GREATERTHAN_NFA:
 4695    00000000 81                    DC8     0x81
 4696    00000001 BE                    DC8     '>'+0x80
 4697    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4698    00000004 ........              DC32    ULESSTHAN_NFA
 4699                           GREATERTHAN:
 4700    00000008 ........              DC32    DOCOL
 4701    0000000C ........              DC32    SWAP
 4702    00000010 ........              DC32    LESSTHAN
 4703    00000014 ........              DC32    SEMIS
 4704                           
 4705                           
 4706                           //      0= ZEQU:        ( n -- f )
 4707                           //      Leave a true flag is the number is
                                 equal to zero, otherwise leave a
 4708                           //      false flag.
 4709                           
 4710                            SECTION .text : CONST (2)
 4711                           ZEQU_NFA:
 4712    00000000 82                    DC8     0x82
 4713    00000001 30                    DC8     '0'
 4714    00000002 BD                    DC8     '='+0x80
 4715    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4716    00000004 ........              DC32    GREATERTHAN_NFA
 4717                           ZEQU:
 4718    00000008 ........              DC32    .+5
 4719                            SECTION .text : CODE (2)
 4720                                   POP2t
 4720.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4720.2  00000002 3F1D                  ADDS    p, p, #4
 4720.3                                 ENDM
 4721    00000004 0028                  CMP     t, #0
 4722    00000006 07D1                  BNE     ZEQU1
 4723                           
 4724    00000008 401C                  ADDS    t, t, #1
 4725                                   TPUSH
 4725                                   PUSHt   // push t to p, pre decrement
                                 p
 4725.1  0000000A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4725.2  0000000C 3860                  STR     t, [p]
 4725.3                                 ENDM
 4725                                   NEXT
 4725.1  0000000E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4725                                   NEXT1
 4725.1  00000010 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4725.2  00000012 9847                  BLX     x
 4725.3                          LTORG
 4725.4                          LTORG
 4725.5  00000014 ........               TABLE
 4725.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4725.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4725.8                                 ENDM
 4725.9                                 ENDM
 4725.10                                ENDM
 4726                           ZEQU1:
 4727    00000018 4040                  EORS    t, t, t
 4728                                   TPUSH
 4728                                   PUSHt   // push t to p, pre decrement
                                 p
 4728.1  0000001A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4728.2  0000001C 3860                  STR     t, [p]
 4728.3                                 ENDM
 4728                                   NEXT
 4728.1  0000001E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4728                                   NEXT1
 4728.1  00000020 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4728.2  00000022 9847                  BLX     x
 4728.3                          LTORG
 4728.4                          LTORG
 4728.5  00000024 ........               TABLE
 4728.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4728.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4728.8                                 ENDM
 4728.9                                 ENDM
 4728.10                                ENDM
 4729                           
 4730                           
 4731                           //      0< ZLESS:       ( n -- f )
 4732                           //      Leave a true flag if the number is
                                 less than zero (negative),
 4733                           //      otherwise leave a false flag.
 4734                           
 4735                            SECTION .text : CONST (2)
 4736                           ZLESS_NFA:
 4737    00000000 82                    DC8     0x82
 4738    00000001 30                    DC8     '0'
 4739    00000002 BC                    DC8     '<'+0x80
 4740    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4741    00000004 ........              DC32    ZEQU_NFA
 4742                           ZLESS:
 4743    00000008 ........              DC32    .+5
 4744                            SECTION .text : CODE (2)
 4745                                   POP2n
 4745.1  00000000 3968                  LDR     n, [p]
 4745.2  00000002 3F1D                  ADDS    p, p, #4
 4745.3                                 ENDM
 4746    00000004 0120                  MOVS    t, #1   // TRUE
 4747    00000006 0943                  ORRS    n, n, n // SET FLAGS
 4748    00000008 00D4                  BMI     ZLESS1  // JS   ZLESS1
 4749                           
 4750    0000000A 0020                  MOVS    t, #0   // FALSE
 4751                           ZLESS1:
 4752                                   TPUSH
 4752                                   PUSHt   // push t to p, pre decrement
                                 p
 4752.1  0000000C 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4752.2  0000000E 3860                  STR     t, [p]
 4752.3                                 ENDM
 4752                                   NEXT
 4752.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4752                                   NEXT1
 4752.1  00000012 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4752.2  00000014 9847                  BLX     x
 4752.3                          LTORG
 4752.4  00000016 0000           LTORG
 4752.5  00000018 ........               TABLE
 4752.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4752.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4752.8                                 ENDM
 4752.9                                 ENDM
 4752.10                                ENDM
 4753                           
 4754                           
 4755                           //      D+ DPLUS:       ( LSW1 MSW1 LSW2 MSW2
                                 --- LSW MSW )  SIGNED:
 4756                           //      Leave the signed double number sum of
                                 two signed double numbers.
 4757                           
 4758                            SECTION .text : CONST (2)
 4759                           DPLUS_NFA:
 4760    00000000 82                    DC8     0x82
 4761    00000001 44                    DC8     'D'
 4762    00000002 AB                    DC8     '+'+0x80
 4763    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4764    00000004 ........              DC32    ZLESS_NFA
 4765                           DPLUS:
 4766    00000008 ........              DC32    .+5
 4767                            SECTION .text : CODE (2)
 4768                                   POP2t   //    ldr     t, [p],#4      
                                 // MS
 4768.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 4768.2  00000002 3F1D                  ADDS    p, p, #4
 4768.3                                 ENDM
 4769                                   POP2n   //    ldr     n, [p],#4      
                                 // LS
 4769.1  00000004 3968                  LDR     n, [p]
 4769.2  00000006 3F1D                  ADDS    p, p, #4
 4769.3                                 ENDM
 4770                                   POP2x   //    ldr     x, [p],#4      
                                 // MS
 4770.1  00000008 3B68                  LDR     x, [p]
 4770.2  0000000A 3F1D                  ADDS    p, p, #4
 4770.3                                 ENDM
 4771                                   POP2w   //    ldr     w, [p],#4      
                                 // LS
 4771.1  0000000C 3A68                  LDR     w, [p]
 4771.2  0000000E 3F1D                  ADDS    p, p, #4
 4771.3                                 ENDM
 4772    00000010 5218                  ADDS    w, w, n         // LS sum, set
                                                 status flags
 4773    00000012 5841                  ADCS    t, t, x         // MS sum +
                                                 carry
 4774                                   DPUSH                   //  --  LSW
                                 MSW )
 4774                                   PUSHw   // push w to p, pre decrement
                                 p
 4774.1  00000014 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 4774.2  00000016 3A60                  STR     w, [p]
 4774.3                                 ENDM
 4774                                   TPUSH
 4774                                   PUSHt   // push t to p, pre decrement
                                 p
 4774.1  00000018 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 4774.2  0000001A 3860                  STR     t, [p]
 4774.3                                 ENDM
 4774                                   NEXT
 4774.1  0000001C 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 4774                                   NEXT1
 4774.1  0000001E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4774.2  00000020 9847                  BLX     x
 4774.3                          LTORG
 4774.4  00000022 0000           LTORG
 4774.5  00000024 ........               TABLE
 4774.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4774.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4774.8                                 ENDM
 4774.9                                 ENDM
 4774.10                                ENDM
 4774.11                                ENDM
 4775                           
 4776                           
 4777                           //      NEGATE NEGATE: ( n1 -- n2 ) RENAMED:
                                 MINUS to NEGATE
 4778                           //      Leave the two's complement of a
                                 number.
 4779                           
 4780                            SECTION .text : CONST (2)
 4781                           NEGATE_NFA:
 4782    00000000 86                    DC8     0x86
 4783    00000001 4E45474154            DC8     'NEGAT'
 4784    00000006 C5                    DC8     'E'+0x80
 4785    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 4786    00000008 ........              DC32    DPLUS_NFA
 4787                           NEGATE:
 4788    0000000C ........              DC32    .+5
 4789                            SECTION .text : CODE (2)
 4790                                   POP2t                   // MVN
                                 YES
 4790.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 4790.2  00000002 3F1D                  ADDS    p, p, #4
 4790.3                                 ENDM
 4791    00000004 C043                  MVNS     t, t           // 1's
                                                  compliment
 4792    00000006 401C                  ADDS     t, t, #1       // 2's
                                                  compliment
 4793                                   TPUSH
 4793                                   PUSHt   // push t to p, pre decrement
                                 p
 4793.1  00000008 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4793.2  0000000A 3860                  STR     t, [p]
 4793.3                                 ENDM
 4793                                   NEXT
 4793.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4793                                   NEXT1
 4793.1  0000000E 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4793.2  00000010 9847                  BLX     x
 4793.3                          LTORG
 4793.4  00000012 0000           LTORG
 4793.5  00000014 ........               TABLE
 4793.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4793.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4793.8                                 ENDM
 4793.9                                 ENDM
 4793.10                                ENDM
 4794                           
 4795                           
 4796                           //      DNEGATE DNEGATE: ( d1 -- d<2>=(LSW
                                 MSW) ) RENAMED: DMINUS to DNEGATE
 4797                           //       Convert d1 to its double number two's
                                 complement d2.
 4798                           
 4799                            SECTION .text : CONST (2)
 4800                           DNEGATE_NFA:
 4801    00000000 87                    DC8     0x87
 4802    00000001 444E45474154          DC8     'DNEGAT'
 4803    00000007 C5                    DC8     'E'+0x80
 4804                            ALIGNROM 2,0xFFFFFFFF
 4805    00000008 ........              DC32    NEGATE_NFA
 4806                           DNEGATE:
 4807    0000000C ........              DC32    .+5
 4808                            SECTION .text : CODE (2)
 4809                                   POP2t                   // MSW   //POP
                                  BX
 4809.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 4809.2  00000002 3F1D                  ADDS    p, p, #4
 4809.3                                 ENDM
 4810                                   POP2w                   // LSW   //POP
                                  CX
 4810.1  00000004 3A68                  LDR     w, [p]
 4810.2  00000006 3F1D                  ADDS    p, p, #4
 4810.3                                 ENDM
 4811    00000008 C043                  MVNS    t, t            // negate
                                                 MSW
 4812    0000000A D243                  MVNS    w, w            // negate
                                                 LSW
 4813    0000000C 521C                  ADDS    w, w, #1        // add 1 to
                                                 LSW
 4814                                   DPUSH                   //  --  LSW
                                 MSW )
 4814                                   PUSHw   // push w to p, pre decrement
                                 p
 4814.1  0000000E 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 4814.2  00000010 3A60                  STR     w, [p]
 4814.3                                 ENDM
 4814                                   TPUSH
 4814                                   PUSHt   // push t to p, pre decrement
                                 p
 4814.1  00000012 3F1F                  SUBS    p, p, #4        // push t to p,
  pre decrement p
 4814.2  00000014 3860                  STR     t, [p]
 4814.3                                 ENDM
 4814                                   NEXT
 4814.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w,
  incr i after
 4814                                   NEXT1
 4814.1  00000018 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4814.2  0000001A 9847                  BLX     x
 4814.3                          LTORG
 4814.4                          LTORG
 4814.5  0000001C ........               TABLE
 4814.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4814.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4814.8                                 ENDM
 4814.9                                 ENDM
 4814.10                                ENDM
 4814.11                                ENDM
 4815                           
 4816                           
 4817                           //      1+ ONEP:        ( n -- n+1 )
 4818                           
 4819                            SECTION .text : CONST (2)
 4820                           ONEP_NFA:
 4821    00000000 82                    DC8     0x82
 4822    00000001 31                    DC8     '1'
 4823    00000002 AB                    DC8     '+'+0x80
 4824    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4825    00000004 ........              DC32    DNEGATE_NFA
 4826                           ONEP:
 4827    00000008 ........              DC32    .+5
 4828                            SECTION .text : CODE (2)
 4829                                   POP2t
 4829.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4829.2  00000002 3F1D                  ADDS    p, p, #4
 4829.3                                 ENDM
 4830    00000004 401C                  ADDS    t, t, #1        //
 4831                                   TPUSH
 4831                                   PUSHt   // push t to p, pre decrement
                                 p
 4831.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4831.2  00000008 3860                  STR     t, [p]
 4831.3                                 ENDM
 4831                                   NEXT
 4831.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4831                                   NEXT1
 4831.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4831.2  0000000E 9847                  BLX     x
 4831.3                          LTORG
 4831.4                          LTORG
 4831.5  00000010 ........               TABLE
 4831.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4831.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4831.8                                 ENDM
 4831.9                                 ENDM
 4831.10                                ENDM
 4832                           
 4833                           
 4834                           //      2+ TWOP:        ( n -- n+2 )
 4835                           
 4836                            SECTION .text : CONST (2)
 4837                           TWOP_NFA:
 4838    00000000 82                    DC8     0x82
 4839    00000001 32                    DC8     '2'
 4840    00000002 AB                    DC8     '+'+0x80
 4841    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4842    00000004 ........              DC32    ONEP_NFA
 4843                           TWOP:
 4844    00000008 ........              DC32    .+5
 4845                            SECTION .text : CODE (2)
 4846                                   POP2t
 4846.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4846.2  00000002 3F1D                  ADDS    p, p, #4
 4846.3                                 ENDM
 4847    00000004 801C                  ADDS    t, t, #2
 4848                                   TPUSH
 4848                                   PUSHt   // push t to p, pre decrement
                                 p
 4848.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4848.2  00000008 3860                  STR     t, [p]
 4848.3                                 ENDM
 4848                                   NEXT
 4848.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4848                                   NEXT1
 4848.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4848.2  0000000E 9847                  BLX     x
 4848.3                          LTORG
 4848.4                          LTORG
 4848.5  00000010 ........               TABLE
 4848.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4848.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4848.8                                 ENDM
 4848.9                                 ENDM
 4848.10                                ENDM
 4849                           
 4850                           
 4851                           //      4+ FOURP:       ( n -- n+4 )
 4852                           
 4853                            SECTION .text : CONST (2)
 4854                           FOURP_NFA:
 4855    00000000 82                    DC8     0x82
 4856    00000001 34                    DC8     '4'
 4857    00000002 AB                    DC8     '+'+0x80
 4858    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4859    00000004 ........              DC32    TWOP_NFA
 4860                           FOURP:
 4861    00000008 ........              DC32    .+5
 4862                            SECTION .text : CODE (2)
 4863                                   POP2t
 4863.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4863.2  00000002 3F1D                  ADDS    p, p, #4
 4863.3                                 ENDM
 4864    00000004 001D                  ADDS    t, t, #4
 4865                                   TPUSH
 4865                                   PUSHt   // push t to p, pre decrement
                                 p
 4865.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4865.2  00000008 3860                  STR     t, [p]
 4865.3                                 ENDM
 4865                                   NEXT
 4865.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4865                                   NEXT1
 4865.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4865.2  0000000E 9847                  BLX     x
 4865.3                          LTORG
 4865.4                          LTORG
 4865.5  00000010 ........               TABLE
 4865.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4865.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4865.8                                 ENDM
 4865.9                                 ENDM
 4865.10                                ENDM
 4866                           
 4867                           
 4868                           //      4- FOURM:       ( n -- n-4 )
 4869                           
 4870                            SECTION .text : CONST (2)
 4871                           FOURM_NFA:
 4872    00000000 82                    DC8     0x82
 4873    00000001 34                    DC8     '4'
 4874    00000002 AD                    DC8     '-'+0x80
 4875    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 4876    00000004 ........              DC32    FOURP_NFA
 4877                           FOURM:
 4878    00000008 ........              DC32    .+5
 4879                            SECTION .text : CODE (2)
 4880                                   POP2t
 4880.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 4880.2  00000002 3F1D                  ADDS    p, p, #4
 4880.3                                 ENDM
 4881    00000004 001F                  SUBS    t, t, #4
 4882                                   TPUSH
 4882                                   PUSHt   // push t to p, pre decrement
                                 p
 4882.1  00000006 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 4882.2  00000008 3860                  STR     t, [p]
 4882.3                                 ENDM
 4882                                   NEXT
 4882.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 4882                                   NEXT1
 4882.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 4882.2  0000000E 9847                  BLX     x
 4882.3                          LTORG
 4882.4                          LTORG
 4882.5  00000010 ........               TABLE
 4882.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 4882.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 4882.8                                 ENDM
 4882.9                                 ENDM
 4882.10                                ENDM
 4883                           
 4884                           
 4885                           //      0 ZERO: ( -- 0 )
 4886                           
 4887                            SECTION .text : CONST (2)
 4888                           ZERO_NFA:
 4889    00000000 81                    DC8     0x81
 4890    00000001 B0                    DC8     '0'+0x80
 4891    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4892    00000004 ........              DC32    FOURM_NFA
 4893                           ZERO:
 4894    00000008 ........00000         DC32    DOCON, 0
                  000          
 4895                           
 4896                           
 4897                           //      1 ONE: ( -- 1 )
 4898                           
 4899                            SECTION .text : CONST (2)
 4900                           ONE_NFA:
 4901    00000000 81                    DC8     0x81
 4902    00000001 B1                    DC8     '1'+0x80
 4903    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4904    00000004 ........              DC32    ZERO_NFA
 4905                           ONE:
 4906    00000008 ........01000         DC32    DOCON, 1
                  000          
 4907                           
 4908                           
 4909                           //      2 TWO: ( -- 2 )
 4910                           
 4911                            SECTION .text : CONST (2)
 4912                           TWO_NFA:
 4913    00000000 81                    DC8     0x81
 4914    00000001 B2                    DC8     '2'+0x80
 4915    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4916    00000004 ........              DC32    ONE_NFA
 4917                           TWO:
 4918    00000008 ........02000         DC32    DOCON, 2
                  000          
 4919                           
 4920                           
 4921                           //      3 THREE: ( -- 3 )
 4922                           
 4923                            SECTION .text : CONST (2)
 4924                           THREE_NFA:
 4925    00000000 81                    DC8     0x81
 4926    00000001 B3                    DC8     '3'+0x80
 4927    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4928    00000004 ........              DC32    TWO_NFA
 4929                           THREE:
 4930    00000008 ........03000         DC32    DOCON, 3
                  000          
 4931                           
 4932                           
 4933                           //      4 FOUR: ( -- 4 )
 4934                           
 4935                            SECTION .text : CONST (2)
 4936                           FOUR_NFA:
 4937    00000000 81                    DC8     0x81
 4938    00000001 B4                    DC8     '4'+0x80
 4939    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 4940    00000004 ........              DC32    THREE_NFA
 4941                           FOUR:
 4942    00000008 ........04000         DC32    DOCON, 4
                  000          
 4943                           
 4944                           //NOEXEC HEADERFORWORDCATEGORIES
 4945                           //      WC_NUMBERS_NFA = NUMBERS CATEGORY
 4946                           
 4947                            SECTION .text : CONST (2)
 4948                           WC_NUMBERS_NFA:
 4949    00000000 91                    DC8     0x80+4+13
 4950    00000001 0D0A                  DC8     0x0D, 0x0A
 4951    00000003 4E554D4245522         DC8     'NUMBER STUFF:'
                  053545546463A
 4952    00000010 0D8A                  DC8     0x0D, 0x0A+0x80
 4953    00000012 FFFF           ALIGNROM 2,0xFFFFFFFF
 4954    00000014 ........              DC32    FOUR_NFA
 4955                           
 4956                           //      !CSP SCSP:      ( -- )
 4957                           //  Save the stack position in CSP. Part of
                                 the compiler security.
 4958                           //      Means Store (save) Compile time stack
                                 position.
 4959                           
 4960                            SECTION .text : CONST (2)
 4961                           SCSP_NFA:
 4962    00000000 84                    DC8     0x84
 4963    00000001 214353                DC8     '!CS'
 4964    00000004 D0                    DC8     'P'+0x80
 4965    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4966    00000008 ........              DC32    WC_NUMBERS_NFA
 4967                           SCSP:
 4968    0000000C ........              DC32    DOCOL
 4969    00000010 ........              DC32    SPAT
 4970    00000014 ........              DC32    CSP_UV
 4971    00000018 ........              DC32    STORE
 4972    0000001C ........              DC32    SEMIS
 4973                           
 4974                           
 4975                           //      ?CSP QCSP: ( -- )
 4976                           //      Issue error message if stack position
                                 differs from value saved in
 4977                           //  CSP. Part of compiler security
 4978                           
 4979                            SECTION .text : CONST (2)
 4980                           QCSP_NFA:
 4981    00000000 84                    DC8     0x84
 4982    00000001 3F4353                DC8     '?CS'
 4983    00000004 D0                    DC8     'P'+0x80
 4984    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 4985    00000008 ........              DC32    SCSP_NFA
 4986                           QCSP:
 4987    0000000C ........              DC32    DOCOL
 4988    00000010 ........              DC32    SPAT
 4989    00000014 ........              DC32    CSP_UV
 4990    00000018 ........              DC32    AT
 4991    0000001C ........              DC32    SUBB
 4992    00000020 .............         DC32    LIT, msg_qstack
                  ...          
 4993    00000028 ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 4994    0000002C ........              DC32    SEMIS
 4995                           
 4996                           
 4997                           //      ?ADDR QADDR: ( addr -- )
 4998                           //      If addr not aligned by 4 issue message
                                 and ABORT.
 4999                           
 5000                            SECTION .text : CONST (2)
 5001                           QADDR_NFA:
 5002    00000000 85                    DC8     0x85
 5003    00000001 3F414444              DC8     '?ADD'
 5004    00000005 D2                    DC8     'R'+0x80
 5005    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5006    00000008 ........              DC32    QCSP_NFA
 5007                           QADDR:
 5008    0000000C ........              DC32    DOCOL
 5009    00000010 ........03000         DC32    LIT, 3, ANDD
                  000........  
 5010    0000001C ........              DC32    ZBRAN           //IF no err
                                                                 leave
 5011    00000020 38000000              DC32     QADDR1-.
 5012                           
 5013    00000024 ........              DC32    PDOTQ
 5014    00000028 2B                    DC8     43
 5015    00000029 4144445245535         DC8     'ADDRESSES MUST BE EVEN 32-BIT
                                                 WORD ALIGNED!'
                  34553204D5553
                  5420424520455
                  6454E2033322D
                  42495420574F5
                  24420414C4947
                  4E454421     
 5016                            ALIGNROM 2,0xFFFFFFFF
 5017    00000054 ........              DC32    ABORT
 5018                           QADDR1:
 5019    00000058 ........              DC32    SEMIS
 5020                           
 5021                           
 5022                           
 5023                           //      ?EVEN QEVEN: ( n -- )
 5024                           //      If n is not a multiple of 4 issue
                                 message and ABORT.
 5025                           
 5026                            SECTION .text : CONST (2)
 5027                           QEVEN_NFA:
 5028    00000000 85                    DC8     0x85
 5029    00000001 3F455645              DC8     '?EVE'
 5030    00000005 CE                    DC8     'N'+0x80
 5031    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5032    00000008 ........              DC32    QADDR_NFA
 5033                           QEVEN:
 5034    0000000C ........              DC32    DOCOL
 5035    00000010 ........03000         DC32    LIT, 3, ANDD
                  000........  
 5036    0000001C ........              DC32    ZBRAN           //IF no err
                                                                 leave
 5037    00000020 3C000000              DC32     QEVEN1-.
 5038                           
 5039    00000024 ........              DC32    PDOTQ
 5040    00000028 2F                    DC8     47
 5041    00000029 4E554D4245522         DC8     'NUMBER MUST BE EVEN NOT ODD
                                                 AND MULTIPLE OF 4! '
                  04D5553542042
                  45204556454E2
                  04E4F54204F44
                  4420414E44204
                  D554C5449504C
                  45204F4620342
                  120          
 5042                            ALIGNROM 2,0xFFFFFFFF
 5043    00000058 ........              DC32    ABORT
 5044                           QEVEN1:
 5045    0000005C ........              DC32    SEMIS
 5046                           
 5047                           
 5048                           //      ?ERROR QERROR: ( f nullstr --
                                 )
 5049                           //      If f true TYPE error message (nullstr)
                                 and ABORT.
 5050                           
 5051                            SECTION .text : CONST (2)
 5052                           QERROR_NFA:
 5053    00000000 86                    DC8     0x86
 5054    00000001 3F4552524F            DC8     '?ERRO'
 5055    00000006 D2                    DC8     'R'+0x80
 5056    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5057    00000008 ........              DC32    QEVEN_NFA
 5058                           QERROR:
 5059    0000000C ........              DC32    DOCOL
 5060    00000010 ........              DC32    SWAP
 5061    00000014 ........              DC32    ZBRAN   //IF no err leave
 5062    00000018 10000000              DC32     QERR1-.
 5063                           QEN:
 5064    0000001C ........              DC32    ERROR // ( nullstr-addr ---
                                                       )
 5065    00000020 ........              DC32    BRAN    //ELSE
 5066    00000024 08000000              DC32     QERR2-.
 5067                           QERR1:
 5068    00000028 ........              DC32    DROP    //endif
 5069                           QERR2:
 5070    0000002C ........              DC32    SEMIS
 5071                           
 5072                           
 5073                           //      ?COMP QCOMP: ( -- )
 5074                           //      Issue error message if not compiling.
 5075                           
 5076                            SECTION .text : CONST (2)
 5077                           QCOMP_NFA:
 5078    00000000 85                    DC8     0x85
 5079    00000001 3F434F4D              DC8     '?COM'
 5080    00000005 D0                    DC8     'P'+0x80
 5081    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5082    00000008 ........              DC32    QERROR_NFA
 5083                           QCOMP:
 5084    0000000C ........              DC32    DOCOL
 5085    00000010 ........              DC32    STATE_UV
 5086    00000014 ........              DC32    AT
 5087    00000018 ........              DC32    ZEQU
 5088    0000001C .............         DC32    LIT, msg_qcomp
                  ...          
 5089    00000024 ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 5090    00000028 ........              DC32    SEMIS
 5091                           
 5092                           
 5093                           
 5094                           //      ?EXEC QEXEC:    ( -- )
 5095                           //  Issue error message if not executing.
 5096                           
 5097                            SECTION .text : CONST (2)
 5098                           QEXEC_NFA:
 5099    00000000 85                    DC8     0x85
 5100    00000001 3F455845              DC8     '?EXE'
 5101    00000005 C3                    DC8     'C'+0x80
 5102    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5103    00000008 ........              DC32    QCOMP_NFA
 5104                           QEXEC:
 5105    0000000C ........              DC32    DOCOL
 5106    00000010 ........              DC32    STATE_UV
 5107    00000014 ........              DC32    AT
 5108    00000018 .............         DC32    LIT, msg_qexec
                  ...          
 5109    00000020 ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 5110    00000024 ........              DC32    SEMIS
 5111                           
 5112                           
 5113                           
 5114                           //      ?PAIRS QPAIR:   ( n1 n2 -- )
 5115                           //      Issue an error message if n1 does not
                                 equal n2. The message
 5116                           //       indicates that compiled conditionals
                                 do not match.
 5117                           
 5118                            SECTION .text : CONST (2)
 5119                           QPAIR_NFA:
 5120    00000000 86                    DC8     0x86
 5121    00000001 3F50414952            DC8     '?PAIR'
 5122    00000006 D3                    DC8     'S'+0x80
 5123    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5124    00000008 ........              DC32    QEXEC_NFA
 5125                           QPAIR:
 5126    0000000C ........              DC32    DOCOL
 5127    00000010 ........              DC32    SUBB
 5128    00000014 .............         DC32    LIT, msg_qpair
                  ...          
 5129    0000001C ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 5130    00000020 ........              DC32    SEMIS
 5131                           
 5132                           
 5133                           //      ?STACK QSTACK:  ( -- )  MODIFIED:
 5134                           //       IF STACK Error TYPE error message
                                 then Abort.
 5135                           //      Issue an error message if the stack is
                                 out of bounds. This
 5136                           //      definition may be installation
                                 dependent.
 5137                           
 5138                            SECTION .text : CONST (2)
 5139                           QSTACK_NFA:
 5140    00000000 86                    DC8     0x86
 5141    00000001 3F53544143            DC8     '?STAC'
 5142    00000006 CB                    DC8     'K'+0x80
 5143    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5144    00000008 ........              DC32    QPAIR_NFA
 5145                           QSTACK:
 5146    0000000C ........              DC32    DOCOL
 5147    00000010 ........              DC32    SPAT
 5148    00000014 ........              DC32    INITSO_UV
 5149    00000018 ........              DC32    AT
 5150    0000001C ........              DC32    SWAP
 5151    00000020 ........              DC32    ULESSTHAN       // U< ( 2 1 --
                                                                 0 ) ( 1 2 -- 1
                                                                 )
 5152    00000024 .............         DC32    LIT, msg_qstack
                  ...          
 5153    0000002C ........              DC32    QERROR    // ( f nullstr-addr
                                                           -- )
 5154    00000030 ........              DC32    SEMIS
 5155                           
 5156                           
 5157                           //      TRAVERSE TRAV: ( addr1 n -- addr2
                                 )
 5158                           //      USED only in NFA and PFA, padding
                                 alignment is done there.
 5159                           //      Move across the name field of a
                                 FIGIISH variable length name field.
 5160                           //      addr1 is the address of either the
                                 length byte or the last letter.
 5161                           //       If n=1, the motion is toward nfa - hi
                                 memory, if n=-l, the motion is
 5162                           //       toward CFA - low memory. The addr2
                                 resulting is address
 5163                           //      of the other end of the name.
 5164                           
 5165                            SECTION .text : CONST (2)
 5166                           TRAV_NFA:
 5167    00000000 88                    DC8     0x88
 5168    00000001 5452415645525         DC8     'TRAVERS'
                  3            
 5169    00000008 C5                    DC8     'E'+0x80
 5170    00000009 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5171    0000000C ........              DC32    QSTACK_NFA
 5172                           TRAV:
 5173    00000010 ........              DC32    DOCOL
 5174    00000014 ........              DC32    SWAP
 5175                           TRAV1:
 5176    00000018 ........              DC32    OVER    // Begin
 5177    0000001C ........              DC32    PLUS
 5178    00000020 ........7F000         DC32    LIT,0x7F
                  000          
 5179    00000028 ........              DC32    OVER
 5180    0000002C ........              DC32    CAT
 5181    00000030 ........              DC32    LESSTHAN
 5182    00000034 ........              DC32    ZBRAN   //until
 5183    00000038 E0FFFFFF              DC32     TRAV1-.
 5184                           
 5185    0000003C ........              DC32    SWAP
 5186    00000040 ........              DC32    DROP
 5187    00000044 ........              DC32    SEMIS
 5188                           
 5189                           
 5190                           //      ;S SEMIS:       ( -- ) COMPILED
                                 VERSION OF (SEMICOLON)
 5191                           //       Terminate a colon-definition,
 5192                           //      : pushed the calling word return addr
                                 to the return stack
 5193                           //      This retrieves it and returns to
                                 calling word.
 5194                           
 5195                            SECTION .text : CONST (2)
 5196                           SEMIS_NFA:
 5197    00000000 82                    DC8     0x82
 5198    00000001 3B                    DC8     ';'
 5199    00000002 D3                    DC8     'S'+0x80
 5200    00000003 FF             ALIGNROM 2,0xFFFFFFFF
 5201    00000004 ........              DC32    TRAV_NFA
 5202                           SEMIS:
 5203    00000008 ........              DC32    .+5
 5204                            SECTION .text : CODE (2)
 5205                                   POPr2i  // pop docol saved IP from
                                 Rstack
 5205.1  00000000 3568                  LDR i, [r]              //  pop r to i,
  post increment r
 5205.2  00000002 361D                  ADDS    r, r, #4
 5205.3                                 ENDM
 5206                                   NEXT
 5206.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5206                                   NEXT1
 5206.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5206.2  00000008 9847                  BLX     x
 5206.3                          LTORG
 5206.4  0000000A 0000           LTORG
 5206.5  0000000C ........               TABLE
 5206.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5206.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5206.8                                 ENDM
 5206.9                                 ENDM
 5207                           
 5208                           
 5209                           //      ;CODE SEMICODE: ( -- ) NOT IMPLEMENTED
                                :
 5210                           //      Used in the form
 5211                           //  cccc .... //CODE
 5212                           //  assembly mnemonics Stop compilation and
                                 terminate a new defining
 5213                           //  word cccc by compiling (;CODE). Set the
                                 CONTEXT vocabulary to
 5214                           //  ASSEMBLER, assembling to machine code the
                                 following mnemonics.
 5215                           //
 5216                           //  When cccc later executes in the form//
 5217                           //  cccc nnnn
 5218                           //  the word nnnn will be created with its
                                 execution proceedure given by
 5219                           //  the machine code following cccc.
 5220                           //  That is, when nnnn is executed, it does so
                                 by jumping to the code
 5221                           //  after nnnn. An existing defining word must
                                 exist in cc prior to
 5222                           //  CODE
 5223                           
 5224                            SECTION .text : CONST (2)
 5225                           SEMICODE_NFA:
 5226    00000000 C5                    DC8     0x0C5
 5227    00000001 3B434F44              DC8     ';COD'
 5228    00000005 C5                    DC8     'E'+0x80
 5229    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5230    00000008 ........              DC32    SEMIS_NFA
 5231                           SEMICODE:
 5232    0000000C ........              DC32    DOCOL
 5233    00000010 ........              DC32    DROP
 5234    00000014 .............         DC32    LIT, msg_user_not_implemented
                  ...          
 5235    0000001C .............         DC32    NULLSTRLEN, TYPE
                  ...          
 5236    00000024 ........              DC32    ABORT
 5237                           
 5238                           
 5239                           //      -TRAILING DTRAI:        ( addr n1 ---
                                 addr n2 ) NOT FULLY TESTED!
 5240                           //      Adjusts the character count n1 of a
                                 text string beginning address to
 5241                           //       suppress the output of trailing
                                 blanks. i.e. the characters at
 5242                           //       addr+n1 to addr+n2 are blanks.
 5243                           
 5244                            SECTION .text : CONST (2)
 5245                           DTRAI_NFA:
 5246    00000000 89                    DC8     0x89
 5247    00000001 2D545241494C4         DC8     '-TRAILIN'
                  94E          
 5248    00000009 C7                    DC8     'G'+0x80
 5249    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 5250    0000000C ........              DC32    SEMICODE_NFA
 5251                           DTRAI:
 5252    00000010 ........              DC32    DOCOL
 5253    00000014 ........              DC32    DUP
 5254    00000018 ........              DC32    ZERO            //(addr n1 n1 0
                                                                 -- )
 5255    0000001C ........              DC32    XDO             //DO    
                                                                 //(addr n1 [>r
                                                                 n1 0] --
                                                                 )
 5256                           DTRA1:
 5257    00000020 ........              DC32    OVER            //(addr n1 addr
                                                                 -- )
 5258    00000024 ........              DC32    OVER            //(addr n1 addr
                                                                 n1 --
                                                                 )
 5259    00000028 ........              DC32    PLUS            //(addr n1
                                                                 addr+n1 --
                                                                 )
 5260    0000002C ........              DC32    ONE             //(addr n1
                                                                 addr+n1 1 --
                                                                 )
 5261    00000030 ........              DC32    SUBB            //(addr n1
                                                                 addr+n1-1 --
                                                                 )
 5262    00000034 ........              DC32    CAT             //(addr n1 ch
                                                                 -- )
 5263    00000038 ........              DC32    BLANK           //(addr n1 ch
                                                                 bl --
                                                                 )
 5264    0000003C ........              DC32    SUBB            //(addr n1
                                                                 0|not --
                                                                 )
 5265    00000040 ........              DC32    ZBRAN           //IF
 5266    00000044 10000000              DC32     DTRA2-.        //(addr n1 --
                                                        )
 5267                           
 5268    00000048 ........              DC32    LEAVE           //(addr n1 [r
                                                                 limit = loop]
                                                                 -- )
 5269    0000004C ........              DC32    BRAN            // ELSE
 5270    00000050 0C000000              DC32     DTRA3-.
 5271                           
 5272                           DTRA2:
 5273    00000054 ........              DC32    ONE             //(addr n1 1 --
                                                                 )
 5274    00000058 ........              DC32    SUBB            // endif
                                                                 //(addr n1-1
                                                                 -- )
 5275                           DTRA3:
 5276    0000005C ........              DC32    XLOOP           // LOOP
 5277    00000060 C0FFFFFF              DC32     DTRA1-.        //(addr
                                                        n1=1rst!bl  --
                                                        )
 5278                           
 5279    00000064 ........              DC32    SEMIS
 5280                           
 5281                           
 5282                           //HEADERLESS PDOTQ:     ( -- ) MODIFIED:
 5283                           //       The run-time proceedure, compiled by
                                 ." which transmits the
 5284                           //       following in-line text to the
                                 selected output device. See ."
 5285                           
 5286                            SECTION .text : CONST (2)
 5287                           PDOTQ:
 5288    00000000 ........              DC32    DOCOL
 5289    00000004 ........              DC32    FROMR                          
  // Addr of string = aofstr
 5290    00000008 .............         DC32    DUP, COUNT, TYPE
                  ...........  
 5291    00000014 .............         DC32    COUNT, PLUS
                  ...          
 5292    0000001C ........              DC32    ALIGNED
 5293    00000020 ........              DC32    TOR
 5294    00000024 ........              DC32    SEMIS
 5295                           
 5296                           
 5297                           //      Headerless code to get xoff out ASAP
                                 in EXPECT!
 5298                            ALIGNROM 2,0xFFFFFFFF
 5299                           
 5300                           IF_CR_SEND_XOFF:
 5301    00000028 ........              DC32    .+5
 5302                            SECTION .text : CODE (2)
 5303    00000000 0D21                  LDR     n, =0x0D
 5304    00000002 8842                  CMP     t, n
 5305    00000004 02D1                  BNE     CRXOFF1
 5306                           
 5307    00000006 1324                  LDR     y,=XOFF_CHAR
 5308    00000008 0249                  LDR     n,=U0RBRTHR
 5309    0000000A 0C70                  STRB    y, [n]
 5310                           CRXOFF1:
 5311                                   NEXT
 5311.1  0000000C 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5311                                   NEXT1
 5311.1  0000000E 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5311.2  00000010 9847                  BLX     x
 5311.3                          LTORG
 5311.4  00000012 0000           LTORG
 5311.5  00000014 00800040               TABLE
 5311.6  00000018 ........              Reference on line 5308 
 5311.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5311.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5311.9                                 ENDM
 5311.10                                ENDM
 5312                            LTORG
 5313                           
 5314                           
 5315                           //      DIGIT DIGIT:    ( c base -- digit 1 )
                                 (ok)
 5316                           //                      ( c base -- 0
                                 (bad)
 5317                           //      Converts the ascii character c using
                                 base to its binary
 5318                           //      equivalent digit, accompanied by a
                                 true flag. If the conversion is
 5319                           //      invalid, leaves only a false
                                 flag.
 5320                           
 5321                            SECTION .text : CONST (2)
 5322                           DIGIT_NFA:
 5323    00000000 85                    DC8     0x85
 5324    00000001 44494749              DC8     'DIGI'
 5325    00000005 D4                    DC8     'T'+0x80
 5326    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5327    00000008 ........              DC32    DTRAI_NFA
 5328                           DIGIT:
 5329    0000000C ........              DC32    .+5
 5330                            SECTION .text : CODE (2)
 5331                                   POP2w                   // Number
                                 base
 5331.1  00000000 3A68                  LDR     w, [p]
 5331.2  00000002 3F1D                  ADDS    p, p, #4
 5331.3                                 ENDM
 5332                                   POP2t                   // ASCII
                                 DIGIT
 5332.1  00000004 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 5332.2  00000006 3F1D                  ADDS    p, p, #4
 5332.3                                 ENDM
 5333    00000008 3038                  SUBS   t, t, #'0'
 5334    0000000A 11D4                  BMI   DIGI2             // Number
                                                error
 5335                           
 5336    0000000C 0928                  CMP   t, #9
 5337    0000000E 02DD                  BLE   DIGI1             // Number = 0
                                                THRU 9
 5338                           
 5339                                   // Combine?
 5340    00000010 C01F                  SUBS   t, t, #7
 5341    00000012 0A28                  CMP   t, #10            // Number 'A'
                                               THRU 'Z'?
 5342    00000014 0CDB                  BLT   DIGI2             // NO
 5343                           
 5344                           DIGI1:
 5345    00000016 9042                  CMP     t, w            // COMPARE
                                                 Number TO base
 5346    00000018 0ADA                  BGE     DIGI2
 5347                           
 5348    0000001A 0246                  MOV     w, t            // NEW BINARY
                                                 Number
 5349    0000001C 0120                  MOVS    t, #1           // TRUE
                                                 FLAG
 5350                                   DPUSH
 5350                                   PUSHw   // push w to p, pre decrement
                                 p
 5350.1  0000001E 3F1F                  SUBS    p, p, #4        //  push w to
                                                 p, pre decrement p
 5350.2  00000020 3A60                  STR     w, [p]
 5350.3                                 ENDM
 5350                                   TPUSH
 5350                                   PUSHt   // push t to p, pre decrement
                                 p
 5350.1  00000022 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 5350.2  00000024 3860                  STR     t, [p]
 5350.3                                 ENDM
 5350                                   NEXT
 5350.1  00000026 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5350                                   NEXT1
 5350.1  00000028 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5350.2  0000002A 9847                  BLX     x
 5350.3                          LTORG
 5350.4                          LTORG
 5350.5  0000002C ........               TABLE
 5350.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5350.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5350.8                                 ENDM
 5350.9                                 ENDM
 5350.10                                ENDM
 5350.11                                ENDM
 5351                           
 5352                                   // Number error
 5353                           DIGI2:
 5354    00000030 0020                  MOVS   t, #0            // FALSE
                                                FLAG
 5355                                   TPUSH
 5355                                   PUSHt   // push t to p, pre decrement
                                 p
 5355.1  00000032 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 5355.2  00000034 3860                  STR     t, [p]
 5355.3                                 ENDM
 5355                                   NEXT
 5355.1  00000036 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5355                                   NEXT1
 5355.1  00000038 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5355.2  0000003A 9847                  BLX     x
 5355.3                          LTORG
 5355.4                          LTORG
 5355.5  0000003C ........               TABLE
 5355.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5355.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5355.8                                 ENDM
 5355.9                                 ENDM
 5355.10                                ENDM
 5356                           
 5357                           
 5358                           //      ENCLOSE ENCL:   ( addr1 c -- addr1 n1
                                 n2 n3 )
 5359                           //      FORTH text scanning iterative
                                 primitive used only in WORD
 5360                           //      In WORD, IN is used before and after
                                 call for the iteration
 5361                           //      Typically TIB + IN = addr1
 5362                           //       NOOP EX//( TIB   32 -- TIB   0 4 5
                                 )
 5363                           //       NULL EX//( TIB   32 -- ADDR-B4-NULL 0
                                 1 1 ) So DFIND CAN FIND IT!
 5364                           //       NULL EX//  WORD/ENCL -> TIB 1, 0,
                                 20'S
 5365                           //       The text scanning primitive used by
                                 WORD From the text address
 5366                           //       addr1 and an ascii delimiting
                                 character c, is determined the byte
 5367                           //       offset to the first non-delimiter
                                 character n1, the offset to the
 5368                           //       first delimiter after the text n2,
                                 and the offset to the first
 5369                           //       character not included.
 5370                           //       This proceedure will not process past
                                 an ascii 'null', treating it
 5371                           //       as an unconditional delimiter.
 5372                           
 5373                            SECTION .text : CONST (2)
 5374                           ENCL_NFA:
 5375    00000000 87                    DC8     0x87
 5376    00000001 454E434C4F53          DC8     'ENCLOS'
 5377    00000007 C5                    DC8     'E'+0x80
 5378                            ALIGNROM 2,0xFFFFFFFF
 5379    00000008 ........              DC32    DIGIT_NFA
 5380                           ENCL:
 5381    0000000C ........              DC32    .+5
 5382                            SECTION .text : CODE (2)
 5383                                   POP2t                   // TERMINATOR
                                 CHAR
 5383.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 5383.2  00000002 3F1D                  ADDS    p, p, #4
 5383.3                                 ENDM
 5384    00000004 3968                  LDR     n, [p]          // get text
                                                 address but leave on
                                                 stack
 5385    00000006 0022                  MOVS    w, #0
 5386    00000008 521E                  SUBS    w, w, #1        // CHAR 
                                                 COUNTER
 5387    0000000A 491E                  SUBS    n, n, #1        // ADDR
                                                 -1
 5388                           
 5389                           //  SCAN TO FIRST NON-TERMINATOR CHARACTER
 5390                           //      and PUSH count to stack leaving last 2
                                 params to compute
 5391                           ENCL1:
 5392    0000000C 491C                  ADDS    n, n, #1        // ADDR+1
 5393    0000000E 521C                  ADDS    w, w, #1        // COUNT+1
 5394    00000010 0B78                  LDRB    x, [n]
 5395    00000012 9842                  CMP     t, x            //CMP  
                                                 AL,[BX]
 5396    00000014 FAD0                  BEQ     ENCL1           //JZ    ENCL1  
                                                  // WAIT FOR NON-TERMINATOR
 5397                                   PUSHw                   //offset to
                                 the first non-delimiter character
 5397.1  00000016 3F1F                  SUBS    p, p, #4        //  push w to
  p, pre decrement p
 5397.2  00000018 3A60                  STR     w, [p]
 5397.3                                 ENDM
 5398                                                           //EXiT is now
                                 only DPUSH
 5399    0000001A 002B                  CMP     x, #0           //CMP   AH,[BX]
                                                 // null CHAR?
 5400    0000001C 0AD1                  BNE     ENCL2           //JNZ   ENCL2  
                                                  // NO
 5401                           
 5402                           // FOUND null BEFORE 1ST NON-TERM CHAR
 5403                           // RETURN ok args = NULL EX//
 5404                           // ( TIB   32 -- ADDR-B4-NULL 0 1 1 ) So DFIND
                                 CAN FIND IT!
 5405                           //
 5406    0000001E 1846                  MOV     t, x
 5407    00000020 521C                  ADDS    w, w, #1        // w = offset
                                                 to the delimiter after the
                                                 text
 5408                                   DPUSH
 5408                                   PUSHw   // push w to p, pre decrement
                                 p
 5408.1  00000022 3F1F                  SUBS    p, p, #4        //  push w to
                                                 p, pre decrement p
 5408.2  00000024 3A60                  STR     w, [p]
 5408.3                                 ENDM
 5408                                   TPUSH
 5408                                   PUSHt   // push t to p, pre decrement
                                 p
 5408.1  00000026 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 5408.2  00000028 3860                  STR     t, [p]
 5408.3                                 ENDM
 5408                                   NEXT
 5408.1  0000002A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5408                                   NEXT1
 5408.1  0000002C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5408.2  0000002E 9847                  BLX     x
 5408.3                          LTORG
 5408.4                          LTORG
 5408.5  00000030 ........               TABLE
 5408.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5408.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5408.8                                 ENDM
 5408.9                                 ENDM
 5408.10                                ENDM
 5408.11                                ENDM
 5409                           
 5410                           //   FOUND FIRST TEXT CHAR - COUNT THE
                                 CHARS
 5411                           ENCL2:
 5412    00000034 491C                  ADDS     n, n, #1        // ADDR+1
 5413    00000036 521C                  ADDS     w, w, #1        //COUNT+1
 5414    00000038 0B78                  LDRB    x, [n]
 5415    0000003A 9842                  CMP     t, x            //TERMINATOR
                                                 CHAR?
 5416    0000003C 01D0                  BEQ     ENCL4           //YES
 5417                           
 5418    0000003E 002B                  CMP     x, #0           //null
                                                 CHAR?
 5419    00000040 F8D1                  BNE     ENCL2           //NO, LOOP
                                                  AGAIN
 5420                           
 5421                           ENCL3:  //   FOUND null AT END OF TEXT
 5422                           ENCL4:  //   FOUND TERMINATOR CHARACTER
 5423    00000042 1046                  MOV     t, w            // COUNT+1
                                                 =
 5424    00000044 401C                  ADDS    t, t, #1        // offset to
                                                 the first character not
                                                 included
 5425                                   DPUSH
 5425                                   PUSHw   // push w to p, pre decrement
                                 p
 5425.1  00000046 3F1F                  SUBS    p, p, #4        //  push w to
                                                 p, pre decrement p
 5425.2  00000048 3A60                  STR     w, [p]
 5425.3                                 ENDM
 5425                                   TPUSH
 5425                                   PUSHt   // push t to p, pre decrement
                                 p
 5425.1  0000004A 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 5425.2  0000004C 3860                  STR     t, [p]
 5425.3                                 ENDM
 5425                                   NEXT
 5425.1  0000004E 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5425                                   NEXT1
 5425.1  00000050 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5425.2  00000052 9847                  BLX     x
 5425.3                          LTORG
 5425.4                          LTORG
 5425.5  00000054 ........               TABLE
 5425.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5425.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5425.8                                 ENDM
 5425.9                                 ENDM
 5425.10                                ENDM
 5425.11                                ENDM
 5426                           
 5427                           
 5428                           //      QUERY QUERY:    ( -- )
 5429                           //      Input IOBUFSIZE-2 (USUALLY = 80)
                                 characters of text (until "ENTER/CR")
 5430                           //      from the terminal. Text is positioned
                                 at the address contained in TIB
 5431                           //      with IN set to zero.
 5432                           
 5433                            SECTION .text : CONST (2)
 5434                           QUERY_NFA:
 5435    00000000 85                    DC8     0x85
 5436    00000001 51554552              DC8     'QUER'
 5437    00000005 D9                    DC8     'Y'+0x80
 5438    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5439    00000008 ........              DC32    ENCL_NFA
 5440                           QUERY:
 5441    0000000C ........              DC32    DOCOL
 5442    00000010 ........              DC32    TIB_UV
 5443    00000014 ........5E000         DC32    LIT, IOBUFSIZE-2        //
                                                      96-2=94
                  000          
 5444    0000001C ........              DC32    EXPECT
 5445    00000020 ........              DC32    ZERO    // isn't this duplcated
                                                         somewhere?
 5446    00000024 ........              DC32    IN_UV
 5447    00000028 ........              DC32    STORE
 5448    0000002C ........              DC32    SEMIS
 5449                           
 5450                           
 5451                           //      0 NULL: ( -- ) MODIFIED:
 5452                           //      Don't return to Interpret, return to
                                 Quit at end of a line of input.
 5453                           //      Executed at end of TIB when QUERY
                                 lenght or CR entered.
 5454                           
 5455                            SECTION .text : CONST (2)
 5456                           NULL_NFA:
 5457    00000000 C1                    DC8     0x0C1                   // A
  BINARY ZER
 5458    00000001 80                    DC8     0x80
 5459    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5460    00000004 ........              DC32    QUERY_NFA
 5461                           NULL:
 5462                           //      DC32    SEMIS                   //
                                 Actual Semis code below
 5463    00000008 ........              DC32    .+5
 5464                            SECTION .text : CODE (2)
 5465                                   POPr2i  // pop docol saved IP from
                                 Rstack
 5465.1  00000000 3568                  LDR i, [r]              //  pop r to i,
  post increment r
 5465.2  00000002 361D                  ADDS    r, r, #4
 5465.3                                 ENDM
 5466                                   NEXT
 5466.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5466                                   NEXT1
 5466.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5466.2  00000008 9847                  BLX     x
 5466.3                          LTORG
 5466.4  0000000A 0000           LTORG
 5466.5  0000000C ........               TABLE
 5466.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5466.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5466.8                                 ENDM
 5466.9                                 ENDM
 5467                           
 5468                           
 5469                           //      WORD WORD:      ( c -- )
 5470                           //      MOVE A TOKEN IN TIB TO HERE, WITH
                                 COUNT BYTE AND 2 NULLS AT END,
 5471                           //      IN_UV INCREMENTED.
 5472                           //      Read the next text characters from the
                                 input stream being
 5473                           //      interpreted, until a delimiter c is
                                 found, storing the packed
 5474                           //      character string beginning at the
                                 dictionary buffer HERE. WORD
 5475                           //      leaves the character count in the
                                 first byte, the characters, and
 5476                           //      ends with two or more blanks. Leading
                                 occurrences of c are ignored.
 5477                           //      See IN .
 5478                           
 5479                            SECTION .text : CONST (2)
 5480                           WORD_NFA:
 5481    00000000 84                    DC8     0x84
 5482    00000001 574F52                DC8     'WOR'
 5483    00000004 C4                    DC8     'D'+0x80
 5484    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5485    00000008 ........              DC32    NULL_NFA
 5486                           WORD:
 5487    0000000C ........              DC32    DOCOL
 5488                           WORD1:
 5489                           // SHOULDN'T LIT, 0x22 BE WIDTH AT ????
 5490    00000010 .............         DC32    HERE, LIT, 0x22, BLANKS   // 34
                                                       SPACES FOR word IN
                                                       DICT
                  ...22000000..
                  ......       
 5491    00000020 ........              DC32    TIB_UV
 5492                           WORD2:
 5493    00000024 ........              DC32    IN_UV
 5494    00000028 ........              DC32    AT
 5495    0000002C ........              DC32    PLUS
 5496    00000030 ........              DC32    SWAP    // ( TIB+IN CH-DELIM --
                                                         )
 5497    00000034 ........              DC32    ENCL    // ( TIB+IN 32 --
                                                         TIB+IN   0 4 5
                                                         )
 5498                           WENCL:
 5499    00000038 ........              DC32    IN_UV   // encl TOS = end of
                                                         word offset added to
                                                         IN
 5500    0000003C ........              DC32    PSTORE  // TIB+IN   0
                                                         4
 5501    00000040 ........              DC32    OVER    // 
 5502    00000044 ........              DC32    SUBB    // Char cnt goint to R
                                                         and HERE
 5503    00000048 ........              DC32    TOR
 5504    0000004C ........              DC32    R
 5505    00000050 ........              DC32    HERE
 5506    00000054 ........              DC32    CSTORE   // CHAR CNT OF
                                                          word
 5507    00000058 ........              DC32    PLUS
 5508    0000005C ........              DC32    HERE
 5509    00000060 ........              DC32    ONEP
 5510    00000064 ........              DC32    FROMR
 5511    00000068 ........              DC32    CMOVE   // MOVE word TO DICT
                                                         FOR finding ENDING
                                                         WITH blamks
 5512    0000006C ........              DC32    SEMIS
 5513                           
 5514                           
 5515                           //HEADERLESS PNUMBER:   ( 0 0 addr1 -- d addr2
                                 )
 5516                           //                      ( 0 0 addr1 -- LSW MSW
                                 addr2=addr1+chars )
 5517                           //      Convert the ascii text beginning at
                                 addr1+l
 5518                           //      with regard to BASE_UV into a 64 bIt
                                 unsigned number d.
 5519                           //      Addr2 is the address of the first
                                 unconvertable digit.
 5520                           //      Used by NUMBER.
 5521                           
 5522                            SECTION .text : CONST (2)
 5523                           PNUMBER:
 5524    00000000 ........              DC32    DOCOL
 5525                           PNUM1:                          // Begin
 5526    00000004 ........              DC32    ONEP            // ( LSW MSW
                                                                 addr+1 --
                                                                 )
 5527    00000008 .............         DC32    DUP, TOR        // ( LSW MSW 
                                                      addr+1 -- ) copy of
                                                      addr+1 >r
                  ...          
 5528    00000010 ........              DC32    CAT             // ( LSW MSW c
                                                                 -- )
 5529    00000014 .............         DC32    BASE_UV, AT     // ( LSW MSW c
                                                          base -- )
                  ...          
 5530    0000001C ........              DC32    DIGIT           // ( LSW MSW c
                                                                 base -- 0 0
                                                                 digit 1
                                                                 (ok)
 5531                                                           // | ( 0 0 0
                                 (bad))
 5532                           // digit gets 0, 0x20 or 0x2E and returns 0
                                 then branches to fromr semis...
 5533    00000020 ........              DC32    ZBRAN           //
 5534    00000024 58000000              DC32     PNUM2-.        // If digit
                                                        retuned 0 branch, else
                                                        fall thru
 5535                           
 5536    00000028 ........              DC32   SWAP             // ( LSW MSW
                                                                 digit --
                                                                 )
 5537    0000002C .............         DC32    BASE_UV, AT     // ( LSW digit
                                                          MSW base --
                                                          )
                  ...          
 5538                           //      U* (un un --  ud=<LSW MSW> )
 5539    00000034 ........              DC32   USTAR            // ( LSW digit
                                                                 LSW MSW  --
                                                                 )
 5540    00000038 ........              DC32    DROP
 5541    0000003C ........              DC32   ROT
 5542    00000040 .............         DC32    BASE_UV, AT     // ( base*accn
                                                          bn base -- )
                  ...          
 5543    00000048 ........              DC32    USTAR           // ( base*accn
                                                                 bn*base --  
                                                                 )
 5544    0000004C ........              DC32    DPLUS           // ( base*accn+
                                                                bn*base --  
                                                                 )
 5545    00000050 .............         DC32    DPL_UV, AT, ONEP
                  ...........  
 5546    0000005C ........              DC32    ZBRAN           // IF
                                                                 true
 5547    00000060 10000000              DC32    PNUM3-.         // else
                                                       do
 5548                           
 5549    00000064 .............         DC32    ONE, DPL_UV, PSTORE
                  ...........  
 5550                           
 5551                           PNUM3:                          // endif
 5552                                                           // ( 0 0 <c |
                                 0> -- )
 5553    00000070 ........              DC32    FROMR           // ( 0 0 <c |
                                                                 0> addr+1 -- )
                                                                 copy of addr+1
                                                                 <r
 5554    00000074 ........              DC32    BRAN
 5555    00000078 8CFFFFFF              DC32    PNUM1-.         // REPEAT
 5556                           
 5557                           PNUM2:
 5558    0000007C ........              DC32    FROMR           // copy of
                                                                 addr+1
                                                                 <r
 5559    00000080 ........              DC32    SEMIS
 5560                           
 5561                           
 5562                           //      NUMBER NUMBER:  ( addr -- sd
                                 )
 5563                           //      If error print message and ABORT.
 5564                           //      Convert a character string left at
                                 addr with a preceeding count, to
 5565                           //      a signed number, using the current
                                 numeric base. If a
 5566                           //      decimal point is encountered in the
                                 text, its position will be
 5567                           //      given in DPL, but no other effect
                                 occurs. If numeric conversion is
 5568                           //      not possible, an error message will be
                                 given.
 5569                           
 5570                            SECTION .text : CONST (2)
 5571                           NUMBER_NFA:
 5572    00000000 86                    DC8     0x86
 5573    00000001 4E554D4245            DC8     'NUMBE'
 5574    00000006 D2                    DC8     'R'+0x80
 5575    00000007 FF             ALIGNROM 2,0xFFFFFFFF
 5576    00000008 ........              DC32    WORD_NFA
 5577                           NUMBER:
 5578    0000000C ........              DC32    DOCOL
 5579    00000010 .............         DC32    ZERO, ZERO
                  ...          
 5580    00000018 ........              DC32    ROT             // ( 0 0 addr
                                                                 -- )
 5581                           
 5582    0000001C .............         DC32    DUP, ONEP       // ( 0 0 addr
                                                      addr+1 -- )
                  ...          
 5583    00000024 ........              DC32    CAT                     // ( 0
                                                                         0 addr
                                                                         1rstch
                                                                        ar --
                                                                         )
 5584    00000028 ........2D000         DC32    LIT, '-'        // Minus sign =
                                                      0x2D
                  000          
 5585                                                           // ( 0 0 addr
                                 1rstchar 0x2D --- )
 5586    00000030 ........              DC32    EQUAL           // ( 0 0 addr f
                                                                 -- )
 5587                           //              DC32 NOOP
 5588    00000034 .............         DC32    DUP, TOR        // ( 0 0 addr f
                                                      -- ) copy of f >R
                  ...          
 5589    0000003C ........              DC32    PLUS            // ASSUMPTION
                                                                 FLAG WILL BE 1
                                                                 or 0
 5590                           
 5591    00000040 ........FFFFF         DC32   LIT, -1
                  FFF          
 5592                           NUMB1:                          // Begin
 5593    00000048 .............         DC32    DPL_UV, STORE
                  ...          
 5594    00000050 ........              DC32    PNUMBER         // ( 0 0 addr
                                                                 -- ud=(LSW
                                                                 MSW)
                                                                 ADDR=PAST#)
 5595                           //              DC32 NOOP
 5596    00000054 ........              DC32    DUP
 5597    00000058 ........              DC32    CAT
 5598    0000005C ........              DC32    BLANK           //20h
 5599    00000060 ........              DC32    SUBB
 5600                                                           // while
 5601    00000064 ........              DC32    ZBRAN           // IF
                                                                 SPACE
 5602    00000068 30000000              DC32    NUMB2-.         // DONE UNLESS
                                                       IT NEEDS TO BE
                                                       NEGATED
 5603                           
 5604    0000006C ........              DC32    DUP
 5605    00000070 ........              DC32    CAT
 5606    00000074 ........2E000         DC32    LIT, '.'        // 2EH
                                                      period
                  000          
 5607    0000007C ........              DC32    SUBB
 5608                           //    DC32   ZERO
 5609    00000080 .............         DC32    LIT, msg_number_error
                  ...          
 5610    00000088 ........              DC32    QERROR // ( f nullstr-addr --
                                                        )
 5611    0000008C ........              DC32    ZERO
 5612    00000090 ........              DC32    BRAN
 5613    00000094 B4FFFFFF              DC32    NUMB1-.
 5614                           NUMB2:
 5615    00000098 ........              DC32    DROP
 5616    0000009C ........              DC32    FROMR           // FLAG OF "-"
                                                                 TEST
 5617                                                           // IF
 5618    000000A0 ........              DC32    ZBRAN
 5619    000000A4 08000000              DC32    NUMB3-.
 5620                           
 5621    000000A8 ........              DC32    DNEGATE
 5622                           NUMB3:                          // endif
 5623    000000AC ........         DC32    SEMIS
 5624                           
 5625                           
 5626                           //      -FIND DFIND:    ( --- pfa len tf
                                 )(found)
 5627                           //                      ( --- ff ) (not
                                 found)
 5628                           //      Accepts the next text word (delimited
                                 by blanks) in the input stream
 5629                           //      to HERE, and searches the CONTEXT and
                                 then CURRENT vocabularies
 5630                           //      for a matching entry. If found, the
                                 dictionary entry's parameter
 5631                           //      field address, its length byte, and a
                                 boolean true is left.
 5632                           //      Otherwise, only a boolean false is
                                 left.
 5633                           
 5634                            SECTION .text : CONST (2)
 5635                           DFIND_NFA:
 5636    00000000 85                    DC8     0x85
 5637    00000001 2D46494E              DC8     '-FIN'
 5638    00000005 C4                    DC8     'D'+0x80
 5639    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5640    00000008 ........              DC32    NUMBER_NFA
 5641                           DFIND:
 5642    0000000C ........              DC32    DOCOL
 5643                           BP1_DFIND:
 5644                           
 5645                           #ifdef IO2TP
 5647                           #endif
 5648                           
 5649    00000010 ........              DC32    BLANK   // ( ch -- )
 5650    00000014 ........              DC32    WORD    // ( cH-DELIM  ---
                                                         )
 5651    00000018 ........              DC32    HERE    // ( txt -- )
 5652    0000001C ........              DC32    LATEST  // ( txt nfa --
                                                         )
 5653    00000020 ........              DC32    PFIND   // ( txt nfa -- pfa
                                                         wordlen 1 ) (ok)
 5654                                                   // | ( txt nfa -- 0 )
                                 (bad)
 5655    00000024 ........              DC32    SEMIS
 5656                           
 5657                           
 5658                           //      ERROR ERROR:    ( nullstr --- )
                                 MODIFIED:
 5659                           //      ACCORDING TO WARNING TYPE nullstr
                                 error message or not then ABORT.
 5660                           //      Execute error notification and restart
                                 of system. WARNING is first
 5661                           //      examined. If 1, the text of line n,
                                 relative to screen 4 of drive O
 5662                           //      is printed. This line number may be
                                 positive or negative, and beyond
 5663                           //      just screen 4. If WARNING=O, n is just
                                 printed as a message number
 5664                           //      (non disc installation). If WARNING is
                                 -l, the definition (abort) is
 5665                           //      executed, which executes the system
                                 abort. The user may cautiously
 5666                           //      modify this execution by altering
                                 (abort).
 5667                           //      IN_UV is saved to assist in determinin
                                g the location of the error.
 5668                           
 5669                            SECTION .text : CONST (2)
 5670                           ERROR_NFA:
 5671    00000000 85                    DC8     0x85
 5672    00000001 4552524F              DC8     'ERRO'
 5673    00000005 D2                    DC8     'R'+0x80
 5674    00000006 FFFF           ALIGNROM 2,0xFFFFFFFF
 5675    00000008 ........              DC32    DFIND_NFA
 5676                           ERROR:
 5677    0000000C ........              DC32    DOCOL
 5678    00000010 ........              DC32    WARNING_UV
 5679    00000014 ........              DC32    AT
 5680    00000018 ........              DC32    ZLESS
 5681    0000001C ........              DC32    ZBRAN   //IF
 5682    00000020 08000000              DC32     ERRO1-.
 5683                           
 5684    00000024 ........              DC32    PABOR   // ABORT UNLESS USER
                                                         DEFINED
 5685                           
 5686                           ERRO1:
 5687                           
 5688    00000028 .............         DC32    HERE, COUNT, TYPE       //
                                                       Offending item
                  ...........  
 5689    00000034 .............         DC32    NULLSTRLEN, TYPE        //
                                                             Passed in null
                                                             string
                  ...          
 5690    0000003C .............         DC32    THREE, UIO, CSTORE      // ^C
                                                        Break - Stop donwload!
                  ...........  
 5691                                   
 5692                           //      DO THIS WHERE STATE IS SET BACK TO
                                 ZERO
 5693                           //      NON-ZERO CSDP = RESTORE DP TO forget
                                 DAMAGED WORDS
 5694    00000048 .............         DC32    LIT, CSDP, AT
                  ...........  
 5695    00000054 ........              DC32    ZBRAN
 5696    00000058 40000000              DC32     CREATEDOK-.
 5697                           
 5698    0000005C .............         DC32    LIT, CSDP, AT
                  ...........  
 5699    00000068 .............         DC32    DP_UV, STORE
                  ...          
 5700    00000070 .............         DC32    ZERO, LIT, CSDP, STORE
                  .............
                  ......       
 5701    00000080 .............         DC32    HERE, PFA, LFA, AT
                  .............
                  ......       
 5702    00000090 .............         DC32    CURRENT_UV, STORE
                  ...          
 5703                                   
 5704                           CREATEDOK:
 5705                           
 5706                           BP1_ERROR:
 5707                           //      DC32 NOOP       // Halt here to see
                                 err # and question mark
 5708    00000098 ........              DC32    SPSTO
 5709                           
 5710                           //ERRO2:
 5711    0000009C ........              DC32    QUIT    // FROM Error
 5712                           
 5713                           
 5714                           
 5715                           //      ID. IDDOT:      ( NFA-addr -- )
                                 MODIFIED: ?RENAME .ID
 5716                           //      Print a definition's name from its
                                 name field address.
 5717                           
 5718                            SECTION .text : CONST (2)
 5719                           IDDOT_NFA:
 5720    00000000 83                    DC8     0x83
 5721    00000001 4944                  DC8     'ID'
 5722    00000003 AE                    DC8     '.'+0x80
 5723                            ALIGNROM 2,0xFFFFFFFF
 5724    00000004 ........              DC32    ERROR_NFA
 5725                           IDDOT:
 5726    00000008 ........              DC32    DOCOL
 5727                           //      NOW COUNT is on NFA, fig code copied
                                 it out to pad
 5728    0000000C ........              DC32    COUNT
 5729    00000010 ........1F000         DC32    LIT, MAXWORDLEN //0x1F
                  000          
 5730    00000018 ........              DC32    ANDD
 5731    0000001C ........              DC32    TYPE    // TYPE HANDLES
                                                         c+0x80.
 5732    00000020 ........              DC32    SPACE
 5733    00000024 ........              DC32    SEMIS
 5734                           
 5735                           
 5736                           //      INTERPRET INTER:        ( --
                                 )
 5737                           //      The outer text interpreter which
                                 sequentially executes or compiles
 5738                           //      text from the input stream (terminal
                                 or disc) depending on STATE. If
 5739                           //      the word name cannot be found after a
                                 search of CONTEXT and then
 5740                           //      CURRENT it is converted to a number
                                 according to the current base.
 5741                           //      That also failing, an error message
                                 will TYPE and ABORT.
 5742                           //      Text input will be taken according to
                                 the convention for WORD If a
 5743                           //      decimal point is found as part of a
                                 number, a double number value
 5744                           //      will be left. The decimal point has no
                                 other purpose than to force
 5745                           //      this action.
 5746                           //      See NUMBER.
 5747                           
 5748                            SECTION .text : CONST (2)
 5749                           INTER_NFA:
 5750    00000000 89                    DC8     0x89
 5751    00000001 494E544552505         DC8     'INTERPRE'
                  245          
 5752    00000009 D4                    DC8     'T'+0x80
 5753    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 5754    0000000C ........              DC32    IDDOT_NFA
 5755                           INTER:
 5756    00000010 ........              DC32    DOCOL
 5757                           INTE1:                          // Begin
 5758    00000014 ........              DC32    DFIND   // NOOP there for TIB
                                                         entry
 5759                           //      -FIND ( --- pfa len tf )(found) ( ---
                                 ff ) (not found)
 5760    00000018 ........              DC32    ZBRAN   // IF
 5761    0000001C 3C000000              DC32     INTE2-.// Not A WORD TRY AS A
                                                        NUMBER
 5762                           
 5763    00000020 ........              DC32    STATE_UV
 5764    00000024 ........              DC32    AT
 5765    00000028 ........              DC32    LESSTHAN        // DFIND LEN
                                                                 HAS TO BE
                                                                 smudged header
                                                                 byte
 5766    0000002C ........              DC32    ZBRAN   // To execute immdeiate
                                                         words while compiling
 5767    00000030 14000000              DC32     INTE3-.
 5768                           
 5769    00000034 ........              DC32    CFA
 5770    00000038 ........              DC32    COMMA   // aligned, INCREMENTS
                                                         DP REFLECTED by
                                                         HERE
 5771    0000003C ........              DC32    BRAN    //ELSE
 5772    00000040 0C000000              DC32     INTE4-.
 5773                           
 5774                           INTE3:
 5775    00000044 ........              DC32    CFA     //EXECUTE FOUND
                                                         WORD
 5776    00000048 ........              DC32    EXEC    //endif
 5777                           INTE4:
 5778    0000004C ........              DC32    QSTACK   // IF STACK error
                                                          abort using
                                                          qerr
 5779    00000050 ........              DC32    BRAN    //ELSE
 5780    00000054 38000000              DC32     INTE5-.
 5781                           
 5782                           INTE2:
 5783    00000058 ........              DC32    HERE
 5784    0000005C ........              DC32    NUMBER //( addr   ---   32LSW
                                                        32MSW ) IF error
                                                        quit
 5785    00000060 ........              DC32    DPL_UV
 5786    00000064 ........              DC32    AT
 5787    00000068 ........              DC32    ONEP
 5788    0000006C ........              DC32    ZBRAN   // IF 1+ = 0
 5789    00000070 10000000              DC32     INTE6-.        // SINGLE
                                                        NUMBER
 5790                           
 5791    00000074 ........              DC32    DLITERAL   // PUSH DOUBLE
                                                            NUMBER TO
                                                            STACK
 5792    00000078 ........              DC32    BRAN    // ELSE DOUBLE
                                                         NUMBER
 5793    0000007C 0C000000              DC32     INTE7-.
 5794                           
 5795                           INTE6:
 5796    00000080 ........              DC32    DROP
 5797    00000084 ........              DC32    LITERAL // PUSH SINGLE NUMBER
                                                         TO STACK
 5798                           
 5799                           INTE7:
 5800    00000088 ........              DC32    QSTACK  // endif   // IF STACK
                                                         error abort using
                                                         qerr
 5801                           
 5802                           INTE5:
 5803    0000008C ........              DC32    BRAN    // AGAIN
 5804    00000090 84FFFFFF              DC32     INTE1-.
 5805                           
 5806                           
 5807                           //      FISH_ONLY FISH_ONLY     ( -- )
                                 MODIFIED:
 5808                           //       RESET DP, UP AND CURRENT TO ORIGINAL
                                 FLASH IMAGE
 5809                           
 5810                            SECTION .text : CONST (2)
 5811                           FISH_ONLY_NFA:
 5812    00000000 89                    DC8     0x80+9
 5813    00000001 464953485F4F4         DC8     'FISH_ONL'
                  E4C          
 5814    00000009 D9                    DC8     'Y'+0x80
 5815    0000000A FFFF           ALIGNROM 2,0xFFFFFFFF
 5816    0000000C ........              DC32    INTER_NFA
 5817                           FISH_ONLY:
 5818    00000010 ........              DC32    .+5
 5819                            SECTION .text : CODE (2)
 5820    00000000 0549                  LDR             n, = TASK_NFA
 5821    00000002 0648                  LDR             t, = CURRENT    //
                                                              CURRENT
                                                              SETTING
 5822    00000004 0160                  STR             n, [t]
 5823    00000006 0649                  LDR             n, = RAMVARSPACE
 5824    00000008 0648                  LDR             t, = UP                
                                                              // UP SETTING
 5825    0000000A 0160                  STR             n, [t]
 5826    0000000C 0649                  LDR             n, = ORIG
 5827    0000000E 0748                  LDR             t, = DP                
                                                              // DP SETTING
 5828    00000010 0160                  STR             n, [t]
 5829                                   NEXT
 5829.1  00000012 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5829                                   NEXT1
 5829.1  00000014 064B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5829.2  00000016 9847                  BLX     x
 5829.3                          LTORG
 5829.4                          LTORG
 5829.5  00000018 ........               TABLE
 5829.6  0000001C ........              Reference on line 5820 
 5829.7  00000020 ........              Reference on line 5821 
 5829.8  00000024 ........              Reference on line 5823 
 5829.9  00000028 ........              Reference on line 5824 
 5829.10 0000002C ........              Reference on line 5826 
 5829.11 00000030 ........              Reference on line 5827 
 5829.12                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5829.13                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5829.14                                ENDM
 5829.15                                ENDM
 5830                           
 5831                           //      ( PAREN:        ( -- )
 5832                           //      Used in the form:
 5833                           //              ( cccc)
 5834                           //      Ignore a comment that will be
                                 delimited by a right
 5835                           //      parenthesis on the same line. May
                                 occur during execution or in a
 5836                           //      colon-definition. A blank after the
                                 leading parenthesis is required.
 5837                           
 5838                            SECTION .text : CONST (2)
 5839                           PAREN_NFA:
 5840    00000000 C1                    DC8     0x0C1
 5841    00000001 A8                    DC8     '('+0x80
 5842    00000002 FFFF           ALIGNROM 2,0xFFFFFFFF
 5843    00000004 ........              DC32    FISH_ONLY_NFA
 5844                           PAREN:
 5845    00000008 ........              DC32    DOCOL
 5846    0000000C ........29000         DC32    LIT,')'
                  000          
 5847    00000014 ........              DC32    WORD   // ( cH-DELIM  --- ) 
                                                        CHCNT-STR OF TOKEN TO
                                                        HERE
 5848    00000018 ........              DC32    SEMIS
 5849                           
 5850                           
 5851                           //      QUIT QUIT:      ( -- )
 5852                           //      THE OUTER INTERPRETER WAITS FOR
                                 INPUT
 5853                           //      THEN CONVERTS NUMBERS AND EXECUTES
                                 WORDS
 5854                           //      Clear the return stack, stop
                                 compilation, and return control to the
 5855                           //      operators terminal. No message is
                                 given.
 5856                           
 5857                            SECTION .text : CONST (2)
 5858                           QUIT_NFA:
 5859    00000000 84                    DC8     0x84
 5860    00000001 515549                DC8     'QUI'
 5861    00000004 D4                    DC8     'T'+0x80
 5862    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5863    00000008 ........              DC32    PAREN_NFA
 5864                           QUIT:
 5865    0000000C ........              DC32    DOCOL
 5866                           //              DC32 NOOP
 5867    00000010 ........              DC32    LBRAC
 5868                           QUIT1:
 5869                           
 5870                           #ifdef IO2TP
 5872                           #endif
 5873                           
 5874    00000014 ........              DC32    RPSTO           // Begin
 5875    00000018 ........              DC32    QUERY           // Input to
                                                                 TIB
 5876    0000001C ........              DC32    INTER           // RETURN BY CR
                                                                 placing null
                                                                 in tib -> 
                                                                 NULL:
 5877    00000020 ........              DC32    STATE_UV
 5878    00000024 ........              DC32    AT
 5879    00000028 ........              DC32    ZEQU
 5880    0000002C ........              DC32    ZBRAN           // IF
                                                                 COMPILING
 5881    00000030 18000000              DC32     QUIT2-.        // GOTO CR,
                                                        LOOP AGAIN
 5882                           
 5883                           // NOT COMPILING
 5884                           #ifdef IO2TP
 5886                           #endif
 5887                           
 5888    00000034 .............         DC32    LIT, msg_MY_OK
                  ...          
 5889    0000003C .............         DC32    NULLSTRLEN, TYPE
                  ...          
 5890                           
 5891                           BP1_QUIT:
 5892                           
 5893                           #ifdef IO2TP
 5895                           #endif
 5896                           
 5897                           #ifdef IO2TP
 5899                           #endif
 5900                           
 5901    00000044 ........              DC32    CLRTIB
 5902                           
 5903                           QUIT2:
 5904    00000048 ........              DC32    CR              // HERE FOR
                                                                 BOTH COMPILE
                                                                 AND INTERPRET
 5905    0000004C ........              DC32    BRAN            // AGAIN
 5906    00000050 C4FFFFFF              DC32     QUIT1-.
 5907                           
 5908                           
 5909                           //---------------------------------------
 5910                           // Console Character output
 5911                           //---------------------------------------
 5912                           
 5913                           //HEADERLESS PEMIT:      ( ch -- )
 5914                           //       STORE ch TO UIO OR PAD.
 5915                           //       Called from EMIT
 5916                           
 5917                           
 5918                            SECTION .text : CONST (2)
 5919                           PEMIT:
 5920                           
 5921                           #ifndef IO2TP
 5922    00000000 ........              DC32    DOCOL
 5923                           PL:     // Loop until Line Status register
                                 says ready
 5924    00000004 .............         DC32    ULSR, LIT, 0x20, ANDD,
                                                       ZBRAN
                  ...20000000..
                  .............
                  .            
 5925    00000018 ECFFFFFF              DC32    PL-.
 5926                           
 5927    0000001C .............         DC32    UIO, CSTORE
                  ...          
 5928    00000024 ........              DC32    SEMIS
 5929                           #else
 5941                           #endif  // IO2TP
 5942                           
 5943                           
 5944                           //      BACK BACK:      ( addr -- ) ALIGNED:
 5945                           //      Calculate the backward branch offset
                                 from HERE to addr and compile
 5946                           //      into the next available dictionary
                                 memory address.
 5947                           
 5948                            SECTION .text : CONST (2)
 5949                           BACK_NFA:
 5950    00000000 84                    DC8     0x84
 5951    00000001 424143                DC8     'BAC'
 5952    00000004 CB                    DC8     'K'+0x80
 5953    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5954    00000008 ........              DC32    QUIT_NFA
 5955                           BACK:
 5956    0000000C ........              DC32    DOCOL
 5957    00000010 ........              DC32    HERE
 5958    00000014 ........              DC32    SUBB
 5959    00000018 ........              DC32    COMMA
 5960    0000001C ........              DC32    SEMIS
 5961                           
 5962                           
 5963                           //      ULSR ULSR: ( -- value ) of NXP M0 1114
                                 UART 0 Line Status Register
 5964                           //      0x40008014 Reset value - 0x60
                                 0b1100000
 5965                           //      After Init SEEING 0x96 FIRST
 5966                           //
 5967                           //      BIT 0 = Receiver Data Ready
 5968                           //      BIT 0 WHEN 0 = U0RBR is empty
 5969                           //      BIT 0 WHEN 1 = U0RBR contains valid
                                 data.
 5970                           //
 5971                           //      BIT 4 = Break Interrupt BI when
                                 1
 5972                           //
 5973                           //      BIT 5 = Transmitter Holding Register
                                 Empty
 5974                           //      BIT 5 WHEN 0 = U0THR contains valid
                                 data
 5975                           //      BIT 5 WHEN 1 = U0THR is empty.
 5976                           //
 5977                           //      BIT 6 = Transmitter Empty
 5978                           //      BIT 6 WHEN 0 = U0THR and/or the U0TSR
                                 contains valid data.
 5979                           //      BIT 6 WHEN 1 = U0THR and the U0TSR are
                                 empty.
 5980                           
 5981                            SECTION .text : CONST (2)
 5982                           ULSR_NFA:
 5983    00000000 84                    DC8     0x84
 5984    00000001 554C53                DC8     'ULS'
 5985    00000004 D2                    DC8     'R'+0x80
 5986    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 5987    00000008 ........              DC32    BACK_NFA
 5988                           ULSR:
 5989                           
 5990                           //      DC32    DOCOL, LIT, 0x40008014, CAT,
                                 SEMIS      // UART0 Base Address
 5991    0000000C ........              DC32    .+5
 5992                            SECTION .text : CODE (2)
 5993    00000000 0349                  LDR     n, =U0LSR
 5994    00000002 0878                  LDRB    t, [n]
 5995                                   TPUSH
 5995                                   PUSHt   // push t to p, pre decrement
                                 p
 5995.1  00000004 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 5995.2  00000006 3860                  STR     t, [p]
 5995.3                                 ENDM
 5995                                   NEXT
 5995.1  00000008 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 5995                                   NEXT1
 5995.1  0000000A 024B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 5995.2  0000000C 9847                  BLX     x
 5995.3                          LTORG
 5995.4  0000000E 0000           LTORG
 5995.5  00000010 14800040               TABLE
 5995.6  00000014 ........              Reference on line 5993 
 5995.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 5995.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 5995.9                                 ENDM
 5995.10                                ENDM
 5995.11                                ENDM
 5996                            LTORG
 5997                           
 5998                           
 5999                           //      UIO UIO: ( -- addr ) of NXP M0 1114
                                 UART 0 TX and RX Buffer
 6000                           //      This is the serial terminal.
 6001                           
 6002                            SECTION .text : CONST (2)
 6003                           UIO_NFA:
 6004    00000000 83                    DC8     0x83
 6005    00000001 5549                  DC8     'UI'
 6006    00000003 CF                    DC8     'O'+0x80
 6007                            ALIGNROM 2,0xFFFFFFFF
 6008    00000004 ........              DC32    ULSR_NFA
 6009                           UIO:
 6010    00000008 ........00800         DC32    DOCON, U0RBRTHR
                  040          
 6011                           //      DC32    .+5
 6012                           // SECTION .text : CODE (2)
 6013                           //      LDR             t, =U0RBRTHR
 6014                           //      TPUSH
 6015                           // LTORG
 6016                           
 6017                           
 6018                           #ifdef DEBUG
 6123                           #endif  // DEBUG
 6124                           
 6125                           
 6126                           //      XOFF XOFF: ( -- ) Send XOFF
 6127                           
 6128                            SECTION .text : CONST (2)
 6129                           XOFF_NFA:
 6130    00000000 84                    DC8     0x84
 6131    00000001 584F46                DC8     'XOF'
 6132    00000004 C6                    DC8     'F'+0x80
 6133    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 6134    00000008 ........              DC32    UIO_NFA
 6135                           
 6136                           XOFF:
 6137                           // HI LEVEL WITH WAIT FOR TX EMPTY
 6138                           // X1:  DC32    ULSR, LIT, 0x20, AND, ZBRAN,
                                 PL-.
 6139                           //      DC32    DOCOL, LIT, XOFF_CHAR, EMIT,
                                 SEMIS
 6140    0000000C ........              DC32    .+5
 6141                            SECTION .text : CODE (2)       // Does not
                                 incr OUT and wait for line status
 6142    00000000 1320                  LDR     t, =XOFF_CHAR
 6143    00000002 0249                  LDR     n, =U0RBRTHR
 6144    00000004 0870                  STRB    t, [n]
 6145                                   NEXT
 6145.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6145                                   NEXT1
 6145.1  00000008 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6145.2  0000000A 9847                  BLX     x
 6145.3                          LTORG
 6145.4                          LTORG
 6145.5  0000000C 00800040               TABLE
 6145.6  00000010 ........              Reference on line 6143 
 6145.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6145.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6145.9                                 ENDM
 6145.10                                ENDM
 6146                            LTORG
 6147                           
 6148                           
 6149                           //      XON XON: ( -- ) Send XON
 6150                           
 6151                            SECTION .text : CONST (2)
 6152                           XON_NFA:
 6153    00000000 83                    DC8     0x83
 6154    00000001 584F                  DC8     'XO'
 6155    00000003 CE                    DC8     'N'+0x80
 6156                            ALIGNROM 2,0xFFFFFFFF
 6157    00000004 ........              DC32    XOFF_NFA
 6158                           XON:
 6159                           
 6160                           // HI LEVEL WITH WAIT FOR TX EMPTY
 6161                           // X1:  DC32    ULSR, LIT, 0x20, AND, ZBRAN,
                                 PL-.
 6162                           //      DC32    DOCOL, LIT, XON_CHAR, EMIT,
                                 SEMIS
 6163                           
 6164    00000008 ........              DC32    .+5
 6165                            SECTION .text : CODE (2)       // Does not
                                 incr OUT or wait for line status
 6166    00000000 1120                  LDR     t, =XON_CHAR
 6167    00000002 0249                  LDR     n, =U0RBRTHR
 6168    00000004 0870                  STRB    t, [n]
 6169                                   NEXT
 6169.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6169                                   NEXT1
 6169.1  00000008 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6169.2  0000000A 9847                  BLX     x
 6169.3                          LTORG
 6169.4                          LTORG
 6169.5  0000000C 00800040               TABLE
 6169.6  00000010 ........              Reference on line 6167 
 6169.7                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6169.8                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6169.9                                 ENDM
 6169.10                                ENDM
 6170                            LTORG
 6171                           
 6172                           
 6173                            SECTION .text : CONST (2)
 6174                           MBRK_NFA:
 6175    00000000 84                    DC8     0x84
 6176    00000001 4D4252                DC8     'MBR'
 6177    00000004 CB                    DC8     'K'+0x80
 6178    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 6179    00000008 ........              DC32    XON_NFA
 6180    0000000C ........      MBRK:   DC32    .+5
 6181                            SECTION .text : CODE (2)
 6182                                   NEXT
 6182.1  00000000 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6182                                   NEXT1
 6182.1  00000002 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6182.2  00000004 9847                  BLX     x
 6182.3                          LTORG
 6182.4  00000006 0000           LTORG
 6182.5  00000008 ........               TABLE
 6182.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6182.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6182.8                                 ENDM
 6182.9                                 ENDM
 6183                           
 6184                           
 6185                            SECTION .text : CONST (2)
 6186                           SoCinit_NFA:
 6187    00000000 87                    DC8     0x87
 6188    00000001 536F43696E69          DC8     'SoCini'
 6189    00000007 F4                    DC8     't'+0x80
 6190                            ALIGNROM 2,0xFFFFFFFF
 6191    00000008 ........              DC32    MBRK_NFA
 6192                           SoCinit:
 6193    0000000C ........        DC32  DOCOL
 6194    00000010 ........70ED0   DC32  LIT,    0ED70h,  LIT,   PDRUNCFG,STORE 
                                                         // power-up PLL
                  000........38
                  820440.......
                  .            
 6195    00000024 ........5F180   DC32  LIT,    1185Fh,  LIT,   SYSAHBCLKCTRL,S
                                                TORE     // enable pwr
                  100........80
                  800440.......
                  .            
 6196                           ///  DC32 LIT,  11000h,  LIT,   SYSAHBCLKCTRL,
                                SETBITS   // enable pwr
 6197                           
 6198                           /* Turn CLKOUT on and SET divide by...
                                 */
 6199    00000038 .............   DC32  ONE, LIT, IOCON_PIO0_1,STORE           
                                              // CLKOUT func
                  ...10400440..
                  ......       
 6200    00000048 ........04000   DC32  LIT, 4,   LIT, CLKOUTCLKDIV,STORE      
                                              // DIVIDE BY 4
                  000........E8
                  800440.......
                  .            
 6201                           
 6202                           /* 0=irc, 1=sysclk, 2=wdt, 3=mainclock
                                 */
 6203    0000005C .............   DC32  THREE, LIT, CLKOUTCLKSEL,STORE         
                                                // CLKOUT CLOCK
                  ...E0800440..
                  ......       
 6204                           /* Tickle Update Register */
 6205    0000006C .............   DC32  ZERO,  LIT, CLKOUTUEN,STORE
                  ...E4800440..
                  ......       
 6206    0000007C .............   DC32  ONE,   LIT, CLKOUTUEN,STORE
                  ...E4800440..
                  ......       
 6207                           
 6208                           /////while (!(LPC_SYSCON->CLKOUTUEN & 0x01)); 
                                  /* Wait Until Updated   */
 6209                           ///_clkoutw
 6210                           ///  DC32       LIT,CLKOUTUEN,ONE,ANDD,ZEQ,NOT
                                T,        ,STORE  // 
 6211                           
 6212                           // CHOOSE CLOCK TO FEED PLL
 6213                           /* 0=irc, 1=sysclk, 2=wdt, 3=mainclock
                                 */
 6214    0000008C .............   DC32  ZERO, LIT, SYSPLLCLKSEL,STORE   //
                                               12MHz IRC
                  ...40800440..
                  ......       
 6215                           /* Tickle Update Register */
 6216    0000009C .............   DC32  ZERO, LIT, SYSPLLCLKUEN,STORE
                  ...44800440..
                  ......       
 6217    000000AC .............   DC32  ONE,  LIT, SYSPLLCLKUEN,STORE
                  ...44800440..
                  ......       
 6218                           
 6219                           /* SET PLL MULTIPLY AND DIVIDE IF NEEDED AND
                                 SET SYSCLOCK */
 6220    000000BC ........03000   DC32  LIT, 3h, LIT, SYSPLLCTRL, STORE // pll
                                              12MHz*4 = 48MHz
                  000........08
                  800440.......
                  .            
 6221    000000D0 ........006CD   DC32  LIT, 48000000, LIT, SYSCLOCK,
                                              STORE
                  C02..........
                  .............
                  .            
 6222                           
 6223                           _wPLLlock
 6224    000000E4 ........0C800   DC32  LIT,SYSPLLSTAT,AT,ONE,ANDD,ZBRAN
                  440..........
                  .............
                  .........    
 6225    000000FC E8FFFFFF        DC32  (_wPLLlock - .)
 6226                           
 6227                           /* 0=irc, 1=sysclk, 2=wdt, 3=mainclock
                                 */
 6228    00000100 ........03000   DC32  LIT,    3,  LIT,        MAINCLKSEL,STOR
                                                E        // select PLL
                  000........70
                  800440.......
                  .            
 6229                           /* Tickle Update Register */
 6230    00000114 ........00000   DC32  LIT,    0,  LIT,        MAINCLKUEN,STOR
                                                E
                  000........74
                  800440.......
                  .            
 6231    00000128 ........01000   DC32  LIT,    1,  LIT,        MAINCLKUEN,STOR
                                                E
                  000........74
                  800440.......
                  .            
 6232                            
 6233    0000013C ........01000   DC32  LIT,    1,  LIT,        UARTCLKDIV,STOR
                                                E        // enable UART
                                                 pclk
                  000........98
                  800440.......
                  .            
 6234                           
 6235                           // UART0 INIT SECTION
 6236                           #ifdef DEBUG
 6251                           #endif  // DEBUG 
 6252                           
 6253                           // SYSTICK SECTION - USED TO DELAT USE OF
                                 UART0
 6254                           // CLOCK IS EITHER SYSTEM CLOCK OR SYSTEM
                                 CLOCK/2
 6255                           // CLOCK SELECTION DONE BY BIT 2 OF SYSTICKCSR
 6256                           // 0 = SYSTEM CLOCK/2, 1 = SYSTEM CLOCK
 6257    00000150 .............         DC32    ZERO, DUP                      
                                                       // COUNTDOWN =
                                                       0
                  ...          
 6258    00000158 ........14E00         DC32    LIT, SYSTICKRVR, STORE
                  0E0........  
 6259    00000164 ........18E00         DC32    LIT, SYSTICKCVR, STORE
                  0E0........  
 6260                           //        DC32    LIT, SYSTICKCALVR, AT       
                                  // USE SYSTEM CALLIBRATION
 6261    00000170 ........FFFF0         DC32    LIT, 0xFFFF                    
                                                      // ~ 100ms @ 48mhz
                  000          
 6262    00000178 ........14E00         DC32    LIT, SYSTICKRVR, STORE         
                                                      // FOR RELOAD COUNTER
                                                      VALUE
                  0E0........  
 6263                           
 6264                           // START SYSTICK TIMER NO INTTERUPTS          
                                   // WITH SYSTEM CLOCK AS INPUT:
 6265    00000184 ........              DC32    ONE                            
  // SYSTEM CLOCK/2
 6266                           //       DC32    LIT, 5                       
                                   // SYSTEM CLOCK
 6267    00000188 ........10E00         DC32    LIT, SYSTICKCSR, STORE
                  0E0........  
 6268                           
 6269    00000194 ........04000         DC32    LIT, 4, ZERO                   
                                                      // EACH LOOP ~ 1/10TH
                                                      SECOND
                  000........  
 6270    000001A0 ........              DC32    XDO
 6271                           
 6272                           // DELAY SIGNON MESSAGE OUTPUT UNTILL SERIAL
                                 BOARD POWERED UP
 6273                           STDO:   // DO LOOP RETURN AND BEGIN TARGET
 6274    000001A4 ........10E00         DC32    LIT, SYSTICKCSR, AT            
                                                      // BEGIN 
                  0E0........  
 6275    000001B0 ........00000         DC32    LIT, 0x10000, ANDD             
                                                      // Systick counted
                                                      down?
                  100........  
 6276    000001BC ........              DC32    ZBRAN                          
  // WHILE 
 6277    000001C0 E4FFFFFF              DC32    STDO-.
 6278                                   
 6279    000001C4 ........              DC32    XLOOP
 6280    000001C8 DCFFFFFF              DC32    STDO-.
 6281                           
 6282    000001CC ........        DC32  SEMIS
 6283                           
 6284                           #ifdef DEBUG
 6303                           #endif
 6304                           
 6305                           
 6306                           //NOEXEC HEADERFORWORDCATEGORIES
 6307                           //      WC_FISH_MISC: = FISH MISC SYSTEM
                                 CATEGORY
 6308                           
 6309                            SECTION .text : CONST (2)
 6310                           WC_FISH_MISC_NFA:
 6311    00000000 8E                    DC8     0x80+4+10
 6312    00000001 0D0A                  DC8     0x0D, 0x0A
 6313    00000003 46495348204D4         DC8     'FISH MISC:'
                  953433A      
 6314    0000000D 0D8A                  DC8     0x0D, 0x0A+0x80
 6315    0000000F FF             ALIGNROM 2,0xFFFFFFFF
 6316    00000010 ........              DC32    SoCinit_NFA
 6317                           
 6318                           
 6319                           ;**** LAST DICTIONARY WORD ****
 6320                           //            T A S K
 6321                           //
 6322                           ;.data          // Place TASK at beginning of
                                 RAM, or not.
 6323                           
 6324                            SECTION .text : CONST (2)
 6325                           TASK_NFA:
 6326    00000000 84                    DC8     0x84
 6327    00000001 544153                DC8     'TAS'
 6328    00000004 CB                    DC8     'K'+0x80
 6329    00000005 FFFFFF         ALIGNROM 2,0xFFFFFFFF
 6330                           //      TASK Is top of dictionary until new
                                 definitionsa added
 6331                           //      PATCH CONTEXT or LATEST else LFA in
                                 TASK FROM SYM TABLE
 6332                           //      To debug dictionary searches - see -
                                 PFIND: & DFIND:
 6333                           //      DC32    ZEQU_NFA        // 4 (no
                                 match) bombing at +
 6334                           //      DC32    NOOP_NFA        // Patch here
                                 to shorten test of PFIND
 6335                           //      DC32    CAT_NFA         // C@ before
                                 @
 6336                           //      DC32    LESS_NFA        // < before
                                 =
 6337                           //       DC32   SoCinit_NFA     //XON_NFA     
                                          // FULL DICT SEARCH
 6338    00000008 ........              DC32    WC_FISH_MISC_NFA
 6339                           TASK:
 6340    0000000C ........              DC32    DOCOL
 6341    00000010 ........              DC32    SEMIS
 6342                           
 6343                           
 6344                           //--------------------------------------------
                                ----------------------------------
 6345                           //HEADERLESS SECTION:
 6346                           
 6347                           
 6348                           //HEADERLESS RET2c:      ( -- ) POP lr and
                                 return to main.c
 6349                            SECTION .text : CONST (2)
 6350                           RET2c:
 6351    00000000 ........              DC32    .+5
 6352                            SECTION .text : CODE (2)
 6353    00000000 0098                  LDR     t, [sp]
 6354    00000002 01B0                  ADD     sp, sp, #4
 6355    00000004 8746                  MOV     pc, t
 6356                           
 6357                           
 6358                           //HEADERLESS PABOR:     ( -- )
 6359                           //      Executes after an error when WARNING
                                 is -1. This word normally
 6360                           //      executes ABORT, but may be altered
                                 (with care) to a user's
 6361                           //      alternative proceedure.
 6362                           
 6363                            SECTION .text : CONST (2)
 6364                           PABOR:
 6365    00000000 ........              DC32    DOCOL
 6366    00000004 ........              DC32    ABORT
 6367    00000008 ........              DC32    SEMIS
 6368                           
 6369                           
 6370                           //HEADERLESS WARM:       ( -- ) SYSTEM
                                 RAMVARSPACE INIT FROM COLD AND POWERUP.
 6371                           
 6372                            SECTION .text : CONST (2)
 6373                           WARM:
 6374    00000000 ........              DC32    .+5
 6375                            SECTION .text : CODE (2)
 6376    00000000 1021                  LDR     n, =16          // HEX
 6377    00000002 1F48                  LDR     t, = NBASE
 6378    00000004 0160                  STR     n, [t]
 6379    00000006 4940                  EORS    n, n, n         // ZEROS TO
                                                 STORE
 6380    00000008 1E48                  LDR     t, = IN
 6381    0000000A 0160                  STR     n, [t]
 6382    0000000C 1E48                  LDR     t, = OUT
 6383    0000000E 0160                  STR     n, [t]
 6384    00000010 1E48                  LDR     t, =CSDP               
                                                     
 6385    00000012 0160                  STR     n, [t]
 6386    00000014 1E48                  LDR     t, = WARNING
 6387    00000016 0160                  STR     n, [t]
 6388    00000018 1E48                  LDR     t, = CSTATE
 6389    0000001A 0160                  STR     n, [t]
 6390    0000001C 1E48                  LDR     t, = FENCE      // FENCE
                                                      SETTING
 6391    0000001E 0160                  STR     n, [t]          // FOR MYWORDS
                                                 AND FORGET
 6392    00000020 0A21                  LDR     n, = 10
 6393    00000022 1E48                  LDR     t, = WIDTH      // WIDTH
                                                      SETTING
 6394    00000024 0160                  STR     n, [t]
 6395    00000026 1E49                  LDR     n, = TIB
 6396    00000028 1E48                  LDR     t, = INITTIB    // INITTIB
                                                      SETTING
 6397    0000002A 0160                  STR     n, [t]
 6398    0000002C 1E49                  LDR     n, = PINIT
 6399    0000002E 1F48                  LDR     t, = INITSO     // INITSO
                                                      SETTING
 6400    00000030 0160                  STR     n, [t]
 6401    00000032 1F49                  LDR     n, = RINIT
 6402    00000034 1F48                  LDR     t, = INITRO     // INITRO
                                                      SETTING
 6403    00000036 0160                  STR     n, [t]
 6404    00000038 1F49                  LDR     n, = RAMVARSPACE
 6405    0000003A 2048                  LDR     t, = UP         // UP
                                                      SETTING
 6406    0000003C 0160                  STR     n, [t]
 6407    0000003E 2049                  LDR     n, = ORIG
 6408    00000040 2048                  LDR     t, = DP         // DP
                                                      SETTING
 6409    00000042 0160                  STR     n, [t]
 6410    00000044 2049                  LDR     n, = TASK_NFA
 6411                           //      SUBS    n, n, #1        // Thumb2
                                 klooge! clear the LSbit<<<<<<<<<<
 6412    00000046 2148                  LDR     t, = CURRENT    // CURRENT
                                                      SETTING
 6413    00000048 0446                  MOV     y, t            // SAVE CURRENT
                                                 FOR FLASH PAGE UPDATE!!!!
 6414    0000004A 0160                  STR     n, [t]
 6415                           
 6416                                   // SCAN FLASH PAGES FOR SAVED
                                 CODE
 6417                                   // ASSUMES ANY PAGE NOT USED IS ERASED
                                 TO ALL FF's
 6418    0000004C 2049                  LDR     n, =0x4000      // Start here,
                                                 16k flash location
 6419                           
 6420                           NFPS:   // Evaluate this page
 6421    0000004E 0868                  LDR     t, [n]          // LOOKING FOR
                                                 -1 = Erased Page
 6422    00000050 0130                  ADDS    t, #1
 6423    00000052 08D1                  BNE     UPDATE          // PAGE
                                                  MARKED
 6424    00000054 1F4B                  LDR     x, = FPA        // PAGE FREEE,
                                                      Last page to
 6425    00000056 1960                  STR     n, [x]          // SET AS NEXT
                                                 SAVE TARGET ADDRESS
 6426    00000058 0FE0                  B       WDONE           // AND EXIT
                                                  (WEDONE!)
 6427                           
 6428                           NFP:    // Set next page and go evaluate it,
                                 unless it's past the last page
 6429    0000005A 1F4A                  LDR     w, =0x1000
 6430    0000005C 1F4B                  LDR     x, =0x8000
 6431    0000005E 1144                  ADD     n, w
 6432    00000060 9942                  CMP     n, x
 6433    00000062 0AD0                  BEQ     WDONE           // Done, no
                                                  more pages
 6434    00000064 F3E7                  B       NFPS            // Go evaluate
                                                  this new page
 6435                           
 6436                           UPDATE: // Update Flash Page signature
                                 variables
 6437                                   // SYSCLK, FPADDR, FPCURR, FPUSER
 6438    00000066 0B46                  MOV     x, n            // x =
                                                 fpaddr
 6439    00000068 0831                  ADDS    n, #8           // n =
                                                 fpuser
 6440    0000006A 0868                  LDR     t, [n]          // t = fpuser
                                                 value
 6441    0000006C 2060                  STR     t, [y]          // SAVED
                                                 CURRENT ADDR IN y!!!!
 6442    0000006E 0431                  ADDS    n, #4
 6443    00000070 0868                  LDR     t, [n]
 6444    00000072 124A                  LDR     w, = UP
 6445    00000074 1060                  STR     t, [w]
 6446    00000076 1946                  MOV     n, x
 6447    00000078 EFE7                  B       NFP
 6448                           
 6449                           WDONE:
 6450                                   NEXT
 6450.1  0000007A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6450                                   NEXT1
 6450.1  0000007C 184B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6450.2  0000007E 9847                  BLX     x
 6450.3                          LTORG
 6450.4                          LTORG
 6450.5  00000080 ........               TABLE
 6450.6  00000084 ........              Reference on line 6377 
 6450.7  00000088 ........              Reference on line 6380 
 6450.8  0000008C ........              Reference on line 6382 
 6450.9  00000090 ........              Reference on line 6384 
 6450.10 00000094 ........              Reference on line 6386 
 6450.11 00000098 ........              Reference on line 6388 
 6450.12 0000009C ........              Reference on line 6390 
 6450.13 000000A0 ........              Reference on line 6393 
 6450.14 000000A4 ........              Reference on line 6395 
 6450.15 000000A8 E00F0010              Reference on line 6396 
 6450.16 000000AC ........              Reference on line 6398 
 6450.17 000000B0 600F0010              Reference on line 6399 
 6450.18 000000B4 ........              Reference on line 6401 
 6450.19 000000B8 ........              Reference on line 6402 
 6450.20 000000BC ........              Reference on line 6404 
 6450.21 000000C0 ........              Reference on line 6405,6444 
 6450.22 000000C4 ........              Reference on line 6407 
 6450.23 000000C8 ........              Reference on line 6408 
 6450.24 000000CC ........              Reference on line 6410 
 6450.25 000000D0 00400000              Reference on line 6412 
 6450.26 000000D4 ........              Reference on line 6418 
 6450.27 000000D8 00100000              Reference on line 6424 
 6450.28 000000DC 00800000              Reference on line 6429 
 6450.29 000000E0 ........              Reference on line 6430 
 6450.30                        //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6450.31                        //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6450.32                                ENDM
 6450.33                                ENDM
 6451                            LTORG  // Always outside of code, else data
                                 in words
 6452                           
 6453                           
 6454                           //HEADERLESS PFIND:     ( addr1 addr2 -- pfa b
                                 tf ) (ok)
 6455                           //                      ( addr1 addr2 -- ff )
                                 (bad)
 6456                           //      UNDOCUMENTED: LEN returned is cannot
                                 be the actual len.
 6457                           //      Header LEN BYTE REQUIRED by Interpret
                                 for immediate word execution
 6458                           //      Searches the dictionary starting at
                                 the name field address addr2,
 6459                           //      matching to the text at addr1. Returns
                                 parameter field address,
 6460                           //      length byte of name field and boolean
                                 true for a good match. If no
 6461                           //      match is found, only a boolean false
                                 is left.
 6462                           //
 6463                           //      To step thru to a word set bp at
                                 NONFA
 6464                           //      and watch r3 for match of word addr
                                 from symbol file
 6465                           
 6466                            SECTION .text : CONST (2)
 6467                           PFIND:
 6468    00000000 ........              DC32    .+5
 6469                            SECTION .text : CODE (2)
 6470                                   POP2x                   // Dict Name
                                 NFA
 6470.1  00000000 3B68                  LDR     x, [p]
 6470.2  00000002 3F1D                  ADDS    p, p, #4
 6470.3                                 ENDM
 6471                                   POP2w                   // String Addr
                                 usually at here
 6471.1  00000004 3A68                  LDR     w, [p]
 6471.2  00000006 3F1D                  ADDS    p, p, #4
 6471.3                                 ENDM
 6472    00000008 9346                  MOV     rb, w           // Save TXT
                                                 String ADDR
 6473                           
 6474                           //      SEARCH LOOP
 6475                           //      nfa length test
 6476                           
 6477                           PFIN1:                          // ADDR-->char
                                 counted strings
 6478    0000000A 5A46                  MOV     w, rb           // restore txt
                                                 str addr
 6479    0000000C 1878                  LDRB    t, [x]          // GET nfa
                                                 LENGTH
 6480    0000000E 8446                  MOV     k, t            // Save search
                                                 word length
 6481    00000010 1178                  LDRB    n, [w]          // TXT WORD
                                                 LEN
 6482    00000012 4840                  EORS    t, t, n
 6483    00000014 3F24                  MOVS    y, #0x3F
 6484    00000016 2040                  ANDS    t, y
 6485    00000018 1CD1                  BNE     PFIN5
 6486                           
 6487                           //      LENGTHS MATCH - CHECK EACH CHARACTER
                                 IN NAME
 6488                           //      TEST FIRST CHAR AND DETERMINE IF
                                 LAST
 6489                           PFIN2:
 6490    0000001A 521C                  ADDS    w, w, #1        // str
 6491    0000001C 5B1C                  ADDS    x, x, #1        // nfa
 6492    0000001E 1878                  LDRB    t, [x]          // GET nfa 1RST
                                                 CHAR
 6493    00000020 1178                  LDRB    n, [w]          // GET TXT 1RST
                                                 CHAR
 6494    00000022 8842                  CMP     t, n            // eor was
                                                 working but theis make 0x80
                                                 subb
 6495    00000024 F9D0                  BEQ     PFIN2
 6496                           
 6497    00000026 8024                  MOVS    y, #0x80
 6498    00000028 001B                  SUBS    t, t, y         // ascii only
                                                 in t and n
 6499    0000002A 8842                  cmp     t, n
 6500    0000002C 13D1                  BNE     PFIN51
 6501                           
 6502                           //      FOUND END OF NAME (BIT 8 SET) - A
                                 MATCH
 6503                           //      GET to pfa of found word
 6504                           PFIN21:
 6505                           
 6506    0000002E 5B1C                  ADDS    x, x, #1        // Dict
                                                 addr
 6507    00000030 1878                  LDRB    t, [x]
 6508    00000032 FF28                  CMP     t, #0xFF
 6509    00000034 FBD0                  BEQ     PFIN21
 6510                           
 6511                           thispfa:
 6512                           
 6513    00000036 0833                  ADDS    x, x, #8        // at cfa ->
                                                 pfa
 6514                                   PUSHx                   // PUSH
                                 pfa
 6514.1  00000038 3F1F                  SUBS    p, p, #4        //  push x to
  p, pre decrement p
 6514.2  0000003A 3B60                  STR     x, [p]
 6514.3                                 ENDM
 6515    0000003C 0120                  MOVS    t, #1           // TRUE
                                                 VALUE
 6516    0000003E 6246                  MOV     w, k            // RETURN
                                                 Header Byte LENGTH
 6517                                   DPUSH
 6517                                   PUSHw   // push w to p, pre decrement
                                 p
 6517.1  00000040 3F1F                  SUBS    p, p, #4        //  push w to
                                                 p, pre decrement p
 6517.2  00000042 3A60                  STR     w, [p]
 6517.3                                 ENDM
 6517                                   TPUSH
 6517                                   PUSHt   // push t to p, pre decrement
                                 p
 6517.1  00000044 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 6517.2  00000046 3860                  STR     t, [p]
 6517.3                                 ENDM
 6517                                   NEXT
 6517.1  00000048 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6517                                   NEXT1
 6517.1  0000004A 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6517.2  0000004C 9847                  BLX     x
 6517.3                          LTORG
 6517.4  0000004E 0000           LTORG
 6517.5  00000050 ........               TABLE
 6517.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6517.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6517.8                                 ENDM
 6517.9                                 ENDM
 6517.10                                ENDM
 6517.11                                ENDM
 6518                           
 6519                           //      NO NAME MATCH - TRY ANOTHER
 6520                           //      GET NEXT LINK FIELD ADDR (lfa)
 6521                           //      ( ZERO = FIRST WORD OF DICTIONARY
                                 )
 6522                           //      GET TO END OF NAME BEFORE Padding IF
                                 ANY
 6523                           //      ENTER HERE FROM LEN!= (RB->CNT)
 6524                           PFIN5:
 6525    00000054 5B1C                  ADDS     x, x, #1       // inc char in
                                                  name addr
 6526                           
 6527                           //      ENTER HERE FROM WORD MISMATCH
 6528                           PFIN51:
 6529    00000056 1878                  LDRB    t, [x]          // get Dict
                                                 Word char
 6530    00000058 8024                  MOVS    y, #0x80
 6531    0000005A 2042                  TST     t, y            // is last char
                                                 in word bit set
 6532    0000005C FAD0                  BEQ     PFIN5
 6533                           
 6534                           //      UNMATCHED NAME - POINTING AT LAST CHAR
                                 BEFORE Padding IF ANY
 6535                           //      GET PAST FF Padding AND GET lfa
 6536                           PFIN7:
 6537    0000005E 5B1C                  ADDS    x, x, #1
 6538    00000060 1878                  LDRB    t, [x]
 6539    00000062 FF28                  CMP     t, #0xFF
 6540    00000064 FBD0                  BEQ     PFIN7
 6541                           
 6542                           NEXTNFA:
 6543                           //      MAY point 1 past LFA in case of no
                                 padding, so fix it
 6544    00000066 6440                  EORS    y, y, y
 6545    00000068 A41E                  SUBS    y, y, #2        // create
                                                 #0xFFFE and clr lsb of x
                                                 here
 6546    0000006A 2340                  ANDS    x, x, y
 6547    0000006C 1B68                  LDR     x, [x]          // GET lfa to
                                                 next word
 6548    0000006E 002B                  CMP     x, #0           // START OF
                                                 DICT ( 0 ) ?
 6549    00000070 00D0                  BEQ             WORDNOTFOUND
 6550                           
 6551                           NONFA:
 6552                           //      SUBS    x, x, #1        // <<<<<
                                 un-klooge STC <<<<<
 6553    00000072 CAE7                  B       PFIN1
 6554                           
 6555                           WORDNOTFOUND:                   // DONE ( NO
                                 MATCH FOUND )
 6556    00000074 0020                  MOVS     t, #0
 6557                                   TPUSH
 6557                                   PUSHt   // push t to p, pre decrement
                                 p
 6557.1  00000076 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 6557.2  00000078 3860                  STR     t, [p]
 6557.3                                 ENDM
 6557                                   NEXT
 6557.1  0000007A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6557                                   NEXT1
 6557.1  0000007C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6557.2  0000007E 9847                  BLX     x
 6557.3                          LTORG
 6557.4                          LTORG
 6557.5  00000080 ........               TABLE
 6557.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6557.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6557.8                                 ENDM
 6557.9                                 ENDM
 6557.10                                ENDM
 6558                           
 6559                           
 6560                           //HEADERLESS LIT:        ( -- n ) COMPILER
                                 INTERNAL
 6561                           //       Within a colon-definition, LIT is
                                 automatically compiled before each
 6562                           //       32 bit literal number encountered in
                                 input text. Later execution of
 6563                           //       LIT causes the contents of the next
                                 dictionary address ( the LITERAL #)
 6564                           //       to be pushed to the stack.
 6565                           //       Use LITERAL
 6566                           
 6567                            SECTION .text : CONST (2)
 6568                           LIT:
 6569    00000000 ........              DC32    .+5
 6570                            SECTION .text : CODE (2)
 6571                                   LIT2t   // LDM          i!, {t}
 6571.1                                 // as in xeq token at ToS setup for
                                 lit
 6571.2  00000000 01CD                  LDM     i!, {t} // fetch memory p
                                                                         points
                                                                         to
                                                                         into
                                                                         {w},
                                                                         inc
                                                                         i
 6571.3                                 ENDM
 6572                                           // fetch memory i points to
                                 into {t}, inc i after
 6573                                   TPUSH
 6573                                   PUSHt   // push t to p, pre decrement
                                 p
 6573.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 6573.2  00000004 3860                  STR     t, [p]
 6573.3                                 ENDM
 6573                                   NEXT
 6573.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6573                                   NEXT1
 6573.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6573.2  0000000A 9847                  BLX     x
 6573.3                          LTORG
 6573.4                          LTORG
 6573.5  0000000C ........               TABLE
 6573.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6573.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6573.8                                 ENDM
 6573.9                                 ENDM
 6573.10                                ENDM
 6574                           
 6575                           
 6576                           //HEADERLESS BRAN:      ( -- )
 6577                           //       In IAR branch target MUST BE ON NEXT
                                 LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
 6578                           //       The run-time proceedure to unconditio
                                nally branch. An in-line offset
 6579                           //      is added to the interpretive pointer
                                 IP to branch ahead or back.
 6580                           //      BRANCH is compiled by ELSE, AGAIN,
                                 REPEAT.
 6581                           
 6582                            SECTION .text : CONST (2)
 6583                           BRAN:
 6584    00000000 ........              DC32    .+5
 6585                            SECTION .text : CODE (2)
 6586                           BRAN1:
 6587    00000000 2B68                  LDR     x, [i]          // Get branck
                                                 target
 6588    00000002 ED18                  ADDS    i, i, x         // use as
                                                 offset
 6589                                   NEXT
 6589.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6589                                   NEXT1
 6589.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6589.2  00000008 9847                  BLX     x
 6589.3                          LTORG
 6589.4  0000000A 0000           LTORG
 6589.5  0000000C ........               TABLE
 6589.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6589.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6589.8                                 ENDM
 6589.9                                 ENDM
 6590                           
 6591                           
 6592                           //HEADERLESS ZBRAN:     ( f -- )
 6593                           //       In IAR branch target MUST BE ON NEXT
                                 LINE!!!<<<<<<<<<<<<<<<<<<<<<<<<
 6594                           //      The run-time proceedure to conditional
                                ly branch. If f is false
 6595                           //      (zero), the following in-line
                                 parameter is added to the interpretive
 6596                           //      pointer to branch ahead or back.
                                 Compiled by IF, UNTIL, and WHILE.
 6597                           
 6598                            SECTION .text : CONST (2)
 6599                           ZBRAN:
 6600    00000000 ........              DC32    .+5
 6601                            SECTION .text : CODE (2)
 6602                                   POP2t
 6602.1  00000000 3868                  LDR     t, [p]          // pop tos to
                                                 t, post increment p
 6602.2  00000002 3F1D                  ADDS    p, p, #4
 6602.3                                 ENDM
 6603    00000004 0028                  CMP             t, #0           //
                                                         ZERO?
 6604    00000006 ....                  beq             BRAN1           // YES,
                                                          BRANCH
 6605                           
 6606    00000008 2D1D                  ADDS            i, i, #4        // NO -
                                                         CONTINUE...
 6607                                   NEXT
 6607.1  0000000A 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6607                                   NEXT1
 6607.1  0000000C 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6607.2  0000000E 9847                  BLX     x
 6607.3                          LTORG
 6607.4                          LTORG
 6607.5  00000010 ........               TABLE
 6607.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6607.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6607.8                                 ENDM
 6607.9                                 ENDM
 6608                           
 6609                           
 6610                           //HEADERLESS XLOOP:     ( -- )
 6611                           //       The run-time proceedure compiled by
                                 LOOP which increments
 6612                           //      the loop index by one and tests for
                                 loop completion.
 6613                           //       See LOOP.
 6614                           
 6615                            SECTION .text : CONST (2)
 6616                           XLOOP:
 6617    00000000 ........              DC32    .+5
 6618                            SECTION .text : CODE (2)
 6619    00000000 0123                  MOVS            x, #1
 6620                           XLOO1:
 6621                                   // Get Limit and Index from r w/o
                                 popping them
 6622    00000002 7068                  LDR     t, [r, #4]  // Limit
 6623    00000004 3268                  LDR     w, [r]      // Index
 6624    00000006 9042                  CMP         t, w        // If
                                                     equal
 6625    00000008 03D0                  BEQ     XLOO2           // done
 6626                           
 6627    0000000A D218                  adds     w, w, x        // INDEX =
                                                  INDEX + INCR
 6628    0000000C 3260                  str     w, [r]          // Put it back
                                                 by overwrite for I
 6629    0000000E 801A                  SUBS     t, t, w
 6630    00000010 ....                  BNE     BRAN1           // END OF `DO'
                                                  LOOP
 6631                           XLOO2:
 6632                                   // Drop Limit and Index, increment
                                 i
 6633    00000012 0836                  ADDS    r, r, #8
 6634    00000014 2D1D                  ADDS    i, i, #4
 6635                                   NEXT
 6635.1  00000016 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6635                                   NEXT1
 6635.1  00000018 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6635.2  0000001A 9847                  BLX     x
 6635.3                          LTORG
 6635.4                          LTORG
 6635.5  0000001C ........               TABLE
 6635.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6635.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6635.8                                 ENDM
 6635.9                                 ENDM
 6636                           
 6637                           
 6638                           //HEADERLESS XPLOOP:    ( n -- )
 6639                           //  The run-time proceedure compiled by +LOOP,
                                 which increments the loop
 6640                           //  index by n and tests for loop completion.
                                 See +LOOP.
 6641                           
 6642                            SECTION .text : CONST (2)
 6643                           XPLOOP:
 6644    00000000 ........              DC32    .+5
 6645                            SECTION .text : CODE (2)
 6646                                   POP2x                   // GET LOOP
                                 VALUE
 6646.1  00000000 3B68                  LDR     x, [p]
 6646.2  00000002 3F1D                  ADDS    p, p, #4
 6646.3                                 ENDM
 6647    00000004 ....                  b       XLOO1           // see XLOO1
                                                  for why it's put in
                                                  x
 6648                           
 6649                           
 6650                           //HEADERLESS XDO:       ( Limit Index --
                                 )
 6651                           //      ( Limit = addr+cnt Index = addr  -- )
                                 as in ( TIB+LEN TIB -- )
 6652                           //       The run-time proceedure compiled by
                                 DO which moves the loop control
 6653                           //       parameters to the return stack. See
                                 DO.
 6654                           
 6655                            SECTION .text : CONST (2)
 6656                           XDO:
 6657    00000000 ........              DC32    .+5
 6658                            SECTION .text : CODE (2)
 6659                                   POP2t                   // INITIAL
                                 INDEX VALUE = ADDR
 6659.1  00000000 3868                  LDR     t, [p]          // pop tos to
  t, post increment p
 6659.2  00000002 3F1D                  ADDS    p, p, #4
 6659.3                                 ENDM
 6660                                   POP2w                   // LIMIT VALUE
                                 = ADDR+CNT
 6660.1  00000004 3A68                  LDR     w, [p]
 6660.2  00000006 3F1D                  ADDS    p, p, #4
 6660.3                                 ENDM
 6661                                   PUSHw2r
 6661.1  00000008 361F                  SUBS    r, r, #4        //  push w to
                                                 r, pre decrement r
 6661.2  0000000A 3260                  STR     w, [r]
 6661.3                                 ENDM
 6662                                   PUSHt2r                 // i expects
                                 index TOP of RSTACK
 6662.1  0000000C 361F                  SUBS    r, r, #4        //  push t to
  r, pre decrement r
 6662.2  0000000E 3060                  STR     t, [r]
 6662.3                                 ENDM
 6663                                   NEXT
 6663.1  00000010 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6663                                   NEXT1
 6663.1  00000012 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6663.2  00000014 9847                  BLX     x
 6663.3                          LTORG
 6663.4  00000016 0000           LTORG
 6663.5  00000018 ........               TABLE
 6663.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6663.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6663.8                                 ENDM
 6663.9                                 ENDM
 6664                           
 6665                           
 6666                           //HEADERLESS RLIT:( -- n )      C4,L0 COMPILER
                                 INTERNAL USE LITERAL
 6667                           //      SEE LIT. ALLOWS RELOCATION OF THIS
                                 TYPE OF LIT
 6668                           
 6669                            SECTION .text : CONST (2)
 6670                           RLIT:
 6671    00000000 ........              DC32    .+5
 6672                            SECTION .text : CODE (2)
 6673                                   LIT2t           // LDM          i!,
                                 {t}
 6673.1                                 // as in xeq token at ToS setup for
                                 lit
 6673.2  00000000 01CD                  LDM     i!, {t} // fetch memory p
  points to into {w}, inc i
 6673.3                                 ENDM
 6674                                                   // fetch memory i
                                 points to into {t}, inc i after
 6675                                   TPUSH
 6675                                   PUSHt   // push t to p, pre decrement
                                 p
 6675.1  00000002 3F1F                  SUBS    p, p, #4        // push t to p,
                                                 pre decrement p
 6675.2  00000004 3860                  STR     t, [p]
 6675.3                                 ENDM
 6675                                   NEXT
 6675.1  00000006 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6675                                   NEXT1
 6675.1  00000008 004B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6675.2  0000000A 9847                  BLX     x
 6675.3                          LTORG
 6675.4                          LTORG
 6675.5  0000000C ........               TABLE
 6675.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6675.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6675.8                                 ENDM
 6675.9                                 ENDM
 6675.10                                ENDM
 6676                           
 6677                           
 6678                           //HEADERLESS GOTO:   ( cfa -- )
 6679                           //      Redirect threaded execution to cfa in
                                 another hi-level word.
 6680                           //      CAUTION!!!!!!! A SYSTEM WORD EXPOSED
                                 FOR THE BOLD AND BRAVE!!!!!!!
 6681                           //      Stack IN CURRENT WORD MUST BE CLEANED
                                 UP!
 6682                           //      AND STACK MUSTE BE SET UP as expected
                                 where you GOTO.
 6683                           //      YOU CANNOT VIOLATE controls structure
                                 (LOOPS, BEGINs IFs, etc).
 6684                           //      Unless you come from the same point in
                                 the same control structure!
 6685                           
 6686                            SECTION .text : CONST (2)
 6687                           GOTO:
 6688    00000000 ........              DC32    .+5
 6689                            SECTION .text : CODE (2)
 6690                                   POP2i // set i as pointer to cfa to
                                 start execution
 6690.1  00000000 3D68                  LDR     i, [p]
 6690.2  00000002 3F1D                  ADDS    p, p, #4
 6690.3                                 ENDM
 6691                                   NEXT
 6691.1  00000004 04CD                  LDM     i!, {w} // get cfa addr to w,
                                                 incr i after
 6691                                   NEXT1
 6691.1  00000006 014B                  LDR     x, =ssNEXT1     // meta-single-
                                                    step for debugging
 6691.2  00000008 9847                  BLX     x
 6691.3                          LTORG
 6691.4  0000000A 0000           LTORG
 6691.5  0000000C ........               TABLE
 6691.6                         //      LDM     w!, {x}         // contents of
                                 cfa, (pfa), -> x, bump w to cfa+4
 6691.7                         //      BLX     x               // w preserves
                                 cfa+4 (pfa) for DOCOL's benefit
 6691.8                                 ENDM
 6691.9                                 ENDM
 6692                           
 6693                           
 6694                           #ifdef IO2TP
 6704                           #endif
 6705                           
 6706                           
 6707                           //HEADERLESS CLRTIB:     ( -- ) FILL TIB with
                                 zero's.
 6708                            SECTION .text : CONST (2)
 6709                            ALIGNROM 2,0xFFFFFFFF
 6710                           CLRTIB:
 6711    00000000 .............         DC32    DOCOL, TIB_UV, LIT, IOBUFSIZE
                  ...........60
                  000000       
 6712    00000010 ........              DC32    ERASE
 6713    00000014 .............         DC32    ZERO, IN_UV, STORE, SEMIS
                  .............
                  ......       
 6714                           
 6715                           
 6716                           //HEADERLESS SIGNON:     ( -- ) TYPE SIGNON
                                 message.
 6717                            SECTION .text : CONST (2)
 6718                            ALIGNROM 2,0xFFFFFFFF
 6719                           SIGNON:
 6720    00000000 .............         DC32    DOCOL, LIT, msg_FISH_VERSION,
                                                        NULLSTRLEN, TYPE,
                                                        SEMIS
                  .............
                  .............
                  .........    
 6721                           
 6722                           
 6723                           //HEADERLESS CSLL:       ( -- n ) OUTPUT WIDTH
                                 USED ONLY IN WORDS So FAR.
 6724                            SECTION .text : CONST (2)
 6725                            ALIGNROM 2,0xFFFFFFFF
 6726                           CSLL:
 6727    00000000 ........4A000         DC32    DOCON, 74
                  000          
 6728                           
 6729                           //HEADERLESS BELL:       ( -- ) EMIT BELL
                                 char.
 6730                            SECTION .text : CONST (2)
 6731                            ALIGNROM 2,0xFFFFFFFF
 6732                           BELL:
 6733    00000000 .............         DC32    DOCOL, LIT, 0x07, EMIT,
                                                        SEMIS
                  ...07000000..
                  .............
                  .            
 6734                           
 6735                           //HEADERLESS EIGHT:      ( -- n )
 6736                           //HEADERLESS BACKSPACE_CHAR:  ( -- n
                                 )
 6737                            SECTION .text : CONST (2)
 6738                            ALIGNROM 2,0xFFFFFFFF
 6739                           EIGHT:
 6740                           BACKSPACE_CHAR:
 6741    00000000 ........08000         DC32    DOCON, 8
                  000          
 6742                           
 6743                           //HEADERLESS BSOUT:      ( -- ) EMIT BACKSPACE
                                 char.
 6744                            SECTION .text : CONST (2)
 6745                            ALIGNROM 2,0xFFFFFFFF
 6746                           BSOUT:
 6747    00000000 .............         DC32    DOCOL, BACKSPACE_CHAR, EMIT,
                                                        SEMIS
                  .............
                  ......       
 6748                           
 6749                           
 6750                            END


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
.                    Target symbol: 24 
/                    OPERATOR 
/                    DELIMITER 
:                    Target symbol: 22 
:                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
@                    DELIMITER 
AAPCS                DIRECTIVE 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
ALIGNROM             DIRECTIVE 
ANOTE                DIRECTIVE 
ARGFRAME             DIRECTIVE 
ARM                  DIRECTIVE 
ASEGN                DIRECTIVE 
ASR                  MNEMONIC 
BIT                  SEGMENT TYPE 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C0                   REGISTER 
C1                   REGISTER 
C10                  REGISTER 
C11                  REGISTER 
C12                  REGISTER 
C13                  REGISTER 
C14                  REGISTER 
C15                  REGISTER 
C2                   REGISTER 
C3                   REGISTER 
C4                   REGISTER 
C5                   REGISTER 
C6                   REGISTER 
C7                   REGISTER 
C8                   REGISTER 
C9                   REGISTER 
CALL_GRAPH_ROOT      DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFI                  DIRECTIVE 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
CODE16               DIRECTIVE 
CODE32               DIRECTIVE 
COL                  DIRECTIVE 
CONST                SEGMENT TYPE 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DBAUD                #define, value: UNINITRAMBASE, line:        81        137     1651     1673
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DCB                  DIRECTIVE 
DCD                  DIRECTIVE 
DCREL32              DIRECTIVE 
DCW                  DIRECTIVE 
DEFINE               DIRECTIVE 
DF32                 DIRECTIVE 
DF64                 DIRECTIVE 
DPUSH                MACRO 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
END                  DIRECTIVE 
ENDIF                DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
EQU                  DIRECTIVE 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTWEAK              DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IMPORT               DIRECTIVE 
INCLUDE              DIRECTIVE 
LIBRARY              DIRECTIVE 
LIT2t                MACRO 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LOW                  OPERATOR 
LR                   REGISTER 
LSL                  MNEMONIC 
LSR                  MNEMONIC 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTXRF               DIRECTIVE 
LTORG                DIRECTIVE 
LWRD                 OPERATOR 
MACRO                DIRECTIVE 
MODULE               DIRECTIVE 
NAME                 DIRECTIVE 
NDPOP2w              MACRO 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NEXT                 MACRO 
NEXT1                MACRO 
NOALLOC              SEGMENT TYPE 
NOCALL               DIRECTIVE 
NOROOT               SEGMENT TYPE 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
P0                   REGISTER 
P1                   REGISTER 
P10                  REGISTER 
P11                  REGISTER 
P12                  REGISTER 
P13                  REGISTER 
P14                  REGISTER 
P15                  REGISTER 
P2                   REGISTER 
P3                   REGISTER 
P4                   REGISTER 
P5                   REGISTER 
P6                   REGISTER 
P7                   REGISTER 
P8                   REGISTER 
P9                   REGISTER 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP2i                MACRO 
POP2n                MACRO 
POP2r                MACRO 
POP2t                MACRO 
POP2w                MACRO 
POP2x                MACRO 
POPp2w               MACRO 
POPr2i               MACRO 
POPr2t               MACRO 
PRESERVE8            DIRECTIVE 
PROGRAM              DIRECTIVE 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSHi                MACRO 
PUSHi2r              MACRO 
PUSHn                MACRO 
PUSHn2r              MACRO 
PUSHt                MACRO 
PUSHt2r              MACRO 
PUSHw                MACRO 
PUSHw2r              MACRO 
PUSHx                MACRO 
R0                   REGISTER 
R1                   REGISTER 
R10                  REGISTER 
R11                  REGISTER 
R12                  REGISTER 
R13                  REGISTER 
R14                  REGISTER 
R15                  REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
R8                   REGISTER 
R9                   REGISTER 
RADIX                DIRECTIVE 
REGISTER             SEGMENT TYPE 
RELOC_ARM_PREL31     OPERATOR 
RELOC_ARM_TARGET1    OPERATOR 
RELOC_ARM_TARGET2    OPERATOR 
RELOC_LOCAL          OPERATOR 
REORDER              SEGMENT TYPE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
REQUIRE8             DIRECTIVE 
ROOT                 SEGMENT TYPE 
ROR                  MNEMONIC 
RRX                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
SBREL                OPERATOR 
SECTION              DIRECTIVE 
SECTION_GROUP        DIRECTIVE 
SECTION_LINK         DIRECTIVE 
SECTION_TYPE         DIRECTIVE 
SET                  DIRECTIVE 
SETA                 DIRECTIVE 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFS                  OPERATOR 
SIZEOF               OPERATOR 
SORT                 SEGMENT TYPE 
SP                   REGISTER 
TABLE                DIRECTIVE 
THUMB                DIRECTIVE 
THUMBX               DIRECTIVE 
TPUSH                MACRO 
UBAUD                #define, value: UNINITRAMBASE+4, line:        82       1652     1676
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTYPED              SEGMENT TYPE 
VAR                  DIRECTIVE 
XDATA                SEGMENT TYPE 
XON_XOFF             #define, value: , line:        27  
XOR                  OPERATOR 
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
^                    DELIMITER 
__ARM4TM__           #define, value: 4, line:         0  
__ARM5TM__           #define, value: 5, line:         0  
__ARM5T__            #define, value: 5, line:         0  
__ARM5__             #define, value: 5, line:         0  
__ARM6M__            #define, value: 11, line:         0  
__ARM6SM__           #define, value: 12, line:         0  
__ARM6__             #define, value: 6, line:         0  
__ARM_PROFILE_M__    #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CORE__             #define, value: __ARM6M__, line:         0  
__DATE__             #define,            line:         0  
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__IASMARM__          #define, value: 1, line:         0  
__LINE__             #define,            line:         0  
__LITTLE_ENDIAN__    #define, value: 1, line:         0  
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
i                    #define, value: r5, line:       9:2        161      162      163      214
                                                                      314      409      433      459
                                                                      648      833      869     1350
                                                                     1534     1553     1951     2330
                                                                     2348     2368     2388     2407
                                                                     2427     2449     2469     2487
                                                                     2503     2522     2539     2557
                                                                     2575     2595     2626     2648
                                                                     2674     2714     2743     2799
                                                                     2821     2839     2858     2876
                                                                     2895     3813     3898     3899
                                                                     3900     3936     4468     4497
                                                                     4504     4523     4542     4560
                                                                     4579     4597     4617     4657
                                                                     4725     4728     4752     4774
                                                                     4793     4814     4831     4848
                                                                     4865     4882     5205     5206
                                                                     5311     5350     5355     5408
                                                                     5425     5465     5466     5829
                                                                     5995     6145     6169     6182
                                                                     6450     6517     6557     6571
                                                                     6573     6587     6588     6588
                                                                     6589     6606     6606     6607
                                                                     6634     6634     6635     6663
                                                                     6673     6675     6690     6691
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
k                    #define, value: r12, line:      16:2       6480     6516
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
n                    #define, value: r1, line:       5:2        135      139      149      399
                                                                      421      445      646      647
                                                                      830      831      831      832
                                                                      866      867      867      868
                                                                     1348     1349     1945     1946
                                                                     1946     2327     2329     2467
                                                                     2468     2622     2623     2625
                                                                     2644     2645     2647     2666
                                                                     2667     2673     2693     2696
                                                                     2706     2706     2707     2731
                                                                     2733     2735     2794     2796
                                                                     2798     2816     2819     2837
                                                                     2838     2856     2857     2874
                                                                     2875     2893     2894     4463
                                                                     4467     4521     4522     4540
                                                                     4541     4577     4578     4595
                                                                     4596     4615     4616     4650
                                                                     4652     4745     4747     4747
                                                                     4747     4769     4772     5303
                                                                     5304     5308     5309     5384
                                                                     5387     5387     5392     5392
                                                                     5394     5412     5412     5414
                                                                     5820     5822     5823     5825
                                                                     5826     5828     5993     5994
                                                                     6143     6144     6167     6168
                                                                     6376     6378     6379     6379
                                                                     6379     6381     6383     6385
                                                                     6387     6389     6391     6392
                                                                     6394     6395     6397     6398
                                                                     6400     6401     6403     6404
                                                                     6406     6407     6409     6410
                                                                     6414     6418     6421     6425
                                                                     6431     6432     6438     6439
                                                                     6440     6442     6443     6446
                                                                     6481     6482     6493     6494
                                                                     6499
p                    #define, value: r7, line:      11:2        159      230      308      308
                                                                      308      314      314      314
                                                                      648      648      648      833
                                                                      833      833      869      869
                                                                      869     1346     1346     1346
                                                                     1350     1350     1350     1532
                                                                     1532     1532     1534     1534
                                                                     1534     1551     1551     1551
                                                                     1553     1553     1553     1942
                                                                     1951     1951     1951     2326
                                                                     2326     2326     2327     2327
                                                                     2327     2328     2328     2328
                                                                     2329     2329     2329     2330
                                                                     2330     2330     2330     2330
                                                                     2330     2348     2348     2348
                                                                     2367     2368     2368     2368
                                                                     2388     2388     2388     2406
                                                                     2467     2467     2467     2487
                                                                     2487     2487     2503     2503
                                                                     2503     2519     2519     2519
                                                                     2520     2520     2520     2521
                                                                     2521     2521     2522     2522
                                                                     2522     2522     2522     2522
                                                                     2538     2538     2538     2555
                                                                     2555     2555     2556     2556
                                                                     2556     2557     2557     2557
                                                                     2557     2557     2557     2574
                                                                     2575     2575     2575     2593
                                                                     2594     2595     2595     2595
                                                                     2595     2595     2595     2621
                                                                     2622     2622     2622     2643
                                                                     2644     2644     2644     2665
                                                                     2666     2666     2666     2693
                                                                     2693     2693     2694     2694
                                                                     2694     2695     2695     2695
                                                                     2730     2730     2730     2731
                                                                     2731     2731     2732     2732
                                                                     2732     2794     2794     2794
                                                                     2795     2795     2795     2816
                                                                     2816     2816     2817     2817
                                                                     2817     2837     2837     2837
                                                                     2839     2839     2839     2856
                                                                     2856     2856     2858     2858
                                                                     2858     2873     2873     2873
                                                                     2874     2874     2874     2892
                                                                     2892     2892     2893     2893
                                                                     2893     3813     3813     3813
                                                                     3929     3929     3929     3936
                                                                     3936     3936     3936     3936
                                                                     3936     4462     4462     4462
                                                                     4463     4463     4463     4468
                                                                     4468     4468     4468     4468
                                                                     4468     4489     4489     4489
                                                                     4490     4490     4490     4491
                                                                     4491     4491     4497     4497
                                                                     4497     4497     4497     4497
                                                                     4504     4504     4504     4504
                                                                     4504     4504     4520     4520
                                                                     4520     4521     4521     4521
                                                                     4523     4523     4523     4539
                                                                     4539     4539     4540     4540
                                                                     4540     4542     4542     4542
                                                                     4558     4558     4558     4560
                                                                     4560     4560     4576     4576
                                                                     4576     4577     4577     4577
                                                                     4579     4579     4579     4594
                                                                     4594     4594     4595     4595
                                                                     4595     4597     4597     4597
                                                                     4614     4614     4614     4615
                                                                     4615     4615     4617     4617
                                                                     4617     4650     4650     4650
                                                                     4651     4651     4651     4657
                                                                     4657     4657     4720     4720
                                                                     4720     4725     4725     4725
                                                                     4728     4728     4728     4745
                                                                     4745     4745     4752     4752
                                                                     4752     4768     4768     4768
                                                                     4769     4769     4769     4770
                                                                     4770     4770     4771     4771
                                                                     4771     4774     4774     4774
                                                                     4774     4774     4774     4790
                                                                     4790     4790     4793     4793
                                                                     4793     4809     4809     4809
                                                                     4810     4810     4810     4814
                                                                     4814     4814     4814     4814
                                                                     4814     4829     4829     4829
                                                                     4831     4831     4831     4846
                                                                     4846     4846     4848     4848
                                                                     4848     4863     4863     4863
                                                                     4865     4865     4865     4880
                                                                     4880     4880     4882     4882
                                                                     4882     5331     5331     5331
                                                                     5332     5332     5332     5350
                                                                     5350     5350     5350     5350
                                                                     5350     5355     5355     5355
                                                                     5383     5383     5383     5384
                                                                     5397     5397     5397     5408
                                                                     5408     5408     5408     5408
                                                                     5408     5425     5425     5425
                                                                     5425     5425     5425     5995
                                                                     5995     5995     6470     6470
                                                                     6470     6471     6471     6471
                                                                     6514     6514     6514     6517
                                                                     6517     6517     6517     6517
                                                                     6517     6557     6557     6557
                                                                     6573     6573     6573     6602
                                                                     6602     6602     6646     6646
                                                                     6646     6659     6659     6659
                                                                     6660     6660     6660     6675
                                                                     6675     6675     6690     6690
                                                                     6690
pragma               PREPROCESSOR DIRECTIVE 
r                    #define, value: r6, line:      10:2        160      162      162      162
                                                                     2347     2387     2426     2447
                                                                     2448     2468     2468     2468
                                                                     2486     2486     2486     2502
                                                                     3898     3898     3898     5205
                                                                     5205     5205     5465     5465
                                                                     5465     6622     6623     6628
                                                                     6633     6633     6661     6661
                                                                     6661     6662     6662     6662
r0                   Target symbol: 0 
r1                   Target symbol: 0 
r10                  Target symbol: 0 
r11                  Target symbol: 0 
r12                  Target symbol: 0 
r2                   Target symbol: 0 
r3                   Target symbol: 0 
r4                   Target symbol: 0 
r5                   Target symbol: 0 
r6                   Target symbol: 0 
r7                   Target symbol: 0 
ra                   #define, value: r10, line:      14:2  
rb                   #define, value: r11, line:      15:2       6472     6478
t                    #define, value: r0, line:       4:2        136      139      140      140
                                                                      141      146      149      150
                                                                      150      151      156      157
                                                                      308      310      310      313
                                                                      313      314      398      401
                                                                      405      406      420      423
                                                                      427      428      430      444
                                                                      447      450      452      454
                                                                      456      647      648      829
                                                                      832      832      833      865
                                                                      868      868      869     1346
                                                                     1347     1347     1349     1349
                                                                     1350     1532     1533     1533
                                                                     1534     1551     1552     1552
                                                                     1553     1943     1943     1945
                                                                     1948     1948     1951     2328
                                                                     2330     2347     2348     2367
                                                                     2368     2387     2388     2486
                                                                     2487     2502     2503     2520
                                                                     2521     2522     2538     2556
                                                                     2557     2574     2575     2593
                                                                     2595     2623     2624     2624
                                                                     2625     2645     2646     2646
                                                                     2647     2667     2668     2671
                                                                     2671     2672     2672     2673
                                                                     2704     2705     2730     2738
                                                                     2795     2797     2797     2798
                                                                     2818     2819     2819     2820
                                                                     2838     2839     2857     2858
                                                                     2873     2875     2892     2894
                                                                     3812     3813     3930     3930
                                                                     3930     3934     3934     3936
                                                                     4462     4466     4467     4468
                                                                     4489     4492     4497     4501
                                                                     4501     4501     4502     4502
                                                                     4503     4504     4520     4522
                                                                     4522     4523     4539     4541
                                                                     4541     4542     4558     4559
                                                                     4559     4560     4576     4578
                                                                     4578     4579     4594     4596
                                                                     4596     4597     4614     4616
                                                                     4616     4617     4649     4655
                                                                     4655     4655     4657     4720
                                                                     4721     4724     4724     4725
                                                                     4727     4727     4727     4728
                                                                     4746     4750     4752     4768
                                                                     4773     4773     4774     4790
                                                                     4791     4791     4792     4792
                                                                     4793     4809     4811     4811
                                                                     4814     4829     4830     4830
                                                                     4831     4846     4847     4847
                                                                     4848     4863     4864     4864
                                                                     4865     4880     4881     4881
                                                                     4882     5304     5332     5333
                                                                     5333     5336     5340     5340
                                                                     5341     5345     5348     5349
                                                                     5350     5354     5355     5383
                                                                     5395     5406     5408     5415
                                                                     5423     5424     5424     5425
                                                                     5821     5822     5824     5825
                                                                     5827     5828     5994     5995
                                                                     6142     6144     6166     6168
                                                                     6353     6355     6377     6378
                                                                     6380     6381     6382     6383
                                                                     6384     6385     6386     6387
                                                                     6388     6389     6390     6391
                                                                     6393     6394     6396     6397
                                                                     6399     6400     6402     6403
                                                                     6405     6406     6408     6409
                                                                     6412     6413     6414     6421
                                                                     6422     6440     6441     6443
                                                                     6445     6479     6480     6482
                                                                     6482     6484     6492     6494
                                                                     6498     6498     6499     6507
                                                                     6508     6515     6517     6529
                                                                     6531     6538     6539     6556
                                                                     6557     6571     6573     6602
                                                                     6603     6622     6624     6629
                                                                     6629     6659     6662     6673
                                                                     6675
undef                PREPROCESSOR DIRECTIVE 
w                    #define, value: r2, line:       6:2        163      196      214      230
                                                                      309      310      311      312
                                                                      312      313      314      400
                                                                      401      403      404      404
                                                                      405      406      409      422
                                                                      423      425      426      426
                                                                      427      428      429      430
                                                                      433      446      447      448
                                                                      449      449      450      451
                                                                      452      453      454      455
                                                                      456      459      648      833
                                                                      869     1350     1534     1553
                                                                     1942     1945     1951     2326
                                                                     2330     2330     2348     2368
                                                                     2388     2405     2406     2407
                                                                     2425     2426     2427     2447
                                                                     2448     2449     2469     2487
                                                                     2503     2519     2522     2522
                                                                     2539     2555     2557     2557
                                                                     2575     2594     2595     2595
                                                                     2621     2624     2626     2643
                                                                     2646     2648     2665     2671
                                                                     2674     2694     2705     2710
                                                                     2710     2714     2732     2735
                                                                     2738     2739     2739     2740
                                                                     2743     2796     2797     2799
                                                                     2817     2818     2820     2821
                                                                     2839     2858     2876     2895
                                                                     3812     3813     3899     3900
                                                                     3929     3931     3931     3931
                                                                     3936     3936     4466     4468
                                                                     4468     4491     4497     4497
                                                                     4503     4504     4504     4523
                                                                     4542     4560     4579     4597
                                                                     4617     4651     4652     4657
                                                                     4725     4728     4752     4771
                                                                     4772     4772     4774     4774
                                                                     4793     4810     4812     4812
                                                                     4813     4813     4814     4814
                                                                     4831     4848     4865     4882
                                                                     5206     5311     5331     5345
                                                                     5348     5350     5350     5355
                                                                     5385     5386     5386     5393
                                                                     5393     5397     5407     5407
                                                                     5408     5408     5413     5413
                                                                     5423     5425     5425     5466
                                                                     5829     5995     6145     6169
                                                                     6182     6429     6431     6444
                                                                     6445     6450     6471     6472
                                                                     6478     6481     6490     6490
                                                                     6493     6516     6517     6517
                                                                     6557     6573     6589     6607
                                                                     6623     6624     6627     6627
                                                                     6628     6629     6635     6660
                                                                     6661     6663     6675     6691
x                    #define, value: r3, line:       7:2        163      163      196      197
                                                                      214      214      231      231
                                                                      314      314      402      403
                                                                      407      408      409      409
                                                                      424      425      431      432
                                                                      433      433      457      458
                                                                      459      459      648      648
                                                                      833      833      869      869
                                                                     1350     1350     1534     1534
                                                                     1553     1553     1951     1951
                                                                     2330     2330     2348     2348
                                                                     2368     2368     2388     2388
                                                                     2407     2407     2427     2427
                                                                     2449     2449     2469     2469
                                                                     2487     2487     2503     2503
                                                                     2522     2522     2539     2539
                                                                     2557     2557     2575     2575
                                                                     2595     2595     2626     2626
                                                                     2648     2648     2669     2669
                                                                     2669     2670     2670     2674
                                                                     2674     2695     2704     2711
                                                                     2711     2714     2714     2735
                                                                     2736     2736     2740     2743
                                                                     2743     2799     2799     2821
                                                                     2821     2839     2839     2858
                                                                     2858     2876     2876     2895
                                                                     2895     3813     3813     3900
                                                                     3900     3936     3936     4468
                                                                     4468     4490     4497     4497
                                                                     4504     4504     4523     4523
                                                                     4542     4542     4560     4560
                                                                     4579     4579     4597     4597
                                                                     4617     4617     4657     4657
                                                                     4725     4725     4728     4728
                                                                     4752     4752     4770     4773
                                                                     4774     4774     4793     4793
                                                                     4814     4814     4831     4831
                                                                     4848     4848     4865     4865
                                                                     4882     4882     5206     5206
                                                                     5311     5311     5350     5350
                                                                     5355     5355     5394     5395
                                                                     5399     5406     5408     5408
                                                                     5414     5415     5418     5425
                                                                     5425     5466     5466     5829
                                                                     5829     5995     5995     6145
                                                                     6145     6169     6169     6182
                                                                     6182     6424     6425     6430
                                                                     6432     6438     6446     6450
                                                                     6450     6470     6479     6491
                                                                     6491     6492     6506     6506
                                                                     6507     6513     6513     6514
                                                                     6517     6517     6525     6525
                                                                     6529     6537     6537     6538
                                                                     6546     6546     6547     6547
                                                                     6548     6557     6557     6573
                                                                     6573     6587     6588     6589
                                                                     6589     6607     6607     6619
                                                                     6627     6635     6635     6646
                                                                     6663     6663     6675     6675
                                                                     6691     6691
y                    #define, value: r4, line:       8:2        137      141      147      151
                                                                     2668     2672     5307     5309
                                                                     6413     6441     6483     6484
                                                                     6497     6498     6530     6531
                                                                     6544     6544     6544     6545
                                                                     6545     6546
{                    DELIMITER 
|                    OPERATOR 
||                   OPERATOR 
}                    DELIMITER 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
.bss                DATA  	REL 
.text               CONST  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 
ABORT               REL    CONST UNTYP.           .text      C 
ABORT_NFA           REL    CONST UNTYP.           .text      0 
ABS                 REL    CONST UNTYP.           .text      8 
ABS1_NFA            REL    CONST UNTYP.           .text      0 
AD0CR               ABS    CONST UNTYP.           .text      4001C000 
AD0DR0              ABS    CONST UNTYP.           .text      4001C010 
AD0DR1              ABS    CONST UNTYP.           .text      4001C014 
AD0DR2              ABS    CONST UNTYP.           .text      4001C018 
AD0DR3              ABS    CONST UNTYP.           .text      4001C01C 
AD0DR4              ABS    CONST UNTYP.           .text      4001C020 
AD0DR5              ABS    CONST UNTYP.           .text      4001C024 
AD0DR6              ABS    CONST UNTYP.           .text      4001C028 
AD0DR7              ABS    CONST UNTYP.           .text      4001C02C 
AD0GDR              ABS    CONST UNTYP.           .text      4001C004 
AD0INTEN            ABS    CONST UNTYP.           .text      4001C00C 
AD0STAT             ABS    CONST UNTYP.           .text      4001C030 
AGAIN               REL    CONST UNTYP.           .text      C 
AGAIN_NFA           REL    CONST UNTYP.           .text      0 
AIRCR               ABS    CONST UNTYP.           .text      E000ED0C 
ALIGN               REL    CONST UNTYP.           .text      C 
ALIGNDP1            REL    CONST UNTYP.           .text      2C 
ALIGNED             REL    CONST UNTYP.           .text      C 
ALIGNED_NFA         REL    CONST UNTYP.           .text      0 
ALIGNLP             REL    CONST UNTYP.           .text      14 
ALIGNPLP            REL    CONST UNTYP.           .text      14 
ALIGN_NFA           REL    CONST UNTYP.           .text      0 
ALLOT               REL    CONST UNTYP.           .text      C 
ALLOTOK             REL    CONST UNTYP.           .text      34 
ALLOT_NFA           REL    CONST UNTYP.           .text      0 
ANDBITS             REL    CONST UNTYP.           .text      C 
ANDBITS_NFA         REL    CONST UNTYP.           .text      0 
ANDD                REL    CONST UNTYP.           .text      8 
ANDD_NFA            REL    CONST UNTYP.           .text      0 
AT                  REL    CONST UNTYP.           .text      8 
AT_NFA              REL    CONST UNTYP.           .text      0 
BACK                REL    CONST UNTYP.           .text      C 
BACKSPACE_CHAR      REL    CONST UNTYP.           .text      0 
BACK_NFA            REL    CONST UNTYP.           .text      0 
BASE_NFA            REL    CONST UNTYP.           .text      0 
BASE_UV             REL    CONST UNTYP.           .text      C 
BAUD1               REL    CONST UNTYP.           .text      50 
BAUDDEFAULT         REL    CONST UNTYP.           .text      44 
BCOMP               REL    CONST UNTYP.           .text      10 
BCOMP_NFA           REL    CONST UNTYP.           .text      0 
BDIGS               REL    CONST UNTYP.           .text      8 
BDIGS_NFA           REL    CONST UNTYP.           .text      0 
BEGIN               REL    CONST UNTYP.           .text      C 
BEGIN_NFA           REL    CONST UNTYP.           .text      0 
BELL                REL    CONST UNTYP.           .text      0 
BIN                 REL    CONST UNTYP.           .text      8 
BIN_NFA             REL    CONST UNTYP.           .text      0 
BLANK               REL    CONST UNTYP.           .text      8 
BLANKS              REL    CONST UNTYP.           .text      C 
BLANKS_NFA          REL    CONST UNTYP.           .text      0 
BLANK_NFA           REL    CONST UNTYP.           .text      0 
BODCTRL             ABS    CONST UNTYP.           .text      40048150 
BP1_DFIND           REL    CONST UNTYP.           .text      10 
BP1_ERROR           REL    CONST UNTYP.           .text      98 
BP1_QUIT            REL    CONST UNTYP.           .text      44 
BRAN                REL    CONST UNTYP.           .text      0 
BRAN1               REL    CONST UNTYP.           .text      1 
BSOUT               REL    CONST UNTYP.           .text      0 
BUILDS              REL    CONST UNTYP.           .text      C 
BUILDS_NFA          REL    CONST UNTYP.           .text      0 
BYE                 REL    CONST UNTYP.           .text      8 
BYE_NFA             REL    CONST UNTYP.           .text      0 
CAT                 REL    CONST UNTYP.           .text      8 
CAT_NFA             REL    CONST UNTYP.           .text      0 
CCOMMA              REL    CONST UNTYP.           .text      8 
CCOMMAOK            REL    CONST UNTYP.           .text      30 
CCOMMA_NFA          REL    CONST UNTYP.           .text      0 
CCR                 ABS    CONST UNTYP.           .text      E000ED14 
CFA                 REL    CONST UNTYP.           .text      8 
CFA_LIT             REL    CONST UNTYP.           .text      50 
CFA_NFA             REL    CONST UNTYP.           .text      0 
CFA_PDOTQ           REL    CONST UNTYP.           .text      70 
CFA_SEMIS           REL    CONST UNTYP.           .text      A8 
CLKOUTCLKDIV        ABS    CONST UNTYP.           .text      400480E8 
CLKOUTCLKSEL        ABS    CONST UNTYP.           .text      400480E0 
CLKOUTUEN           ABS    CONST UNTYP.           .text      400480E4 
CLRBITS             REL    CONST UNTYP.           .text      C 
CLRBITS_NFA         REL    CONST UNTYP.           .text      0 
CLRENA0             ABS    CONST UNTYP.           .text      E000E180 
CLRPEND0            ABS    CONST UNTYP.           .text      E000E280 
CLRTIB              REL    CONST UNTYP.           .text      0 
CLS                 REL    CONST UNTYP.           .text      8 
CLS_NFA             REL    CONST UNTYP.           .text      0 
CM1                 REL    CONST UNTYP.           .text      11 
CM2                 REL    CONST UNTYP.           .text      21 
CMOVE               REL    CONST UNTYP.           .text      C 
CMOVE_NFA           REL    CONST UNTYP.           .text      0 
COLD                REL    CONST UNTYP.           .text      C 
COLD_NFA            REL    CONST UNTYP.           .text      0 
COLON               REL    CONST UNTYP.           .text      8 
COLON_NFA           REL    CONST UNTYP.           .text      0 
COMMA               REL    CONST UNTYP.           .text      8 
COMMAOK             REL    CONST UNTYP.           .text      30 
COMMA_NFA           REL    CONST UNTYP.           .text      0 
COMP                REL    CONST UNTYP.           .text      C 
COMP_NFA            REL    CONST UNTYP.           .text      0 
CON                 REL    CONST UNTYP.           .text      8 
CONOK               REL    CONST UNTYP.           .text      30 
CON_NFA             REL    CONST UNTYP.           .text      0 
COUNT               REL    CONST UNTYP.           .text      C 
COUNT_NFA           REL    CONST UNTYP.           .text      0 
CPUID               ABS    CONST UNTYP.           .text      E000ED00 
CPUIDBR             ABS    CONST UNTYP.           .text      E000ED00 
CR                  REL    CONST UNTYP.           .text      8 
CREA1               REL    CONST UNTYP.           .text      70 
CREATE              REL    CONST UNTYP.           .text      C 
CREATEDOK           REL    CONST UNTYP.           .text      98 
CREATEOK            REL    CONST UNTYP.           .text      34 
CREATE_NFA          REL    CONST UNTYP.           .text      0 
CRXOFF1             REL    CONST UNTYP.           .text      D 
CR_NFA              REL    CONST UNTYP.           .text      0 
CSDP                REL    CONST UNTYP.           .bss       B8C 
CSLL                REL    CONST UNTYP.           .text      0 
CSP                 REL    CONST UNTYP.           .bss       B88 
CSPP_NFA            REL    CONST UNTYP.           .text      0 
CSP_UV              REL    CONST UNTYP.           .text      8 
CSTATE              REL    CONST UNTYP.           .bss       B84 
CSTORE              REL    CONST UNTYP.           .text      8 
CSTORE_NFA          REL    CONST UNTYP.           .text      0 
CURRENT             REL    CONST UNTYP.           .bss       B80 
CURRENT_NFA         REL    CONST UNTYP.           .text      0 
CURRENT_UV          REL    CONST UNTYP.           .text      C 
DABS                REL    CONST UNTYP.           .text      C 
DABSF               REL    CONST UNTYP.           .text      C 
DABS_NFA            REL    CONST UNTYP.           .text      0 
DBASE               REL    CONST UNTYP.           .text      C 
DBASE_NFA           REL    CONST UNTYP.           .text      0 
DBSUSEDOT           REL    CONST UNTYP.           .text      74 
DBSUSEDUDOT         REL    CONST UNTYP.           .text      70 
DBUSEDOT            REL    CONST UNTYP.           .text      40 
DBUSEDUDOT          REL    CONST UNTYP.           .text      3C 
DDOT                REL    CONST UNTYP.           .text      8 
DDOTR               REL    CONST UNTYP.           .text      8 
DDOTR_NFA           REL    CONST UNTYP.           .text      0 
DDOT_NFA            REL    CONST UNTYP.           .text      0 
DDUP1               REL    CONST UNTYP.           .text      20 
DDUP_NFA            REL    CONST UNTYP.           .text      0 
DECIMAL             REL    CONST UNTYP.           .text      C 
DECIMAL_NFA         REL    CONST UNTYP.           .text      0 
DEFAULT_BAUD        ABS    CONST UNTYP.           .text      2580 
DEVICE_ID           ABS    CONST UNTYP.           .text      400483F4 
DFIND               REL    CONST UNTYP.           .text      C 
DFIND_NFA           REL    CONST UNTYP.           .text      0 
DICTSPACE           REL    CONST UNTYP.           .text      0 
DIG                 REL    CONST UNTYP.           .text      8 
DIG1                REL    CONST UNTYP.           .text      40 
DIGI1               REL    CONST UNTYP.           .text      17 
DIGI2               REL    CONST UNTYP.           .text      30 
DIGIT               REL    CONST UNTYP.           .text      C 
DIGIT_NFA           REL    CONST UNTYP.           .text      0 
DIGS                REL    CONST UNTYP.           .text      8 
DIGS1               REL    CONST UNTYP.           .text      C 
DIGS_NFA            REL    CONST UNTYP.           .text      0 
DIG_NFA             REL    CONST UNTYP.           .text      0 
DLIT1               REL    CONST UNTYP.           .text      30 
DLITERAL            REL    CONST UNTYP.           .text      10 
DLITERAL_NFA        REL    CONST UNTYP.           .text      0 
DNEGATE             REL    CONST UNTYP.           .text      C 
DNEGATE_NFA         REL    CONST UNTYP.           .text      0 
DO                  REL    CONST UNTYP.           .text      8 
DOCOL               REL    CONST UNTYP.           .text      1 
DOCON               REL    CONST UNTYP.           .text      1 
DOES                REL    CONST UNTYP.           .text      C 
DOES_NFA            REL    CONST UNTYP.           .text      0 
DOT                 REL    CONST UNTYP.           .text      8 
DOTBASE             REL    CONST UNTYP.           .text      0 
DOTBIN              REL    CONST UNTYP.           .text      8 
DOTBIN_NFA          REL    CONST UNTYP.           .text      0 
DOTDEC              REL    CONST UNTYP.           .text      8 
DOTDEC_NFA          REL    CONST UNTYP.           .text      0 
DOTDICTSPACE        REL    CONST UNTYP.           .text      8 
DOTDICTSPACE_NFA    REL    CONST UNTYP.           .text      0 
DOTHEX              REL    CONST UNTYP.           .text      8 
DOTHEX_NFA          REL    CONST UNTYP.           .text      0 
DOTQ                REL    CONST UNTYP.           .text      8 
DOTQ1               REL    CONST UNTYP.           .text      4C 
DOTQ2               REL    CONST UNTYP.           .text      5C 
DOTQ_NFA            REL    CONST UNTYP.           .text      0 
DOTR                REL    CONST UNTYP.           .text      8 
DOTRU               REL    CONST UNTYP.           .text      8 
DOTRU_NFA           REL    CONST UNTYP.           .text      0 
DOTR_NFA            REL    CONST UNTYP.           .text      0 
DOTS                REL    CONST UNTYP.           .text      8 
DOTSBASE            REL    CONST UNTYP.           .text      0 
DOTSBIN             REL    CONST UNTYP.           .text      8 
DOTSBIN_NFA         REL    CONST UNTYP.           .text      0 
DOTSDEC             REL    CONST UNTYP.           .text      8 
DOTSDEC_NFA         REL    CONST UNTYP.           .text      0 
DOTSEND             REL    CONST UNTYP.           .text      80 
DOTSHEX             REL    CONST UNTYP.           .text      8 
DOTSHEX_NFA         REL    CONST UNTYP.           .text      0 
DOTSLOOP            REL    CONST UNTYP.           .text      40 
DOTS_NFA            REL    CONST UNTYP.           .text      0 
DOTVARSPACE         REL    CONST UNTYP.           .text      8 
DOTVARSPACE_NFA     REL    CONST UNTYP.           .text      0 
DOT_NFA             REL    CONST UNTYP.           .text      0 
DO_NFA              REL    CONST UNTYP.           .text      0 
DP                  REL    CONST UNTYP.           .bss       B7C 
DPLUS               REL    CONST UNTYP.           .text      8 
DPLUS_NFA           REL    CONST UNTYP.           .text      0 
DPL_NFA             REL    CONST UNTYP.           .text      0 
DPL_UV              REL    CONST UNTYP.           .text      8 
DPM                 REL    CONST UNTYP.           .text      8 
DPM1                REL    CONST UNTYP.           .text      1C 
DPM_NFA             REL    CONST UNTYP.           .text      0 
DP_NFA              REL    CONST UNTYP.           .text      0 
DP_UV               REL    CONST UNTYP.           .text      8 
DROP                REL    CONST UNTYP.           .text      C 
DROP_NFA            REL    CONST UNTYP.           .text      0 
DTRA1               REL    CONST UNTYP.           .text      20 
DTRA2               REL    CONST UNTYP.           .text      54 
DTRA3               REL    CONST UNTYP.           .text      5C 
DTRAI               REL    CONST UNTYP.           .text      10 
DTRAI_NFA           REL    CONST UNTYP.           .text      0 
DUMP                REL    CONST UNTYP.           .text      C 
DUMP1               REL    CONST UNTYP.           .text      58 
DUMP2               REL    CONST UNTYP.           .text      78 
DUMPARGS            REL    CONST UNTYP.           .text      40 
DUMP_NFA            REL    CONST UNTYP.           .text      0 
DUP                 REL    CONST UNTYP.           .text      8 
DUP_NFA             REL    CONST UNTYP.           .text      0 
DZERO               REL    CONST UNTYP.           .text      28 
EDIGS               REL    CONST UNTYP.           .text      8 
EDIGS_NFA           REL    CONST UNTYP.           .text      0 
EIGHT               REL    CONST UNTYP.           .text      0 
EL                  REL    CONST UNTYP.           .text      24 
EL1                 REL    CONST UNTYP.           .text      64 
ELSE                REL    CONST UNTYP.           .text      C 
ELSE_NFA            REL    CONST UNTYP.           .text      0 
EMIT                REL    CONST UNTYP.           .text      C 
EMIT_NFA            REL    CONST UNTYP.           .text      0 
ENCL                REL    CONST UNTYP.           .text      C 
ENCL1               REL    CONST UNTYP.           .text      D 
ENCL2               REL    CONST UNTYP.           .text      34 
ENCL3               REL    CONST UNTYP.           .text      42 
ENCL4               REL    CONST UNTYP.           .text      42 
ENCL_NFA            REL    CONST UNTYP.           .text      0 
END                 REL    CONST UNTYP.           .text      8 
ENDIF               REL    CONST UNTYP.           .text      C 
ENDIF_NFA           REL    CONST UNTYP.           .text      0 
END_NFA             REL    CONST UNTYP.           .text      0 
EQUAL               REL    CONST UNTYP.           .text      8 
EQUAL_NFA           REL    CONST UNTYP.           .text      0 
ERASE               REL    CONST UNTYP.           .text      C 
ERASE_NFA           REL    CONST UNTYP.           .text      0 
ERRO1               REL    CONST UNTYP.           .text      28 
ERROR               REL    CONST UNTYP.           .text      C 
ERROR_NFA           REL    CONST UNTYP.           .text      0 
EXEC                REL    CONST UNTYP.           .text      C 
EXEC_NFA            REL    CONST UNTYP.           .text      0 
EXPE1               REL    CONST UNTYP.           .text      24 
EXPE2               REL    CONST UNTYP.           .text      C0 
EXPE3               REL    CONST UNTYP.           .text      10C 
EXPE33              REL    CONST UNTYP.           .text      110 
EXPE4               REL    CONST UNTYP.           .text      F0 
EXPE5               REL    CONST UNTYP.           .text      F4 
EXPE6               REL    CONST UNTYP.           .text      B4 
EXPE7               REL    CONST UNTYP.           .text      B8 
EXPECT              REL    CONST UNTYP.           .text      C 
EXPECT_NFA          REL    CONST UNTYP.           .text      0 
FENCE               REL    CONST UNTYP.           .bss       B78 
FENCE_NFA           REL    CONST UNTYP.           .text      0 
FENCE_UV            REL    CONST UNTYP.           .text      C 
FEND                REL    CONST UNTYP.           .text      1D 
FFDONE              REL    CONST UNTYP.           .text      B8 
FILL                REL    CONST UNTYP.           .text      C 
FILL_NFA            REL    CONST UNTYP.           .text      0 
FISH_ONLY           REL    CONST UNTYP.           .text      10 
FISH_ONLY_NFA       REL    CONST UNTYP.           .text      0 
FLASHCFG            ABS    CONST UNTYP.           .text      4003C010 
FLASHCMD            REL    CONST UNTYP.           .bss       BA0 
FLASHCRTF           REL    CONST UNTYP.           .text      0 
FLASHESEC           REL    CONST UNTYP.           .text      0 
FLASHPREP           REL    CONST UNTYP.           .text      0 
FLASHRET            REL    CONST UNTYP.           .bss       BF0 
FLASHSAVE           REL    CONST UNTYP.           .text      10 
FLASHSAVE_NFA       REL    CONST UNTYP.           .text      0 
FLASHWRITE          REL    CONST UNTYP.           .text      0 
FLASH_FORGET        REL    CONST UNTYP.           .text      14 
FLASH_FORGET_NFA    REL    CONST UNTYP.           .text      0 
FLOOP               REL    CONST UNTYP.           .text      15 
FM0_COLD            REL    CONST PUB UNTYP.       .text      1 
FM0_WARM            REL    CONST UNTYP.           .text      0 
FMSSTART            ABS    CONST UNTYP.           .text      4003C020 
FMSSTOP             ABS    CONST UNTYP.           .text      4003C024 
FMSTAT              ABS    CONST UNTYP.           .text      4003CFE0 
FMSTATCLR           ABS    CONST UNTYP.           .text      4003CFE8 
FMSW0               ABS    CONST UNTYP.           .text      4003C02C 
FMSW1               ABS    CONST UNTYP.           .text      4003C030 
FMSW2               ABS    CONST UNTYP.           .text      4003C034 
FMSW3               ABS    CONST UNTYP.           .text      4003C038 
FORGET              REL    CONST UNTYP.           .text      C 
FORGET_NFA          REL    CONST UNTYP.           .text      0 
FOUR                REL    CONST UNTYP.           .text      8 
FOURM               REL    CONST UNTYP.           .text      8 
FOURM_NFA           REL    CONST UNTYP.           .text      0 
FOURP               REL    CONST UNTYP.           .text      8 
FOURP_NFA           REL    CONST UNTYP.           .text      0 
FOUR_NFA            REL    CONST UNTYP.           .text      0 
FPA                 REL    CONST UNTYP.           .bss       4 
FPADDR              REL    CONST UNTYP.           .text      0 
FPC                 REL    CONST UNTYP.           .bss       8 
FPCURR              REL    CONST UNTYP.           .text      0 
FPU                 REL    CONST UNTYP.           .bss       C 
FPUSER              REL    CONST UNTYP.           .text      0 
FROMR               REL    CONST UNTYP.           .text      8 
FROMR_NFA           REL    CONST UNTYP.           .text      0 
FSEND               ABS    CONST UNTYP.           .text      10000EE0 
FS_BEGIN            REL    CONST UNTYP.           .text      4C 
FS_EXIT             REL    CONST UNTYP.           .text      C0 
FS_RWORD            REL    CONST UNTYP.           .text      C4 
GOTO                REL    CONST UNTYP.           .text      0 
GPIO0DATA           ABS    CONST UNTYP.           .text      50003FFC 
GPIO0DATA0          ABS    CONST UNTYP.           .text      50003FFC 
GPIO0DATA1          ABS    CONST UNTYP.           .text      50003FFD 
GPIO0DATAL          ABS    CONST UNTYP.           .text      50003FFC 
GPIO0DIR            ABS    CONST UNTYP.           .text      50008000 
GPIO0DIR0           ABS    CONST UNTYP.           .text      50008000 
GPIO0DIR1           ABS    CONST UNTYP.           .text      50008001 
GPIO0DIRL           ABS    CONST UNTYP.           .text      50008000 
GPIO0IBE            ABS    CONST UNTYP.           .text      50008008 
GPIO0IBE0           ABS    CONST UNTYP.           .text      50008008 
GPIO0IBE1           ABS    CONST UNTYP.           .text      50008009 
GPIO0IBEL           ABS    CONST UNTYP.           .text      50008008 
GPIO0IC             ABS    CONST UNTYP.           .text      5000801C 
GPIO0IE             ABS    CONST UNTYP.           .text      50008010 
GPIO0IE0            ABS    CONST UNTYP.           .text      50008010 
GPIO0IE1            ABS    CONST UNTYP.           .text      50008011 
GPIO0IEL            ABS    CONST UNTYP.           .text      50008010 
GPIO0IEV            ABS    CONST UNTYP.           .text      5000800C 
GPIO0IEV0           ABS    CONST UNTYP.           .text      5000800C 
GPIO0IEV1           ABS    CONST UNTYP.           .text      5000800D 
GPIO0IEVL           ABS    CONST UNTYP.           .text      5000800C 
GPIO0IS             ABS    CONST UNTYP.           .text      50008004 
GPIO0IS0            ABS    CONST UNTYP.           .text      50008004 
GPIO0IS1            ABS    CONST UNTYP.           .text      50008005 
GPIO0ISL            ABS    CONST UNTYP.           .text      50008004 
GPIO0MIS            ABS    CONST UNTYP.           .text      50008018 
GPIO0MIS0           ABS    CONST UNTYP.           .text      50008018 
GPIO0MIS1           ABS    CONST UNTYP.           .text      50008019 
GPIO0MISL           ABS    CONST UNTYP.           .text      50008018 
GPIO0RIS            ABS    CONST UNTYP.           .text      50008014 
GPIO0RIS0           ABS    CONST UNTYP.           .text      50008014 
GPIO0RIS1           ABS    CONST UNTYP.           .text      50008015 
GPIO0RISL           ABS    CONST UNTYP.           .text      50008014 
GPIO1DATA           ABS    CONST UNTYP.           .text      50013FFC 
GPIO1DATA0          ABS    CONST UNTYP.           .text      50013FFC 
GPIO1DATA1          ABS    CONST UNTYP.           .text      50013FFD 
GPIO1DATAL          ABS    CONST UNTYP.           .text      50013FFC 
GPIO1DIR            ABS    CONST UNTYP.           .text      50018000 
GPIO1DIR0           ABS    CONST UNTYP.           .text      50018000 
GPIO1DIR1           ABS    CONST UNTYP.           .text      50018001 
GPIO1DIRL           ABS    CONST UNTYP.           .text      50018000 
GPIO1IBE            ABS    CONST UNTYP.           .text      50018008 
GPIO1IBE0           ABS    CONST UNTYP.           .text      50018008 
GPIO1IBE1           ABS    CONST UNTYP.           .text      50018009 
GPIO1IBEL           ABS    CONST UNTYP.           .text      50018008 
GPIO1IC             ABS    CONST UNTYP.           .text      5001801C 
GPIO1IE             ABS    CONST UNTYP.           .text      50018010 
GPIO1IE0            ABS    CONST UNTYP.           .text      50018010 
GPIO1IE1            ABS    CONST UNTYP.           .text      50018011 
GPIO1IEL            ABS    CONST UNTYP.           .text      50018010 
GPIO1IEV            ABS    CONST UNTYP.           .text      5001800C 
GPIO1IEV0           ABS    CONST UNTYP.           .text      5001800C 
GPIO1IEV1           ABS    CONST UNTYP.           .text      5001800D 
GPIO1IEVL           ABS    CONST UNTYP.           .text      5001800C 
GPIO1IS             ABS    CONST UNTYP.           .text      50018004 
GPIO1IS0            ABS    CONST UNTYP.           .text      50018004 
GPIO1IS1            ABS    CONST UNTYP.           .text      50018005 
GPIO1ISL            ABS    CONST UNTYP.           .text      50018004 
GPIO1MIS            ABS    CONST UNTYP.           .text      50018018 
GPIO1MIS0           ABS    CONST UNTYP.           .text      50018018 
GPIO1MIS1           ABS    CONST UNTYP.           .text      50018019 
GPIO1MISL           ABS    CONST UNTYP.           .text      50018018 
GPIO1RIS            ABS    CONST UNTYP.           .text      50018014 
GPIO1RIS0           ABS    CONST UNTYP.           .text      50018014 
GPIO1RIS1           ABS    CONST UNTYP.           .text      50018015 
GPIO1RISL           ABS    CONST UNTYP.           .text      50018014 
GPIO2DATA           ABS    CONST UNTYP.           .text      50023FFC 
GPIO2DATA0          ABS    CONST UNTYP.           .text      50023FFC 
GPIO2DATA1          ABS    CONST UNTYP.           .text      50023FFD 
GPIO2DATAL          ABS    CONST UNTYP.           .text      50023FFC 
GPIO2DIR            ABS    CONST UNTYP.           .text      50028000 
GPIO2DIR0           ABS    CONST UNTYP.           .text      50028000 
GPIO2DIR1           ABS    CONST UNTYP.           .text      50028001 
GPIO2DIRL           ABS    CONST UNTYP.           .text      50028000 
GPIO2IBE            ABS    CONST UNTYP.           .text      50028008 
GPIO2IBE0           ABS    CONST UNTYP.           .text      50028008 
GPIO2IBE1           ABS    CONST UNTYP.           .text      50028009 
GPIO2IBEL           ABS    CONST UNTYP.           .text      50028008 
GPIO2IC             ABS    CONST UNTYP.           .text      5002801C 
GPIO2IE             ABS    CONST UNTYP.           .text      50028010 
GPIO2IE0            ABS    CONST UNTYP.           .text      50028010 
GPIO2IE1            ABS    CONST UNTYP.           .text      50028011 
GPIO2IEL            ABS    CONST UNTYP.           .text      50028010 
GPIO2IEV            ABS    CONST UNTYP.           .text      5002800C 
GPIO2IEV0           ABS    CONST UNTYP.           .text      5002800C 
GPIO2IEV1           ABS    CONST UNTYP.           .text      5002800D 
GPIO2IEVL           ABS    CONST UNTYP.           .text      5002800C 
GPIO2IS             ABS    CONST UNTYP.           .text      50028004 
GPIO2IS0            ABS    CONST UNTYP.           .text      50028004 
GPIO2IS1            ABS    CONST UNTYP.           .text      50028005 
GPIO2ISL            ABS    CONST UNTYP.           .text      50028004 
GPIO2MIS            ABS    CONST UNTYP.           .text      50028018 
GPIO2MIS0           ABS    CONST UNTYP.           .text      50028018 
GPIO2MIS1           ABS    CONST UNTYP.           .text      50028019 
GPIO2MISL           ABS    CONST UNTYP.           .text      50028018 
GPIO2RIS            ABS    CONST UNTYP.           .text      50028014 
GPIO2RIS0           ABS    CONST UNTYP.           .text      50028014 
GPIO2RIS1           ABS    CONST UNTYP.           .text      50028015 
GPIO2RISL           ABS    CONST UNTYP.           .text      50028014 
GPIO3DATA           ABS    CONST UNTYP.           .text      50033FFC 
GPIO3DATA0          ABS    CONST UNTYP.           .text      50033FFC 
GPIO3DATAL          ABS    CONST UNTYP.           .text      50033FFC 
GPIO3DIR            ABS    CONST UNTYP.           .text      50038000 
GPIO3DIR0           ABS    CONST UNTYP.           .text      50038000 
GPIO3DIRL           ABS    CONST UNTYP.           .text      50038000 
GPIO3IBE            ABS    CONST UNTYP.           .text      50038008 
GPIO3IBE0           ABS    CONST UNTYP.           .text      50038008 
GPIO3IBEL           ABS    CONST UNTYP.           .text      50038008 
GPIO3IC             ABS    CONST UNTYP.           .text      5003801C 
GPIO3IE             ABS    CONST UNTYP.           .text      50038010 
GPIO3IE0            ABS    CONST UNTYP.           .text      50038010 
GPIO3IEL            ABS    CONST UNTYP.           .text      50038010 
GPIO3IEV            ABS    CONST UNTYP.           .text      5003800C 
GPIO3IEV0           ABS    CONST UNTYP.           .text      5003800C 
GPIO3IEVL           ABS    CONST UNTYP.           .text      5003800C 
GPIO3IS             ABS    CONST UNTYP.           .text      50038004 
GPIO3IS0            ABS    CONST UNTYP.           .text      50038004 
GPIO3ISL            ABS    CONST UNTYP.           .text      50038004 
GPIO3MIS            ABS    CONST UNTYP.           .text      50038018 
GPIO3MIS0           ABS    CONST UNTYP.           .text      50038018 
GPIO3MISL           ABS    CONST UNTYP.           .text      50038018 
GPIO3RIS            ABS    CONST UNTYP.           .text      50038014 
GPIO3RIS0           ABS    CONST UNTYP.           .text      50038014 
GPIO3RISL           ABS    CONST UNTYP.           .text      50038014 
GPREG0              ABS    CONST UNTYP.           .text      40038004 
GPREG1              ABS    CONST UNTYP.           .text      40038008 
GPREG2              ABS    CONST UNTYP.           .text      4003800C 
GPREG3              ABS    CONST UNTYP.           .text      40038010 
GPREG4              ABS    CONST UNTYP.           .text      40038014 
GREATERTHAN         REL    CONST UNTYP.           .text      8 
GREATERTHAN_NFA     REL    CONST UNTYP.           .text      0 
HERE                REL    CONST UNTYP.           .text      C 
HERE_NFA            REL    CONST UNTYP.           .text      0 
HEX                 REL    CONST UNTYP.           .text      8 
HEX_NFA             REL    CONST UNTYP.           .text      0 
HLD_NFA             REL    CONST UNTYP.           .text      0 
HLD_UV              REL    CONST UNTYP.           .text      8 
HOLD                REL    CONST UNTYP.           .text      C 
HOLD_NFA            REL    CONST UNTYP.           .text      0 
I                   REL    CONST UNTYP.           .text      8 
I2C0ADR             ABS    CONST UNTYP.           .text      4000000C 
I2C0ADR1            ABS    CONST UNTYP.           .text      40000020 
I2C0ADR2            ABS    CONST UNTYP.           .text      40000024 
I2C0ADR3            ABS    CONST UNTYP.           .text      40000028 
I2C0CONCLR          ABS    CONST UNTYP.           .text      40000018 
I2C0CONSET          ABS    CONST UNTYP.           .text      40000000 
I2C0DAT             ABS    CONST UNTYP.           .text      40000008 
I2C0DATABUFFER      ABS    CONST UNTYP.           .text      4000002C 
I2C0MASK0           ABS    CONST UNTYP.           .text      40000030 
I2C0MASK1           ABS    CONST UNTYP.           .text      40000034 
I2C0MASK2           ABS    CONST UNTYP.           .text      40000038 
I2C0MASK3           ABS    CONST UNTYP.           .text      4000003C 
I2C0MMCTRL          ABS    CONST UNTYP.           .text      4000001C 
I2C0SCLH            ABS    CONST UNTYP.           .text      40000010 
I2C0SCLL            ABS    CONST UNTYP.           .text      40000014 
I2C0STAT            ABS    CONST UNTYP.           .text      40000004 
IAPCALL             ABS    CONST UNTYP.           .text      1FFF1FF1 
IAPSTACKEND         ABS    CONST UNTYP.           .text      10000FE0 
IARBUG_TASKADDR     REL    CONST UNTYP.           .text      94 
ICER                ABS    CONST UNTYP.           .text      E000E180 
ICPR                ABS    CONST UNTYP.           .text      E000E280 
ICSR                ABS    CONST UNTYP.           .text      E000ED04 
IDDOT               REL    CONST UNTYP.           .text      8 
IDDOT_NFA           REL    CONST UNTYP.           .text      0 
IF                  REL    CONST UNTYP.           .text      8 
IF_CR_SEND_XOFF     REL    CONST UNTYP.           .text      28 
IF_NFA              REL    CONST UNTYP.           .text      0 
IMMED               REL    CONST UNTYP.           .text      10 
IMMED_NFA           REL    CONST UNTYP.           .text      0 
IN                  REL    CONST UNTYP.           .bss       B6C 
INITRO              REL    CONST UNTYP.           .bss       B64 
INITRO_UV           REL    CONST UNTYP.           .text      8 
INITSO              REL    CONST UNTYP.           .bss       B60 
INITSO_UV           REL    CONST UNTYP.           .text      8 
INITTIB             REL    CONST UNTYP.           .bss       B68 
INTE1               REL    CONST UNTYP.           .text      14 
INTE2               REL    CONST UNTYP.           .text      58 
INTE3               REL    CONST UNTYP.           .text      44 
INTE4               REL    CONST UNTYP.           .text      4C 
INTE5               REL    CONST UNTYP.           .text      8C 
INTE6               REL    CONST UNTYP.           .text      80 
INTE7               REL    CONST UNTYP.           .text      88 
INTER               REL    CONST UNTYP.           .text      10 
INTER_NFA           REL    CONST UNTYP.           .text      0 
IN_NFA              REL    CONST UNTYP.           .text      0 
IN_UV               REL    CONST UNTYP.           .text      8 
IOBUFSIZE           ABS    CONST UNTYP.           .text      60 
IOCON_DCD_LOC       ABS    CONST UNTYP.           .text      400440B8 
IOCON_DSR_LOC       ABS    CONST UNTYP.           .text      400440B4 
IOCON_PIO0_1        ABS    CONST UNTYP.           .text      40044010 
IOCON_PIO0_2        ABS    CONST UNTYP.           .text      4004401C 
IOCON_PIO0_3        ABS    CONST UNTYP.           .text      4004402C 
IOCON_PIO0_4        ABS    CONST UNTYP.           .text      40044030 
IOCON_PIO0_5        ABS    CONST UNTYP.           .text      40044034 
IOCON_PIO0_6        ABS    CONST UNTYP.           .text      4004404C 
IOCON_PIO0_7        ABS    CONST UNTYP.           .text      40044050 
IOCON_PIO0_8        ABS    CONST UNTYP.           .text      40044060 
IOCON_PIO0_9        ABS    CONST UNTYP.           .text      40044064 
IOCON_PIO1_10       ABS    CONST UNTYP.           .text      4004406C 
IOCON_PIO1_11       ABS    CONST UNTYP.           .text      40044098 
IOCON_PIO1_4        ABS    CONST UNTYP.           .text      40044094 
IOCON_PIO1_5        ABS    CONST UNTYP.           .text      400440A0 
IOCON_PIO1_6        ABS    CONST UNTYP.           .text      400440A4 
IOCON_PIO1_7        ABS    CONST UNTYP.           .text      400440A8 
IOCON_PIO1_8        ABS    CONST UNTYP.           .text      40044014 
IOCON_PIO1_9        ABS    CONST UNTYP.           .text      40044038 
IOCON_PIO2_0        ABS    CONST UNTYP.           .text      40044008 
IOCON_PIO2_1        ABS    CONST UNTYP.           .text      40044028 
IOCON_PIO2_10       ABS    CONST UNTYP.           .text      40044058 
IOCON_PIO2_11       ABS    CONST UNTYP.           .text      40044070 
IOCON_PIO2_2        ABS    CONST UNTYP.           .text      4004405C 
IOCON_PIO2_3        ABS    CONST UNTYP.           .text      4004408C 
IOCON_PIO2_4        ABS    CONST UNTYP.           .text      40044040 
IOCON_PIO2_5        ABS    CONST UNTYP.           .text      40044044 
IOCON_PIO2_6        ABS    CONST UNTYP.           .text      40044000 
IOCON_PIO2_7        ABS    CONST UNTYP.           .text      40044020 
IOCON_PIO2_8        ABS    CONST UNTYP.           .text      40044024 
IOCON_PIO2_9        ABS    CONST UNTYP.           .text      40044054 
IOCON_PIO3_0        ABS    CONST UNTYP.           .text      40044084 
IOCON_PIO3_1        ABS    CONST UNTYP.           .text      40044088 
IOCON_PIO3_2        ABS    CONST UNTYP.           .text      4004409C 
IOCON_PIO3_3        ABS    CONST UNTYP.           .text      400440AC 
IOCON_PIO3_4        ABS    CONST UNTYP.           .text      4004403C 
IOCON_PIO3_5        ABS    CONST UNTYP.           .text      40044048 
IOCON_RESET_PIO0_0  ABS    CONST UNTYP.           .text      4004400C 
IOCON_RI_LOC        ABS    CONST UNTYP.           .text      400440BC 
IOCON_R_PIO0_11     ABS    CONST UNTYP.           .text      40044074 
IOCON_R_PIO1_0      ABS    CONST UNTYP.           .text      40044078 
IOCON_R_PIO1_1      ABS    CONST UNTYP.           .text      4004407C 
IOCON_R_PIO1_2      ABS    CONST UNTYP.           .text      40044080 
IOCON_SCK_LOC       ABS    CONST UNTYP.           .text      400440B0 
IOCON_SWCLK_PIO0_10 ABS    CONST UNTYP.           .text      40044068 
IOCON_SWDIO_PIO1_3  ABS    CONST UNTYP.           .text      40044090 
IP0                 ABS    CONST UNTYP.           .text      E000E400 
IP1                 ABS    CONST UNTYP.           .text      E000E404 
IP2                 ABS    CONST UNTYP.           .text      E000E408 
IP3                 ABS    CONST UNTYP.           .text      E000E40C 
IP4                 ABS    CONST UNTYP.           .text      E000E410 
IP5                 ABS    CONST UNTYP.           .text      E000E414 
IP6                 ABS    CONST UNTYP.           .text      E000E418 
IP7                 ABS    CONST UNTYP.           .text      E000E41C 
IRCCTRL             ABS    CONST UNTYP.           .text      40048028 
ISER                ABS    CONST UNTYP.           .text      E000E100 
ISPR                ABS    CONST UNTYP.           .text      E000E200 
I_NFA               REL    CONST UNTYP.           .text      0 
KEY                 REL    CONST UNTYP.           .text      8 
KEY_NFA             REL    CONST UNTYP.           .text      0 
KL                  REL    CONST UNTYP.           .text      10 
LATEST              REL    CONST UNTYP.           .text      C 
LATEST_NFA          REL    CONST UNTYP.           .text      0 
LBRAC               REL    CONST UNTYP.           .text      8 
LBRAC_NFA           REL    CONST UNTYP.           .text      0 
LEAVE               REL    CONST UNTYP.           .text      C 
LEAVE_NFA           REL    CONST UNTYP.           .text      0 
LESS1               REL    CONST UNTYP.           .text      11 
LESSTHAN            REL    CONST UNTYP.           .text      8 
LESSTHAN_NFA        REL    CONST UNTYP.           .text      0 
LFA                 REL    CONST UNTYP.           .text      8 
LFA_NFA             REL    CONST UNTYP.           .text      0 
LIT                 REL    CONST UNTYP.           .text      0 
LITE1               REL    CONST UNTYP.           .text      2C 
LITERAL             REL    CONST UNTYP.           .text      C 
LITERAL_NFA         REL    CONST UNTYP.           .text      0 
LOOP                REL    CONST UNTYP.           .text      C 
LOOP_NFA            REL    CONST UNTYP.           .text      0 
MAINCLKSEL          ABS    CONST UNTYP.           .text      40048070 
MAINCLKUEN          ABS    CONST UNTYP.           .text      40048074 
MAX                 REL    CONST UNTYP.           .text      8 
MAX1                REL    CONST UNTYP.           .text      20 
MAXWORDLEN          ABS    CONST UNTYP.           .text      1F 
MAX_NFA             REL    CONST UNTYP.           .text      0 
MBRK                REL    CONST UNTYP.           .text      C 
MBRK_NFA            REL    CONST UNTYP.           .text      0 
MIN                 REL    CONST UNTYP.           .text      8 
MIN1                REL    CONST UNTYP.           .text      20 
MIN_NFA             REL    CONST UNTYP.           .text      0 
MOD                 REL    CONST UNTYP.           .text      8 
MODD_NFA            REL    CONST UNTYP.           .text      0 
MSLASH              REL    CONST UNTYP.           .text      8 
MSLASH_NFA          REL    CONST UNTYP.           .text      0 
MSMOD               REL    CONST UNTYP.           .text      C 
MSMOD_NFA           REL    CONST UNTYP.           .text      0 
MSTAR               REL    CONST UNTYP.           .text      8 
MSTAR_NFA           REL    CONST UNTYP.           .text      0 
MYBAUD              REL    CONST UNTYP.           .text      C 
MYBAUD_NFA          REL    CONST UNTYP.           .text      0 
MYWORDS             REL    CONST UNTYP.           .text      C 
MYWORDS_NFA         REL    CONST UNTYP.           .text      0 
NBASE               REL    CONST UNTYP.           .bss       B90 
NDPL                REL    CONST UNTYP.           .bss       B94 
NEGATE              REL    CONST UNTYP.           .text      C 
NEGATE_NFA          REL    CONST UNTYP.           .text      0 
NEXTNFA             REL    CONST UNTYP.           .text      66 
NFA                 REL    CONST UNTYP.           .text      8 
NFA_NFA             REL    CONST UNTYP.           .text      0 
NFP                 REL    CONST UNTYP.           .text      5B 
NFPS                REL    CONST UNTYP.           .text      4F 
NHLD                REL    CONST UNTYP.           .bss       B98 
NLENL               REL    CONST UNTYP.           .text      5 
NLENX               REL    CONST UNTYP.           .text      F 
NLEN_NFA            REL    CONST UNTYP.           .text      0 
NMISRC              ABS    CONST UNTYP.           .text      40048174 
NONFA               REL    CONST UNTYP.           .text      72 
NOOP                REL    CONST UNTYP.           .text      C 
NOOP_NFA            REL    CONST UNTYP.           .text      0 
NORAMWORDS          REL    CONST UNTYP.           .text      B4 
NOT                 REL    CONST UNTYP.           .text      8 
NOT_NFA             REL    CONST UNTYP.           .text      0 
NOT_WC              REL    CONST UNTYP.           .text      E0 
NULL                REL    CONST UNTYP.           .text      8 
NULLSTRLEN          REL    CONST UNTYP.           .text      C 
NULL_NFA            REL    CONST UNTYP.           .text      0 
NUMB1               REL    CONST UNTYP.           .text      48 
NUMB2               REL    CONST UNTYP.           .text      98 
NUMB3               REL    CONST UNTYP.           .text      AC 
NUMBER              REL    CONST UNTYP.           .text      C 
NUMBER_NFA          REL    CONST UNTYP.           .text      0 
ONE                 REL    CONST UNTYP.           .text      8 
ONEP                REL    CONST UNTYP.           .text      8 
ONEP_NFA            REL    CONST UNTYP.           .text      0 
ONE_NFA             REL    CONST UNTYP.           .text      0 
OR                  REL    CONST UNTYP.           .text      8 
ORIG                REL    CONST UNTYP.           .bss       10 
OR_NFA              REL    CONST UNTYP.           .text      0 
OUT                 REL    CONST UNTYP.           .bss       B70 
OUT_NFA             REL    CONST UNTYP.           .text      0 
OUT_UV              REL    CONST UNTYP.           .text      8 
OVER                REL    CONST UNTYP.           .text      C 
OVER_NFA            REL    CONST UNTYP.           .text      0 
PABOR               REL    CONST UNTYP.           .text      0 
PAD                 REL    CONST UNTYP.           .bss       A38 
PAD_NFA             REL    CONST UNTYP.           .text      0 
PAD_UV              REL    CONST UNTYP.           .text      8 
PAREN               REL    CONST UNTYP.           .text      8 
PAREN_NFA           REL    CONST UNTYP.           .text      0 
PCON                ABS    CONST UNTYP.           .text      40038000 
PDAWAKECFG          ABS    CONST UNTYP.           .text      40048234 
PDOTQ               REL    CONST UNTYP.           .text      0 
PDRUNCFG            ABS    CONST UNTYP.           .text      40048238 
PDSLEEPCFG          ABS    CONST UNTYP.           .text      40048230 
PEMIT               REL    CONST UNTYP.           .text      0 
PFA                 REL    CONST UNTYP.           .text      8 
PFA_NFA             REL    CONST UNTYP.           .text      0 
PFIN1               REL    CONST UNTYP.           .text      B 
PFIN2               REL    CONST UNTYP.           .text      1B 
PFIN21              REL    CONST UNTYP.           .text      2F 
PFIN5               REL    CONST UNTYP.           .text      54 
PFIN51              REL    CONST UNTYP.           .text      56 
PFIN7               REL    CONST UNTYP.           .text      5E 
PFIND               REL    CONST UNTYP.           .text      0 
PINIT               ABS    CONST UNTYP.           .text      10000FE0 
PIOPORCAP0          ABS    CONST UNTYP.           .text      40048100 
PIOPORCAP1          ABS    CONST UNTYP.           .text      40048104 
PL                  REL    CONST UNTYP.           .text      4 
PLOOP               REL    CONST UNTYP.           .text      C 
PLOOP_NFA           REL    CONST UNTYP.           .text      0 
PLUS                REL    CONST UNTYP.           .text      8 
PLUS_NFA            REL    CONST UNTYP.           .text      0 
PM                  REL    CONST UNTYP.           .text      8 
PM1                 REL    CONST UNTYP.           .text      1C 
PM_NFA              REL    CONST UNTYP.           .text      0 
PNUM1               REL    CONST UNTYP.           .text      4 
PNUM2               REL    CONST UNTYP.           .text      7C 
PNUM3               REL    CONST UNTYP.           .text      70 
PNUMBER             REL    CONST UNTYP.           .text      0 
PRESETCTRL          ABS    CONST UNTYP.           .text      40048004 
PSTORE              REL    CONST UNTYP.           .text      8 
PSTORE_NFA          REL    CONST UNTYP.           .text      0 
QADDR               REL    CONST UNTYP.           .text      C 
QADDR1              REL    CONST UNTYP.           .text      58 
QADDR_NFA           REL    CONST UNTYP.           .text      0 
QCOMP               REL    CONST UNTYP.           .text      C 
QCOMP_NFA           REL    CONST UNTYP.           .text      0 
QCSP                REL    CONST UNTYP.           .text      C 
QCSP_NFA            REL    CONST UNTYP.           .text      0 
QEN                 REL    CONST UNTYP.           .text      1C 
QERR1               REL    CONST UNTYP.           .text      28 
QERR2               REL    CONST UNTYP.           .text      2C 
QERROR              REL    CONST UNTYP.           .text      C 
QERROR_NFA          REL    CONST UNTYP.           .text      0 
QEVEN               REL    CONST UNTYP.           .text      C 
QEVEN1              REL    CONST UNTYP.           .text      5C 
QEVEN_NFA           REL    CONST UNTYP.           .text      0 
QEXEC               REL    CONST UNTYP.           .text      C 
QEXEC_NFA           REL    CONST UNTYP.           .text      0 
QPAIR               REL    CONST UNTYP.           .text      C 
QPAIR_NFA           REL    CONST UNTYP.           .text      0 
QSTACK              REL    CONST UNTYP.           .text      C 
QSTACK_NFA          REL    CONST UNTYP.           .text      0 
QUERY               REL    CONST UNTYP.           .text      C 
QUERY_NFA           REL    CONST UNTYP.           .text      0 
QUES                REL    CONST UNTYP.           .text      8 
QUES_NFA            REL    CONST UNTYP.           .text      0 
QUIT                REL    CONST UNTYP.           .text      C 
QUIT1               REL    CONST UNTYP.           .text      14 
QUIT2               REL    CONST UNTYP.           .text      48 
QUIT_NFA            REL    CONST UNTYP.           .text      0 
R                   REL    CONST UNTYP.           .text      8 
RAMVARSPACE         REL    CONST UNTYP.           .bss       A9C 
RAMend              ABS    CONST UNTYP.           .text      10001000 
RAMstart            ABS    CONST UNTYP.           .text      10000000 
RBASE               REL    CONST UNTYP.           .text      C 
RBASE_NFA           REL    CONST UNTYP.           .text      0 
RBRAC               REL    CONST UNTYP.           .text      8 
RBRAC_NFA           REL    CONST UNTYP.           .text      0 
REPEAT              REL    CONST UNTYP.           .text      C 
REPEAT_NFA          REL    CONST UNTYP.           .text      0 
RET2c               REL    CONST UNTYP.           .text      0 
RINIT               ABS    CONST UNTYP.           .text      10000F60 
RLIT                REL    CONST UNTYP.           .text      0 
ROT                 REL    CONST UNTYP.           .text      8 
ROT_NFA             REL    CONST UNTYP.           .text      0 
RPAT                REL    CONST UNTYP.           .text      8 
RPAT_NFA            REL    CONST UNTYP.           .text      0 
RPSTO               REL    CONST UNTYP.           .text      8 
RPSTO_NFA           REL    CONST UNTYP.           .text      0 
RVALLOTOK           REL    CONST UNTYP.           .text      48 
RVSPACE             REL    CONST UNTYP.           .text      0 
RWORD               REL    CONST UNTYP.           .text      0 
RW_BEGIN            REL    CONST UNTYP.           .text      44 
RW_LFA              REL    CONST UNTYP.           .text      104 
RW_UNTIL            REL    CONST UNTYP.           .text      100 
RZERO_NFA           REL    CONST UNTYP.           .text      0 
R_NFA               REL    CONST UNTYP.           .text      0 
SCR                 ABS    CONST UNTYP.           .text      E000ED10 
SCSP                REL    CONST UNTYP.           .text      C 
SCSP_NFA            REL    CONST UNTYP.           .text      0 
SEMI                REL    CONST UNTYP.           .text      8 
SEMICODE            REL    CONST UNTYP.           .text      C 
SEMICODE_NFA        REL    CONST UNTYP.           .text      0 
SEMIS               REL    CONST UNTYP.           .text      8 
SEMIS_NFA           REL    CONST UNTYP.           .text      0 
SEMI_NFA            REL    CONST UNTYP.           .text      0 
SETBITS             REL    CONST UNTYP.           .text      C 
SETBITS_NFA         REL    CONST UNTYP.           .text      0 
SETENA0             ABS    CONST UNTYP.           .text      E000E100 
SETPEND0            ABS    CONST UNTYP.           .text      E000E200 
SHPR2               ABS    CONST UNTYP.           .text      E000ED1C 
SHPR3               ABS    CONST UNTYP.           .text      E000ED20 
SIGN                REL    CONST UNTYP.           .text      C 
SIGN1               REL    CONST UNTYP.           .text      2C 
SIGNON              REL    CONST UNTYP.           .text      0 
SIGN_NFA            REL    CONST UNTYP.           .text      0 
SLASH               REL    CONST UNTYP.           .text      8 
SLASH_NFA           REL    CONST UNTYP.           .text      0 
SLMOD               REL    CONST UNTYP.           .text      C 
SLMOD_NFA           REL    CONST UNTYP.           .text      0 
SMUDGE              REL    CONST UNTYP.           .text      C 
SMUDGE_NFA          REL    CONST UNTYP.           .text      0 
SPACE               REL    CONST UNTYP.           .text      C 
SPACES              REL    CONST UNTYP.           .text      C 
SPACES_NFA          REL    CONST UNTYP.           .text      0 
SPACE_NFA           REL    CONST UNTYP.           .text      0 
SPAT                REL    CONST UNTYP.           .text      8 
SPAT_NFA            REL    CONST UNTYP.           .text      0 
SPAX1               REL    CONST UNTYP.           .text      38 
SPAX2               REL    CONST UNTYP.           .text      2C 
SPSTO               REL    CONST UNTYP.           .text      8 
SPSTO_NFA           REL    CONST UNTYP.           .text      0 
SSLASH              REL    CONST UNTYP.           .text      8 
SSLASH_NFA          REL    CONST UNTYP.           .text      0 
SSMOD               REL    CONST UNTYP.           .text      C 
SSMOD_NFA           REL    CONST UNTYP.           .text      0 
SSP0CLKDIV          ABS    CONST UNTYP.           .text      40048094 
SSP0CPSR            ABS    CONST UNTYP.           .text      40040010 
SSP0CR0             ABS    CONST UNTYP.           .text      40040000 
SSP0CR1             ABS    CONST UNTYP.           .text      40040004 
SSP0DR              ABS    CONST UNTYP.           .text      40040008 
SSP0ICR             ABS    CONST UNTYP.           .text      40040020 
SSP0IMSC            ABS    CONST UNTYP.           .text      40040014 
SSP0MIS             ABS    CONST UNTYP.           .text      4004001C 
SSP0RIS             ABS    CONST UNTYP.           .text      40040018 
SSP0SR              ABS    CONST UNTYP.           .text      4004000C 
SSP1CLKDIV          ABS    CONST UNTYP.           .text      4004809C 
SSP1CPSR            ABS    CONST UNTYP.           .text      40058010 
SSP1CR0             ABS    CONST UNTYP.           .text      40058000 
SSP1CR1             ABS    CONST UNTYP.           .text      40058004 
SSP1DR              ABS    CONST UNTYP.           .text      40058008 
SSP1ICR             ABS    CONST UNTYP.           .text      40058020 
SSP1IMSC            ABS    CONST UNTYP.           .text      40058014 
SSP1MIS             ABS    CONST UNTYP.           .text      4005801C 
SSP1RIS             ABS    CONST UNTYP.           .text      40058018 
SSP1SR              ABS    CONST UNTYP.           .text      4005800C 
STACKSIZE           ABS    CONST UNTYP.           .text      80 
STAR                REL    CONST UNTYP.           .text      8 
STARTAPRP0          ABS    CONST UNTYP.           .text      40048200 
STARTERP0           ABS    CONST UNTYP.           .text      40048204 
STARTRSRP0CLR       ABS    CONST UNTYP.           .text      40048208 
STARTSRP0           ABS    CONST UNTYP.           .text      4004820C 
STAR_NFA            REL    CONST UNTYP.           .text      0 
STATE_NFA           REL    CONST UNTYP.           .text      0 
STATE_UV            REL    CONST UNTYP.           .text      C 
STDO                REL    CONST UNTYP.           .text      1A4 
STOD                REL    CONST UNTYP.           .text      C 
STOD1               REL    CONST UNTYP.           .text      D 
STOD_NFA            REL    CONST UNTYP.           .text      0 
STORE               REL    CONST UNTYP.           .text      8 
STORE_NFA           REL    CONST UNTYP.           .text      0 
SUBB                REL    CONST UNTYP.           .text      8 
SUB_NFA             REL    CONST UNTYP.           .text      0 
SWAP                REL    CONST UNTYP.           .text      C 
SWAP_NFA            REL    CONST UNTYP.           .text      0 
SYSAHBCLKCTRL       ABS    CONST UNTYP.           .text      40048080 
SYSAHBCLKDIV        ABS    CONST UNTYP.           .text      40048078 
SYSCLK              REL    CONST UNTYP.           .text      C 
SYSCLK_NFA          REL    CONST UNTYP.           .text      0 
SYSCLOCK            REL    CONST UNTYP.           .bss       0 
SYSMEMREMAP         ABS    CONST UNTYP.           .text      40048000 
SYSOSCCTRL          ABS    CONST UNTYP.           .text      40048020 
SYSPLLCLKSEL        ABS    CONST UNTYP.           .text      40048040 
SYSPLLCLKUEN        ABS    CONST UNTYP.           .text      40048044 
SYSPLLCTRL          ABS    CONST UNTYP.           .text      40048008 
SYSPLLSTAT          ABS    CONST UNTYP.           .text      4004800C 
SYSRESSTAT          ABS    CONST UNTYP.           .text      40048030 
SYSTCKCAL           ABS    CONST UNTYP.           .text      40048154 
SYSTICKCALVR        ABS    CONST UNTYP.           .text      E000E01C 
SYSTICKCSR          ABS    CONST UNTYP.           .text      E000E010 
SYSTICKCVR          ABS    CONST UNTYP.           .text      E000E018 
SYSTICKRVR          ABS    CONST UNTYP.           .text      E000E014 
SZERO_NFA           REL    CONST UNTYP.           .text      0 
SoCinit             REL    CONST UNTYP.           .text      C 
SoCinit_NFA         REL    CONST UNTYP.           .text      0 
TASK                REL    CONST UNTYP.           .text      C 
TASK_NFA            REL    CONST UNTYP.           .text      0 
TDUP                REL    CONST UNTYP.           .text      C 
TDUP_NFA            REL    CONST UNTYP.           .text      0 
THEN                REL    CONST UNTYP.           .text      C 
THEN_NFA            REL    CONST UNTYP.           .text      0 
THREE               REL    CONST UNTYP.           .text      8 
THREE_NFA           REL    CONST UNTYP.           .text      0 
TIB                 REL    CONST UNTYP.           .bss       AFC 
TIB_NFA             REL    CONST UNTYP.           .text      0 
TIB_UV              REL    CONST UNTYP.           .text      8 
TICK                REL    CONST UNTYP.           .text      8 
TICK_NFA            REL    CONST UNTYP.           .text      0 
TID                 ABS    CONST UNTYP.           ASEG       4F00 
TMR16B0CCR          ABS    CONST UNTYP.           .text      4000C028 
TMR16B0CR0          ABS    CONST UNTYP.           .text      4000C02C 
TMR16B0CTCR         ABS    CONST UNTYP.           .text      4000C070 
TMR16B0EMR          ABS    CONST UNTYP.           .text      4000C03C 
TMR16B0IR           ABS    CONST UNTYP.           .text      4000C000 
TMR16B0MCR          ABS    CONST UNTYP.           .text      4000C014 
TMR16B0MR0          ABS    CONST UNTYP.           .text      4000C018 
TMR16B0MR1          ABS    CONST UNTYP.           .text      4000C01C 
TMR16B0MR2          ABS    CONST UNTYP.           .text      4000C020 
TMR16B0MR3          ABS    CONST UNTYP.           .text      4000C024 
TMR16B0PC           ABS    CONST UNTYP.           .text      4000C010 
TMR16B0PR           ABS    CONST UNTYP.           .text      4000C00C 
TMR16B0PWMC         ABS    CONST UNTYP.           .text      4000C074 
TMR16B0TC           ABS    CONST UNTYP.           .text      4000C008 
TMR16B0TCR          ABS    CONST UNTYP.           .text      4000C004 
TMR16B1CCR          ABS    CONST UNTYP.           .text      40010028 
TMR16B1CR0          ABS    CONST UNTYP.           .text      4001002C 
TMR16B1CTCR         ABS    CONST UNTYP.           .text      40010070 
TMR16B1EMR          ABS    CONST UNTYP.           .text      4001003C 
TMR16B1IR           ABS    CONST UNTYP.           .text      40010000 
TMR16B1MCR          ABS    CONST UNTYP.           .text      40010014 
TMR16B1MR0          ABS    CONST UNTYP.           .text      40010018 
TMR16B1MR1          ABS    CONST UNTYP.           .text      4001001C 
TMR16B1MR2          ABS    CONST UNTYP.           .text      40010020 
TMR16B1MR3          ABS    CONST UNTYP.           .text      40010024 
TMR16B1PC           ABS    CONST UNTYP.           .text      40010010 
TMR16B1PR           ABS    CONST UNTYP.           .text      4001000C 
TMR16B1PWMC         ABS    CONST UNTYP.           .text      40010074 
TMR16B1TC           ABS    CONST UNTYP.           .text      40010008 
TMR16B1TCR          ABS    CONST UNTYP.           .text      40010004 
TMR32B0CCR          ABS    CONST UNTYP.           .text      40014028 
TMR32B0CR0          ABS    CONST UNTYP.           .text      4001402C 
TMR32B0CTCR         ABS    CONST UNTYP.           .text      40014070 
TMR32B0EMR          ABS    CONST UNTYP.           .text      4001403C 
TMR32B0IR           ABS    CONST UNTYP.           .text      40014000 
TMR32B0MCR          ABS    CONST UNTYP.           .text      40014014 
TMR32B0MR0          ABS    CONST UNTYP.           .text      40014018 
TMR32B0MR1          ABS    CONST UNTYP.           .text      4001401C 
TMR32B0MR2          ABS    CONST UNTYP.           .text      40014020 
TMR32B0MR3          ABS    CONST UNTYP.           .text      40014024 
TMR32B0PC           ABS    CONST UNTYP.           .text      40014010 
TMR32B0PR           ABS    CONST UNTYP.           .text      4001400C 
TMR32B0PWMC         ABS    CONST UNTYP.           .text      40014074 
TMR32B0TC           ABS    CONST UNTYP.           .text      40014008 
TMR32B0TCR          ABS    CONST UNTYP.           .text      40014004 
TMR32B1CCR          ABS    CONST UNTYP.           .text      40018028 
TMR32B1CR0          ABS    CONST UNTYP.           .text      4001802C 
TMR32B1CTCR         ABS    CONST UNTYP.           .text      40018070 
TMR32B1EMR          ABS    CONST UNTYP.           .text      4001803C 
TMR32B1IR           ABS    CONST UNTYP.           .text      40018000 
TMR32B1MCR          ABS    CONST UNTYP.           .text      40018014 
TMR32B1MR0          ABS    CONST UNTYP.           .text      40018018 
TMR32B1MR1          ABS    CONST UNTYP.           .text      4001801C 
TMR32B1MR2          ABS    CONST UNTYP.           .text      40018020 
TMR32B1MR3          ABS    CONST UNTYP.           .text      40018024 
TMR32B1PC           ABS    CONST UNTYP.           .text      40018010 
TMR32B1PR           ABS    CONST UNTYP.           .text      4001800C 
TMR32B1PWMC         ABS    CONST UNTYP.           .text      40018074 
TMR32B1TC           ABS    CONST UNTYP.           .text      40018008 
TMR32B1TCR          ABS    CONST UNTYP.           .text      40018004 
TOFA                REL    CONST UNTYP.           .text      0 
TOGGLE              REL    CONST UNTYP.           .text      C 
TOGGLE_NFA          REL    CONST UNTYP.           .text      0 
TOR                 REL    CONST UNTYP.           .text      8 
TOR_NFA             REL    CONST UNTYP.           .text      0 
TRAV                REL    CONST UNTYP.           .text      10 
TRAV1               REL    CONST UNTYP.           .text      18 
TRAV_NFA            REL    CONST UNTYP.           .text      0 
TWO                 REL    CONST UNTYP.           .text      8 
TWOP                REL    CONST UNTYP.           .text      8 
TWOP_NFA            REL    CONST UNTYP.           .text      0 
TWO_NFA             REL    CONST UNTYP.           .text      0 
TYPE                REL    CONST UNTYP.           .text      C 
TYPE1               REL    CONST UNTYP.           .text      54 
TYPE2               REL    CONST UNTYP.           .text      2C 
TYPE3               REL    CONST UNTYP.           .text      58 
TYPE_NFA            REL    CONST UNTYP.           .text      0 
U0ACR               ABS    CONST UNTYP.           .text      40008020 
U0ADRMATCH          ABS    CONST UNTYP.           .text      40008050 
U0DLL               ABS    CONST UNTYP.           .text      40008000 
U0DLM               ABS    CONST UNTYP.           .text      40008004 
U0FCR               ABS    CONST UNTYP.           .text      40008008 
U0FDR               ABS    CONST UNTYP.           .text      40008028 
U0IER               ABS    CONST UNTYP.           .text      40008004 
U0IIR               ABS    CONST UNTYP.           .text      40008008 
U0LCR               ABS    CONST UNTYP.           .text      4000800C 
U0LSR               ABS    CONST UNTYP.           .text      40008014 
U0MCR               ABS    CONST UNTYP.           .text      40008010 
U0MSR               ABS    CONST UNTYP.           .text      40008018 
U0RBR               ABS    CONST UNTYP.           .text      40008000 
U0RBRTHR            ABS    CONST UNTYP.           .text      40008000 
U0RS485CTRL         ABS    CONST UNTYP.           .text      4000804C 
U0RS485DLY          ABS    CONST UNTYP.           .text      40008054 
U0SCR               ABS    CONST UNTYP.           .text      4000801C 
U0TER               ABS    CONST UNTYP.           .text      40008030 
U0THR               ABS    CONST UNTYP.           .text      40008000 
UART0_INIT          REL    CONST UNTYP.           .text      10 
UART0_INIT_NFA      REL    CONST UNTYP.           .text      0 
UARTCLKDIV          ABS    CONST UNTYP.           .text      40048098 
UDOT                REL    CONST UNTYP.           .text      8 
UDOT_NFA            REL    CONST UNTYP.           .text      0 
UIO                 REL    CONST UNTYP.           .text      8 
UIO_NFA             REL    CONST UNTYP.           .text      0 
ULES1               REL    CONST UNTYP.           .text      34 
ULES2               REL    CONST UNTYP.           .text      3C 
ULESSTHAN           REL    CONST UNTYP.           .text      8 
ULESSTHAN_NFA       REL    CONST UNTYP.           .text      0 
ULSR                REL    CONST UNTYP.           .text      C 
ULSR_NFA            REL    CONST UNTYP.           .text      0 
UNINITRAMBASE       ABS    CONST UNTYP.           .text      10000C80 
UNINITRAMEND        ABS    CONST UNTYP.           .text      10000EDC 
UNTIL               REL    CONST UNTYP.           .text      C 
UNTIL_NFA           REL    CONST UNTYP.           .text      0 
UP                  REL    CONST UNTYP.           .bss       B74 
UPDATE              REL    CONST UNTYP.           .text      67 
UP_NFA              REL    CONST UNTYP.           .text      0 
UP_UV               REL    CONST UNTYP.           .text      8 
USLASH              REL    CONST UNTYP.           .text      8 
USLASH_NFA          REL    CONST UNTYP.           .text      0 
USTAR               REL    CONST UNTYP.           .text      8 
USTAR_NFA           REL    CONST UNTYP.           .text      0 
VAR                 REL    CONST UNTYP.           .text      8 
VARALLOT            REL    CONST UNTYP.           .text      10 
VARALLOT_NFA        REL    CONST UNTYP.           .text      0 
VAR_NFA             REL    CONST UNTYP.           .text      0 
VBASE               REL    CONST UNTYP.           .text      C 
VBASE_NFA           REL    CONST UNTYP.           .text      0 
VLIS1               REL    CONST UNTYP.           .text      1C 
VLIS2               REL    CONST UNTYP.           .text      84 
WARM                REL    CONST UNTYP.           .text      0 
WARNING             REL    CONST UNTYP.           .bss       C30 
WARNING_UV          REL    CONST UNTYP.           .text      C 
WARN_NFA            REL    CONST UNTYP.           .text      0 
WC_COMPILE_NFA      REL    CONST UNTYP.           .text      0 
WC_CREATE_NFA       REL    CONST UNTYP.           .text      0 
WC_FISH_MISC_NFA    REL    CONST UNTYP.           .text      0 
WC_FISH_SYS_NFA     REL    CONST UNTYP.           .text      0 
WC_NUMBERS_NFA      REL    CONST UNTYP.           .text      0 
WC_RWMEMORY_NFA     REL    CONST UNTYP.           .text      0 
WC_STACK_NFA        REL    CONST UNTYP.           .text      0 
WDFEED              ABS    CONST UNTYP.           .text      40004008 
WDMOD               ABS    CONST UNTYP.           .text      40004000 
WDONE               REL    CONST UNTYP.           .text      7B 
WDTC                ABS    CONST UNTYP.           .text      40004004 
WDTCLKDIV           ABS    CONST UNTYP.           .text      400480D8 
WDTCLKSEL           ABS    CONST UNTYP.           .text      400480D0 
WDTCLKUEN           ABS    CONST UNTYP.           .text      400480D4 
WDTOSCCTRL          ABS    CONST UNTYP.           .text      40048024 
WDTV                ABS    CONST UNTYP.           .text      4000400C 
WENCL               REL    CONST UNTYP.           .text      38 
WHILE               REL    CONST UNTYP.           .text      C 
WHILE_NFA           REL    CONST UNTYP.           .text      0 
WIDTH               REL    CONST UNTYP.           .bss       B9C 
WIDTH_NFA           REL    CONST UNTYP.           .text      0 
WIDTH_UV            REL    CONST UNTYP.           .text      C 
WORD                REL    CONST UNTYP.           .text      C 
WORD1               REL    CONST UNTYP.           .text      10 
WORD2               REL    CONST UNTYP.           .text      24 
WORDNOTFOUND        REL    CONST UNTYP.           .text      74 
WORDS               REL    CONST UNTYP.           .text      C 
WORDS2              REL    CONST UNTYP.           .text      5C 
WORDSCONT           REL    CONST UNTYP.           .text      A4 
WORDSDONE           REL    CONST UNTYP.           .text      104 
WORDS_NFA           REL    CONST UNTYP.           .text      0 
WORD_NFA            REL    CONST UNTYP.           .text      0 
XDO                 REL    CONST UNTYP.           .text      0 
XLOO1               REL    CONST UNTYP.           .text      3 
XLOO2               REL    CONST UNTYP.           .text      13 
XLOOP               REL    CONST UNTYP.           .text      0 
XOFF                REL    CONST UNTYP.           .text      C 
XOFF_CHAR           ABS    CONST UNTYP.           .text      13 
XOFF_NFA            REL    CONST UNTYP.           .text      0 
XON                 REL    CONST UNTYP.           .text      8 
XON_CHAR            ABS    CONST UNTYP.           .text      11 
XON_NFA             REL    CONST UNTYP.           .text      0 
XORR                REL    CONST UNTYP.           .text      8 
XORR_NFA            REL    CONST UNTYP.           .text      0 
XPLOOP              REL    CONST UNTYP.           .text      0 
ZBRAN               REL    CONST UNTYP.           .text      0 
ZEQU                REL    CONST UNTYP.           .text      8 
ZEQU1               REL    CONST UNTYP.           .text      18 
ZEQU_NFA            REL    CONST UNTYP.           .text      0 
ZERO                REL    CONST UNTYP.           .text      8 
ZERO_NFA            REL    CONST UNTYP.           .text      0 
ZLESS               REL    CONST UNTYP.           .text      8 
ZLESS1              REL    CONST UNTYP.           .text      D 
ZLESS_NFA           REL    CONST UNTYP.           .text      0 
ZNDUP               REL    CONST UNTYP.           .text      C 
_?0                 REL    CONST UNTYP.           .text      30 
_?1                 REL    CONST UNTYP.           .text      34 
_?10                REL    CONST UNTYP.           .text      18 
_?100               REL    CONST UNTYP.           .text      3C 
_?101               REL    CONST UNTYP.           .text      30 
_?102               REL    CONST UNTYP.           .text      54 
_?103               REL    CONST UNTYP.           .text      C 
_?104               REL    CONST UNTYP.           .text      18 
_?105               REL    CONST UNTYP.           .text      1C 
_?106               REL    CONST UNTYP.           .text      20 
_?107               REL    CONST UNTYP.           .text      24 
_?108               REL    CONST UNTYP.           .text      28 
_?109               REL    CONST UNTYP.           .text      2C 
_?11                REL    CONST UNTYP.           .text      1C 
_?110               REL    CONST UNTYP.           .text      30 
_?111               REL    CONST UNTYP.           .text      10 
_?112               REL    CONST UNTYP.           .text      14 
_?113               REL    CONST UNTYP.           .text      C 
_?114               REL    CONST UNTYP.           .text      10 
_?115               REL    CONST UNTYP.           .text      C 
_?116               REL    CONST UNTYP.           .text      10 
_?117               REL    CONST UNTYP.           .text      8 
_?118               REL    CONST UNTYP.           .text      80 
_?119               REL    CONST UNTYP.           .text      84 
_?12                REL    CONST UNTYP.           .text      20 
_?120               REL    CONST UNTYP.           .text      88 
_?121               REL    CONST UNTYP.           .text      8C 
_?122               REL    CONST UNTYP.           .text      90 
_?123               REL    CONST UNTYP.           .text      94 
_?124               REL    CONST UNTYP.           .text      98 
_?125               REL    CONST UNTYP.           .text      9C 
_?126               REL    CONST UNTYP.           .text      A0 
_?127               REL    CONST UNTYP.           .text      A4 
_?128               REL    CONST UNTYP.           .text      A8 
_?129               REL    CONST UNTYP.           .text      AC 
_?13                REL    CONST UNTYP.           .text      1C 
_?130               REL    CONST UNTYP.           .text      B0 
_?131               REL    CONST UNTYP.           .text      B4 
_?132               REL    CONST UNTYP.           .text      B8 
_?133               REL    CONST UNTYP.           .text      BC 
_?134               REL    CONST UNTYP.           .text      C0 
_?135               REL    CONST UNTYP.           .text      C4 
_?136               REL    CONST UNTYP.           .text      C8 
_?137               REL    CONST UNTYP.           .text      CC 
_?138               REL    CONST UNTYP.           .text      D0 
_?139               REL    CONST UNTYP.           .text      D4 
_?14                REL    CONST UNTYP.           .text      20 
_?140               REL    CONST UNTYP.           .text      D8 
_?141               REL    CONST UNTYP.           .text      DC 
_?142               REL    CONST UNTYP.           .text      E0 
_?143               REL    CONST UNTYP.           .text      50 
_?144               REL    CONST UNTYP.           .text      80 
_?145               REL    CONST UNTYP.           .text      C 
_?146               REL    CONST UNTYP.           .text      C 
_?147               REL    CONST UNTYP.           .text      10 
_?148               REL    CONST UNTYP.           .text      1C 
_?149               REL    CONST UNTYP.           .text      18 
_?15                REL    CONST UNTYP.           .text      24 
_?150               REL    CONST UNTYP.           .text      C 
_?151               REL    CONST UNTYP.           .text      C 
_?16                REL    CONST UNTYP.           .text      28 
_?17                REL    CONST UNTYP.           .text      2C 
_?18                REL    CONST UNTYP.           .text      20 
_?19                REL    CONST UNTYP.           .text      24 
_?2                 REL    CONST UNTYP.           .text      38 
_?20                REL    CONST UNTYP.           .text      28 
_?21                REL    CONST UNTYP.           .text      2C 
_?22                REL    CONST UNTYP.           .text      30 
_?23                REL    CONST UNTYP.           .text      34 
_?24                REL    CONST UNTYP.           .text      24 
_?25                REL    CONST UNTYP.           .text      28 
_?26                REL    CONST UNTYP.           .text      2C 
_?27                REL    CONST UNTYP.           .text      30 
_?28                REL    CONST UNTYP.           .text      34 
_?29                REL    CONST UNTYP.           .text      38 
_?3                 REL    CONST UNTYP.           .text      3C 
_?30                REL    CONST UNTYP.           .text      3C 
_?31                REL    CONST UNTYP.           .text      40 
_?32                REL    CONST UNTYP.           .text      10 
_?33                REL    CONST UNTYP.           .text      14 
_?34                REL    CONST UNTYP.           .text      14 
_?35                REL    CONST UNTYP.           .text      18 
_?36                REL    CONST UNTYP.           .text      1C 
_?37                REL    CONST UNTYP.           .text      14 
_?38                REL    CONST UNTYP.           .text      18 
_?39                REL    CONST UNTYP.           .text      1C 
_?4                 REL    CONST UNTYP.           .text      40 
_?40                REL    CONST UNTYP.           .text      14 
_?41                REL    CONST UNTYP.           .text      18 
_?42                REL    CONST UNTYP.           .text      10 
_?43                REL    CONST UNTYP.           .text      10 
_?44                REL    CONST UNTYP.           .text      18 
_?45                REL    CONST UNTYP.           .text      20 
_?46                REL    CONST UNTYP.           .text      C 
_?47                REL    CONST UNTYP.           .text      C 
_?48                REL    CONST UNTYP.           .text      C 
_?49                REL    CONST UNTYP.           .text      C 
_?5                 REL    CONST UNTYP.           .text      44 
_?50                REL    CONST UNTYP.           .text      10 
_?51                REL    CONST UNTYP.           .text      C 
_?52                REL    CONST UNTYP.           .text      10 
_?53                REL    CONST UNTYP.           .text      C 
_?54                REL    CONST UNTYP.           .text      10 
_?55                REL    CONST UNTYP.           .text      10 
_?56                REL    CONST UNTYP.           .text      C 
_?57                REL    CONST UNTYP.           .text      1C 
_?58                REL    CONST UNTYP.           .text      C 
_?59                REL    CONST UNTYP.           .text      18 
_?6                 REL    CONST UNTYP.           .text      48 
_?60                REL    CONST UNTYP.           .text      C 
_?61                REL    CONST UNTYP.           .text      14 
_?62                REL    CONST UNTYP.           .text      14 
_?63                REL    CONST UNTYP.           .text      14 
_?64                REL    CONST UNTYP.           .text      1C 
_?65                REL    CONST UNTYP.           .text      28 
_?66                REL    CONST UNTYP.           .text      24 
_?67                REL    CONST UNTYP.           .text      14 
_?68                REL    CONST UNTYP.           .text      14 
_?69                REL    CONST UNTYP.           .text      10 
_?7                 REL    CONST UNTYP.           .text      4C 
_?70                REL    CONST UNTYP.           .text      10 
_?71                REL    CONST UNTYP.           .text      10 
_?72                REL    CONST UNTYP.           .text      10 
_?73                REL    CONST UNTYP.           .text      C 
_?74                REL    CONST UNTYP.           .text      C 
_?75                REL    CONST UNTYP.           .text      1C 
_?76                REL    CONST UNTYP.           .text      20 
_?77                REL    CONST UNTYP.           .text      24 
_?78                REL    CONST UNTYP.           .text      3C 
_?79                REL    CONST UNTYP.           .text      14 
_?8                 REL    CONST UNTYP.           .text      8 
_?80                REL    CONST UNTYP.           .text      14 
_?81                REL    CONST UNTYP.           .text      10 
_?82                REL    CONST UNTYP.           .text      14 
_?83                REL    CONST UNTYP.           .text      14 
_?84                REL    CONST UNTYP.           .text      14 
_?85                REL    CONST UNTYP.           .text      1C 
_?86                REL    CONST UNTYP.           .text      14 
_?87                REL    CONST UNTYP.           .text      24 
_?88                REL    CONST UNTYP.           .text      18 
_?89                REL    CONST UNTYP.           .text      24 
_?9                 REL    CONST UNTYP.           .text      8 
_?90                REL    CONST UNTYP.           .text      14 
_?91                REL    CONST UNTYP.           .text      1C 
_?92                REL    CONST UNTYP.           .text      10 
_?93                REL    CONST UNTYP.           .text      10 
_?94                REL    CONST UNTYP.           .text      10 
_?95                REL    CONST UNTYP.           .text      10 
_?96                REL    CONST UNTYP.           .text      C 
_?97                REL    CONST UNTYP.           .text      14 
_?98                REL    CONST UNTYP.           .text      18 
_?99                REL    CONST UNTYP.           .text      2C 
__iar_program_start REL    CONST UNTYP.           .text      1 
__lab0              REL    CONST UNTYP.           .text      C 
__lab1              REL    CONST UNTYP.           .text      C 
__lab10             REL    CONST UNTYP.           .text      6C 
__lab100            REL    CONST UNTYP.           .text      30 
__lab101            REL    CONST UNTYP.           .text      1C 
__lab102            REL    CONST UNTYP.           .text      4C 
__lab103            REL    CONST UNTYP.           .text      18 
__lab104            REL    CONST UNTYP.           .text      C 
__lab105            REL    CONST UNTYP.           .text      14 
__lab106            REL    CONST UNTYP.           .text      14 
__lab107            REL    CONST UNTYP.           .text      18 
__lab108            REL    CONST UNTYP.           .text      18 
__lab109            REL    CONST UNTYP.           .text      8 
__lab11             REL    CONST UNTYP.           .text      88 
__lab110            REL    CONST UNTYP.           .text      8 
__lab111            REL    CONST UNTYP.           .text      8 
__lab112            REL    CONST UNTYP.           .text      8 
__lab113            REL    CONST UNTYP.           .text      8 
__lab114            REL    CONST UNTYP.           .text      8 
__lab115            REL    CONST UNTYP.           .text      8 
__lab116            REL    CONST UNTYP.           .text      8 
__lab117            REL    CONST UNTYP.           .text      8 
__lab118            REL    CONST UNTYP.           .text      1C 
__lab119            REL    CONST UNTYP.           .text      30 
__lab12             REL    CONST UNTYP.           .text      A4 
__lab120            REL    CONST UNTYP.           .text      8 
__lab121            REL    CONST UNTYP.           .text      8 
__lab122            REL    CONST UNTYP.           .text      8 
__lab123            REL    CONST UNTYP.           .text      C 
__lab124            REL    CONST UNTYP.           .text      C 
__lab125            REL    CONST UNTYP.           .text      8 
__lab126            REL    CONST UNTYP.           .text      8 
__lab127            REL    CONST UNTYP.           .text      8 
__lab128            REL    CONST UNTYP.           .text      8 
__lab129            REL    CONST UNTYP.           .text      20 
__lab13             REL    CONST UNTYP.           .text      C4 
__lab130            REL    CONST UNTYP.           .text      20 
__lab131            REL    CONST UNTYP.           .text      18 
__lab132            REL    CONST UNTYP.           .text      24 
__lab133            REL    CONST UNTYP.           .text      38 
__lab134            REL    CONST UNTYP.           .text      8 
__lab135            REL    CONST UNTYP.           .text      44 
__lab136            REL    CONST UNTYP.           .text      50 
__lab137            REL    CONST UNTYP.           .text      60 
__lab138            REL    CONST UNTYP.           .text      28 
__lab139            REL    CONST UNTYP.           .text      C 
__lab14             REL    CONST UNTYP.           .text      DC 
__lab140            REL    CONST UNTYP.           .text      C 
__lab141            REL    CONST UNTYP.           .text      8 
__lab142            REL    CONST UNTYP.           .text      24 
__lab143            REL    CONST UNTYP.           .text      60 
__lab144            REL    CONST UNTYP.           .text      78 
__lab145            REL    CONST UNTYP.           .text      68 
__lab146            REL    CONST UNTYP.           .text      94 
__lab147            REL    CONST UNTYP.           .text      A4 
__lab148            REL    CONST UNTYP.           .text      20 
__lab149            REL    CONST UNTYP.           .text      58 
__lab15             REL    CONST UNTYP.           .text      FC 
__lab150            REL    CONST UNTYP.           .text      1C 
__lab151            REL    CONST UNTYP.           .text      30 
__lab152            REL    CONST UNTYP.           .text      40 
__lab153            REL    CONST UNTYP.           .text      54 
__lab154            REL    CONST UNTYP.           .text      70 
__lab155            REL    CONST UNTYP.           .text      7C 
__lab156            REL    CONST UNTYP.           .text      90 
__lab157            REL    CONST UNTYP.           .text      10 
__lab158            REL    CONST UNTYP.           .text      30 
__lab159            REL    CONST UNTYP.           .text      50 
__lab16             REL    CONST UNTYP.           .text      0 
__lab160            REL    CONST UNTYP.           .text      18 
__lab161            REL    CONST UNTYP.           .text      C 
__lab162            REL    CONST UNTYP.           .text      C 
__lab163            REL    CONST UNTYP.           .text      8 
__lab164            REL    CONST UNTYP.           .text      C 
__lab165            REL    CONST UNTYP.           .text      FC 
__lab166            REL    CONST UNTYP.           .text      1C0 
__lab167            REL    CONST UNTYP.           .text      1C8 
__lab168            REL    CONST UNTYP.           .text      0 
__lab169            REL    CONST UNTYP.           .text      0 
__lab17             REL    CONST UNTYP.           .text      0 
__lab170            REL    CONST UNTYP.           .text      0 
__lab171            REL    CONST UNTYP.           .text      0 
__lab172            REL    CONST UNTYP.           .text      0 
__lab173            REL    CONST UNTYP.           .text      0 
__lab174            REL    CONST UNTYP.           .text      0 
__lab175            REL    CONST UNTYP.           .text      0 
__lab176            REL    CONST UNTYP.           .text      0 
__lab177            REL    CONST UNTYP.           .text      0 
__lab178            REL    CONST UNTYP.           .text      0 
__lab18             REL    CONST UNTYP.           .text      0 
__lab19             REL    CONST UNTYP.           .text      90 
__lab2              REL    CONST UNTYP.           .text      44 
__lab20             REL    CONST UNTYP.           .text      B0 
__lab21             REL    CONST UNTYP.           .text      28 
__lab22             REL    CONST UNTYP.           .text      94 
__lab23             REL    CONST UNTYP.           .text      A0 
__lab24             REL    CONST UNTYP.           .text      C 
__lab25             REL    CONST UNTYP.           .text      2C 
__lab26             REL    CONST UNTYP.           .text      38 
__lab27             REL    CONST UNTYP.           .text      28 
__lab28             REL    CONST UNTYP.           .text      60 
__lab29             REL    CONST UNTYP.           .text      6C 
__lab3              REL    CONST UNTYP.           .text      5C 
__lab30             REL    CONST UNTYP.           .text      7C 
__lab31             REL    CONST UNTYP.           .text      0 
__lab32             REL    CONST UNTYP.           .text      0 
__lab33             REL    CONST UNTYP.           .text      20 
__lab34             REL    CONST UNTYP.           .text      1C 
__lab35             REL    CONST UNTYP.           .text      C 
__lab36             REL    CONST UNTYP.           .text      40 
__lab37             REL    CONST UNTYP.           .text      18 
__lab38             REL    CONST UNTYP.           .text      18 
__lab39             REL    CONST UNTYP.           .text      30 
__lab4              REL    CONST UNTYP.           .text      AC 
__lab40             REL    CONST UNTYP.           .text      8 
__lab41             REL    CONST UNTYP.           .text      8 
__lab42             REL    CONST UNTYP.           .text      34 
__lab43             REL    CONST UNTYP.           .text      30 
__lab44             REL    CONST UNTYP.           .text      28 
__lab45             REL    CONST UNTYP.           .text      40 
__lab46             REL    CONST UNTYP.           .text      34 
__lab47             REL    CONST UNTYP.           .text      58 
__lab48             REL    CONST UNTYP.           .text      74 
__lab49             REL    CONST UNTYP.           .text      A4 
__lab5              REL    CONST UNTYP.           .text      D0 
__lab50             REL    CONST UNTYP.           .text      B0 
__lab51             REL    CONST UNTYP.           .text      BC 
__lab52             REL    CONST UNTYP.           .text      D4 
__lab53             REL    CONST UNTYP.           .text      EC 
__lab54             REL    CONST UNTYP.           .text      114 
__lab55             REL    CONST UNTYP.           .text      18 
__lab56             REL    CONST UNTYP.           .text      48 
__lab57             REL    CONST UNTYP.           .text      50 
__lab58             REL    CONST UNTYP.           .text      C 
__lab59             REL    CONST UNTYP.           .text      20 
__lab6              REL    CONST UNTYP.           .text      0 
__lab60             REL    CONST UNTYP.           .text      34 
__lab61             REL    CONST UNTYP.           .text      20 
__lab62             REL    CONST UNTYP.           .text      48 
__lab63             REL    CONST UNTYP.           .text      40 
__lab64             REL    CONST UNTYP.           .text      74 
__lab65             REL    CONST UNTYP.           .text      98 
__lab66             REL    CONST UNTYP.           .text      A0 
__lab67             REL    CONST UNTYP.           .text      D0 
__lab68             REL    CONST UNTYP.           .text      100 
__lab69             REL    CONST UNTYP.           .text      18 
__lab7              REL    CONST UNTYP.           .text      34 
__lab70             REL    CONST UNTYP.           .text      8 
__lab71             REL    CONST UNTYP.           .text      8 
__lab72             REL    CONST UNTYP.           .text      8 
__lab73             REL    CONST UNTYP.           .text      8 
__lab74             REL    CONST UNTYP.           .text      8 
__lab75             REL    CONST UNTYP.           .text      8 
__lab76             REL    CONST UNTYP.           .text      C 
__lab77             REL    CONST UNTYP.           .text      8 
__lab78             REL    CONST UNTYP.           .text      8 
__lab79             REL    CONST UNTYP.           .text      8 
__lab8              REL    CONST UNTYP.           .text      40 
__lab80             REL    CONST UNTYP.           .text      C 
__lab81             REL    CONST UNTYP.           .text      C 
__lab82             REL    CONST UNTYP.           .text      C 
__lab83             REL    CONST UNTYP.           .text      8 
__lab84             REL    CONST UNTYP.           .text      C 
__lab85             REL    CONST UNTYP.           .text      C 
__lab86             REL    CONST UNTYP.           .text      C 
__lab87             REL    CONST UNTYP.           .text      C 
__lab88             REL    CONST UNTYP.           .text      C 
__lab89             REL    CONST UNTYP.           .text      C 
__lab9              REL    CONST UNTYP.           .text      60 
__lab90             REL    CONST UNTYP.           .text      8 
__lab91             REL    CONST UNTYP.           .text      C 
__lab92             REL    CONST UNTYP.           .text      8 
__lab93             REL    CONST UNTYP.           .text      8 
__lab94             REL    CONST UNTYP.           .text      8 
__lab95             REL    CONST UNTYP.           .text      8 
__lab96             REL    CONST UNTYP.           .text      20 
__lab97             REL    CONST UNTYP.           .text      1C 
__lab98             REL    CONST UNTYP.           .text      1C 
__lab99             REL    CONST UNTYP.           .text      24 
_fillRAM            REL    CONST UNTYP.           .text      7 
_fillSTACKS         REL    CONST UNTYP.           .text      13 
_wPLLlock           REL    CONST UNTYP.           .text      E4 
c_32by32to64mul     ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
c_64by32div         ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
msg_FISH_VERSION    REL    CONST UNTYP.           .text      0 
msg_MY_OK           REL    CONST UNTYP.           .text      43 
msg_cr              REL    CONST UNTYP.           .text      4 
msg_dictfull        REL    CONST UNTYP.           .text      F2 
msg_dictspace       REL    CONST UNTYP.           .text      C9 
msg_forget_fish     REL    CONST UNTYP.           .text      B 
msg_forget_saved    REL    CONST UNTYP.           .text      2B 
msg_not_in_binary   REL    CONST UNTYP.           .text      7C 
msg_number_error    REL    CONST UNTYP.           .text      14B 
msg_qcomp           REL    CONST UNTYP.           .text      1D7 
msg_qexec           REL    CONST UNTYP.           .text      20E 
msg_qpair           REL    CONST UNTYP.           .text      197 
msg_qstack          REL    CONST UNTYP.           .text      175 
msg_questionmark    REL    CONST UNTYP.           .text      0 
msg_user_not_implementedREL    CONST UNTYP.           .text      61 
msg_uvfull          REL    CONST UNTYP.           .text      10D 
msg_uvspace         REL    CONST UNTYP.           .text      97 
msg_wordexists      REL    CONST UNTYP.           .text      12B 
ssNEXT1             REL    CONST UNTYP.           .text      1 
thispfa             REL    CONST UNTYP.           .text      37 
tt1                 REL    CONST UNTYP.           .text      44 
tt2                 REL    CONST UNTYP.           .text      48 


##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#        Bytes: 17151        #
##############################



